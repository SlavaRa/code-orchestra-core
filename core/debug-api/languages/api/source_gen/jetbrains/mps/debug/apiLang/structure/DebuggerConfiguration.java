package jetbrains.mps.debug.apiLang.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DebuggerConfiguration extends BaseConcept {
  public static final String concept = "jetbrains.mps.debug.apiLang.structure.DebuggerConfiguration";
  public static final String DEBUGGER = "debugger";
  public static final String GET_SETTINGS = "getSettings";

  public DebuggerConfiguration(SNode node) {
    super(node);
  }

  public Expression getDebugger() {
    return (Expression) this.getChild(Expression.class, DebuggerConfiguration.DEBUGGER);
  }

  public void setDebugger(Expression node) {
    super.setChild(DebuggerConfiguration.DEBUGGER, node);
  }

  public GetDebuggerSettings_Function getGetSettings() {
    return (GetDebuggerSettings_Function) this.getChild(GetDebuggerSettings_Function.class, DebuggerConfiguration.GET_SETTINGS);
  }

  public void setGetSettings(GetDebuggerSettings_Function node) {
    super.setChild(DebuggerConfiguration.GET_SETTINGS, node);
  }

  public static DebuggerConfiguration newInstance(SModel sm, boolean init) {
    return (DebuggerConfiguration) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.debug.apiLang.structure.DebuggerConfiguration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DebuggerConfiguration newInstance(SModel sm) {
    return DebuggerConfiguration.newInstance(sm, false);
  }
}
