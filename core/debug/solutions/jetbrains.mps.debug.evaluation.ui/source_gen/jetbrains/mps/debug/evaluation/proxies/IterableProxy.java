package jetbrains.mps.debug.evaluation.proxies;

/*Generated by MPS */

import java.util.Iterator;
import jetbrains.mps.debug.evaluation.EvaluationException;
import jetbrains.mps.debug.evaluation.EvaluationRuntimeException;

public class IterableProxy<T extends IValueProxy> implements Iterable<T> {
  private final IObjectValueProxy myValueProxy;

  public IterableProxy(IObjectValueProxy valueProxy) {
    myValueProxy = valueProxy;
  }

  @Override
  public Iterator<T> iterator() {
    try {
      IObjectValueProxy iteratorProxy = (IObjectValueProxy) myValueProxy.invokeMethod("iterator", "()Ljava/util/Iterator;");
      return new IterableProxy.MyIterator(iteratorProxy);
    } catch (EvaluationException e) {
      throw new EvaluationRuntimeException(e);
    }
  }

  private class MyIterator implements Iterator<T> {
    private final IObjectValueProxy myIteratorProxy;

    public MyIterator(IObjectValueProxy iteratorProxy) {
      myIteratorProxy = iteratorProxy;
    }

    @Override
    public boolean hasNext() {
      try {
        return (Boolean) ((PrimitiveValueProxy) myIteratorProxy.invokeMethod("hasNext", "()Z")).getJavaValue();
      } catch (EvaluationException e) {
        throw new EvaluationRuntimeException(e);
      }
    }

    @Override
    public T next() {
      try {
        return (T) myIteratorProxy.invokeMethod("next", "()Ljava/lang/Object;");
      } catch (EvaluationException e) {
        throw new EvaluationRuntimeException(e);
      }
    }

    @Override
    public void remove() {
      try {
        myIteratorProxy.invokeMethod("remove", "()V");
      } catch (EvaluationException e) {
        throw new EvaluationRuntimeException(e);
      }
    }
  }
}
