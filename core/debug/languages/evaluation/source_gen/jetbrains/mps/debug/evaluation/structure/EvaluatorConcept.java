package jetbrains.mps.debug.evaluation.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.baseLanguage.structure.IMethodLike;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.ClassifierType;
import jetbrains.mps.baseLanguage.structure.StatementList;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class EvaluatorConcept extends BaseConcept implements IMethodLike {
  public static final String concept = "jetbrains.mps.debug.evaluation.structure.EvaluatorConcept";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String IS_SHOW_CONTEXT = "isShowContext";
  public static final String THIS_TYPE = "thisType";
  public static final String STATIC_CONTEXT_TYPE = "staticContextType";
  public static final String EVALUATED_STATEMENTS = "evaluatedStatements";
  public static final String VARIABLES = "variables";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public EvaluatorConcept(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(EvaluatorConcept.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(EvaluatorConcept.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(EvaluatorConcept.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(EvaluatorConcept.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(EvaluatorConcept.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(EvaluatorConcept.VIRTUAL_PACKAGE, value);
  }

  public boolean getIsShowContext() {
    return this.getBooleanProperty(EvaluatorConcept.IS_SHOW_CONTEXT);
  }

  public void setIsShowContext(boolean value) {
    this.setBooleanProperty(EvaluatorConcept.IS_SHOW_CONTEXT, value);
  }

  public ClassifierType getThisType() {
    return (ClassifierType) this.getChild(ClassifierType.class, EvaluatorConcept.THIS_TYPE);
  }

  public void setThisType(ClassifierType node) {
    super.setChild(EvaluatorConcept.THIS_TYPE, node);
  }

  public ClassifierType getStaticContextType() {
    return (ClassifierType) this.getChild(ClassifierType.class, EvaluatorConcept.STATIC_CONTEXT_TYPE);
  }

  public void setStaticContextType(ClassifierType node) {
    super.setChild(EvaluatorConcept.STATIC_CONTEXT_TYPE, node);
  }

  public StatementList getEvaluatedStatements() {
    return (StatementList) this.getChild(StatementList.class, EvaluatorConcept.EVALUATED_STATEMENTS);
  }

  public void setEvaluatedStatements(StatementList node) {
    super.setChild(EvaluatorConcept.EVALUATED_STATEMENTS, node);
  }

  public int getVariablesesCount() {
    return this.getChildCount(EvaluatorConcept.VARIABLES);
  }

  public Iterator<LowLevelVariable> variableses() {
    return this.children(LowLevelVariable.class, EvaluatorConcept.VARIABLES);
  }

  public List<LowLevelVariable> getVariableses() {
    return this.getChildren(LowLevelVariable.class, EvaluatorConcept.VARIABLES);
  }

  public void addVariables(LowLevelVariable node) {
    this.addChild(EvaluatorConcept.VARIABLES, node);
  }

  public void insertVariables(LowLevelVariable prev, LowLevelVariable node) {
    this.insertChild(prev, EvaluatorConcept.VARIABLES, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(EvaluatorConcept.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, EvaluatorConcept.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, EvaluatorConcept.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(EvaluatorConcept.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, EvaluatorConcept.SMODEL_ATTRIBUTE, node);
  }

  public static EvaluatorConcept newInstance(SModel sm, boolean init) {
    return (EvaluatorConcept) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.debug.evaluation.structure.EvaluatorConcept", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static EvaluatorConcept newInstance(SModel sm) {
    return EvaluatorConcept.newInstance(sm, false);
  }
}
