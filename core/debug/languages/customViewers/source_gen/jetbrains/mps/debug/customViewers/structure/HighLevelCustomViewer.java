package jetbrains.mps.debug.customViewers.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class HighLevelCustomViewer extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.debug.customViewers.structure.HighLevelCustomViewer";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String VALUE_TYPE = "valueType";
  public static final String CAN_WRAP = "canWrap";
  public static final String GET_PRESENTATION = "getPresentation";
  public static final String GET_WATCHABLES = "getWatchables";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public HighLevelCustomViewer(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(HighLevelCustomViewer.NAME);
  }

  public void setName(String value) {
    this.setProperty(HighLevelCustomViewer.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(HighLevelCustomViewer.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(HighLevelCustomViewer.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(HighLevelCustomViewer.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(HighLevelCustomViewer.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(HighLevelCustomViewer.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(HighLevelCustomViewer.VIRTUAL_PACKAGE, value);
  }

  public Type getValueType() {
    return (Type) this.getChild(Type.class, HighLevelCustomViewer.VALUE_TYPE);
  }

  public void setValueType(Type node) {
    super.setChild(HighLevelCustomViewer.VALUE_TYPE, node);
  }

  public CanWrapHighLevelValue_ConceptFunction getCanWrap() {
    return (CanWrapHighLevelValue_ConceptFunction) this.getChild(CanWrapHighLevelValue_ConceptFunction.class, HighLevelCustomViewer.CAN_WRAP);
  }

  public void setCanWrap(CanWrapHighLevelValue_ConceptFunction node) {
    super.setChild(HighLevelCustomViewer.CAN_WRAP, node);
  }

  public GetHighLevelValuePresentation_ConceptFunction getGetPresentation() {
    return (GetHighLevelValuePresentation_ConceptFunction) this.getChild(GetHighLevelValuePresentation_ConceptFunction.class, HighLevelCustomViewer.GET_PRESENTATION);
  }

  public void setGetPresentation(GetHighLevelValuePresentation_ConceptFunction node) {
    super.setChild(HighLevelCustomViewer.GET_PRESENTATION, node);
  }

  public GetHighLevelWatchablesBlock_ConceptFunction getGetWatchables() {
    return (GetHighLevelWatchablesBlock_ConceptFunction) this.getChild(GetHighLevelWatchablesBlock_ConceptFunction.class, HighLevelCustomViewer.GET_WATCHABLES);
  }

  public void setGetWatchables(GetHighLevelWatchablesBlock_ConceptFunction node) {
    super.setChild(HighLevelCustomViewer.GET_WATCHABLES, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(HighLevelCustomViewer.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, HighLevelCustomViewer.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, HighLevelCustomViewer.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(HighLevelCustomViewer.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, HighLevelCustomViewer.SMODEL_ATTRIBUTE, node);
  }

  public static HighLevelCustomViewer newInstance(SModel sm, boolean init) {
    return (HighLevelCustomViewer) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.debug.customViewers.structure.HighLevelCustomViewer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static HighLevelCustomViewer newInstance(SModel sm) {
    return HighLevelCustomViewer.newInstance(sm, false);
  }
}
