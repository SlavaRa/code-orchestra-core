package jetbrains.mps.actions.runtime.impl;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.nodeEditor.CellSide;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import java.util.Iterator;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.util.QueryMethodGenerated;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.smodel.action.RemoveSideTransformActionByConditionContext;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;

public class SideTransformUtil {
  private static final Logger LOG = Logger.getLogger(SideTransformUtil.class);

  public SideTransformUtil() {
  }

  public static Iterable<SNode> getApplicableActionsBuilders(final SNode node, Set<String> stringTags, final CellSide cellSide, final IOperationContext context) {

    final Set<SNode> tags = SetSequence.fromSetWithValues(new HashSet<SNode>(), SetSequence.fromSet(stringTags).select(new ISelector<String, SNode>() {
      public SNode select(String it) {
        return SEnumOperations.enumMemberForValue(SEnumOperations.getEnum("r:00000000-0000-4000-0000-011c895902a8(jetbrains.mps.lang.actions.structure)", "SideTransformTag"), it);
      }
    }));
    if (SetSequence.fromSet(tags).isEmpty()) {
      SetSequence.fromSet(tags).addElement(SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:00000000-0000-4000-0000-011c895902a8(jetbrains.mps.lang.actions.structure)", "SideTransformTag"), "default_"));
    }

    Iterable<SNode> result = Sequence.fromIterable(Collections.<SNode>emptyList());
    for (Language language : ListSequence.fromList(SModelOperations.getLanguages(SNodeOperations.getModel(node), context.getScope()))) {
      EditableSModelDescriptor actionsModelDescriptor = language.getActionsModelDescriptor();
      if (actionsModelDescriptor == null || actionsModelDescriptor.getSModel() == null) {
        continue;
      }
      SModel model = actionsModelDescriptor.getSModel();
      result = Sequence.fromIterable(result).concat(ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.getRoots(model, "jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActions")).translate(new ITranslator2<SNode, SNode>() {
        public Iterable<SNode> translate(SNode it) {
          return SLinkOperations.getTargets(it, "actionsBuilder", true);
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return isApplicable(node, tags, cellSide, it, context);
        }
      }));
    }
    return result;
  }

  public static List<INodeSubstituteAction> createActions(SNode node, Set<String> stringTags, CellSide cellSide, IOperationContext context) {

    Set<SNode> conceptsToRemove = SetSequence.fromSet(new HashSet<SNode>());
    List<SNode> removeByConditions = new ArrayList<SNode>();
    List<INodeSubstituteAction> result = ListSequence.fromList(new LinkedList<INodeSubstituteAction>());

    for (SNode actionBuilder : Sequence.fromIterable(getApplicableActionsBuilders(node, stringTags, cellSide, context))) {
      SetSequence.fromSet(conceptsToRemove).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(actionBuilder, "jetbrains.mps.lang.actions.structure.RemovePart", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (SLinkOperations.getTarget(it, "conceptToRemove", false) != null);
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SLinkOperations.getTarget(it, "conceptToRemove", false);
        }
      }));
      ListSequence.fromList(removeByConditions).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(actionBuilder, "jetbrains.mps.lang.actions.structure.RemoveSTByConditionPart", false, new String[]{})));
      ListSequence.fromList(result).addSequence(ListSequence.fromList(invokeActionBuilder(actionBuilder, node, context)));
    }

    // remove with conditions 
    for (SNode removeByCondition : ListSequence.fromList(removeByConditions)) {
      invokeRemoveByCondition(removeByCondition, ListSequence.fromList(result).iterator(), node, context);
    }

    // remove with remove concept 
    for (Iterator<INodeSubstituteAction> it = ListSequence.fromList(result).iterator(); it.hasNext();) {
      INodeSubstituteAction action = it.next();
      SNode concept = SNodeOperations.cast(action.getOutputConcept(), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
      if (SetSequence.fromSet(conceptsToRemove).contains(concept)) {
        it.remove();
      } else if (!(ModelConstraintsManager.canBeAncestor(SNodeOperations.getParent(node), concept, context))) {
        it.remove();
      }
    }

    return result;
  }

  private static boolean isApplicable(SNode node, Set<SNode> tags, CellSide cellSide, SNode actionsBuilder, IOperationContext context) {
    if (!(SetSequence.fromSet(tags).contains(SEnumOperations.enumMemberForValue(SEnumOperations.getEnum("r:00000000-0000-4000-0000-011c895902a8(jetbrains.mps.lang.actions.structure)", "SideTransformTag"), SPropertyOperations.getString_def(actionsBuilder, "transformTag", "default_RTransform"))))) {
      return false;
    }
    if ((cellSide == CellSide.LEFT ?
      SPropertyOperations.hasValue(actionsBuilder, "side", null, null) :
      SPropertyOperations.hasValue(actionsBuilder, "side", "left", null)
    )) {
      return false;
    }
    if (!(SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(node), NameUtil.nodeFQName(SLinkOperations.getTarget(actionsBuilder, "applicableConcept", false))))) {
      return false;
    }

    SNode precondition = SLinkOperations.getTarget(actionsBuilder, "precondition", true);
    if (precondition != null) {
      try {
        return (Boolean) QueryMethodGenerated.invoke(((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(actionsBuilder, "jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder"), "call_getPreconditionQueryMethodName_1220279571415", new Class[]{SNode.class})), context, new SideTransformPreconditionContext(node), SNodeOperations.getModel(actionsBuilder));
      } catch (Exception e) {
        LOG.error(e);
      }
    }

    return true;
  }

  private static void invokeRemoveByCondition(SNode removeByCondition, Iterator<INodeSubstituteAction> actions, SNode node, IOperationContext context) {
    try {
      QueryMethodGenerated.invoke(((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(removeByCondition, "jetbrains.mps.lang.actions.structure.RemoveSTByConditionPart"), "call_getQueryMethodName_1220279474449", new Class[]{SNode.class})), context, new RemoveSideTransformActionByConditionContext(actions, node), SNodeOperations.getModel(removeByCondition));
    } catch (Exception e) {
      LOG.error(e);
    }
  }

  private static List<INodeSubstituteAction> invokeActionBuilder(SNode actionsBuilder, SNode node, IOperationContext context) {
    try {
      return (List<INodeSubstituteAction>) QueryMethodGenerated.invoke(((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(actionsBuilder, "jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder"), "call_getBuilderQueryMethodName_1220279234749", new Class[]{SNode.class})), context, new SideTransformActionsBuilderContext(node, SNodeOperations.getModel(node), null), SNodeOperations.getModel(actionsBuilder));
    } catch (Exception e) {
      LOG.error(e);
      return Collections.emptyList();
    }
  }
}
