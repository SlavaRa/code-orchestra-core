/*
 * Copyright 2000-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package codeOrchestra.environment.view;

import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.ui.TextComponentAccessor;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.openapi.util.Computable;
import com.intellij.ui.DocumentAdapter;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import codeOrchestra.actionscript.view.utils.SolutionUtils;
import codeOrchestra.environment.Environment;
import jetbrains.mps.project.Solution;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Alexander Eliseyev
 */
public class EnvironmentLibraryEditor extends DialogWrapper {
  private JPanel myPanel;
  private TextFieldWithBrowseButton libraryChooser;
  private JComboBox environmentChooser;
  private TextFieldWithBrowseButton implChooser;
  private final DocumentListener myDocumentListener; {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    myPanel = new JPanel();
    myPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
    myPanel.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    libraryChooser = new TextFieldWithBrowseButton();
    panel1.add(libraryChooser, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
    implChooser = new TextFieldWithBrowseButton();
    panel1.add(implChooser, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    environmentChooser = new JComboBox();
    panel1.add(environmentChooser, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
    myPanel.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    final JLabel label1 = new JLabel();
    label1.setText("Library:");
    panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label2 = new JLabel();
    label2.setText("Implementation:");
    panel2.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label3 = new JLabel();
    label3.setText("Environment:");
    panel2.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return myPanel;
  }

  public interface Validator {
    boolean checkName(String name);

    boolean isOK(String name, String value);
  }

  public EnvironmentLibraryEditor(String title, String libraryName, String implementationName, Environment environment) {
    super(true);

    setTitle(title);

    myDocumentListener = new DocumentAdapter() {
      public void textChanged(DocumentEvent event) {
        updateControls();
      }
    };

    // Library chooser
    libraryChooser.setText(libraryName);
    libraryChooser.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent actionEvent) {
        List<ModuleReference> moduleReferences = ModelAccess.instance().runReadAction(new Computable<List<ModuleReference>>() {
          @Override
          public List<ModuleReference> compute() {
            List<ModuleReference> moduleReferences = new ArrayList<ModuleReference>();
            for (Solution solution : MPSModuleRepository.getInstance().getAllSolutions()) {
              if (SolutionUtils.isStubSolution(solution)) {
                moduleReferences.add(solution.getModuleReference());
              }
            }
            return moduleReferences;
          }
        });

        ModuleReference library = CommonChoosers.showDialogModuleChooser(myPanel, "Library", moduleReferences, null);
        if (library != null) {
          libraryChooser.setText(library.getModuleFqName());
        }
      }
    });
    libraryChooser.getTextField().getDocument().addDocumentListener(myDocumentListener);

    // Implementation chooser
    implChooser.setText(implementationName);
    implChooser.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent actionEvent) {
        List<ModuleReference> moduleReferences = ModelAccess.instance().runReadAction(new Computable<List<ModuleReference>>() {
          @Override
          public List<ModuleReference> compute() {
            List<ModuleReference> moduleReferences = new ArrayList<ModuleReference>();
            for (Solution solution : MPSModuleRepository.getInstance().getAllSolutions()) {
              if (!SolutionUtils.isStubSolution(solution)) {
                moduleReferences.add(solution.getModuleReference());
              }
            }
            return moduleReferences;
          }
        });

        ModuleReference implementationModule = CommonChoosers.showDialogModuleChooser(myPanel, "Implementation", moduleReferences, null);
        if (implementationModule != null) {
          implChooser.setText(implementationModule.getModuleFqName());
        }
      }
    });
    implChooser.getTextField().getDocument().addDocumentListener(myDocumentListener);

    // Init the env drop-down
    int i = 0;
    for (Environment availableEnvironment : Environment.values()) {
      environmentChooser.addItem(availableEnvironment.getDisplayName());
      if (environment == availableEnvironment) {
        environmentChooser.setSelectedIndex(i);
      }
      i++;
    }

    init();
    updateControls();
  }


  private void updateControls() {
    final String text = libraryChooser.getText();
    getOKAction().setEnabled(text.length() > 0);
  }

  protected Action[] createActions() {
    return new Action[]{getOKAction(), getCancelAction(), getHelpAction()};
  }

  public String getLibraryName() {
    return libraryChooser.getText();
  }

  public String getImplementationName() {
    return implChooser.getText();
  }

  public Environment getEnvironment() {
    return Environment.byDisplayName((String) environmentChooser.getSelectedItem());
  }

  protected JComponent createNorthPanel() {
    return myPanel;
  }

  protected JComponent createCenterPanel() {
    return null;
  }
}
