package jetbrains.mps.internal.make.runtime.backports;

/*Generated by MPS */

import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.progress.ProcessCanceledException;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.application.ModalityState;

public class ProgressIndicatorDelegate implements ProgressIndicator {
  private ProgressIndicator delegate;

  public ProgressIndicatorDelegate(ProgressIndicator pi) {
    this.delegate = pi;
  }

  public void checkCanceled() throws ProcessCanceledException {
    delegate.checkCanceled();
  }

  public void setIndeterminate(boolean b) {
    delegate.setIndeterminate(b);
  }

  public boolean isIndeterminate() {
    return delegate.isIndeterminate();
  }

  public void setModalityProgress(ProgressIndicator indicator) {
    delegate.setModalityProgress(indicator);
  }

  @NotNull
  public ModalityState getModalityState() {
    return delegate.getModalityState();
  }

  public boolean isModal() {
    return delegate.isModal();
  }

  public void finishNonCancelableSection() {
    delegate.finishNonCancelableSection();
  }

  public void startNonCancelableSection() {
    delegate.startNonCancelableSection();
  }

  public void popState() {
    delegate.popState();
  }

  public void pushState() {
    delegate.pushState();
  }

  public void setFraction(double d) {
    delegate.setFraction(d);
  }

  public double getFraction() {
    return delegate.getFraction();
  }

  public String getText2() {
    return delegate.getText2();
  }

  public void setText2(String string) {
    delegate.setText2(string);
  }

  public String getText() {
    return delegate.getText();
  }

  public void setText(String string) {
    delegate.setText(string);
  }

  public boolean isCanceled() {
    return delegate.isCanceled();
  }

  public void cancel() {
    delegate.cancel();
  }

  public boolean isRunning() {
    return delegate.isRunning();
  }

  public void stop() {
    delegate.stop();
  }

  public void start() {
    delegate.start();
  }

  protected ProgressIndicator getDelegate() {
    return delegate;
  }
}
