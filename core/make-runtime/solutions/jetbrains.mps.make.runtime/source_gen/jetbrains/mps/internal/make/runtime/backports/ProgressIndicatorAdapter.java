package jetbrains.mps.internal.make.runtime.backports;

/*Generated by MPS */

import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.progress.ProcessCanceledException;
import com.intellij.openapi.application.ModalityState;

public class ProgressIndicatorAdapter implements ProgressIndicator {
  public ProgressIndicatorAdapter() {
  }

  public void checkCanceled() throws ProcessCanceledException {
    throw new UnsupportedOperationException();
  }

  public void setIndeterminate(boolean b) {
    throw new UnsupportedOperationException();
  }

  public boolean isIndeterminate() {
    throw new UnsupportedOperationException();
  }

  public void setModalityProgress(ProgressIndicator indicator) {
    throw new UnsupportedOperationException();
  }

  public ModalityState getModalityState() {
    throw new UnsupportedOperationException();
  }

  public boolean isModal() {
    throw new UnsupportedOperationException();
  }

  public void finishNonCancelableSection() {
    throw new UnsupportedOperationException();
  }

  public void startNonCancelableSection() {
    throw new UnsupportedOperationException();
  }

  public void popState() {
    throw new UnsupportedOperationException();
  }

  public void pushState() {
    throw new UnsupportedOperationException();
  }

  public void setFraction(double d) {
    throw new UnsupportedOperationException();
  }

  public double getFraction() {
    throw new UnsupportedOperationException();
  }

  public String getText2() {
    throw new UnsupportedOperationException();
  }

  public void setText2(String string) {
    throw new UnsupportedOperationException();
  }

  public String getText() {
    throw new UnsupportedOperationException();
  }

  public void setText(String string) {
    throw new UnsupportedOperationException();
  }

  public boolean isCanceled() {
    throw new UnsupportedOperationException();
  }

  public void cancel() {
    throw new UnsupportedOperationException();
  }

  public boolean isRunning() {
    throw new UnsupportedOperationException();
  }

  public void stop() {
    throw new UnsupportedOperationException();
  }

  public void start() {
    throw new UnsupportedOperationException();
  }
}
