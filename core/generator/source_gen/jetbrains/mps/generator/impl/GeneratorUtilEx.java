package jetbrains.mps.generator.impl;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import java.util.LinkedList;
import jetbrains.mps.smodel.search.IsInstanceCondition;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.util.Pair;
import jetbrains.mps.smodel.SNodePointer;
import java.util.ArrayList;
import java.util.Collections;

public class GeneratorUtilEx {
  private static final Logger LOG = Logger.getLogger(GeneratorUtilEx.class);

  public GeneratorUtilEx() {
  }

  public static boolean isTemplateLanguageElement(SNode n) {
    return SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.NodeMacro") || SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.ReferenceMacro") || SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.PropertyMacro") || SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.TemplateFragment") || SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.RootTemplateAnnotation");
  }

  public static String getMappingName(SNode node, String defaultValue) {
    SNode mappingLabel = null;

    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.CreateRootRule")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.CreateRootRule"), "label", false);
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.BaseMappingRule")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.BaseMappingRule"), "labelDeclaration", false);
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.TemplateFragment")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.TemplateFragment"), "labelDeclaration", false);
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.NodeMacro")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.NodeMacro"), "mappingLabel", false);
    } else
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule")) {
      mappingLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule"), "labelDeclaration", false);
    } else {
      LOG.errorWithTrace("unexpected input " + node.getDebugText());
    }
    String mappingName = (mappingLabel != null ?
      SPropertyOperations.getString(mappingLabel, "name") :
      null
    );
    if (mappingName == null) {
      return defaultValue;
    }
    return mappingName;
  }

  public static String getPatternVariableName(SNode ref) {
    return ((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(ref, "jetbrains.mps.lang.generator.structure.TemplateArgumentPatternRef"), "virtual_getVariableName_2902001550281937661", new Class[]{SNode.class}));
  }

  public static List<SNode> getTemplateFragments(@NotNull SNode template) {
    List<SNode> templateFragments = new LinkedList<SNode>();
    for (SNode subnode : template.getDescendantsIterable(new IsInstanceCondition("jetbrains.mps.lang.generator.structure.TemplateFragment"), false)) {
      templateFragments.add((SNode) subnode);
    }
    return templateFragments;
  }

  public static boolean checkIfOneOrMaryAdjacentFragments(List<SNode> fragments, SNode templateContainer, SNode inputNode, SNode ruleNode, ITemplateGenerator generator) {
    if (fragments.isEmpty()) {
      generator.showErrorMessage(inputNode, templateContainer, ruleNode, "couldn't process template: no template fragments found");
      return false;
    }
    if (fragments.size() > 1) {
      SNode templateNode = SNodeOperations.getParent(fragments.get(0));
      SNode parent = SNodeOperations.getParent(templateNode);
      String role = templateNode.getRole_();
      for (SNode fragment : fragments) {
        templateNode = SNodeOperations.getParent(fragment);
        if (!((parent == SNodeOperations.getParent(templateNode) && role.equals(templateNode.getRole_())))) {
          generator.showErrorMessage(inputNode, templateContainer, ruleNode, "couldn't process template: all template fragments must reside in the same parent node");
          return false;
        }
      }
    }
    return true;
  }

  public static List<Pair<SNode, String>> getTemplateNodesFromRuleConsequence(SNode ruleConsequence, SNode inputNode, SNode ruleNode, ReductionContext reductionContext, TemplateGenerator generator) throws DismissTopMappingRuleException, AbandonRuleInputException, GenerationFailureException {
    if (ruleConsequence == null) {
      generator.showErrorMessage(inputNode, null, ruleNode, "no rule consequence");
      return null;
    }
    generator.getGenerationTracer().pushRuleConsequence(new SNodePointer(ruleConsequence));
    if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.DismissTopMappingRule")) {
      SNode message = SLinkOperations.getTarget(SNodeOperations.cast(ruleConsequence, "jetbrains.mps.lang.generator.structure.DismissTopMappingRule"), "generatorMessage", true);
      DismissTopMappingRuleException.MessageType messageType = processGeneratorMessage(message, inputNode, null, ruleNode, generator);
      throw new DismissTopMappingRuleException(messageType);
    } else
    if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.AbandonInput_RuleConsequence")) {
      throw new AbandonRuleInputException();
    } else
    if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference") || SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence")) {
      SNode templateContainer;
      if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference")) {
        templateContainer = SLinkOperations.getTarget(SNodeOperations.cast(ruleConsequence, "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference"), "template", false);
      } else {
        templateContainer = ruleConsequence;
      }
      if (templateContainer == null) {
        generator.showErrorMessage(inputNode, ruleConsequence, ruleNode, "error processing template consequence: no 'template'");
        return null;
      }
      List<SNode> fragments = getTemplateFragments(templateContainer);
      if (GeneratorUtilEx.checkIfOneOrMaryAdjacentFragments(fragments, templateContainer, inputNode, ruleNode, generator)) {
        List<Pair<SNode, String>> result = new ArrayList<Pair<SNode, String>>(fragments.size());
        for (SNode fragment : fragments) {
          result.add(new Pair<SNode, String>(SNodeOperations.getParent(fragment), getMappingName(fragment, null)));
        }
        return result;
      }
    } else
    if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence")) {
      SNode templateNode = SLinkOperations.getTarget(SNodeOperations.cast(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence"), "templateNode", true);
      if (templateNode != null) {
        return Collections.singletonList(new Pair<SNode, String>(templateNode, null));
      } else {
        generator.showErrorMessage(inputNode, null, ruleConsequence, "no template node");
      }
    } else
    if (SNodeOperations.isInstanceOf(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineSwitch_RuleConsequence")) {
      SNode inlineSwitch = SNodeOperations.cast(ruleConsequence, "jetbrains.mps.lang.generator.structure.InlineSwitch_RuleConsequence");
      for (SNode switchCase : SLinkOperations.getTargets(inlineSwitch, "case", true)) {
        if (reductionContext.getQueryExecutor().checkCondition(SLinkOperations.getTarget(switchCase, "conditionFunction", true), true, inputNode, switchCase)) {
          return GeneratorUtilEx.getTemplateNodesFromRuleConsequence(SLinkOperations.getTarget(switchCase, "caseConsequence", true), inputNode, switchCase, reductionContext, generator);
        }
      }
      SNode defaultConsequence = SLinkOperations.getTarget(inlineSwitch, "defaultConsequence", true);
      if (defaultConsequence == null) {
        generator.showErrorMessage(inputNode, null, inlineSwitch, "no default consequence in switch");
      } else {
        return GeneratorUtilEx.getTemplateNodesFromRuleConsequence(defaultConsequence, inputNode, defaultConsequence, reductionContext, generator);
      }
    } else {
      generator.showErrorMessage(inputNode, null, ruleConsequence, "unsupported rule consequence");
    }
    return null;
  }

  public static DismissTopMappingRuleException.MessageType processGeneratorMessage(SNode message, SNode inputNode, SNode templateNode, SNode ruleNode, ITemplateGenerator generator) {
    DismissTopMappingRuleException.MessageType messageType = null;
    if (message != null) {
      String text = SPropertyOperations.getString(message, "messageText");
      if (SPropertyOperations.hasValue(message, "messageType", "error", "info")) {
        messageType = DismissTopMappingRuleException.MessageType.error;
        generator.showErrorMessage(inputNode, templateNode, ruleNode, text);
      } else
      if (SPropertyOperations.hasValue(message, "messageType", "warning", "info")) {
        messageType = DismissTopMappingRuleException.MessageType.warning;
        generator.getLogger().warning(inputNode, text);
      } else {
        messageType = DismissTopMappingRuleException.MessageType.info;
        generator.getLogger().info(inputNode, text);
      }
    }
    return messageType;

  }
}
