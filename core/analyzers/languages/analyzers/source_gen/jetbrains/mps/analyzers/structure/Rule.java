package jetbrains.mps.analyzers.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.StatementList;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Rule extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.analyzers.structure.Rule";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String ANALYZER = "analyzer";
  public static final String ACTIONS = "actions";
  public static final String CONDITION = "condition";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Rule(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Rule.NAME);
  }

  public void setName(String value) {
    this.setProperty(Rule.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Rule.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Rule.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Rule.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Rule.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Rule.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Rule.VIRTUAL_PACKAGE, value);
  }

  public Analyzer getAnalyzer() {
    return (Analyzer) this.getReferent(Analyzer.class, Rule.ANALYZER);
  }

  public void setAnalyzer(Analyzer node) {
    super.setReferent(Rule.ANALYZER, node);
  }

  public StatementList getActions() {
    return (StatementList) this.getChild(StatementList.class, Rule.ACTIONS);
  }

  public void setActions(StatementList node) {
    super.setChild(Rule.ACTIONS, node);
  }

  public ApplicableCondition getCondition() {
    return (ApplicableCondition) this.getChild(ApplicableCondition.class, Rule.CONDITION);
  }

  public void setCondition(ApplicableCondition node) {
    super.setChild(Rule.CONDITION, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Rule.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Rule.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Rule.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Rule.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Rule.SMODEL_ATTRIBUTE, node);
  }

  public static Rule newInstance(SModel sm, boolean init) {
    return (Rule) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.analyzers.structure.Rule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Rule newInstance(SModel sm) {
    return Rule.newInstance(sm, false);
  }
}
