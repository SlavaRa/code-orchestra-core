package jetbrains.mps.analyzers.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Analyzer extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.analyzers.structure.Analyzer";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String INITIAL_FUNCTION = "initialFunction";
  public static final String MERGE_FUNCTION = "mergeFunction";
  public static final String FUN_FUNCTION = "funFunction";
  public static final String DIRECTION = "direction";
  public static final String LATTICE_ELEMENT_TYPE = "latticeElementType";
  public static final String INSTRUCTION = "instruction";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Analyzer(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Analyzer.NAME);
  }

  public void setName(String value) {
    this.setProperty(Analyzer.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Analyzer.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Analyzer.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Analyzer.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Analyzer.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Analyzer.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Analyzer.VIRTUAL_PACKAGE, value);
  }

  public AnalyzerInitialFunction getInitialFunction() {
    return (AnalyzerInitialFunction) this.getChild(AnalyzerInitialFunction.class, Analyzer.INITIAL_FUNCTION);
  }

  public void setInitialFunction(AnalyzerInitialFunction node) {
    super.setChild(Analyzer.INITIAL_FUNCTION, node);
  }

  public AnalyzerMergeFunction getMergeFunction() {
    return (AnalyzerMergeFunction) this.getChild(AnalyzerMergeFunction.class, Analyzer.MERGE_FUNCTION);
  }

  public void setMergeFunction(AnalyzerMergeFunction node) {
    super.setChild(Analyzer.MERGE_FUNCTION, node);
  }

  public AnalyzerFunFunction getFunFunction() {
    return (AnalyzerFunFunction) this.getChild(AnalyzerFunFunction.class, Analyzer.FUN_FUNCTION);
  }

  public void setFunFunction(AnalyzerFunFunction node) {
    super.setChild(Analyzer.FUN_FUNCTION, node);
  }

  public AnalysisDirection getDirection() {
    return (AnalysisDirection) this.getChild(AnalysisDirection.class, Analyzer.DIRECTION);
  }

  public void setDirection(AnalysisDirection node) {
    super.setChild(Analyzer.DIRECTION, node);
  }

  public Type getLatticeElementType() {
    return (Type) this.getChild(Type.class, Analyzer.LATTICE_ELEMENT_TYPE);
  }

  public void setLatticeElementType(Type node) {
    super.setChild(Analyzer.LATTICE_ELEMENT_TYPE, node);
  }

  public int getInstructionsCount() {
    return this.getChildCount(Analyzer.INSTRUCTION);
  }

  public Iterator<Instruction> instructions() {
    return this.children(Instruction.class, Analyzer.INSTRUCTION);
  }

  public List<Instruction> getInstructions() {
    return this.getChildren(Instruction.class, Analyzer.INSTRUCTION);
  }

  public void addInstruction(Instruction node) {
    this.addChild(Analyzer.INSTRUCTION, node);
  }

  public void insertInstruction(Instruction prev, Instruction node) {
    this.insertChild(prev, Analyzer.INSTRUCTION, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Analyzer.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Analyzer.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Analyzer.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Analyzer.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Analyzer.SMODEL_ATTRIBUTE, node);
  }

  public static Analyzer newInstance(SModel sm, boolean init) {
    return (Analyzer) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.analyzers.structure.Analyzer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Analyzer newInstance(SModel sm) {
    return Analyzer.newInstance(sm, false);
  }
}
