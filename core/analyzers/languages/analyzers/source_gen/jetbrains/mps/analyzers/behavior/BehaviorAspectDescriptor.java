package jetbrains.mps.analyzers.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;

public class BehaviorAspectDescriptor implements jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor {
  private static String[] stringSwitchCases_846f5o_a0a0a = new String[]{"jetbrains.mps.analyzers.structure.Analyzer", "jetbrains.mps.analyzers.structure.AnalyzerFunFunction", "jetbrains.mps.analyzers.structure.AnalyzerFunParameterInput", "jetbrains.mps.analyzers.structure.AnalyzerFunParameterProgramState", "jetbrains.mps.analyzers.structure.AnalyzerFunctionResultType", "jetbrains.mps.analyzers.structure.AnalyzerInitialFunction", "jetbrains.mps.analyzers.structure.AnalyzerMergeFunction", "jetbrains.mps.analyzers.structure.AnalyzerMergeParameterInput", "jetbrains.mps.analyzers.structure.AnalyzerParameterProgram", "jetbrains.mps.analyzers.structure.AnalyzerRunnerAnalyzeOperation", "jetbrains.mps.analyzers.structure.AnalyzerRunnerCreator", "jetbrains.mps.analyzers.structure.AnalyzerRunnerType", "jetbrains.mps.analyzers.structure.ApplicableNodeReference", "jetbrains.mps.analyzers.structure.BackwardDirection", "jetbrains.mps.analyzers.structure.ConceptCondition", "jetbrains.mps.analyzers.structure.EmitInstruction", "jetbrains.mps.analyzers.structure.ForwardDirection", "jetbrains.mps.analyzers.structure.InsertAfterPosition", "jetbrains.mps.analyzers.structure.InsertBeforePosition", "jetbrains.mps.analyzers.structure.InsertPosition", "jetbrains.mps.analyzers.structure.Instruction", "jetbrains.mps.analyzers.structure.InstructionParameter", "jetbrains.mps.analyzers.structure.InstructionReference", "jetbrains.mps.analyzers.structure.IsOperation", "jetbrains.mps.analyzers.structure.PatternCondition", "jetbrains.mps.analyzers.structure.Rule", "jetbrains.mps.analyzers.structure.RuleReference"};

  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {
      case 0:
        return new Analyzer_BehaviorDescriptor();
      case 20:
        return new Instruction_BehaviorDescriptor();
      case 6:
        return new AnalyzerMergeFunction_BehaviorDescriptor();
      case 8:
        return new AnalyzerParameterProgram_BehaviorDescriptor();
      case 7:
        return new AnalyzerMergeParameterInput_BehaviorDescriptor();
      case 5:
        return new AnalyzerInitialFunction_BehaviorDescriptor();
      case 1:
        return new AnalyzerFunFunction_BehaviorDescriptor();
      case 3:
        return new AnalyzerFunParameterProgramState_BehaviorDescriptor();
      case 2:
        return new AnalyzerFunParameterInput_BehaviorDescriptor();
      case 16:
        return new ForwardDirection_BehaviorDescriptor();
      case 13:
        return new BackwardDirection_BehaviorDescriptor();
      case 4:
        return new AnalyzerFunctionResultType_BehaviorDescriptor();
      case 25:
        return new Rule_BehaviorDescriptor();
      case 21:
        return new InstructionParameter_BehaviorDescriptor();
      case 24:
        return new PatternCondition_BehaviorDescriptor();
      case 15:
        return new EmitInstruction_BehaviorDescriptor();
      case 22:
        return new InstructionReference_BehaviorDescriptor();
      case 26:
        return new RuleReference_BehaviorDescriptor();
      case 11:
        return new AnalyzerRunnerType_BehaviorDescriptor();
      case 9:
        return new AnalyzerRunnerAnalyzeOperation_BehaviorDescriptor();
      case 10:
        return new AnalyzerRunnerCreator_BehaviorDescriptor();
      case 23:
        return new IsOperation_BehaviorDescriptor();
      case 14:
        return new ConceptCondition_BehaviorDescriptor();
      case 12:
        return new ApplicableNodeReference_BehaviorDescriptor();
      case 18:
        return new InsertBeforePosition_BehaviorDescriptor();
      case 19:
        return new InsertPosition_BehaviorDescriptor();
      case 17:
        return new InsertAfterPosition_BehaviorDescriptor();
      default:
        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
    }
  }
}
