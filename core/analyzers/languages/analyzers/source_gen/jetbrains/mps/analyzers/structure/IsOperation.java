package jetbrains.mps.analyzers.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class IsOperation extends Expression {
  public static final String concept = "jetbrains.mps.analyzers.structure.IsOperation";
  public static final String INSTRUCTION = "instruction";
  public static final String LEFT = "left";

  public IsOperation(SNode node) {
    super(node);
  }

  public Instruction getInstruction() {
    return (Instruction) this.getReferent(Instruction.class, IsOperation.INSTRUCTION);
  }

  public void setInstruction(Instruction node) {
    super.setReferent(IsOperation.INSTRUCTION, node);
  }

  public Expression getLeft() {
    return (Expression) this.getChild(Expression.class, IsOperation.LEFT);
  }

  public void setLeft(Expression node) {
    super.setChild(IsOperation.LEFT, node);
  }

  public static IsOperation newInstance(SModel sm, boolean init) {
    return (IsOperation) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.analyzers.structure.IsOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static IsOperation newInstance(SModel sm) {
    return IsOperation.newInstance(sm, false);
  }
}
