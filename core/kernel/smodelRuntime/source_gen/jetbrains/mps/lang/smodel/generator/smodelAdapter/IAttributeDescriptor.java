package jetbrains.mps.lang.smodel.generator.smodelAdapter;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;

public interface IAttributeDescriptor {
  public boolean match(@NotNull SNode attribute);
  public void update(@NotNull SNode attribute);
  public static class AttributeDescriptor implements IAttributeDescriptor {
    protected SNode myAttributeDeclaration;

    public AttributeDescriptor(SNode attributeDeclaration) {
      myAttributeDeclaration = attributeDeclaration;
    }

    public boolean match(@NotNull SNode attribute) {
      return myAttributeDeclaration == null || attribute.isInstanceOfConcept(myAttributeDeclaration);
    }

    public void update(@NotNull SNode attribute) {
    }
  }

  public static class AllAttributes extends IAttributeDescriptor.AttributeDescriptor {
    public AllAttributes() {
      super(null);
    }
  }

  public static class NodeAttribute extends IAttributeDescriptor.AttributeDescriptor {
    public NodeAttribute(@NotNull SNode attributeDeclaration) {
      super(attributeDeclaration);
    }
  }

  public static class LinkAttribute extends IAttributeDescriptor.AttributeDescriptor {
    private String myLinkRole;

    public LinkAttribute(@NotNull SNode attributeDeclaration, String linkRole) {
      super(attributeDeclaration);
      myLinkRole = linkRole;
    }

    public boolean match(@NotNull SNode attribute) {
      return super.match(attribute) && (myLinkRole == null || myLinkRole.equals(attribute.getProperty("linkRole")));
    }

    public void update(@NotNull SNode attribute) {
      attribute.setProperty("linkRole", myLinkRole);
    }
  }

  public static class PropertyAttribute extends IAttributeDescriptor.AttributeDescriptor {
    private String myPropertyName;

    public PropertyAttribute(@NotNull SNode attributeDeclaration, String propertyName) {
      super(attributeDeclaration);
      myPropertyName = propertyName;
    }

    public boolean match(@NotNull SNode attribute) {
      return super.match(attribute) && (myPropertyName == null || myPropertyName.equals(attribute.getProperty("propertyName")));
    }

    public void update(@NotNull SNode attribute) {
      attribute.setProperty("propertyName", myPropertyName);
    }
  }

  public static class AttributeDescriptorString implements IAttributeDescriptor {
    protected String myAttributeRole;

    public AttributeDescriptorString(String attributeRole) {
      myAttributeRole = attributeRole;
    }

    public boolean match(@NotNull SNode attribute) {
      return myAttributeRole == null || myAttributeRole.equals(SConceptPropertyOperations.getString(attribute, "role"));
    }

    public void update(@NotNull SNode attribute) {
    }
  }

  public static class NodeAttributeString extends IAttributeDescriptor.AttributeDescriptorString {
    public NodeAttributeString(String attributeRole) {
      super(attributeRole);
    }

    public boolean match(@NotNull SNode attribute) {
      return SNodeOperations.isInstanceOf(attribute, "jetbrains.mps.lang.core.structure.NodeAttribute") && super.match(attribute);
    }
  }

  public static class LinkAttributeString extends IAttributeDescriptor.AttributeDescriptorString {
    private String myLinkRole;

    public LinkAttributeString(String attributeRole, String linkRole) {
      super(attributeRole);
      myLinkRole = linkRole;
    }

    public boolean match(@NotNull SNode attribute) {
      SNode attr = SNodeOperations.as(attribute, "jetbrains.mps.lang.core.structure.LinkAttribute");
      return (attr != null) && super.match(attr) && (myLinkRole == null || myLinkRole.equals(SPropertyOperations.getString(attr, "linkRole")));
    }

    public void update(@NotNull SNode attribute) {
      SPropertyOperations.set(SNodeOperations.as(attribute, "jetbrains.mps.lang.core.structure.LinkAttribute"), "linkRole", myLinkRole);
    }
  }

  public static class PropertyAttributeString extends IAttributeDescriptor.AttributeDescriptorString {
    private String myPropertyName;

    public PropertyAttributeString(String attributeRole, String propertyName) {
      super(attributeRole);
      myPropertyName = propertyName;
    }

    public boolean match(@NotNull SNode attribute) {
      SNode attr = SNodeOperations.as(attribute, "jetbrains.mps.lang.core.structure.PropertyAttribute");
      return (attr != null) && super.match(attr) && (myPropertyName == null || myPropertyName.equals(SPropertyOperations.getString(attr, "propertyName")));
    }

    public void update(@NotNull SNode attribute) {
      SPropertyOperations.set(SNodeOperations.as(attribute, "jetbrains.mps.lang.core.structure.PropertyAttribute"), "propertyName", myPropertyName);
    }
  }

}
