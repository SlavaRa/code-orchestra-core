package jetbrains.mps.lang.smodel.generator.smodelAdapter;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.smodel.SReference;

public class SLinkOperations {
  public SLinkOperations() {
  }

  public static SNode findLinkDeclaration(String conceptFqName, String linkRole) {
    SNode concept = SModelUtil.findConceptDeclaration(conceptFqName, GlobalScope.getInstance());
    SNode linkDeclaration = SModelSearchUtil.findLinkDeclaration(concept, linkRole);
    return linkDeclaration;
  }

  public static SNode getTarget(SNode node, String role, boolean child) {
    if (node != null) {
      if (child) {
        return node.getChild(role);
      }
      return node.getReferent(role);
    }
    return null;
  }

  public static SNode setTarget(SNode node, String role, SNode targetNode, boolean child) {
    if (node != null) {
      if (child) {
        if (targetNode == null) {
          node.setChild(role, null);
        } else {
          SNode targetParent = targetNode.getParent();
          if (targetParent != node) {
            if (targetParent != null) {
              targetParent.removeChild(targetNode);
            }
            node.setChild(role, targetNode);
          }
        }
      } else {
        node.setReferent(role, targetNode);
      }
    }
    return targetNode;
  }

  public static SNode setNewChild(SNode node, String role, String childConceptFQName) {
    if (node != null) {
      SNode newChild = SModelOperations.createNewNode(node.getModel(), childConceptFQName);
      node.setChild(role, newChild);
      return newChild;
    }
    return null;
  }

  public static List<SNode> getTargets(SNode node, String role, boolean child) {
    if (node != null && role != null) {
      return (child ?
        new AbstractSNodeList.AggregatedSNodesList(node, role) :
        new AbstractSNodeList.LinkedSNodesList(node, role)
      );
    }
    return new ArrayList<SNode>();
  }

  public static SNode addNewChild(SNode node, String role, String childConceptFQName) {
    if (node != null) {
      SNode newChild = SModelOperations.createNewNode(node.getModel(), childConceptFQName);
      node.addChild(role, newChild);
      return newChild;
    }
    return null;
  }

  public static SNode addChild(SNode parent, String role, SNode child) {
    if (parent != null && child != null) {
      SNode childParent = child.getParent();
      if (childParent != null) {
        childParent.removeChild(child);
      }
      parent.addChild(role, child);
    }
    return child;
  }

  public static void addAll(SNode parent, String role, List<SNode> nodeList) {
    for (SNode node : nodeList) {
      addChild(parent, role, node);
    }
  }

  public static SNode insertChildFirst(SNode parent, String role, SNode child) {
    if (parent != null && child != null) {
      SNode childParent = child.getParent();
      if (childParent != null) {
        childParent.removeChild(child);
      }
      parent.insertChild(null, role, child);
    }
    return child;
  }

  @Deprecated
  public static SNode removeChild(SNode parent, String role) {
    // use SNodeOperations.detachNode 
    if (parent == null) {
      return null;
    }
    SNode child = parent.getChild(role);
    if (child != null) {
      parent.removeChild(child);
      return child;
    }
    return null;
  }

  public static List<SNode> removeAllChildren(SNode parent, String role) {
    if (parent == null) {
      return new ArrayList<SNode>(1);
    }
    List<SNode> children = parent.getChildren(role);
    for (SNode child : children) {
      parent.removeChild(child);
    }
    return children;
  }

  public static int getCount(SNode parent, String role) {
    if (parent != null) {
      return parent.getChildCount(role);
    }
    return 0;
  }

  public static List<SNode> getConceptLinkTargets(SNode node, String linkName) {
    if (node == null) {
      return new ArrayList<SNode>();
    }
    return BaseAdapter.getConceptLinkTargets(node, linkName, true);
  }

  public static SNode findLinkDeclaration(SReference reference) {
    if (reference == null) {
      return null;
    }
    return (SNode) reference.getSourceNode().getLinkDeclaration(reference.getRole());
  }

  public static SNode getTargetNode(SReference reference) {
    if (reference == null) {
      return null;
    }
    return reference.getTargetNode();
  }

  public static String getRole(SReference reference) {
    if (reference == null) {
      return null;
    }
    return reference.getRole();
  }

  public static String getResolveInfo(SReference reference) {
    if (reference == null) {
      return null;
    }
    return reference.getResolveInfo();
  }
}
