package jetbrains.mps.stubs.util;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.WeakHashMap;
import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.reloading.ReloadAdapter;
import java.util.HashMap;

public class PathItemsReloadableCache {
  private static Map<Object, PathItemsReloadableCache> Instances = MapSequence.fromMap(new WeakHashMap<Object, PathItemsReloadableCache>());

  private Map<String, PathItem> cache = null;
  private Class<? extends PathItem> pathItemClass;

  private PathItemsReloadableCache(Class<? extends PathItem> cls) {
    this.pathItemClass = cls;
  }

  public PathItem getPathItem(String path) {
    synchronized (this) {
      if (cache == null) {
        ClassLoaderManager.getInstance().addReloadHandler(new ReloadAdapter() {
          public void onReload() {
            synchronized (PathItemsReloadableCache.this) {
              MapSequence.fromMap(PathItemsReloadableCache.this.cache).clear();
              PathItemsReloadableCache.this.cache = null;
            }
            ClassLoaderManager.getInstance().removeReloadHandler(this);
          }
        });
        this.cache = MapSequence.fromMap(new HashMap<String, PathItem>());
      }
      PathItem pi = MapSequence.fromMap(cache).get(path);
      if (pi == null) {
        try {
          pi = pathItemClass.getDeclaredConstructor(String.class).newInstance(path);
        } catch (Exception checked) {
          throw new PathItemsReloadableCache.CantCreatePathItemException("Exception while creating path item.\n" + "Path: " + path + "\nPath item class: " + pathItemClass, checked);
        }
        MapSequence.fromMap(cache).put(path, pi);
      }
      return pi;
    }
  }

  public static PathItemsReloadableCache getInstance(Class<? extends PathItem> cls) {
    PathItemsReloadableCache inst = MapSequence.fromMap(Instances).get(cls);
    if (inst == null) {
      synchronized (Instances) {
        inst = MapSequence.fromMap(Instances).get(cls);
        if (inst == null) {
          inst = new PathItemsReloadableCache(cls);
          MapSequence.fromMap(Instances).put(cls, inst);
        }
      }
    }
    return inst;
  }

  public class CantCreatePathItemException extends RuntimeException {
    public CantCreatePathItemException() {
    }

    public CantCreatePathItemException(String message) {
      super(message);
    }

    public CantCreatePathItemException(String message, Throwable throwable) {
      super(message, throwable);
    }

    public CantCreatePathItemException(Throwable throwable) {
      super(throwable);
    }
  }
}
