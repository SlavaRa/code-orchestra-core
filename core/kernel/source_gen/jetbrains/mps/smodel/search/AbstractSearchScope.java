package jetbrains.mps.smodel.search;

/*Generated by MPS */

import jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.annotations.NotNull;
import java.util.List;

public abstract class AbstractSearchScope implements ISearchScope {
  protected static final Condition<SNode> TRUE_CONDITION = new Condition<SNode>() {
    public boolean met(SNode object) {
      return true;
    }
  };

  public AbstractSearchScope() {
  }

  public IReferenceInfoResolver getReferenceInfoResolver(SNode referenceNode, SNode targetConcept) {
    return new IReferenceInfoResolver() {
      public SNode resolve(String referenceInfo, SModelReference targetModelReference) {
        if (referenceInfo == null) {
          return null;
        }
        for (SNode node : getNodes()) {
          if (referenceInfo.equals(node.getResolveInfo())) {
            return node;
          }
        }
        return null;
      }
    };
  }

  @NotNull
  public final List<SNode> getNodes() {
    return getNodes(TRUE_CONDITION);
  }

  public boolean isInScope(final SNode node) {
    return getNodes(new Condition<SNode>() {
      public boolean met(SNode n) {
        return n == node;
      }
    }).size() > 0;
  }
}
