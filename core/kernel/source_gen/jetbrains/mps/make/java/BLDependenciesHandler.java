package jetbrains.mps.make.java;

/*Generated by MPS */

import jetbrains.mps.xmlQuery.runtime.XMLSAXHandler;
import java.util.Stack;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.util.InternUtil;

public class BLDependenciesHandler extends XMLSAXHandler<ModelDependencies> {
  private static String[] EMPTY_ARRAY = new String[0];

  private BLDependenciesHandler.dependenciesRootElementHandler dependenciesRoothandler = new BLDependenciesHandler.dependenciesRootElementHandler();
  private BLDependenciesHandler.dependencyElementHandler dependencyhandler = new BLDependenciesHandler.dependencyElementHandler();
  private BLDependenciesHandler.classNodeElementHandler classNodehandler = new BLDependenciesHandler.classNodeElementHandler();
  private Stack<BLDependenciesHandler.ElementHandler> myHandlersStack = new Stack<BLDependenciesHandler.ElementHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private ModelDependencies myResult;

  public BLDependenciesHandler() {
  }

  public ModelDependencies getResult() {
    return myResult;
  }

  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }

  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    BLDependenciesHandler.ElementHandler current = (myHandlersStack.empty() ?
      (BLDependenciesHandler.ElementHandler) null :
      myHandlersStack.peek()
    );
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }

  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    BLDependenciesHandler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    if (current != null) {
      current.validate(childValue);
      if (myHandlersStack.empty()) {
        myResult = (ModelDependencies) childValue;
      } else {
        myHandlersStack.peek().handleChild(myValues.peek(), qName, childValue);
      }
    }
  }

  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    BLDependenciesHandler.ElementHandler current = (myHandlersStack.empty() ?
      (BLDependenciesHandler.ElementHandler) null :
      myHandlersStack.peek()
    );
    if (current == null) {
      // root 
      current = dependenciesRoothandler;
    } else {
      current = current.createChild(qName);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (ModelDependencies) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }

  private class ElementHandler {
    private ElementHandler() {
    }

    protected Object createObject(Attributes attrs) {
      return null;
    }

    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }

    protected BLDependenciesHandler.ElementHandler createChild(String tagName) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }

    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      throw new SAXParseException("unknown child: " + tagName, null);
    }

    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted", null);
    }

    protected String[] requiredAttributes() {
      return BLDependenciesHandler.EMPTY_ARRAY;
    }

    protected void validate(Object resultObject) throws SAXException {
    }
  }

  public class dependenciesRootElementHandler extends BLDependenciesHandler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public dependenciesRootElementHandler() {
    }

    @Override
    protected ModelDependencies createObject(Attributes attrs) {
      return new ModelDependencies();
    }

    @Override
    protected BLDependenciesHandler.ElementHandler createChild(String tagName) throws SAXException {
      if ("dependency".equals(tagName)) {
        return dependencyhandler;
      }
      return super.createChild(tagName);
    }

    @Override
    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      ModelDependencies result = (ModelDependencies) resultObject;
      if ("dependency".equals(tagName)) {
        RootDependencies child = (RootDependencies) value;
        result.addDependencies(child);
        return;
      }
      super.handleChild(resultObject, tagName, value);
    }
  }

  public class dependencyElementHandler extends BLDependenciesHandler.ElementHandler {
    private String[] requiredAttributes = new String[]{"className"};

    public dependencyElementHandler() {
    }

    @Override
    protected RootDependencies createObject(Attributes attrs) {
      return new RootDependencies();
    }

    @Override
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      RootDependencies result = (RootDependencies) resultObject;
      if ("className".equals(name)) {
        result.setClassName(value);
        return;
      }
      if ("file".equals(name)) {
        result.setFileName(value);
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }

    @Override
    protected BLDependenciesHandler.ElementHandler createChild(String tagName) throws SAXException {
      if ("classNode".equals(tagName)) {
        return classNodehandler;
      }
      return super.createChild(tagName);
    }

    @Override
    protected void handleChild(Object resultObject, String tagName, Object value) throws SAXException {
      RootDependencies result = (RootDependencies) resultObject;
      if ("classNode".equals(tagName)) {
        Object[] child = (Object[]) value;
        String s = (String) child[0];
        if (StringUtils.isEmpty(s)) {
          return;
        }
        if ((Boolean) child[1]) {
          result.addExtendsNode(s);
        } else {
          result.addDependNode(s);
        }
        return;
      }
      super.handleChild(resultObject, tagName, value);
    }
  }

  public class classNodeElementHandler extends BLDependenciesHandler.ElementHandler {
    private String[] requiredAttributes = new String[]{};

    public classNodeElementHandler() {
    }

    @Override
    protected Object[] createObject(Attributes attrs) {
      return new Object[2];
    }

    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      Object[] result = (Object[]) resultObject;
      if ("dependClassName".equals(name)) {
        result[0] = InternUtil.intern(value);
        result[1] = Boolean.FALSE;
        return;
      }
      if ("extendsClassName".equals(name)) {
        result[0] = InternUtil.intern(value);
        result[1] = Boolean.TRUE;
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
  }
}
