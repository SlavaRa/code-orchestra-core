package jetbrains.mps.project.persistence;

/*Generated by MPS */

import codeOrchestra.actionscript.run.compiler.properties.CompilerSettings;
import codeOrchestra.actionscript.view.utils.SolutionUtils;
import codeOrchestra.javaScript.generator.JSOptimizationKind;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes._return_P0_E0;
import jetbrains.mps.util.annotation.CodeOrchestraPatch;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.Macros;
import jetbrains.mps.util.MacrosFactory;
import org.jdom.Attribute;
import org.jdom.Document;
import jetbrains.mps.util.JDOMUtil;
import org.jdom.Element;
import jetbrains.mps.xmlQuery.runtime.AttributeUtils;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.smodel.LanguageID;
import java.io.OutputStream;
import java.util.List;

public class SolutionDescriptorPersistence {
  public static final String EXCLUDE_PACKAGES_ELEMENT = "excludePackages";
  public static final String PACKAGE_ELEMENT = "package";
  protected static Log log = LogFactory.getLog(SolutionDescriptorPersistence.class);

  private static final String ASSETS_DIR_ATTR = "assetsDir";
  private static final String RELATIVE_AS_DOC_PATH = "relativeAsDocPath";
  private static final String GITHUB_URL = "gitHubUrl";
  private static final String LOCAL_URL = "localUrl";
  private static final String GIT_TIME ="gitTime";

  public static final String JS_OPTIMIZATION_ELEMENT = "jsOptimization";

  private SolutionDescriptorPersistence() {
  }

  @CodeOrchestraPatch
  public static SolutionDescriptor loadSolutionDescriptor(final IFile file) {
    final Macros macros = MacrosFactory.solutionDescriptor();
    SolutionDescriptor descriptor;
    try {
      Document document = JDOMUtil.loadDocument(file);
      Element rootElement = document.getRootElement();
      final Element solutionElement = (Element) rootElement;

      assert solutionElement != null;

      descriptor = new _return_P0_E0<SolutionDescriptor>() {
        public SolutionDescriptor invoke() {
          final SolutionDescriptor result = new SolutionDescriptor();
          final String result_8ckma3_a0a0a0g0c0a = solutionElement.getAttributeValue("name");
          result.setNamespace(result_8ckma3_a0a0a0g0c0a);

          if (solutionElement.getAttributeValue("uuid") != null) {
            final String result_8ckma3_a0a2a0a0g0c0a = solutionElement.getAttributeValue("uuid");
            result.setUUID(result_8ckma3_a0a2a0a0g0c0a);
          }

          final boolean result_8ckma3_a4a0a0g0c0a = AttributeUtils.booleanWithDefault(solutionElement.getAttributeValue("dontLoadClasses"), false);
          result.setDontLoadClasses(result_8ckma3_a4a0a0g0c0a);
          final boolean result_8ckma3_a5a0a0g0c0a = AttributeUtils.booleanWithDefault(solutionElement.getAttributeValue("compileInMPS"), false);
          result.setCompileInMPS(result_8ckma3_a5a0a0g0c0a);

          if (StringUtils.isNotEmpty(solutionElement.getAttributeValue("generatorOutputPath"))) {
            final String result_8ckma3_a0a7a0a0g0c0a = macros.expandPath(solutionElement.getAttributeValue("generatorOutputPath"), file);
            result.setOutputPath(result_8ckma3_a0a7a0a0g0c0a);
          }

          result.getModelRoots().addAll(ModuleDescriptorPersistence.loadModelRoots(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "models")).first(), "modelRoot"), file, macros));

          if (ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "stubModelEntries")).isNotEmpty()) {
            result.getStubModelEntries().addAll(ModuleDescriptorPersistence.loadStubModelEntries(AttributeUtils.elementChildren(solutionElement, "stubModelEntries"), file, macros));
          }

          ModuleDescriptorPersistence.loadDependencies(result, solutionElement);
          for (Element entryElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "classPath")).first(), "entry")).concat(ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "runtimeClassPath")).first(), "entry")))) {
            // runtime classpath left for compatibility 
            ModelRoot entry = new ModelRoot();
            entry.setPath(macros.expandPath(entryElement.getAttributeValue("path"), file));
            entry.setManager(LanguageID.JAVA_MANAGER);
            result.getStubModelEntries().add(entry);
          }

          // RE-3369 - GitLib
          String  gitTimeUpdate = solutionElement.getAttributeValue(GIT_TIME);
          if (StringUtils.isNotEmpty(gitTimeUpdate)){
            result.setGitTimeUpdate(gitTimeUpdate);
          }
          String gitHubUrl = solutionElement.getAttributeValue(GITHUB_URL);
          if (StringUtils.isNotEmpty(gitHubUrl)){
            result.setGitHubUrl(gitHubUrl);
          }
          String localUrl = solutionElement.getAttributeValue(LOCAL_URL);
          if (StringUtils.isNotEmpty(localUrl)){
            result.setLocalUrl(localUrl);
          }

          // RE-2511 - Relative AS doc path
          String relativeAsDocPath = solutionElement.getAttributeValue(RELATIVE_AS_DOC_PATH);
          if (StringUtils.isNotEmpty(relativeAsDocPath)) {
            result.setRelativeAsDocPath(relativeAsDocPath);
          }
          // RE-1756 - Assets dir name
          String assetsDirValue = solutionElement.getAttributeValue(ASSETS_DIR_ATTR);
          if (StringUtils.isNotEmpty(assetsDirValue)) {
            result.setAssetsDirName(assetsDirValue, file);
          }

          if (SolutionUtils.isActionScriptDependent(result)) {
            // Load SWC compiler options
            if (solutionElement.getAttributeValue(CompilerSettings.OUTPUT_TYPE_INDEX) != null) {
              result.getCompilerSettings().outputTypeIndex = Integer.valueOf(solutionElement.getAttributeValue(CompilerSettings.OUTPUT_TYPE_INDEX));
            }
            if (solutionElement.getAttributeValue(CompilerSettings.USE_DEFAULT_SDK_CONFIG) == null) {
              //result.getCompilerSettings().useDefaultSDKConfiguration = false;
            } else {
              result.getCompilerSettings().useDefaultSDKConfiguration = "true".equals(solutionElement.getAttributeValue(CompilerSettings.USE_DEFAULT_SDK_CONFIG));
            }
            if (solutionElement.getAttributeValue(CompilerSettings.USE_CUSTOM_SDK_CONFIG) == null) {
              //result.getCompilerSettings().useCustomSDKConfiguration = false;
            } else {
              result.getCompilerSettings().useCustomSDKConfiguration = "true".equals(solutionElement.getAttributeValue(CompilerSettings.USE_CUSTOM_SDK_CONFIG));
            }
            if (solutionElement.getAttributeValue(CompilerSettings.CONFIGURATION_FILE) != null) {
              result.getCompilerSettings().configurationFile = solutionElement.getAttributeValue(CompilerSettings.CONFIGURATION_FILE);
            }
            if (solutionElement.getAttributeValue(CompilerSettings.MAIN_CLASS_NODE_ID) != null) {
              result.getCompilerSettings().mainClassNodeId = solutionElement.getAttributeValue(CompilerSettings.MAIN_CLASS_NODE_ID);
            }
            if (solutionElement.getAttributeValue(CompilerSettings.MAIN_CLASS_MODEL_UID) != null) {
              result.getCompilerSettings().mainClassModelUID = solutionElement.getAttributeValue(CompilerSettings.MAIN_CLASS_MODEL_UID);
            }
            if (solutionElement.getAttributeValue(CompilerSettings.OUTPUT_FILE_NAME) != null) {
              result.getCompilerSettings().outputFileName = solutionElement.getAttributeValue(CompilerSettings.OUTPUT_FILE_NAME);
            }
            if (solutionElement.getAttributeValue(CompilerSettings.INHERIT_PROJECT_OUTPUT_PATH) == null) {
              //result.getCompilerSettings().inheritProjectOutputPath = false;
            } else {
              result.getCompilerSettings().inheritProjectOutputPath = "true".equals(solutionElement.getAttributeValue(CompilerSettings.INHERIT_PROJECT_OUTPUT_PATH));
            }
            if (solutionElement.getAttributeValue(CompilerSettings.COMPILE_OUTPUT_PATH) != null) {
              result.getCompilerSettings().outputPath = solutionElement.getAttributeValue(CompilerSettings.COMPILE_OUTPUT_PATH);
            }
            if (solutionElement.getAttributeValue(CompilerSettings.PLAYER_VERSION) != null) {
              result.getCompilerSettings().playerVersion = solutionElement.getAttributeValue(CompilerSettings.PLAYER_VERSION);
            }
            if (solutionElement.getAttributeValue(CompilerSettings.USE_FRAMEWORK_AS_RSL) != null) {
              result.getCompilerSettings().useFrameworkAsRSL = "true".equals(solutionElement.getAttributeValue(CompilerSettings.USE_FRAMEWORK_AS_RSL));
            }
            if (solutionElement.getAttributeValue(CompilerSettings.CHECK_MODELS) != null) {
              result.getCompilerSettings().checkModels = "true".equals(solutionElement.getAttributeValue(CompilerSettings.CHECK_MODELS));
            }
            if (solutionElement.getAttributeValue(CompilerSettings.INCLUDE_SWC_RESOURCES) != null) {
              result.getCompilerSettings().includeResources = "true".equals(solutionElement.getAttributeValue(CompilerSettings.INCLUDE_SWC_RESOURCES));
            }
            if (solutionElement.getAttributeValue(CompilerSettings.INCLUDE_ALL_ROOTS) != null) {
              result.getCompilerSettings().setIncludeAllRoots("true".equals(solutionElement.getAttributeValue(CompilerSettings.INCLUDE_SWC_RESOURCES)));
            }
            if (solutionElement.getAttributeValue(CompilerSettings.NON_DEFAULT_LOCALE) != null) {
              result.getCompilerSettings().nonDefaultLocale = "true".equals(solutionElement.getAttributeValue(CompilerSettings.NON_DEFAULT_LOCALE));
            }
            if (solutionElement.getAttributeValue(CompilerSettings.FLEX_COMPILER_OPTIONS) != null) {
              result.getCompilerSettings().compilerOptions = solutionElement.getAttributeValue(CompilerSettings.FLEX_COMPILER_OPTIONS);
            }
            if (solutionElement.getAttributeValue(CompilerSettings.LOCALE_OPTIONS) != null) {
              result.getCompilerSettings().localeOptions = solutionElement.getAttributeValue(CompilerSettings.LOCALE_OPTIONS);
            }

            // RE-4173
            Element jsOptimizationElement = solutionElement.getChild(JS_OPTIMIZATION_ELEMENT);
            if (jsOptimizationElement != null) {
              for (Object attributeObj : jsOptimizationElement.getAttributes()) {
                Attribute attribute = (Attribute) attributeObj;

                JSOptimizationKind jsOptimizationKind = JSOptimizationKind.valueOf(attribute.getName());
                if (jsOptimizationKind != null) {
                  result.getCompilerSettings().toggleJSOptimization(jsOptimizationKind, Boolean.valueOf(attribute.getValue()));
                }
              }
            }

            // CO-4300
            Element excludedPackagesElement = solutionElement.getChild(EXCLUDE_PACKAGES_ELEMENT);
            if (excludedPackagesElement != null) {
              for (Object elementObj : excludedPackagesElement.getChildren(PACKAGE_ELEMENT)) {
                Element element = (Element) elementObj;
                result.getCompilerSettings().getExcludedPackages().add(element.getText());
              }
            }
          }

          for (Element entryElement : ListSequence.fromList(AttributeUtils.elementChildren(ListSequence.fromList(AttributeUtils.elementChildren(solutionElement, "sourcePath")).first(), "source"))) {
            result.getSourcePaths().add(macros.expandPath(entryElement.getAttributeValue("path"), file));
          }
          return result;
        }
      }.invoke();
    } catch (Exception e) {
      throw new ModuleReadException(e);
    }
    ModuleDescriptorPersistence.setTimestamp(descriptor, file);
    return descriptor;
  }

  @CodeOrchestraPatch
  public static void saveSolutionDescriptor(final IFile file, final SolutionDescriptor descriptor) {
    if (file.isReadOnly()) {
      if (log.isErrorEnabled()) {
        log.error("Can't save " + file.getPath());
      }
      return;
    }

    final Macros macros = MacrosFactory.solutionDescriptor();
    Element solElem = new _return_P0_E0<Element>() {
      public Element invoke() {
        final Element solutionElement = new Element("solution");
        if (descriptor.getNamespace() != null) {
          final String result_8ckma3_a0a0a0a0d0b = descriptor.getNamespace();
          solutionElement.setAttribute("name", "" + result_8ckma3_a0a0a0a0d0b);
        }
        if (descriptor.getUUID() != null) {
          final String result_8ckma3_a0a1a0a0d0b = descriptor.getUUID();
          solutionElement.setAttribute("uuid", "" + result_8ckma3_a0a1a0a0d0b);
        }
        if (descriptor.isDontLoadClasses()) {
          final boolean result_8ckma3_a0a2a0a0d0b = true;
          solutionElement.setAttribute("dontLoadClasses", "" + result_8ckma3_a0a2a0a0d0b);
        }
        final boolean result_8ckma3_a3a0a0d0b = descriptor.getCompileInMPS();
        solutionElement.setAttribute("compileInMPS", "" + result_8ckma3_a3a0a0d0b);
        if (descriptor.getOutputPath() != null) {
          final String result_8ckma3_a0a4a0a0d0b = macros.shrinkPath(descriptor.getOutputPath(), file);
          solutionElement.setAttribute("generatorOutputPath", "" + result_8ckma3_a0a4a0a0d0b);
        }

        final Element result_8ckma3_a6a0a0d0b = new Element("models");
        ModuleDescriptorPersistence.saveModelRoots(result_8ckma3_a6a0a0d0b, descriptor.getModelRoots(), file, macros);
        solutionElement.addContent(result_8ckma3_a6a0a0d0b);

        if (!(descriptor.getStubModelEntries().isEmpty())) {
          final Element result_8ckma3_a0a8a0a0d0b = new Element("stubModelEntries");
          ModuleDescriptorPersistence.saveStubModelEntries(result_8ckma3_a0a8a0a0d0b, descriptor.getStubModelEntries(), file, macros);
          solutionElement.addContent(result_8ckma3_a0a8a0a0d0b);
        }

        final Element result_8ckma3_a11a0a0d0b = new Element("sourcePath");
        for (String p : ListSequence.fromList(descriptor.getSourcePaths())) {
          final Element result_8ckma3_a0a0a11a0a0d0b = new Element("source");
          final String result_8ckma3_a0a0a0a11a0a0d0b = macros.shrinkPath(p, file);
          result_8ckma3_a0a0a11a0a0d0b.setAttribute("path", "" + result_8ckma3_a0a0a0a11a0a0d0b);
          result_8ckma3_a11a0a0d0b.addContent(result_8ckma3_a0a0a11a0a0d0b);
        }
        solutionElement.addContent(result_8ckma3_a11a0a0d0b);

        //RE-3369
        if (descriptor.getGitTimeUpdate() != null)
        {
           solutionElement.setAttribute(GIT_TIME,descriptor.getGitTimeUpdate());
        }
        if (descriptor.getGitHubUrl() != null)
        {
          solutionElement.setAttribute(GITHUB_URL,descriptor.getGitHubUrl());
        }
        if (descriptor.getLocalUrl() != null)
        {
          solutionElement.setAttribute(LOCAL_URL,descriptor.getLocalUrl());
        }

        // RE-2511
        if (descriptor.getRelativeAsDocPath() != null) {
          solutionElement.setAttribute(RELATIVE_AS_DOC_PATH, descriptor.getRelativeAsDocPath());
        }

        // RE-1756
        if (descriptor.getAssetsDirName() != null) {
          solutionElement.setAttribute(ASSETS_DIR_ATTR, descriptor.getAssetsDirName());
        }

        // Save compiler settings
        if (SolutionUtils.isActionScriptDependent(descriptor)) {
          //solutionElement.setAttribute(CompilerSettings.IS_LIBRARY, Boolean.valueOf(descriptor.getCompilerSettings().isLibrary).toString());
          solutionElement.setAttribute(CompilerSettings.OUTPUT_TYPE_INDEX, Integer.valueOf(descriptor.getCompilerSettings().getOutputType().getIndex()).toString());
          solutionElement.setAttribute(CompilerSettings.USE_DEFAULT_SDK_CONFIG, Boolean.valueOf(descriptor.getCompilerSettings().useDefaultSDKConfiguration).toString());
          solutionElement.setAttribute(CompilerSettings.USE_CUSTOM_SDK_CONFIG, Boolean.valueOf(descriptor.getCompilerSettings().useCustomSDKConfiguration).toString());
          if (descriptor.getCompilerSettings().configurationFile != null) {
            solutionElement.setAttribute(CompilerSettings.CONFIGURATION_FILE, descriptor.getCompilerSettings().configurationFile);
          }
          if (descriptor.getCompilerSettings().mainClassNodeId != null) {
            solutionElement.setAttribute(CompilerSettings.MAIN_CLASS_NODE_ID, descriptor.getCompilerSettings().mainClassNodeId);
          }
          if (descriptor.getCompilerSettings().mainClassModelUID != null) {
            solutionElement.setAttribute(CompilerSettings.MAIN_CLASS_MODEL_UID, descriptor.getCompilerSettings().mainClassModelUID);
          }
          if (descriptor.getCompilerSettings().outputFileName != null) {
            solutionElement.setAttribute(CompilerSettings.OUTPUT_FILE_NAME, descriptor.getCompilerSettings().outputFileName);
          }
          solutionElement.setAttribute(CompilerSettings.INHERIT_PROJECT_OUTPUT_PATH, Boolean.valueOf(descriptor.getCompilerSettings().inheritProjectOutputPath).toString());
          if (descriptor.getCompilerSettings().outputPath != null) {
            solutionElement.setAttribute(CompilerSettings.COMPILE_OUTPUT_PATH, descriptor.getCompilerSettings().outputPath);
          }
          if (descriptor.getCompilerSettings().playerVersion != null) {
            solutionElement.setAttribute(CompilerSettings.PLAYER_VERSION, descriptor.getCompilerSettings().playerVersion);
          }
          solutionElement.setAttribute(CompilerSettings.USE_FRAMEWORK_AS_RSL, Boolean.valueOf(descriptor.getCompilerSettings().useFrameworkAsRSL).toString());
          solutionElement.setAttribute(CompilerSettings.CHECK_MODELS, Boolean.valueOf(descriptor.getCompilerSettings().checkModelsBeforeGeneration()).toString());
          solutionElement.setAttribute(CompilerSettings.DELETE_UNUSED_MEMBERS, Boolean.valueOf(descriptor.getCompilerSettings().deleteUnusedMembersOnGeneration()).toString());
          solutionElement.setAttribute(CompilerSettings.DELETE_WHITESPACE, Boolean.valueOf(descriptor.getCompilerSettings().deleteWhitespaceOnGeneration()).toString());
          solutionElement.setAttribute(CompilerSettings.INCLUDE_ALL_ROOTS, Boolean.valueOf(descriptor.getCompilerSettings().includeAllRoots()).toString());
          solutionElement.setAttribute(CompilerSettings.INCLUDE_SWC_RESOURCES, Boolean.valueOf(descriptor.getCompilerSettings().includeResources).toString());
          if (descriptor.getCompilerSettings().compilerOptions != null) {
            solutionElement.setAttribute(CompilerSettings.FLEX_COMPILER_OPTIONS, descriptor.getCompilerSettings().compilerOptions);
          }
          if (descriptor.getCompilerSettings().localeOptions != null) {
            solutionElement.setAttribute(CompilerSettings.LOCALE_OPTIONS, descriptor.getCompilerSettings().localeOptions);
          }

          // RE-4173
          // JS Optimizations
          if (descriptor.getCompilerSettings().getOutputType().isHTML5()) {
            Element jsOptimizationElement = new Element(JS_OPTIMIZATION_ELEMENT);
            for (JSOptimizationKind jsOptimizationKind : JSOptimizationKind.values()) {
              boolean jsOptimizationOn = descriptor.getCompilerSettings().isJSOptimizationOn(jsOptimizationKind);
              jsOptimizationElement.setAttribute(jsOptimizationKind.name(), Boolean.valueOf(jsOptimizationOn).toString());
            }
            solutionElement.addContent(jsOptimizationElement);
          }

          // CO-4300
          if (!descriptor.getCompilerSettings().getExcludedPackages().isEmpty()) {
            Element excludedPackagesElement = new Element(EXCLUDE_PACKAGES_ELEMENT);
            for (String excludedPackage : descriptor.getCompilerSettings().getExcludedPackages()) {
              Element packageElement = new Element(PACKAGE_ELEMENT);
              packageElement.setText(excludedPackage);
              excludedPackagesElement.addContent(packageElement);
            }
            solutionElement.addContent(excludedPackagesElement);
          }
        }

        ModuleDescriptorPersistence.saveDependencies(solutionElement, descriptor);
        return solutionElement;
      }
    }.invoke();

    try {
      OutputStream os = file.openOutputStream();
      JDOMUtil.writeDocument(new Document(solElem), os);
    } catch (Exception e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    }

    ModuleDescriptorPersistence.setTimestamp(descriptor, file);
  }
}
