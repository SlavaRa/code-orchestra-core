package jetbrains.mps.make.script.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class JobDeclaration extends BaseConcept {
  public static final String concept = "jetbrains.mps.make.script.structure.JobDeclaration";
  public static final String CONFIG = "config";
  public static final String JOB = "job";
  public static final String QUERY = "query";

  public JobDeclaration(SNode node) {
    super(node);
  }

  public ConfigDefinition getConfig() {
    return (ConfigDefinition) this.getChild(ConfigDefinition.class, JobDeclaration.CONFIG);
  }

  public void setConfig(ConfigDefinition node) {
    super.setChild(JobDeclaration.CONFIG, node);
  }

  public JobDefinition getJob() {
    return (JobDefinition) this.getChild(JobDefinition.class, JobDeclaration.JOB);
  }

  public void setJob(JobDefinition node) {
    super.setChild(JobDeclaration.JOB, node);
  }

  public int getQueriesCount() {
    return this.getChildCount(JobDeclaration.QUERY);
  }

  public Iterator<QueryDefinition> queries() {
    return this.children(QueryDefinition.class, JobDeclaration.QUERY);
  }

  public List<QueryDefinition> getQueries() {
    return this.getChildren(QueryDefinition.class, JobDeclaration.QUERY);
  }

  public void addQuery(QueryDefinition node) {
    this.addChild(JobDeclaration.QUERY, node);
  }

  public void insertQuery(QueryDefinition prev, QueryDefinition node) {
    this.insertChild(prev, JobDeclaration.QUERY, node);
  }

  public static JobDeclaration newInstance(SModel sm, boolean init) {
    return (JobDeclaration) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.make.script.structure.JobDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static JobDeclaration newInstance(SModel sm) {
    return JobDeclaration.newInstance(sm, false);
  }
}
