package jetbrains.mps.lang.intentions.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.lang.plugin.structure.ICheckedNamePolicy;
import jetbrains.mps.lang.structure.structure.IConceptAspect;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BaseIntentionDeclaration extends BaseConcept implements INamedConcept, ICheckedNamePolicy, IConceptAspect {
  public static final String concept = "jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String IS_ERROR_INTENTION = "isErrorIntention";
  public static final String IS_AVAILABLE_IN_CHILD_NODES = "isAvailableInChildNodes";
  public static final String FOR_CONCEPT = "forConcept";
  public static final String DESCRIPTION_FUNCTION = "descriptionFunction";
  public static final String CHILD_FILTER_FUNCTION = "childFilterFunction";
  public static final String IS_APPLICABLE_FUNCTION = "isApplicableFunction";
  public static final String EXECUTE_FUNCTION = "executeFunction";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public BaseIntentionDeclaration(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(BaseIntentionDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(BaseIntentionDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(BaseIntentionDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BaseIntentionDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BaseIntentionDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BaseIntentionDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BaseIntentionDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BaseIntentionDeclaration.VIRTUAL_PACKAGE, value);
  }

  public boolean getIsErrorIntention() {
    return this.getBooleanProperty(BaseIntentionDeclaration.IS_ERROR_INTENTION);
  }

  public void setIsErrorIntention(boolean value) {
    this.setBooleanProperty(BaseIntentionDeclaration.IS_ERROR_INTENTION, value);
  }

  public boolean getIsAvailableInChildNodes() {
    return this.getBooleanProperty(BaseIntentionDeclaration.IS_AVAILABLE_IN_CHILD_NODES);
  }

  public void setIsAvailableInChildNodes(boolean value) {
    this.setBooleanProperty(BaseIntentionDeclaration.IS_AVAILABLE_IN_CHILD_NODES, value);
  }

  public AbstractConceptDeclaration getForConcept() {
    return (AbstractConceptDeclaration) this.getReferent(AbstractConceptDeclaration.class, BaseIntentionDeclaration.FOR_CONCEPT);
  }

  public void setForConcept(AbstractConceptDeclaration node) {
    super.setReferent(BaseIntentionDeclaration.FOR_CONCEPT, node);
  }

  public DescriptionBlock getDescriptionFunction() {
    return (DescriptionBlock) this.getChild(DescriptionBlock.class, BaseIntentionDeclaration.DESCRIPTION_FUNCTION);
  }

  public void setDescriptionFunction(DescriptionBlock node) {
    super.setChild(BaseIntentionDeclaration.DESCRIPTION_FUNCTION, node);
  }

  public ChildFilterBlock getChildFilterFunction() {
    return (ChildFilterBlock) this.getChild(ChildFilterBlock.class, BaseIntentionDeclaration.CHILD_FILTER_FUNCTION);
  }

  public void setChildFilterFunction(ChildFilterBlock node) {
    super.setChild(BaseIntentionDeclaration.CHILD_FILTER_FUNCTION, node);
  }

  public IsApplicableBlock getIsApplicableFunction() {
    return (IsApplicableBlock) this.getChild(IsApplicableBlock.class, BaseIntentionDeclaration.IS_APPLICABLE_FUNCTION);
  }

  public void setIsApplicableFunction(IsApplicableBlock node) {
    super.setChild(BaseIntentionDeclaration.IS_APPLICABLE_FUNCTION, node);
  }

  public ExecuteBlock getExecuteFunction() {
    return (ExecuteBlock) this.getChild(ExecuteBlock.class, BaseIntentionDeclaration.EXECUTE_FUNCTION);
  }

  public void setExecuteFunction(ExecuteBlock node) {
    super.setChild(BaseIntentionDeclaration.EXECUTE_FUNCTION, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(BaseIntentionDeclaration.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, BaseIntentionDeclaration.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, BaseIntentionDeclaration.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(BaseIntentionDeclaration.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, BaseIntentionDeclaration.SMODEL_ATTRIBUTE, node);
  }

  public static BaseIntentionDeclaration newInstance(SModel sm, boolean init) {
    return (BaseIntentionDeclaration) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BaseIntentionDeclaration newInstance(SModel sm) {
    return BaseIntentionDeclaration.newInstance(sm, false);
  }
}
