package jetbrains.mps.lang.intentions.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.ChildSubstituteActionsHelper;

public class QueriesGenerated {
  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1240404186104(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      Calculable calc = new Calculable() {
        public Object calculate() {
          List<SNode> parameters = ListSequence.fromList(new ArrayList<SNode>());
          boolean inParInt = SNodeOperations.getAncestor(_context.getParentNode(), "jetbrains.mps.lang.intentions.structure.ParameterizedIntentionDeclaration", false, false) != null;
          boolean notInApplicable = SNodeOperations.getAncestor(_context.getParentNode(), "jetbrains.mps.lang.intentions.structure.IsApplicableBlock", false, false) == null;
          if (inParInt && notInApplicable) {
            ListSequence.fromList(parameters).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.intentions.structure.IntentionParameter"));
          }
          return parameters;
        }
      };
      Iterable queryResult = (Iterable) calc.calculate();
      if (queryResult != null) {
        for (Object item : queryResult) {
          List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions((SNode) item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext);
          ListSequence.fromList(result).addSequence(ListSequence.fromList(defaultActions));
        }
      }
    }
    return result;
  }
}
