package jetbrains.mps.lang.refactoring.plugin;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.refactoring.framework.OldRefactoringAdapter;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.DataKey;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.IModule;
import jetbrains.mps.refactoring.framework.RefactoringUtil;

public class GenericRefactoringHelper {
  public static String getRefactoringClassName(IRefactoring refactoring) {
    if (refactoring instanceof OldRefactoringAdapter) {
      return ((OldRefactoringAdapter) refactoring).getRefactoringClassName();
    } else {
      return refactoring.getClass().getName();
    }
  }

  @NotNull
  private static <T> List<T> getEntities(AnActionEvent e, boolean oneEntity, DataKey<T> keySingle, DataKey<List<T>> keyList) {
    T single = e.getData(keySingle);
    List<T> list = e.getData(keyList);
    List<T> res = new ArrayList<T>((list == null ?
      1 :
      list.size() + 1
    ));
    if (list != null) {
      res.addAll(list);
    }
    if (single != null && !(res.contains(single))) {
      res.add(single);
    }
    if (oneEntity && res.size() > 1) {
      res.clear();
    }
    return res;
  }

  @NotNull
  public static List<SNode> getNodes(AnActionEvent e, boolean oneEntity) {
    return getEntities(e, oneEntity, MPSDataKeys.NODE, MPSDataKeys.NODES);
  }

  @NotNull
  public static List<SModelDescriptor> getModels(AnActionEvent e, boolean oneEntity) {
    return getEntities(e, oneEntity, MPSDataKeys.CONTEXT_MODEL, MPSDataKeys.MODELS);
  }

  @NotNull
  public static List<IModule> getModules(AnActionEvent e, boolean oneEntity) {
    return getEntities(e, oneEntity, MPSDataKeys.MODULE, MPSDataKeys.MODULES);
  }

  @NotNull
  public static List getAny(AnActionEvent e, boolean oneEntity) {

    List nodeList = getNodes(e, oneEntity);
    List modelList = getModels(e, oneEntity);
    List moduleList = getModules(e, oneEntity);

    if (!nodeList.isEmpty()) {
      return nodeList;
    }
    if (!modelList.isEmpty()) {
      return modelList;
    }
    if (!moduleList.isEmpty()) {
      return moduleList;
    }

    return new ArrayList();
  }

  public static RefactoringUtil.Applicability getMinApplicabilityLevel() {
    return RefactoringUtil.Applicability.APPLICABLE;
  }
}
