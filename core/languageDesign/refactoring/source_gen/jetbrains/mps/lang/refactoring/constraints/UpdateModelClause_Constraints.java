package jetbrains.mps.lang.refactoring.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.smodel.constraints.CanBeAnAncestorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class UpdateModelClause_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer canBeAncesctorBreakingPoint = new SNodePointer("r:00000000-0000-4000-0000-011c89590313(jetbrains.mps.lang.refactoring.constraints)", "2210862369564128647");

  public UpdateModelClause_Constraints() {
    super("jetbrains.mps.lang.refactoring.structure.UpdateModelClause");
  }

  @Override
  public boolean hasOwnCanBeAncestorMethod() {
    return true;
  }

  @Override
  public boolean canBeAncestor(IOperationContext context, SNode node, SNode node1, @Nullable CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAnAncestor(context, new CanBeAnAncestorContext(node, node1));

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeAncesctorBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAnAncestor(final IOperationContext operationContext, final CanBeAnAncestorContext _context) {
    return SConceptOperations.isExactly(_context.getChildConcept(), "jetbrains.mps.baseLanguage.structure.StatementList") || SConceptOperations.isExactly(_context.getChildConcept(), "jetbrains.mps.lang.refactoring.structure.UpdateModelByDefaultOperation");
  }
}
