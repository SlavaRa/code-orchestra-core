package jetbrains.mps.lang.refactoring.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseKeymapChanges;
import com.intellij.openapi.actionSystem.Shortcut;
import com.intellij.openapi.actionSystem.KeyboardShortcut;
import javax.swing.KeyStroke;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.refactoring.framework.IRefactoring;
import org.apache.commons.lang.StringUtils;

public class Default_KeymapChanges extends BaseKeymapChanges {
  public Default_KeymapChanges() {
    // simple 
    // simple parameterized 
    // complex 
    addComplexShortcut("jetbrains.mps.lang.refactoring.plugin.GenericRefactoringAction_Action", new Default_KeymapChanges.GenericRefactoringAction_ShortcutChange_qjewi8_a());
  }

  public String getScheme() {
    return "$default";
  }

  public static Shortcut getShortcut(String stroke) {
    return new KeyboardShortcut(KeyStroke.getKeyStroke(stroke), null);
  }

  public class GenericRefactoringAction_ShortcutChange_qjewi8_a extends BaseKeymapChanges.ComplexShortcut {
    public GenericRefactoringAction_ShortcutChange_qjewi8_a() {
    }

    public List<Shortcut> getShortcutsFor(Object... objects) {
      List<Shortcut> _result = new ArrayList<Shortcut>();
      {
        String keyStroke = ((IRefactoring) objects[0]).getKeyStroke();
        if (StringUtils.isNotEmpty(keyStroke)) {
          _result.add(new KeyboardShortcut(KeyStroke.getKeyStroke(keyStroke), null));
        }
      }
      return _result;
    }
  }
}
