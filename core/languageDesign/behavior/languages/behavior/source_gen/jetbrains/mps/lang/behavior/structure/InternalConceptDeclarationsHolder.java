package jetbrains.mps.lang.behavior.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class InternalConceptDeclarationsHolder extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.lang.behavior.structure.InternalConceptDeclarationsHolder";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String CONCEPT = "concept";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public InternalConceptDeclarationsHolder(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(InternalConceptDeclarationsHolder.NAME);
  }

  public void setName(String value) {
    this.setProperty(InternalConceptDeclarationsHolder.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(InternalConceptDeclarationsHolder.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(InternalConceptDeclarationsHolder.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(InternalConceptDeclarationsHolder.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(InternalConceptDeclarationsHolder.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(InternalConceptDeclarationsHolder.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(InternalConceptDeclarationsHolder.VIRTUAL_PACKAGE, value);
  }

  public int getConceptsCount() {
    return this.getChildCount(InternalConceptDeclarationsHolder.CONCEPT);
  }

  public Iterator<InternalConceptDeclarationReference> concepts() {
    return this.children(InternalConceptDeclarationReference.class, InternalConceptDeclarationsHolder.CONCEPT);
  }

  public List<InternalConceptDeclarationReference> getConcepts() {
    return this.getChildren(InternalConceptDeclarationReference.class, InternalConceptDeclarationsHolder.CONCEPT);
  }

  public void addConcept(InternalConceptDeclarationReference node) {
    this.addChild(InternalConceptDeclarationsHolder.CONCEPT, node);
  }

  public void insertConcept(InternalConceptDeclarationReference prev, InternalConceptDeclarationReference node) {
    this.insertChild(prev, InternalConceptDeclarationsHolder.CONCEPT, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(InternalConceptDeclarationsHolder.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, InternalConceptDeclarationsHolder.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, InternalConceptDeclarationsHolder.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(InternalConceptDeclarationsHolder.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, InternalConceptDeclarationsHolder.SMODEL_ATTRIBUTE, node);
  }

  public static InternalConceptDeclarationsHolder newInstance(SModel sm, boolean init) {
    return (InternalConceptDeclarationsHolder) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.behavior.structure.InternalConceptDeclarationsHolder", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static InternalConceptDeclarationsHolder newInstance(SModel sm) {
    return InternalConceptDeclarationsHolder.newInstance(sm, false);
  }
}
