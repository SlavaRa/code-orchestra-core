package jetbrains.mps.lang.behavior.editor;

/*Generated by MPS */

import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuComponent;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPart;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_Generic_Group;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.nodeEditor.EditorContext;

public class ConceptMethodDeclaration_Menu extends AbstractCellMenuComponent {
  public ConceptMethodDeclaration_Menu() {
    super(new SubstituteInfoPart[]{new ConceptMethodDeclaration_Menu.ConceptMethodDeclaration_generic_cellMenu_a0()});
  }

  public static class ConceptMethodDeclaration_generic_cellMenu_a0 extends AbstractCellMenuPart_Generic_Group {
    public ConceptMethodDeclaration_generic_cellMenu_a0() {
    }

    public List<?> createParameterObjects(SNode node, IScope scope, IOperationContext operationContext) {
      return AbstractConceptDeclaration_Behavior.call_getVirtualConceptMethods_1213877394290(SLinkOperations.getTarget(SNodeOperations.getAncestor(node, "jetbrains.mps.lang.behavior.structure.ConceptBehavior", false, false), "concept", false), scope);
    }

    protected void handleAction(Object parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext, EditorContext editorContext) {
      this.handleAction_impl((SNode) parameterObject, node, model, scope, operationContext, editorContext);
    }

    public void handleAction_impl(SNode parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext, EditorContext editorContext) {
      SLinkOperations.setTarget(node, "overriddenMethod", parameterObject, false);
      SLinkOperations.setTarget(node, "visibility", SNodeOperations.copyNode(SLinkOperations.getTarget(parameterObject, "visibility", true)), true);
    }

    public boolean isReferentPresentation() {
      return false;
    }
  }
}
