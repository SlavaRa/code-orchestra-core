package jetbrains.mps.lang.constraints.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;

public class BehaviorAspectDescriptor implements jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor {
  private static String[] stringSwitchCases_846f5o_a0a0a = new String[]{"jetbrains.mps.lang.constraints.structure.ConceptConstraints", "jetbrains.mps.lang.constraints.structure.ConceptParameter_ReferentSearchScope_enclosingNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_checkedNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childConcept", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_inEditor", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_link", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_linkTarget", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_newReferentNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_oldReferentNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parameterNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parentNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_referenceNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_smartReference", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_visible", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAChild", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAParent", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeARoot", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAnAncestor", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_GetAlternativeIcon", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyGetter", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertySetter", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyValidator", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_RefSetHandlerKeepsReference", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Factory", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Presentation", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Validator", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSetHandler", "jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_node", "jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_propertyValue", "jetbrains.mps.lang.constraints.structure.NodeDefaultSearchScope", "jetbrains.mps.lang.constraints.structure.NodePropertyConstraint", "jetbrains.mps.lang.constraints.structure.NodeReferentConstraint"};

  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {
      case 30:
        return new NodePropertyConstraint_BehaviorDescriptor();
      case 19:
        return new ConstraintFunction_PropertyGetter_BehaviorDescriptor();
      case 27:
        return new ConstraintsFunctionParameter_node_BehaviorDescriptor();
      case 23:
        return new ConstraintFunction_ReferentSearchScope_Factory_BehaviorDescriptor();
      case 31:
        return new NodeReferentConstraint_BehaviorDescriptor();
      case 1:
        return new ConceptParameter_ReferentSearchScope_enclosingNode_BehaviorDescriptor();
      case 20:
        return new ConstraintFunction_PropertySetter_BehaviorDescriptor();
      case 29:
        return new NodeDefaultSearchScope_BehaviorDescriptor();
      case 26:
        return new ConstraintFunction_ReferentSetHandler_BehaviorDescriptor();
      case 11:
        return new ConstraintFunctionParameter_referenceNode_BehaviorDescriptor();
      case 7:
        return new ConstraintFunctionParameter_newReferentNode_BehaviorDescriptor();
      case 8:
        return new ConstraintFunctionParameter_oldReferentNode_BehaviorDescriptor();
      case 14:
        return new ConstraintFunction_CanBeAChild_BehaviorDescriptor();
      case 10:
        return new ConstraintFunctionParameter_parentNode_BehaviorDescriptor();
      case 15:
        return new ConstraintFunction_CanBeAParent_BehaviorDescriptor();
      case 3:
        return new ConstraintFunctionParameter_childConcept_BehaviorDescriptor();
      case 5:
        return new ConstraintFunctionParameter_link_BehaviorDescriptor();
      case 6:
        return new ConstraintFunctionParameter_linkTarget_BehaviorDescriptor();
      case 28:
        return new ConstraintsFunctionParameter_propertyValue_BehaviorDescriptor();
      case 21:
        return new ConstraintFunction_PropertyValidator_BehaviorDescriptor();
      case 0:
        return new ConceptConstraints_BehaviorDescriptor();
      case 16:
        return new ConstraintFunction_CanBeARoot_BehaviorDescriptor();
      case 9:
        return new ConstraintFunctionParameter_parameterNode_BehaviorDescriptor();
      case 24:
        return new ConstraintFunction_ReferentSearchScope_Presentation_BehaviorDescriptor();
      case 13:
        return new ConstraintFunctionParameter_visible_BehaviorDescriptor();
      case 12:
        return new ConstraintFunctionParameter_smartReference_BehaviorDescriptor();
      case 4:
        return new ConstraintFunctionParameter_inEditor_BehaviorDescriptor();
      case 18:
        return new ConstraintFunction_GetAlternativeIcon_BehaviorDescriptor();
      case 17:
        return new ConstraintFunction_CanBeAnAncestor_BehaviorDescriptor();
      case 25:
        return new ConstraintFunction_ReferentSearchScope_Validator_BehaviorDescriptor();
      case 2:
        return new ConstraintFunctionParameter_checkedNode_BehaviorDescriptor();
      case 22:
        return new ConstraintFunction_RefSetHandlerKeepsReference_BehaviorDescriptor();
      default:
        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
    }
  }
}
