package jetbrains.mps.lang.project.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Generator extends Module {
  public static final String concept = "jetbrains.mps.lang.project.structure.Generator";
  public static final String GENERATOR_U_I_D = "generatorUID";
  public static final String GENERATE_TEMPLATES = "generateTemplates";
  public static final String PRIORITY_RULES = "priorityRules";
  public static final String DEP_GENERATORS = "depGenerators";

  public Generator(SNode node) {
    super(node);
  }

  public String getGeneratorUID() {
    return this.getProperty(Generator.GENERATOR_U_I_D);
  }

  public void setGeneratorUID(String value) {
    this.setProperty(Generator.GENERATOR_U_I_D, value);
  }

  public boolean getGenerateTemplates() {
    return this.getBooleanProperty(Generator.GENERATE_TEMPLATES);
  }

  public void setGenerateTemplates(boolean value) {
    this.setBooleanProperty(Generator.GENERATE_TEMPLATES, value);
  }

  public int getPriorityRulesesCount() {
    return this.getChildCount(Generator.PRIORITY_RULES);
  }

  public Iterator<MappingPriorityRule> priorityRuleses() {
    return this.children(MappingPriorityRule.class, Generator.PRIORITY_RULES);
  }

  public List<MappingPriorityRule> getPriorityRuleses() {
    return this.getChildren(MappingPriorityRule.class, Generator.PRIORITY_RULES);
  }

  public void addPriorityRules(MappingPriorityRule node) {
    this.addChild(Generator.PRIORITY_RULES, node);
  }

  public void insertPriorityRules(MappingPriorityRule prev, MappingPriorityRule node) {
    this.insertChild(prev, Generator.PRIORITY_RULES, node);
  }

  public int getDepGeneratorsesCount() {
    return this.getChildCount(Generator.DEP_GENERATORS);
  }

  public Iterator<ModuleReference> depGeneratorses() {
    return this.children(ModuleReference.class, Generator.DEP_GENERATORS);
  }

  public List<ModuleReference> getDepGeneratorses() {
    return this.getChildren(ModuleReference.class, Generator.DEP_GENERATORS);
  }

  public void addDepGenerators(ModuleReference node) {
    this.addChild(Generator.DEP_GENERATORS, node);
  }

  public void insertDepGenerators(ModuleReference prev, ModuleReference node) {
    this.insertChild(prev, Generator.DEP_GENERATORS, node);
  }

  public static Generator newInstance(SModel sm, boolean init) {
    return (Generator) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.project.structure.Generator", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Generator newInstance(SModel sm) {
    return Generator.newInstance(sm, false);
  }
}
