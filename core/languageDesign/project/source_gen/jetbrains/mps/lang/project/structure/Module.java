package jetbrains.mps.lang.project.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Module extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.lang.project.structure.Module";
  public static final String UUID = "uuid";
  public static final String NAMESPACE = "namespace";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String COMPILE_IN_M_P_S = "compileInMPS";
  public static final String ENABLE_JAVA_STUBS = "enableJavaStubs";
  public static final String MODEL = "model";
  public static final String MODEL_ROOTS = "modelRoots";
  public static final String DEPENDENCIES = "dependencies";
  public static final String USED_LANGUAGES = "usedLanguages";
  public static final String USED_DEVKITS = "usedDevkits";
  public static final String STUB_MODELS = "stubModels";
  public static final String SOURCE_PATHS = "sourcePaths";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Module(SNode node) {
    super(node);
  }

  public String getUuid() {
    return this.getProperty(Module.UUID);
  }

  public void setUuid(String value) {
    this.setProperty(Module.UUID, value);
  }

  public String getNamespace() {
    return this.getProperty(Module.NAMESPACE);
  }

  public void setNamespace(String value) {
    this.setProperty(Module.NAMESPACE, value);
  }

  public String getName() {
    return this.getProperty(Module.NAME);
  }

  public void setName(String value) {
    this.setProperty(Module.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Module.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Module.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Module.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Module.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Module.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Module.VIRTUAL_PACKAGE, value);
  }

  public boolean getCompileInMPS() {
    return this.getBooleanProperty(Module.COMPILE_IN_M_P_S);
  }

  public void setCompileInMPS(boolean value) {
    this.setBooleanProperty(Module.COMPILE_IN_M_P_S, value);
  }

  public boolean getEnableJavaStubs() {
    return this.getBooleanProperty(Module.ENABLE_JAVA_STUBS);
  }

  public void setEnableJavaStubs(boolean value) {
    this.setBooleanProperty(Module.ENABLE_JAVA_STUBS, value);
  }

  public int getModelsCount() {
    return this.getChildCount(Module.MODEL);
  }

  public Iterator<ModelReference> models() {
    return this.children(ModelReference.class, Module.MODEL);
  }

  public List<ModelReference> getModels() {
    return this.getChildren(ModelReference.class, Module.MODEL);
  }

  public void addModel(ModelReference node) {
    this.addChild(Module.MODEL, node);
  }

  public void insertModel(ModelReference prev, ModelReference node) {
    this.insertChild(prev, Module.MODEL, node);
  }

  public int getModelRootsesCount() {
    return this.getChildCount(Module.MODEL_ROOTS);
  }

  public Iterator<ModelRoot> modelRootses() {
    return this.children(ModelRoot.class, Module.MODEL_ROOTS);
  }

  public List<ModelRoot> getModelRootses() {
    return this.getChildren(ModelRoot.class, Module.MODEL_ROOTS);
  }

  public void addModelRoots(ModelRoot node) {
    this.addChild(Module.MODEL_ROOTS, node);
  }

  public void insertModelRoots(ModelRoot prev, ModelRoot node) {
    this.insertChild(prev, Module.MODEL_ROOTS, node);
  }

  public int getDependenciesesCount() {
    return this.getChildCount(Module.DEPENDENCIES);
  }

  public Iterator<ModuleDependency> dependencieses() {
    return this.children(ModuleDependency.class, Module.DEPENDENCIES);
  }

  public List<ModuleDependency> getDependencieses() {
    return this.getChildren(ModuleDependency.class, Module.DEPENDENCIES);
  }

  public void addDependencies(ModuleDependency node) {
    this.addChild(Module.DEPENDENCIES, node);
  }

  public void insertDependencies(ModuleDependency prev, ModuleDependency node) {
    this.insertChild(prev, Module.DEPENDENCIES, node);
  }

  public int getUsedLanguagesesCount() {
    return this.getChildCount(Module.USED_LANGUAGES);
  }

  public Iterator<ModuleReference> usedLanguageses() {
    return this.children(ModuleReference.class, Module.USED_LANGUAGES);
  }

  public List<ModuleReference> getUsedLanguageses() {
    return this.getChildren(ModuleReference.class, Module.USED_LANGUAGES);
  }

  public void addUsedLanguages(ModuleReference node) {
    this.addChild(Module.USED_LANGUAGES, node);
  }

  public void insertUsedLanguages(ModuleReference prev, ModuleReference node) {
    this.insertChild(prev, Module.USED_LANGUAGES, node);
  }

  public int getUsedDevkitsesCount() {
    return this.getChildCount(Module.USED_DEVKITS);
  }

  public Iterator<ModuleReference> usedDevkitses() {
    return this.children(ModuleReference.class, Module.USED_DEVKITS);
  }

  public List<ModuleReference> getUsedDevkitses() {
    return this.getChildren(ModuleReference.class, Module.USED_DEVKITS);
  }

  public void addUsedDevkits(ModuleReference node) {
    this.addChild(Module.USED_DEVKITS, node);
  }

  public void insertUsedDevkits(ModuleReference prev, ModuleReference node) {
    this.insertChild(prev, Module.USED_DEVKITS, node);
  }

  public int getStubModelsesCount() {
    return this.getChildCount(Module.STUB_MODELS);
  }

  public Iterator<StubEntry> stubModelses() {
    return this.children(StubEntry.class, Module.STUB_MODELS);
  }

  public List<StubEntry> getStubModelses() {
    return this.getChildren(StubEntry.class, Module.STUB_MODELS);
  }

  public void addStubModels(StubEntry node) {
    this.addChild(Module.STUB_MODELS, node);
  }

  public void insertStubModels(StubEntry prev, StubEntry node) {
    this.insertChild(prev, Module.STUB_MODELS, node);
  }

  public int getSourcePathsesCount() {
    return this.getChildCount(Module.SOURCE_PATHS);
  }

  public Iterator<SourcePath> sourcePathses() {
    return this.children(SourcePath.class, Module.SOURCE_PATHS);
  }

  public List<SourcePath> getSourcePathses() {
    return this.getChildren(SourcePath.class, Module.SOURCE_PATHS);
  }

  public void addSourcePaths(SourcePath node) {
    this.addChild(Module.SOURCE_PATHS, node);
  }

  public void insertSourcePaths(SourcePath prev, SourcePath node) {
    this.insertChild(prev, Module.SOURCE_PATHS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Module.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Module.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Module.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Module.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Module.SMODEL_ATTRIBUTE, node);
  }

  public static Module newInstance(SModel sm, boolean init) {
    return (Module) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.project.structure.Module", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Module newInstance(SModel sm) {
    return Module.newInstance(sm, false);
  }
}
