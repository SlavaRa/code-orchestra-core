package jetbrains.mps.lang.project.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DevKit extends Module {
  public static final String concept = "jetbrains.mps.lang.project.structure.DevKit";
  public static final String PLUGIN = "plugin";
  public static final String DEVKIT_PATH = "devkitPath";
  public static final String EXPORTED_LANGUAGES = "exportedLanguages";
  public static final String EXPORTED_SOLUTIONS = "exportedSolutions";
  public static final String EXTENDED_DEVKITS = "extendedDevkits";

  public DevKit(SNode node) {
    super(node);
  }

  public String getPlugin() {
    return this.getProperty(DevKit.PLUGIN);
  }

  public void setPlugin(String value) {
    this.setProperty(DevKit.PLUGIN, value);
  }

  public String getDevkitPath() {
    return this.getProperty(DevKit.DEVKIT_PATH);
  }

  public void setDevkitPath(String value) {
    this.setProperty(DevKit.DEVKIT_PATH, value);
  }

  public int getExportedLanguagesesCount() {
    return this.getChildCount(DevKit.EXPORTED_LANGUAGES);
  }

  public Iterator<ModuleReference> exportedLanguageses() {
    return this.children(ModuleReference.class, DevKit.EXPORTED_LANGUAGES);
  }

  public List<ModuleReference> getExportedLanguageses() {
    return this.getChildren(ModuleReference.class, DevKit.EXPORTED_LANGUAGES);
  }

  public void addExportedLanguages(ModuleReference node) {
    this.addChild(DevKit.EXPORTED_LANGUAGES, node);
  }

  public void insertExportedLanguages(ModuleReference prev, ModuleReference node) {
    this.insertChild(prev, DevKit.EXPORTED_LANGUAGES, node);
  }

  public int getExportedSolutionsesCount() {
    return this.getChildCount(DevKit.EXPORTED_SOLUTIONS);
  }

  public Iterator<ModuleReference> exportedSolutionses() {
    return this.children(ModuleReference.class, DevKit.EXPORTED_SOLUTIONS);
  }

  public List<ModuleReference> getExportedSolutionses() {
    return this.getChildren(ModuleReference.class, DevKit.EXPORTED_SOLUTIONS);
  }

  public void addExportedSolutions(ModuleReference node) {
    this.addChild(DevKit.EXPORTED_SOLUTIONS, node);
  }

  public void insertExportedSolutions(ModuleReference prev, ModuleReference node) {
    this.insertChild(prev, DevKit.EXPORTED_SOLUTIONS, node);
  }

  public int getExtendedDevkitsesCount() {
    return this.getChildCount(DevKit.EXTENDED_DEVKITS);
  }

  public Iterator<ModuleReference> extendedDevkitses() {
    return this.children(ModuleReference.class, DevKit.EXTENDED_DEVKITS);
  }

  public List<ModuleReference> getExtendedDevkitses() {
    return this.getChildren(ModuleReference.class, DevKit.EXTENDED_DEVKITS);
  }

  public void addExtendedDevkits(ModuleReference node) {
    this.addChild(DevKit.EXTENDED_DEVKITS, node);
  }

  public void insertExtendedDevkits(ModuleReference prev, ModuleReference node) {
    this.insertChild(prev, DevKit.EXTENDED_DEVKITS, node);
  }

  public static DevKit newInstance(SModel sm, boolean init) {
    return (DevKit) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.project.structure.DevKit", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DevKit newInstance(SModel sm) {
    return DevKit.newInstance(sm, false);
  }
}
