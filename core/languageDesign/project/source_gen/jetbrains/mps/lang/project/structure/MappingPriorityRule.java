package jetbrains.mps.lang.project.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MappingPriorityRule extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.project.structure.MappingPriorityRule";
  public static final String TYPE = "type";
  public static final String LEFT = "left";
  public static final String RIGHT = "right";

  public MappingPriorityRule(SNode node) {
    super(node);
  }

  public RuleType getType() {
    String value = super.getProperty(MappingPriorityRule.TYPE);
    return RuleType.parseValue(value);
  }

  public void setType(RuleType value) {
    super.setProperty(MappingPriorityRule.TYPE, value.getValueAsString());
  }

  public MappingConfigRefBase getLeft() {
    return (MappingConfigRefBase) this.getChild(MappingConfigRefBase.class, MappingPriorityRule.LEFT);
  }

  public void setLeft(MappingConfigRefBase node) {
    super.setChild(MappingPriorityRule.LEFT, node);
  }

  public MappingConfigRefBase getRight() {
    return (MappingConfigRefBase) this.getChild(MappingConfigRefBase.class, MappingPriorityRule.RIGHT);
  }

  public void setRight(MappingConfigRefBase node) {
    super.setChild(MappingPriorityRule.RIGHT, node);
  }

  public static MappingPriorityRule newInstance(SModel sm, boolean init) {
    return (MappingPriorityRule) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.project.structure.MappingPriorityRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MappingPriorityRule newInstance(SModel sm) {
    return MappingPriorityRule.newInstance(sm, false);
  }
}
