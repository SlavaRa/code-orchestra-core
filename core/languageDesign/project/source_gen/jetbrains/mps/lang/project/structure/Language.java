package jetbrains.mps.lang.project.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Language extends Module {
  public static final String concept = "jetbrains.mps.lang.project.structure.Language";
  public static final String GEN_PATH = "genPath";
  public static final String LANGUAGE_PATH = "languagePath";
  public static final String DO_NOT_GENERATE_ADAPTERS = "doNotGenerateAdapters";
  public static final String GENERATOR = "generator";
  public static final String ACCESSORY_MODELS = "accessoryModels";
  public static final String EXTENDED_LANGUAGES = "extendedLanguages";
  public static final String RUNTIME_MODULES = "runtimeModules";
  public static final String RUNTIME_STUB_MODELS = "runtimeStubModels";
  public static final String STUB_SOLUTIONS = "stubSolutions";

  public Language(SNode node) {
    super(node);
  }

  public String getGenPath() {
    return this.getProperty(Language.GEN_PATH);
  }

  public void setGenPath(String value) {
    this.setProperty(Language.GEN_PATH, value);
  }

  public String getLanguagePath() {
    return this.getProperty(Language.LANGUAGE_PATH);
  }

  public void setLanguagePath(String value) {
    this.setProperty(Language.LANGUAGE_PATH, value);
  }

  public boolean getDoNotGenerateAdapters() {
    return this.getBooleanProperty(Language.DO_NOT_GENERATE_ADAPTERS);
  }

  public void setDoNotGenerateAdapters(boolean value) {
    this.setBooleanProperty(Language.DO_NOT_GENERATE_ADAPTERS, value);
  }

  public int getGeneratorsCount() {
    return this.getChildCount(Language.GENERATOR);
  }

  public Iterator<Generator> generators() {
    return this.children(Generator.class, Language.GENERATOR);
  }

  public List<Generator> getGenerators() {
    return this.getChildren(Generator.class, Language.GENERATOR);
  }

  public void addGenerator(Generator node) {
    this.addChild(Language.GENERATOR, node);
  }

  public void insertGenerator(Generator prev, Generator node) {
    this.insertChild(prev, Language.GENERATOR, node);
  }

  public int getAccessoryModelsesCount() {
    return this.getChildCount(Language.ACCESSORY_MODELS);
  }

  public Iterator<ModelReference> accessoryModelses() {
    return this.children(ModelReference.class, Language.ACCESSORY_MODELS);
  }

  public List<ModelReference> getAccessoryModelses() {
    return this.getChildren(ModelReference.class, Language.ACCESSORY_MODELS);
  }

  public void addAccessoryModels(ModelReference node) {
    this.addChild(Language.ACCESSORY_MODELS, node);
  }

  public void insertAccessoryModels(ModelReference prev, ModelReference node) {
    this.insertChild(prev, Language.ACCESSORY_MODELS, node);
  }

  public int getExtendedLanguagesesCount() {
    return this.getChildCount(Language.EXTENDED_LANGUAGES);
  }

  public Iterator<ModuleReference> extendedLanguageses() {
    return this.children(ModuleReference.class, Language.EXTENDED_LANGUAGES);
  }

  public List<ModuleReference> getExtendedLanguageses() {
    return this.getChildren(ModuleReference.class, Language.EXTENDED_LANGUAGES);
  }

  public void addExtendedLanguages(ModuleReference node) {
    this.addChild(Language.EXTENDED_LANGUAGES, node);
  }

  public void insertExtendedLanguages(ModuleReference prev, ModuleReference node) {
    this.insertChild(prev, Language.EXTENDED_LANGUAGES, node);
  }

  public int getRuntimeModulesesCount() {
    return this.getChildCount(Language.RUNTIME_MODULES);
  }

  public Iterator<ModuleDependency> runtimeModuleses() {
    return this.children(ModuleDependency.class, Language.RUNTIME_MODULES);
  }

  public List<ModuleDependency> getRuntimeModuleses() {
    return this.getChildren(ModuleDependency.class, Language.RUNTIME_MODULES);
  }

  public void addRuntimeModules(ModuleDependency node) {
    this.addChild(Language.RUNTIME_MODULES, node);
  }

  public void insertRuntimeModules(ModuleDependency prev, ModuleDependency node) {
    this.insertChild(prev, Language.RUNTIME_MODULES, node);
  }

  public int getRuntimeStubModelsesCount() {
    return this.getChildCount(Language.RUNTIME_STUB_MODELS);
  }

  public Iterator<StubEntry> runtimeStubModelses() {
    return this.children(StubEntry.class, Language.RUNTIME_STUB_MODELS);
  }

  public List<StubEntry> getRuntimeStubModelses() {
    return this.getChildren(StubEntry.class, Language.RUNTIME_STUB_MODELS);
  }

  public void addRuntimeStubModels(StubEntry node) {
    this.addChild(Language.RUNTIME_STUB_MODELS, node);
  }

  public void insertRuntimeStubModels(StubEntry prev, StubEntry node) {
    this.insertChild(prev, Language.RUNTIME_STUB_MODELS, node);
  }

  public int getStubSolutionsesCount() {
    return this.getChildCount(Language.STUB_SOLUTIONS);
  }

  public Iterator<StubSolution> stubSolutionses() {
    return this.children(StubSolution.class, Language.STUB_SOLUTIONS);
  }

  public List<StubSolution> getStubSolutionses() {
    return this.getChildren(StubSolution.class, Language.STUB_SOLUTIONS);
  }

  public void addStubSolutions(StubSolution node) {
    this.addChild(Language.STUB_SOLUTIONS, node);
  }

  public void insertStubSolutions(StubSolution prev, StubSolution node) {
    this.insertChild(prev, Language.STUB_SOLUTIONS, node);
  }

  public static Language newInstance(SModel sm, boolean init) {
    return (Language) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.project.structure.Language", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Language newInstance(SModel sm) {
    return Language.newInstance(sm, false);
  }
}
