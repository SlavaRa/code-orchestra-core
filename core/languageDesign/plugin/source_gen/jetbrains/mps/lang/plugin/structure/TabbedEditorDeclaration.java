package jetbrains.mps.lang.plugin.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class TabbedEditorDeclaration extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.lang.plugin.structure.TabbedEditorDeclaration";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String MAIN_CONCEPT = "mainConcept";
  public static final String GET_MAIN_CONCEPT_BLOCK = "getMainConceptBlock";
  public static final String TABS = "tabs";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public TabbedEditorDeclaration(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(TabbedEditorDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(TabbedEditorDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(TabbedEditorDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(TabbedEditorDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(TabbedEditorDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(TabbedEditorDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(TabbedEditorDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(TabbedEditorDeclaration.VIRTUAL_PACKAGE, value);
  }

  public AbstractConceptDeclaration getMainConcept() {
    return (AbstractConceptDeclaration) this.getReferent(AbstractConceptDeclaration.class, TabbedEditorDeclaration.MAIN_CONCEPT);
  }

  public void setMainConcept(AbstractConceptDeclaration node) {
    super.setReferent(TabbedEditorDeclaration.MAIN_CONCEPT, node);
  }

  public GetBaseNodeBlock getGetMainConceptBlock() {
    return (GetBaseNodeBlock) this.getChild(GetBaseNodeBlock.class, TabbedEditorDeclaration.GET_MAIN_CONCEPT_BLOCK);
  }

  public void setGetMainConceptBlock(GetBaseNodeBlock node) {
    super.setChild(TabbedEditorDeclaration.GET_MAIN_CONCEPT_BLOCK, node);
  }

  public int getTabsesCount() {
    return this.getChildCount(TabbedEditorDeclaration.TABS);
  }

  public Iterator<AbstractEditorTab> tabses() {
    return this.children(AbstractEditorTab.class, TabbedEditorDeclaration.TABS);
  }

  public List<AbstractEditorTab> getTabses() {
    return this.getChildren(AbstractEditorTab.class, TabbedEditorDeclaration.TABS);
  }

  public void addTabs(AbstractEditorTab node) {
    this.addChild(TabbedEditorDeclaration.TABS, node);
  }

  public void insertTabs(AbstractEditorTab prev, AbstractEditorTab node) {
    this.insertChild(prev, TabbedEditorDeclaration.TABS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(TabbedEditorDeclaration.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, TabbedEditorDeclaration.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, TabbedEditorDeclaration.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(TabbedEditorDeclaration.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, TabbedEditorDeclaration.SMODEL_ATTRIBUTE, node);
  }

  public static TabbedEditorDeclaration newInstance(SModel sm, boolean init) {
    return (TabbedEditorDeclaration) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.plugin.structure.TabbedEditorDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static TabbedEditorDeclaration newInstance(SModel sm) {
    return TabbedEditorDeclaration.newInstance(sm, false);
  }
}
