package jetbrains.mps.lang.findUsages.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ConvertExecuteFinders_MigrationScript extends BaseMigrationScript {
  public ConvertExecuteFinders_MigrationScript(IOperationContext operationContext) {
    super("Convert ExecuteFindersExpression");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "convert refactoring finder to findUsages' one";
      }

      public String getAdditionalInfo() {
        return "convert refactoring finder to findUsages' one";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.refactoring.structure.ExecuteFindersExpression";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode replacer = SConceptOperations.createNewNode("jetbrains.mps.lang.findUsages.structure.ExecuteFindersGetSearchResults", null);
        for (SNode finder : ListSequence.fromList(SLinkOperations.getTargets(node, "finders", true))) {
          SNode finderRef = SConceptOperations.createNewNode("jetbrains.mps.lang.findUsages.structure.FinderReference", null);
          SLinkOperations.setTarget(finderRef, "finder", SLinkOperations.getTarget(finder, "finderDeclaration", false), false);
          ListSequence.fromList(SLinkOperations.getTargets(replacer, "finder", true)).addElement(finderRef);
        }
        SLinkOperations.setTarget(replacer, "queryNode", ((SLinkOperations.getTarget(node, "searchNode", true) == null) ?
          new ConvertExecuteFinders_MigrationScript.QuotationClass_v4ym8i_a0a0c0e0a0a0b0a().createNode() :
          SLinkOperations.getTarget(node, "searchNode", true)
        ), true);
        SLinkOperations.setTarget(replacer, "scope", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "searchScope", true)), true);
        SNodeOperations.replaceWithAnother(node, replacer);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  public static class QuotationClass_v4ym8i_a0a0c0e0a0a0b0a {
    public QuotationClass_v4ym8i_a0a0c0e0a0a0b0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.refactoring.structure.RefactoringContext_ConceptFunctionParameter", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_5 = quotedNode_2;
          quotedNode_1.addChild("operand", quotedNode1_5);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.refactoring.structure.NodeOperation", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_6 = quotedNode_3;
          quotedNode_1.addChild("operation", quotedNode1_6);
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }
}
