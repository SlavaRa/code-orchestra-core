package jetbrains.mps.lang.script.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import jetbrains.mps.logging.Logger;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ide.script.plugin.AbstractMigrationScriptHelper;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.IModule;
import jetbrains.mps.ide.script.plugin.ScriptsActionGroupHelper;
import jetbrains.mps.ide.script.plugin.RunMigrationScriptsDialog;
import java.awt.Frame;
import jetbrains.mps.smodel.IOperationContext;
import com.intellij.openapi.project.Project;
import jetbrains.mps.workbench.editors.MPSEditorOpener;

public class RunMigrationScripts_Action extends GeneratedAction {
  private static final Icon ICON = null;
  private static Logger LOG = Logger.getLogger(RunMigrationScripts_Action.class);

  private List<SNode> scripts;
  private boolean selectionOnly;

  public RunMigrationScripts_Action(List<SNode> scripts_par, boolean selectionOnly_par) {
    super("All Scripts...", "", ICON);
    this.scripts = scripts_par;
    this.selectionOnly = selectionOnly_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      LOG.error("User's action doUpdate method failed. Action:" + "RunMigrationScripts", t);
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("models", event.getData(MPSDataKeys.MODELS));
    MapSequence.fromMap(_params).put("modules", event.getData(MPSDataKeys.MODULES));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      IScope scope = AbstractMigrationScriptHelper.createMigrationScope(((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")), ((List<IModule>) MapSequence.fromMap(_params).get("modules")), RunMigrationScripts_Action.this.selectionOnly);
      if (!(scope.getModelDescriptors().iterator().hasNext())) {
        return;
      }
      ScriptsActionGroupHelper.sortScripts(RunMigrationScripts_Action.this.scripts);
      RunMigrationScriptsDialog dialog = new RunMigrationScriptsDialog(((Frame) MapSequence.fromMap(_params).get("frame")), RunMigrationScripts_Action.this.scripts, ScriptsActionGroupHelper.getSelectedScripts());
      int x = ((Frame) MapSequence.fromMap(_params).get("frame")).getX() + ((Frame) MapSequence.fromMap(_params).get("frame")).getWidth() / 2 - dialog.getWidth() / 2;
      int y = ((Frame) MapSequence.fromMap(_params).get("frame")).getY() + ((Frame) MapSequence.fromMap(_params).get("frame")).getHeight() / 2 - dialog.getHeight() / 2;
      dialog.setLocation(x, y);
      dialog.setVisible(true);
      if (dialog.isRunChecked()) {
        AbstractMigrationScriptHelper.doRunScripts(dialog.getCheckedScripts(), scope, ((IOperationContext) MapSequence.fromMap(_params).get("context")));
      } else if (dialog.isOpenSelected()) {
        ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSEditorOpener.class).editNode(dialog.getSelectedScripts().get(0), ((IOperationContext) MapSequence.fromMap(_params).get("context")));
      }
    } catch (Throwable t) {
      LOG.error("User's action execute method failed. Action:" + "RunMigrationScripts", t);
    }
  }

  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(scripts_State((List<SNode>) this.scripts));
    res.append("!");
    res.append(((Object) this.selectionOnly).toString());
    res.append("!");
    return res.toString();
  }

  public static String scripts_State(List<SNode> object) {
    return "";
  }
}
