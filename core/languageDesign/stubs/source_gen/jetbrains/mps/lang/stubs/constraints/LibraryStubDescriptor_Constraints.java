package jetbrains.mps.lang.stubs.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;

public class LibraryStubDescriptor_Constraints extends BaseConstraintsDescriptor {
  public LibraryStubDescriptor_Constraints() {
    super("jetbrains.mps.lang.stubs.structure.LibraryStubDescriptor");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("moduleName", new BasePropertyConstraintsDescriptor("moduleName", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "moduleName";
        {
          if (StringUtils.isEmpty(SPropertyOperations.getString(node, "moduleId"))) {
            return null;
          }

          ModuleId moduleId = ModuleId.fromString(SPropertyOperations.getString(node, "moduleId"));
          if (moduleId == null) {
            return null;
          }

          IModule module = MPSModuleRepository.getInstance().getModuleById(moduleId);
          if (module == null) {
            return moduleId.toString();
          }

          return module.getModuleFqName();
        }
      }
    });
    return properties;
  }
}
