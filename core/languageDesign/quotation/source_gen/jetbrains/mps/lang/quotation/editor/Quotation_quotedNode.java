package jetbrains.mps.lang.quotation.editor;

/*Generated by MPS */

import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuComponent;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPart;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_Generic_Group;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.util.NameUtil;

public class Quotation_quotedNode extends AbstractCellMenuComponent {
  public Quotation_quotedNode() {
    super(new SubstituteInfoPart[]{new Quotation_quotedNode.Quotation_generic_cellMenu_a0()});
  }

  public static class Quotation_generic_cellMenu_a0 extends AbstractCellMenuPart_Generic_Group {
    public Quotation_generic_cellMenu_a0() {
    }

    public List<?> createParameterObjects(SNode node, IScope scope, IOperationContext operationContext) {
      List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
      for (SNode nextConcept : ListSequence.fromList(SModelSearchUtil.createConceptsFromModelLanguagesScope(SNodeOperations.getModel(node), true, operationContext.getScope()).getNodes())) {
        ListSequence.fromList(result).addElement((SNode) nextConcept);
      }
      return result;
    }

    protected void handleAction(Object parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext, EditorContext editorContext) {
      this.handleAction_impl((SNode) parameterObject, node, model, scope, operationContext, editorContext);
    }

    public void handleAction_impl(SNode parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext, EditorContext editorContext) {
      SNode oldInstance = SLinkOperations.getTarget(node, "quotedNode", true);
      SLinkOperations.setTarget(node, "quotedNode", SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(parameterObject), null), true);
      if (oldInstance != null) {
        SNodeOperations.deleteNode(oldInstance);
      }
    }

    public boolean isReferentPresentation() {
      return true;
    }
  }
}
