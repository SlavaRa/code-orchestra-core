package jetbrains.mps.lang.editor.tableTests.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Matrix extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.lang.editor.tableTests.structure.Matrix";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String XS = "xs";
  public static final String YS = "ys";
  public static final String CONTENTS = "contents";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Matrix(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Matrix.NAME);
  }

  public void setName(String value) {
    this.setProperty(Matrix.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Matrix.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Matrix.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Matrix.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Matrix.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Matrix.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Matrix.VIRTUAL_PACKAGE, value);
  }

  public int getXsesCount() {
    return this.getChildCount(Matrix.XS);
  }

  public Iterator<XElement> xses() {
    return this.children(XElement.class, Matrix.XS);
  }

  public List<XElement> getXses() {
    return this.getChildren(XElement.class, Matrix.XS);
  }

  public void addXs(XElement node) {
    this.addChild(Matrix.XS, node);
  }

  public void insertXs(XElement prev, XElement node) {
    this.insertChild(prev, Matrix.XS, node);
  }

  public int getYsesCount() {
    return this.getChildCount(Matrix.YS);
  }

  public Iterator<YElement> yses() {
    return this.children(YElement.class, Matrix.YS);
  }

  public List<YElement> getYses() {
    return this.getChildren(YElement.class, Matrix.YS);
  }

  public void addYs(YElement node) {
    this.addChild(Matrix.YS, node);
  }

  public void insertYs(YElement prev, YElement node) {
    this.insertChild(prev, Matrix.YS, node);
  }

  public int getContentsesCount() {
    return this.getChildCount(Matrix.CONTENTS);
  }

  public Iterator<ContentElement> contentses() {
    return this.children(ContentElement.class, Matrix.CONTENTS);
  }

  public List<ContentElement> getContentses() {
    return this.getChildren(ContentElement.class, Matrix.CONTENTS);
  }

  public void addContents(ContentElement node) {
    this.addChild(Matrix.CONTENTS, node);
  }

  public void insertContents(ContentElement prev, ContentElement node) {
    this.insertChild(prev, Matrix.CONTENTS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Matrix.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Matrix.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Matrix.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Matrix.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Matrix.SMODEL_ATTRIBUTE, node);
  }

  public static Matrix newInstance(SModel sm, boolean init) {
    return (Matrix) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.tableTests.structure.Matrix", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Matrix newInstance(SModel sm) {
    return Matrix.newInstance(sm, false);
  }
}
