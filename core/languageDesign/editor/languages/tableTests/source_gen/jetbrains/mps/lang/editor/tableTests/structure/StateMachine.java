package jetbrains.mps.lang.editor.tableTests.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class StateMachine extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.lang.editor.tableTests.structure.StateMachine";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EVENTS = "events";
  public static final String TRANSITIONS = "transitions";
  public static final String STATES = "states";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public StateMachine(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(StateMachine.NAME);
  }

  public void setName(String value) {
    this.setProperty(StateMachine.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(StateMachine.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(StateMachine.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(StateMachine.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(StateMachine.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(StateMachine.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(StateMachine.VIRTUAL_PACKAGE, value);
  }

  public int getEventsesCount() {
    return this.getChildCount(StateMachine.EVENTS);
  }

  public Iterator<Event> eventses() {
    return this.children(Event.class, StateMachine.EVENTS);
  }

  public List<Event> getEventses() {
    return this.getChildren(Event.class, StateMachine.EVENTS);
  }

  public void addEvents(Event node) {
    this.addChild(StateMachine.EVENTS, node);
  }

  public void insertEvents(Event prev, Event node) {
    this.insertChild(prev, StateMachine.EVENTS, node);
  }

  public int getTransitionsesCount() {
    return this.getChildCount(StateMachine.TRANSITIONS);
  }

  public Iterator<Transition> transitionses() {
    return this.children(Transition.class, StateMachine.TRANSITIONS);
  }

  public List<Transition> getTransitionses() {
    return this.getChildren(Transition.class, StateMachine.TRANSITIONS);
  }

  public void addTransitions(Transition node) {
    this.addChild(StateMachine.TRANSITIONS, node);
  }

  public void insertTransitions(Transition prev, Transition node) {
    this.insertChild(prev, StateMachine.TRANSITIONS, node);
  }

  public int getStatesesCount() {
    return this.getChildCount(StateMachine.STATES);
  }

  public Iterator<State> stateses() {
    return this.children(State.class, StateMachine.STATES);
  }

  public List<State> getStateses() {
    return this.getChildren(State.class, StateMachine.STATES);
  }

  public void addStates(State node) {
    this.addChild(StateMachine.STATES, node);
  }

  public void insertStates(State prev, State node) {
    this.insertChild(prev, StateMachine.STATES, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(StateMachine.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, StateMachine.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, StateMachine.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(StateMachine.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, StateMachine.SMODEL_ATTRIBUTE, node);
  }

  public static StateMachine newInstance(SModel sm, boolean init) {
    return (StateMachine) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.tableTests.structure.StateMachine", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static StateMachine newInstance(SModel sm) {
    return StateMachine.newInstance(sm, false);
  }
}
