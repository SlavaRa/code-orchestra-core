package jetbrains.mps.lang.editor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.SReference;

public class ChangeTransactionalProperty_Intention extends BaseIntention implements Intention {
  public ChangeTransactionalProperty_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.editor.structure.CellModel_TransactionalProperty";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Replace Transactional Property by Concept Property";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode transactional = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Property", null);
    SLinkOperations.setTarget(transactional, "relationDeclaration", SLinkOperations.getTarget(node, "property", false), false);
    SLinkOperations.setTarget(node, "property", null, false);
    SNodeOperations.detachNode(SLinkOperations.getTarget(node, "handlerBlock", true));
    for (SNode child : ListSequence.fromList(node.getChildren())) {
      String role = child.getRole_();
      node.removeChild(child);
      transactional.addChild(role, child);
    }
    for (Map.Entry<String, String> propertyEntry : SetSequence.fromSet(node.getProperties().entrySet())) {
      transactional.setProperty(propertyEntry.getKey(), propertyEntry.getValue());
    }
    for (SReference reference : ListSequence.fromList(node.getReferences())) {
      transactional.addReference(reference);
    }
    SNodeOperations.replaceWithAnother(node, transactional);
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.editor.intentions";
  }
}
