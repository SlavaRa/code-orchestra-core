package jetbrains.mps.lang.actions.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class NodeSubstituteActionsBuilder extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder";
  public static final String DESCRIPTION = "description";
  public static final String APPLICABLE_CONCEPT = "applicableConcept";
  public static final String PRECONDITION = "precondition";
  public static final String COMMON_INITIALIZER = "commonInitializer";
  public static final String PART = "part";
  public static final String VARIABLE = "variable";

  public NodeSubstituteActionsBuilder(SNode node) {
    super(node);
  }

  public String getDescription() {
    return this.getProperty(NodeSubstituteActionsBuilder.DESCRIPTION);
  }

  public void setDescription(String value) {
    this.setProperty(NodeSubstituteActionsBuilder.DESCRIPTION, value);
  }

  public AbstractConceptDeclaration getApplicableConcept() {
    return (AbstractConceptDeclaration) this.getReferent(AbstractConceptDeclaration.class, NodeSubstituteActionsBuilder.APPLICABLE_CONCEPT);
  }

  public void setApplicableConcept(AbstractConceptDeclaration node) {
    super.setReferent(NodeSubstituteActionsBuilder.APPLICABLE_CONCEPT, node);
  }

  public NodeSubstitutePreconditionFunction getPrecondition() {
    return (NodeSubstitutePreconditionFunction) this.getChild(NodeSubstitutePreconditionFunction.class, NodeSubstituteActionsBuilder.PRECONDITION);
  }

  public void setPrecondition(NodeSubstitutePreconditionFunction node) {
    super.setChild(NodeSubstituteActionsBuilder.PRECONDITION, node);
  }

  public QueryFunction_Substitute_CommonInitializer getCommonInitializer() {
    return (QueryFunction_Substitute_CommonInitializer) this.getChild(QueryFunction_Substitute_CommonInitializer.class, NodeSubstituteActionsBuilder.COMMON_INITIALIZER);
  }

  public void setCommonInitializer(QueryFunction_Substitute_CommonInitializer node) {
    super.setChild(NodeSubstituteActionsBuilder.COMMON_INITIALIZER, node);
  }

  public int getPartsCount() {
    return this.getChildCount(NodeSubstituteActionsBuilder.PART);
  }

  public Iterator<MenuBuilderPart> parts() {
    return this.children(MenuBuilderPart.class, NodeSubstituteActionsBuilder.PART);
  }

  public List<MenuBuilderPart> getParts() {
    return this.getChildren(MenuBuilderPart.class, NodeSubstituteActionsBuilder.PART);
  }

  public void addPart(MenuBuilderPart node) {
    this.addChild(NodeSubstituteActionsBuilder.PART, node);
  }

  public void insertPart(MenuBuilderPart prev, MenuBuilderPart node) {
    this.insertChild(prev, NodeSubstituteActionsBuilder.PART, node);
  }

  public int getVariablesCount() {
    return this.getChildCount(NodeSubstituteActionsBuilder.VARIABLE);
  }

  public Iterator<SubstituteNodeBuilderVariableDeclaration> variables() {
    return this.children(SubstituteNodeBuilderVariableDeclaration.class, NodeSubstituteActionsBuilder.VARIABLE);
  }

  public List<SubstituteNodeBuilderVariableDeclaration> getVariables() {
    return this.getChildren(SubstituteNodeBuilderVariableDeclaration.class, NodeSubstituteActionsBuilder.VARIABLE);
  }

  public void addVariable(SubstituteNodeBuilderVariableDeclaration node) {
    this.addChild(NodeSubstituteActionsBuilder.VARIABLE, node);
  }

  public void insertVariable(SubstituteNodeBuilderVariableDeclaration prev, SubstituteNodeBuilderVariableDeclaration node) {
    this.insertChild(prev, NodeSubstituteActionsBuilder.VARIABLE, node);
  }

  public static NodeSubstituteActionsBuilder newInstance(SModel sm, boolean init) {
    return (NodeSubstituteActionsBuilder) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NodeSubstituteActionsBuilder newInstance(SModel sm) {
    return NodeSubstituteActionsBuilder.newInstance(sm, false);
  }
}
