package jetbrains.mps.lang.typesystem.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class WhenConcreteVariableReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_acirdv_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:00000000-0000-4000-0000-011c895902ae(jetbrains.mps.lang.typesystem.constraints)", "1213104837477");

  public WhenConcreteVariableReference_Constraints() {
    super("jetbrains.mps.lang.typesystem.structure.WhenConcreteVariableReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("whenConcreteVar", new BaseReferenceConstraintsDescriptor("whenConcreteVar", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            List<SNode> whenConcreteStatements = SNodeOperations.getAncestors(_context.getEnclosingNode(), "jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement", false);
            List<SNode> declarations = new ArrayList<SNode>();
            for (SNode whenConcreteStatement : whenConcreteStatements) {
              SNode variableDeclaration = SLinkOperations.getTarget(whenConcreteStatement, "argumentRepresentator", true);
              if (variableDeclaration != null) {
                ListSequence.fromList(declarations).addElement(variableDeclaration);
              }
            }
            return declarations;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_acirdv_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
