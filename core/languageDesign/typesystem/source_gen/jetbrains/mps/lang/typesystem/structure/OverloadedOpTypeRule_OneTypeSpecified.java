package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class OverloadedOpTypeRule_OneTypeSpecified extends AbstractOverloadedOpsTypeRule {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.OverloadedOpTypeRule_OneTypeSpecified";
  public static final String IS_EXACT = "isExact";
  public static final String IS_STRONG = "isStrong";
  public static final String OPERAND_TYPE = "operandType";

  public OverloadedOpTypeRule_OneTypeSpecified(SNode node) {
    super(node);
  }

  public boolean getIsExact() {
    return this.getBooleanProperty(OverloadedOpTypeRule_OneTypeSpecified.IS_EXACT);
  }

  public void setIsExact(boolean value) {
    this.setBooleanProperty(OverloadedOpTypeRule_OneTypeSpecified.IS_EXACT, value);
  }

  public boolean getIsStrong() {
    return this.getBooleanProperty(OverloadedOpTypeRule_OneTypeSpecified.IS_STRONG);
  }

  public void setIsStrong(boolean value) {
    this.setBooleanProperty(OverloadedOpTypeRule_OneTypeSpecified.IS_STRONG, value);
  }

  public Expression getOperandType() {
    return (Expression) this.getChild(Expression.class, OverloadedOpTypeRule_OneTypeSpecified.OPERAND_TYPE);
  }

  public void setOperandType(Expression node) {
    super.setChild(OverloadedOpTypeRule_OneTypeSpecified.OPERAND_TYPE, node);
  }

  public static OverloadedOpTypeRule_OneTypeSpecified newInstance(SModel sm, boolean init) {
    return (OverloadedOpTypeRule_OneTypeSpecified) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.OverloadedOpTypeRule_OneTypeSpecified", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static OverloadedOpTypeRule_OneTypeSpecified newInstance(SModel sm) {
    return OverloadedOpTypeRule_OneTypeSpecified.newInstance(sm, false);
  }
}
