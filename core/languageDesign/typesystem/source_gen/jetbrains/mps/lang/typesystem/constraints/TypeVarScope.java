package jetbrains.mps.lang.typesystem.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.search.SearchScopeWithNode;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.util.Condition;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.search.IsInstanceCondition;
import jetbrains.mps.smodel.search.AbstractSearchScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class TypeVarScope extends SearchScopeWithNode {
  private SNode myCurrentNode = null;

  public TypeVarScope(SNode enclosingNode) {
    super(enclosingNode);
  }

  public TypeVarScope(SNode enclosingNode, SNode currentNode) {
    super(enclosingNode);
    myCurrentNode = currentNode;
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    List<SNode> vars = new ArrayList<SNode>();

    SNode enclosingNode = getEnclosingNode();
    SNode statementList;
    if (SNodeOperations.isInstanceOf(enclosingNode, "jetbrains.mps.baseLanguage.structure.StatementList")) {
      statementList = SNodeOperations.cast(enclosingNode, "jetbrains.mps.baseLanguage.structure.StatementList");
    } else {
      statementList = (SNode) enclosingNode.findParent(new IsInstanceCondition("jetbrains.mps.baseLanguage.structure.StatementList"));
    }
    if ((statementList != null)) {
      SNode currentStatement;
      if (SNodeOperations.isInstanceOf(myCurrentNode, "jetbrains.mps.baseLanguage.structure.Statement")) {
        currentStatement = SNodeOperations.cast(myCurrentNode, "jetbrains.mps.baseLanguage.structure.Statement");
      } else if (SNodeOperations.isInstanceOf(enclosingNode, "jetbrains.mps.baseLanguage.structure.Statement")) {
        currentStatement = SNodeOperations.cast(enclosingNode, "jetbrains.mps.baseLanguage.structure.Statement");
      } else {
        currentStatement = (SNode) enclosingNode.findParent(new IsInstanceCondition("jetbrains.mps.baseLanguage.structure.Statement"));
      }
      populateLocalVariables(statementList, currentStatement, vars);
    }
    if (condition == AbstractSearchScope.TRUE_CONDITION) {
      return vars;
    }
    List<SNode> result = new ArrayList<SNode>();
    for (SNode node : vars) {
      if (condition.met(node)) {
        result.add(node);
      }
    }
    return result;
  }

  private void populateLocalVariables(@NotNull SNode statementList, SNode beforeStatement, List<SNode> result) {
    for (SNode statement : SLinkOperations.getTargets(statementList, "statement", true)) {
      if (statement == beforeStatement) {
        break;
      }
      if (SNodeOperations.isInstanceOf(statement, "jetbrains.mps.lang.typesystem.structure.TypeVarDeclaration")) {
        result.add(statement);
      }
    }
    SNode containingStatement = (SNode) statementList.findParent(new IsInstanceCondition("jetbrains.mps.baseLanguage.structure.Statement"));
    if ((containingStatement != null)) {
      statementList = (SNode) containingStatement.findParent(new IsInstanceCondition("jetbrains.mps.baseLanguage.structure.StatementList"));
      if (statementList != null) {
        populateLocalVariables(statementList, containingStatement, result);
      }
    }
  }
}
