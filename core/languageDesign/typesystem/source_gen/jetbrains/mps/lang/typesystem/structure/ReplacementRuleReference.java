package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ReplacementRuleReference extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.ReplacementRuleReference";
  public static final String FQ_NAME = "fqName";
  public static final String REPLACEMENT_RULE = "replacementRule";

  public ReplacementRuleReference(SNode node) {
    super(node);
  }

  public String getFqName() {
    return this.getProperty(ReplacementRuleReference.FQ_NAME);
  }

  public void setFqName(String value) {
    this.setProperty(ReplacementRuleReference.FQ_NAME, value);
  }

  public InequationReplacementRule getReplacementRule() {
    return (InequationReplacementRule) this.getReferent(InequationReplacementRule.class, ReplacementRuleReference.REPLACEMENT_RULE);
  }

  public void setReplacementRule(InequationReplacementRule node) {
    super.setReferent(ReplacementRuleReference.REPLACEMENT_RULE, node);
  }

  public static ReplacementRuleReference newInstance(SModel sm, boolean init) {
    return (ReplacementRuleReference) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.ReplacementRuleReference", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ReplacementRuleReference newInstance(SModel sm) {
    return ReplacementRuleReference.newInstance(sm, false);
  }
}
