package jetbrains.mps.lang.typesystem.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.search.SearchScopeWithNode;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.util.Condition;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.search.IsInstanceCondition;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ListVarScope extends SearchScopeWithNode {
  public ListVarScope(SNode enclosingNode) {
    super(enclosingNode);
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    List<SNode> result = new ArrayList<SNode>();
    SNode enclosingNode = getEnclosingNode();
    SNode statement;
    if (SNodeOperations.isInstanceOf(enclosingNode, "jetbrains.mps.baseLanguage.structure.Statement")) {
      statement = SNodeOperations.cast(enclosingNode, "jetbrains.mps.baseLanguage.structure.Statement");
    } else {
      statement = (SNode) enclosingNode.findParent(new IsInstanceCondition("jetbrains.mps.baseLanguage.structure.Statement"));
    }
    while ((statement != null)) {
      SNode statementList = (SNode) statement.findParent(new IsInstanceCondition("jetbrains.mps.baseLanguage.structure.StatementList"));
      if ((statementList == null)) {
        return result;
      }
      for (SNode aStatement : SLinkOperations.getTargets(statementList, "statement", true)) {
        if (aStatement == statement) {
          break;
        }
        if (SNodeOperations.isInstanceOf(aStatement, "jetbrains.mps.lang.typesystem.structure.ListVarDeclaration")) {
          result.add(aStatement);
        }
      }
      statement = (SNode) statementList.findParent(new IsInstanceCondition("jetbrains.mps.baseLanguage.structure.Statement"));
    }
    return result;
  }
}
