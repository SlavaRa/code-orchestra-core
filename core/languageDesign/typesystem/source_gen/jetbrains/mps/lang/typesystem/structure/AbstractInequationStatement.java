package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AbstractInequationStatement extends AbstractEquationStatement {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement";
  public static final String LABEL = "label";
  public static final String INEQUATION_PRIORITY = "inequationPriority";
  public static final String STRONG = "strong";
  public static final String ORIENTATION = "orientation";
  public static final String INEQUATION_GROUP = "inequationGroup";
  public static final String AFTER_EQUATIONS = "afterEquations";
  public static final String BEFORE_EQUATIONS = "beforeEquations";
  public static final String AFTER_GROUPS = "afterGroups";
  public static final String BEFORE_GROUPS = "beforeGroups";
  public static final String RULES_TO_SKIP = "rulesToSkip";

  public AbstractInequationStatement(SNode node) {
    super(node);
  }

  public String getLabel() {
    return this.getProperty(AbstractInequationStatement.LABEL);
  }

  public void setLabel(String value) {
    this.setProperty(AbstractInequationStatement.LABEL, value);
  }

  public InequationPriority getInequationPriority() {
    String value = super.getProperty(AbstractInequationStatement.INEQUATION_PRIORITY);
    return InequationPriority.parseValue(value);
  }

  public void setInequationPriority(InequationPriority value) {
    super.setProperty(AbstractInequationStatement.INEQUATION_PRIORITY, value.getValueAsString());
  }

  public InequalityProperty getStrong() {
    String value = super.getProperty(AbstractInequationStatement.STRONG);
    return InequalityProperty.parseValue(value);
  }

  public void setStrong(InequalityProperty value) {
    super.setProperty(AbstractInequationStatement.STRONG, value.getValueAsString());
  }

  public InequalityProperty getOrientation() {
    String value = super.getProperty(AbstractInequationStatement.ORIENTATION);
    return InequalityProperty.parseValue(value);
  }

  public void setOrientation(InequalityProperty value) {
    super.setProperty(AbstractInequationStatement.ORIENTATION, value.getValueAsString());
  }

  public DefaultGroupReference getInequationGroup() {
    return (DefaultGroupReference) this.getChild(DefaultGroupReference.class, AbstractInequationStatement.INEQUATION_GROUP);
  }

  public void setInequationGroup(DefaultGroupReference node) {
    super.setChild(AbstractInequationStatement.INEQUATION_GROUP, node);
  }

  public int getAfterEquationsesCount() {
    return this.getChildCount(AbstractInequationStatement.AFTER_EQUATIONS);
  }

  public Iterator<InequationReference> afterEquationses() {
    return this.children(InequationReference.class, AbstractInequationStatement.AFTER_EQUATIONS);
  }

  public List<InequationReference> getAfterEquationses() {
    return this.getChildren(InequationReference.class, AbstractInequationStatement.AFTER_EQUATIONS);
  }

  public void addAfterEquations(InequationReference node) {
    this.addChild(AbstractInequationStatement.AFTER_EQUATIONS, node);
  }

  public void insertAfterEquations(InequationReference prev, InequationReference node) {
    this.insertChild(prev, AbstractInequationStatement.AFTER_EQUATIONS, node);
  }

  public int getBeforeEquationsesCount() {
    return this.getChildCount(AbstractInequationStatement.BEFORE_EQUATIONS);
  }

  public Iterator<InequationReference> beforeEquationses() {
    return this.children(InequationReference.class, AbstractInequationStatement.BEFORE_EQUATIONS);
  }

  public List<InequationReference> getBeforeEquationses() {
    return this.getChildren(InequationReference.class, AbstractInequationStatement.BEFORE_EQUATIONS);
  }

  public void addBeforeEquations(InequationReference node) {
    this.addChild(AbstractInequationStatement.BEFORE_EQUATIONS, node);
  }

  public void insertBeforeEquations(InequationReference prev, InequationReference node) {
    this.insertChild(prev, AbstractInequationStatement.BEFORE_EQUATIONS, node);
  }

  public int getAfterGroupsesCount() {
    return this.getChildCount(AbstractInequationStatement.AFTER_GROUPS);
  }

  public Iterator<DefaultGroupReference> afterGroupses() {
    return this.children(DefaultGroupReference.class, AbstractInequationStatement.AFTER_GROUPS);
  }

  public List<DefaultGroupReference> getAfterGroupses() {
    return this.getChildren(DefaultGroupReference.class, AbstractInequationStatement.AFTER_GROUPS);
  }

  public void addAfterGroups(DefaultGroupReference node) {
    this.addChild(AbstractInequationStatement.AFTER_GROUPS, node);
  }

  public void insertAfterGroups(DefaultGroupReference prev, DefaultGroupReference node) {
    this.insertChild(prev, AbstractInequationStatement.AFTER_GROUPS, node);
  }

  public int getBeforeGroupsesCount() {
    return this.getChildCount(AbstractInequationStatement.BEFORE_GROUPS);
  }

  public Iterator<DefaultGroupReference> beforeGroupses() {
    return this.children(DefaultGroupReference.class, AbstractInequationStatement.BEFORE_GROUPS);
  }

  public List<DefaultGroupReference> getBeforeGroupses() {
    return this.getChildren(DefaultGroupReference.class, AbstractInequationStatement.BEFORE_GROUPS);
  }

  public void addBeforeGroups(DefaultGroupReference node) {
    this.addChild(AbstractInequationStatement.BEFORE_GROUPS, node);
  }

  public void insertBeforeGroups(DefaultGroupReference prev, DefaultGroupReference node) {
    this.insertChild(prev, AbstractInequationStatement.BEFORE_GROUPS, node);
  }

  public int getRulesToSkipsCount() {
    return this.getChildCount(AbstractInequationStatement.RULES_TO_SKIP);
  }

  public Iterator<ReplacementRuleReference> rulesToSkips() {
    return this.children(ReplacementRuleReference.class, AbstractInequationStatement.RULES_TO_SKIP);
  }

  public List<ReplacementRuleReference> getRulesToSkips() {
    return this.getChildren(ReplacementRuleReference.class, AbstractInequationStatement.RULES_TO_SKIP);
  }

  public void addRulesToSkip(ReplacementRuleReference node) {
    this.addChild(AbstractInequationStatement.RULES_TO_SKIP, node);
  }

  public void insertRulesToSkip(ReplacementRuleReference prev, ReplacementRuleReference node) {
    this.insertChild(prev, AbstractInequationStatement.RULES_TO_SKIP, node);
  }

  public static AbstractInequationStatement newInstance(SModel sm, boolean init) {
    return (AbstractInequationStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AbstractInequationStatement newInstance(SModel sm) {
    return AbstractInequationStatement.newInstance(sm, false);
  }
}
