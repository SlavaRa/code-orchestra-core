package jetbrains.mps.lang.typesystem.scripts;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class TypesLanguageScriptsUtil {
  public TypesLanguageScriptsUtil() {
  }

  public static SNode getPriorityGroupByPriority(int priority) {
    if (priority == 500) {
      priority = 4;
    }
    String name = "priority_" + priority;
    SModel coreTypes = SModelRepository.getInstance().getModelDescriptorsByModelName("jetbrains.mps.lang.core.typesystem").get(0).getSModel();
    SNode registry = ListSequence.fromList(SModelOperations.getRoots(coreTypes, "jetbrains.mps.lang.typesystem.structure.InequationsGroupsRegistry")).first();
    for (SNode inequationsGroup : SLinkOperations.getTargets(registry, "group", true)) {
      if (name.equals(SPropertyOperations.getString(inequationsGroup, "name"))) {
        return inequationsGroup;
      }
    }

    return null;
  }
}
