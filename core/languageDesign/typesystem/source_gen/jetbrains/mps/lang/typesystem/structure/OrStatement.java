package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class OrStatement extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.OrStatement";
  public static final String OR_CLAUSE = "orClause";

  public OrStatement(SNode node) {
    super(node);
  }

  public int getOrClausesCount() {
    return this.getChildCount(OrStatement.OR_CLAUSE);
  }

  public Iterator<AbstractEquationStatement> orClauses() {
    return this.children(AbstractEquationStatement.class, OrStatement.OR_CLAUSE);
  }

  public List<AbstractEquationStatement> getOrClauses() {
    return this.getChildren(AbstractEquationStatement.class, OrStatement.OR_CLAUSE);
  }

  public void addOrClause(AbstractEquationStatement node) {
    this.addChild(OrStatement.OR_CLAUSE, node);
  }

  public void insertOrClause(AbstractEquationStatement prev, AbstractEquationStatement node) {
    this.insertChild(prev, OrStatement.OR_CLAUSE, node);
  }

  public static OrStatement newInstance(SModel sm, boolean init) {
    return (OrStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.OrStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static OrStatement newInstance(SModel sm) {
    return OrStatement.newInstance(sm, false);
  }
}
