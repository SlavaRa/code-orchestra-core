package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.ConceptDeclaration;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ConceptTypeClause extends TypeClause {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.ConceptTypeClause";
  public static final String MATCHING_CONCEPT = "matchingConcept";
  public static final String LINK_INFO = "linkInfo";

  public ConceptTypeClause(SNode node) {
    super(node);
  }

  public ConceptDeclaration getMatchingConcept() {
    return (ConceptDeclaration) this.getReferent(ConceptDeclaration.class, ConceptTypeClause.MATCHING_CONCEPT);
  }

  public void setMatchingConcept(ConceptDeclaration node) {
    super.setReferent(ConceptTypeClause.MATCHING_CONCEPT, node);
  }

  public int getLinkInfosCount() {
    return this.getChildCount(ConceptTypeClause.LINK_INFO);
  }

  public Iterator<ConceptClauseLinkInfo> linkInfos() {
    return this.children(ConceptClauseLinkInfo.class, ConceptTypeClause.LINK_INFO);
  }

  public List<ConceptClauseLinkInfo> getLinkInfos() {
    return this.getChildren(ConceptClauseLinkInfo.class, ConceptTypeClause.LINK_INFO);
  }

  public void addLinkInfo(ConceptClauseLinkInfo node) {
    this.addChild(ConceptTypeClause.LINK_INFO, node);
  }

  public void insertLinkInfo(ConceptClauseLinkInfo prev, ConceptClauseLinkInfo node) {
    this.insertChild(prev, ConceptTypeClause.LINK_INFO, node);
  }

  public static ConceptTypeClause newInstance(SModel sm, boolean init) {
    return (ConceptTypeClause) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.ConceptTypeClause", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ConceptTypeClause newInstance(SModel sm) {
    return ConceptTypeClause.newInstance(sm, false);
  }
}
