package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class TypesystemIntention extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.TypesystemIntention";
  public static final String APPLY_IMMEDIATELY = "applyImmediately";
  public static final String QUICK_FIX = "quickFix";
  public static final String ACTUAL_ARGUMENT = "actualArgument";

  public TypesystemIntention(SNode node) {
    super(node);
  }

  public boolean getApplyImmediately() {
    return this.getBooleanProperty(TypesystemIntention.APPLY_IMMEDIATELY);
  }

  public void setApplyImmediately(boolean value) {
    this.setBooleanProperty(TypesystemIntention.APPLY_IMMEDIATELY, value);
  }

  public TypesystemQuickFix getQuickFix() {
    return (TypesystemQuickFix) this.getReferent(TypesystemQuickFix.class, TypesystemIntention.QUICK_FIX);
  }

  public void setQuickFix(TypesystemQuickFix node) {
    super.setReferent(TypesystemIntention.QUICK_FIX, node);
  }

  public int getActualArgumentsCount() {
    return this.getChildCount(TypesystemIntention.ACTUAL_ARGUMENT);
  }

  public Iterator<TypesystemIntentionArgument> actualArguments() {
    return this.children(TypesystemIntentionArgument.class, TypesystemIntention.ACTUAL_ARGUMENT);
  }

  public List<TypesystemIntentionArgument> getActualArguments() {
    return this.getChildren(TypesystemIntentionArgument.class, TypesystemIntention.ACTUAL_ARGUMENT);
  }

  public void addActualArgument(TypesystemIntentionArgument node) {
    this.addChild(TypesystemIntention.ACTUAL_ARGUMENT, node);
  }

  public void insertActualArgument(TypesystemIntentionArgument prev, TypesystemIntentionArgument node) {
    this.insertChild(prev, TypesystemIntention.ACTUAL_ARGUMENT, node);
  }

  public static TypesystemIntention newInstance(SModel sm, boolean init) {
    return (TypesystemIntention) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.TypesystemIntention", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static TypesystemIntention newInstance(SModel sm) {
    return TypesystemIntention.newInstance(sm, false);
  }
}
