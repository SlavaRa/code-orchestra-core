package jetbrains.mps.lang.typesystem.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.messageTargets.PropertyMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_DuplicatedCheckingRules_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_DuplicatedCheckingRules_NonTypesystemRule() {
  }

  public void applyRule(final SNode nonTypesystemRule, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    String name = SPropertyOperations.getString(nonTypesystemRule, "name");
    for (SNode rule : SModelOperations.getRoots(SNodeOperations.getModel(nonTypesystemRule), null)) {
      if (rule != nonTypesystemRule && SNodeOperations.isInstanceOf(rule, "jetbrains.mps.lang.typesystem.structure.NonTypesystemRule")) {
        if (SPropertyOperations.getString(SNodeOperations.cast(rule, "jetbrains.mps.lang.core.structure.INamedConcept"), "name").equals(name)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new PropertyMessageTarget("name");
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(nonTypesystemRule, "Duplicated checking rule", "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "1541218333119649149", null, errorTarget);
          }
          return;
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.typesystem.structure.NonTypesystemRule";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
