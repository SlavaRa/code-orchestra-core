package jetbrains.mps.lang.typesystem.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;

public class SubtypingRule_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean call_surelyKeepsConcept_4214710807058415622(SNode thisNode) {
    SNode initialConcept = ApplicableNodeCondition_Behavior.call_getApplicableConcept_1213877307633(SLinkOperations.getTarget(thisNode, "applicableNode", true));
    for (SNode returnStatement : SNodeOperations.getDescendants(SLinkOperations.getTarget(thisNode, "body", true), "jetbrains.mps.baseLanguage.structure.ReturnStatement", false, new String[]{})) {
      SNode expression = SLinkOperations.getTarget(returnStatement, "expression", true);
      SNode supertype = TypeChecker.getInstance().getTypeOf(expression);
      if (SNodeOperations.isInstanceOf(supertype, "jetbrains.mps.lang.smodel.structure.SNodeType")) {
        if (SLinkOperations.getTarget(SNodeOperations.cast(supertype, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false) != initialConcept) {
          return false;
        }
      } else if (SNodeOperations.isInstanceOf(supertype, "jetbrains.mps.lang.smodel.structure.SNodeListType")) {
        if (SLinkOperations.getTarget(SNodeOperations.cast(supertype, "jetbrains.mps.lang.smodel.structure.SNodeListType"), "elementConcept", false) != initialConcept) {
          return false;
        }
      } else {
        return false;
      }
    }
    return true;
  }
}
