package jetbrains.mps.lang.typesystem.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.DataFlowBuilder;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.dataFlow.DataFlowBuilderContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class AssertStatement_DataFlow extends DataFlowBuilder {
  public AssertStatement_DataFlow() {
  }

  public void build(final IOperationContext operationContext, final DataFlowBuilderContext _context) {
    _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "condition", true));
    _context.getBuilder().emitIfJump(_context.getBuilder().after(_context.getNode()));
    _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "errorString", true));
    _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "nodeToReport", true));
    if ((SLinkOperations.getTarget(_context.getNode(), "messageTarget", true) != null)) {
      _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "messageTarget", true));
    }
    for (SNode intention : SLinkOperations.getTargets(_context.getNode(), "helginsIntention", true)) {
      _context.getBuilder().build((SNode) intention);
    }
    if ((SLinkOperations.getTarget(_context.getNode(), "foreignMessageSource", true) != null)) {
      _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "foreignMessageSource", true));
    }
  }
}
