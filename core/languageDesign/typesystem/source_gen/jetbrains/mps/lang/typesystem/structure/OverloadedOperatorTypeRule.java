package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class OverloadedOperatorTypeRule extends AbstractOverloadedOpsTypeRule {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule";
  public static final String LEFT_IS_EXACT = "leftIsExact";
  public static final String RIGHT_IS_EXACT = "rightIsExact";
  public static final String RIGHT_IS_STRONG = "rightIsStrong";
  public static final String LEFT_IS_STRONG = "leftIsStrong";
  public static final String LEFT_OPERAND_TYPE = "leftOperandType";
  public static final String RIGHT_OPERAND_TYPE = "rightOperandType";

  public OverloadedOperatorTypeRule(SNode node) {
    super(node);
  }

  public boolean getLeftIsExact() {
    return this.getBooleanProperty(OverloadedOperatorTypeRule.LEFT_IS_EXACT);
  }

  public void setLeftIsExact(boolean value) {
    this.setBooleanProperty(OverloadedOperatorTypeRule.LEFT_IS_EXACT, value);
  }

  public boolean getRightIsExact() {
    return this.getBooleanProperty(OverloadedOperatorTypeRule.RIGHT_IS_EXACT);
  }

  public void setRightIsExact(boolean value) {
    this.setBooleanProperty(OverloadedOperatorTypeRule.RIGHT_IS_EXACT, value);
  }

  public boolean getRightIsStrong() {
    return this.getBooleanProperty(OverloadedOperatorTypeRule.RIGHT_IS_STRONG);
  }

  public void setRightIsStrong(boolean value) {
    this.setBooleanProperty(OverloadedOperatorTypeRule.RIGHT_IS_STRONG, value);
  }

  public boolean getLeftIsStrong() {
    return this.getBooleanProperty(OverloadedOperatorTypeRule.LEFT_IS_STRONG);
  }

  public void setLeftIsStrong(boolean value) {
    this.setBooleanProperty(OverloadedOperatorTypeRule.LEFT_IS_STRONG, value);
  }

  public Expression getLeftOperandType() {
    return (Expression) this.getChild(Expression.class, OverloadedOperatorTypeRule.LEFT_OPERAND_TYPE);
  }

  public void setLeftOperandType(Expression node) {
    super.setChild(OverloadedOperatorTypeRule.LEFT_OPERAND_TYPE, node);
  }

  public Expression getRightOperandType() {
    return (Expression) this.getChild(Expression.class, OverloadedOperatorTypeRule.RIGHT_OPERAND_TYPE);
  }

  public void setRightOperandType(Expression node) {
    super.setChild(OverloadedOperatorTypeRule.RIGHT_OPERAND_TYPE, node);
  }

  public static OverloadedOperatorTypeRule newInstance(SModel sm, boolean init) {
    return (OverloadedOperatorTypeRule) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static OverloadedOperatorTypeRule newInstance(SModel sm) {
    return OverloadedOperatorTypeRule.newInstance(sm, false);
  }
}
