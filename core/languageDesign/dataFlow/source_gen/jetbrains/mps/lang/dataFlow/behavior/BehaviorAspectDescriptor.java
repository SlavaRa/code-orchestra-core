package jetbrains.mps.lang.dataFlow.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;

public class BehaviorAspectDescriptor implements jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor {
  private static String[] stringSwitchCases_846f5o_a0a0a = new String[]{"jetbrains.mps.lang.dataFlow.structure.AfterPosition", "jetbrains.mps.lang.dataFlow.structure.BeforePosition", "jetbrains.mps.lang.dataFlow.structure.BuilderBlock", "jetbrains.mps.lang.dataFlow.structure.DataFlowBuilderDeclaration", "jetbrains.mps.lang.dataFlow.structure.EmitCodeForStatement", "jetbrains.mps.lang.dataFlow.structure.EmitIfJumpStatement", "jetbrains.mps.lang.dataFlow.structure.EmitJumpStatement", "jetbrains.mps.lang.dataFlow.structure.EmitLabelStatement", "jetbrains.mps.lang.dataFlow.structure.EmitMayBeUnreachable", "jetbrains.mps.lang.dataFlow.structure.EmitNopStatement", "jetbrains.mps.lang.dataFlow.structure.EmitReadStatement", "jetbrains.mps.lang.dataFlow.structure.EmitRetStatement", "jetbrains.mps.lang.dataFlow.structure.EmitTryFinallyStatement", "jetbrains.mps.lang.dataFlow.structure.EmitWriteStatement", "jetbrains.mps.lang.dataFlow.structure.GetCodeForExpression", "jetbrains.mps.lang.dataFlow.structure.InsertAfter", "jetbrains.mps.lang.dataFlow.structure.InsertBefore", "jetbrains.mps.lang.dataFlow.structure.InstructionGetSourceOperation", "jetbrains.mps.lang.dataFlow.structure.InstructionIsJump", "jetbrains.mps.lang.dataFlow.structure.InstructionIsNop", "jetbrains.mps.lang.dataFlow.structure.InstructionIsRet", "jetbrains.mps.lang.dataFlow.structure.InstructionType", "jetbrains.mps.lang.dataFlow.structure.LabelPosition", "jetbrains.mps.lang.dataFlow.structure.NodeParameter"};

  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {
      case 3:
        return new DataFlowBuilderDeclaration_BehaviorDescriptor();
      case 2:
        return new BuilderBlock_BehaviorDescriptor();
      case 23:
        return new NodeParameter_BehaviorDescriptor();
      case 9:
        return new EmitNopStatement_BehaviorDescriptor();
      case 10:
        return new EmitReadStatement_BehaviorDescriptor();
      case 13:
        return new EmitWriteStatement_BehaviorDescriptor();
      case 1:
        return new BeforePosition_BehaviorDescriptor();
      case 0:
        return new AfterPosition_BehaviorDescriptor();
      case 5:
        return new EmitIfJumpStatement_BehaviorDescriptor();
      case 6:
        return new EmitJumpStatement_BehaviorDescriptor();
      case 4:
        return new EmitCodeForStatement_BehaviorDescriptor();
      case 11:
        return new EmitRetStatement_BehaviorDescriptor();
      case 8:
        return new EmitMayBeUnreachable_BehaviorDescriptor();
      case 12:
        return new EmitTryFinallyStatement_BehaviorDescriptor();
      case 7:
        return new EmitLabelStatement_BehaviorDescriptor();
      case 22:
        return new LabelPosition_BehaviorDescriptor();
      case 15:
        return new InsertAfter_BehaviorDescriptor();
      case 16:
        return new InsertBefore_BehaviorDescriptor();
      case 14:
        return new GetCodeForExpression_BehaviorDescriptor();
      case 21:
        return new InstructionType_BehaviorDescriptor();
      case 17:
        return new InstructionGetSourceOperation_BehaviorDescriptor();
      case 19:
        return new InstructionIsNop_BehaviorDescriptor();
      case 20:
        return new InstructionIsRet_BehaviorDescriptor();
      case 18:
        return new InstructionIsJump_BehaviorDescriptor();
      default:
        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
    }
  }
}
