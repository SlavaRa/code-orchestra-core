package jetbrains.mps.lang.test.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.BaseConcept;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class NodeTypeSetProperty extends NodeProperty {
  public static final String concept = "jetbrains.mps.lang.test.structure.NodeTypeSetProperty";
  public static final String TYPE = "type";

  public NodeTypeSetProperty(SNode node) {
    super(node);
  }

  public int getTypesCount() {
    return this.getChildCount(NodeTypeSetProperty.TYPE);
  }

  public Iterator<BaseConcept> types() {
    return this.children(BaseConcept.class, NodeTypeSetProperty.TYPE);
  }

  public List<BaseConcept> getTypes() {
    return this.getChildren(BaseConcept.class, NodeTypeSetProperty.TYPE);
  }

  public void addType(BaseConcept node) {
    this.addChild(NodeTypeSetProperty.TYPE, node);
  }

  public void insertType(BaseConcept prev, BaseConcept node) {
    this.insertChild(prev, NodeTypeSetProperty.TYPE, node);
  }

  public static NodeTypeSetProperty newInstance(SModel sm, boolean init) {
    return (NodeTypeSetProperty) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.test.structure.NodeTypeSetProperty", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NodeTypeSetProperty newInstance(SModel sm) {
    return NodeTypeSetProperty.newInstance(sm, false);
  }
}
