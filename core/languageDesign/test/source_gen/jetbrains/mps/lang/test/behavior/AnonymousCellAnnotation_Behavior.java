package jetbrains.mps.lang.test.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.NodeEditorComponent;
import java.util.Map;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.nodeEditor.selection.SelectionManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.ide.IEditor;
import jetbrains.mps.nodeEditor.selection.Selection;
import jetbrains.mps.nodeEditor.selection.SingularSelection;
import junit.framework.Assert;
import jetbrains.mps.nodeEditor.selection.NodeRangeSelection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class AnonymousCellAnnotation_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void call_setupSelection_6268941039745707957(final SNode thisNode, final NodeEditorComponent nodeEditorComponent, final SNode node, final Map<SNode, SNode> map) {
    final Wrappers._T<EditorComponent> editorComponent = new Wrappers._T<EditorComponent>(nodeEditorComponent);
    final Wrappers._T<EditorCell> cellWithId = new Wrappers._T<EditorCell>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (SPropertyOperations.getBoolean(thisNode, "isInInspector")) {
          editorComponent.value = AnonymousCellAnnotation_Behavior.call_setupInspector_5681471431307922086(thisNode, node, nodeEditorComponent);
        }
        cellWithId.value = editorComponent.value.findCellWithId(node, SPropertyOperations.getString(thisNode, "cellId"));
        if (cellWithId.value == null) {
          throw new RuntimeException("No cell " + thisNode);
        }
        AnonymousCellAnnotation_Behavior.call_setupCaretAndSelection_9114978211826243747(thisNode, cellWithId.value);
      }
    });
    editorComponent.value.changeSelection(cellWithId.value);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (SLinkOperations.getTarget(thisNode, "nodeRangeSelectionStart", false) != null) {
          SNode selectionStart = MapSequence.fromMap(map).get(SLinkOperations.getTarget(thisNode, "nodeRangeSelectionStart", false));
          SNode selectionEnd = MapSequence.fromMap(map).get(SLinkOperations.getTarget(thisNode, "nodeRangeSelectionEnd", false));
          SelectionManager selectionManager = editorComponent.value.getSelectionManager();
          selectionManager.pushSelection(selectionManager.createRangeSelection(selectionStart, selectionEnd));
        }
      }
    });
  }

  public static int call_getCaretPosition_6268941039745717986(SNode thisNode, EditorCell_Label label) {
    if (SPropertyOperations.getBoolean(thisNode, "isLastPosition")) {
      return label.getText().length();
    } else {
      return SPropertyOperations.getInteger(thisNode, "caretPosition");
    }
  }

  public static void call_assertEditor_6268941039745719581(SNode thisNode, IEditor editor, SNode node, Map<SNode, SNode> map, Map<SNode, SNode> nodeToCopy) {
    EditorComponent component = editor.getCurrentEditorComponent();
    if (SPropertyOperations.getBoolean(thisNode, "isInInspector")) {
      component = ((NodeEditorComponent) component).getInspector();
    }
    Selection selection = component.getSelectionManager().getSelection();
    assert selection != null;
    if (selection instanceof SingularSelection) {
      EditorCell selectedCell = ((SingularSelection) selection).getEditorCell();
      Assert.assertSame(node, MapSequence.fromMap(map).get(selectedCell.getSNode()));
      Assert.assertEquals(selectedCell.getCellId(), SPropertyOperations.getString(thisNode, "cellId"));
      if (selectedCell instanceof EditorCell_Label) {
        EditorCell_Label label = (EditorCell_Label) selectedCell;
        Assert.assertEquals(SPropertyOperations.getInteger(thisNode, "selectionStart"), label.getSelectionStart());
        Assert.assertEquals(SPropertyOperations.getInteger(thisNode, "selectionEnd"), label.getSelectionEnd());
      }
      Assert.assertNull(SLinkOperations.getTarget(thisNode, "nodeRangeSelectionStart", false));
      Assert.assertNull(SLinkOperations.getTarget(thisNode, "nodeRangeSelectionEnd", false));
    } else if (selection instanceof NodeRangeSelection) {
      NodeRangeSelection rangeSelection = (NodeRangeSelection) selection;
      Assert.assertNotNull(SLinkOperations.getTarget(thisNode, "nodeRangeSelectionStart", false));
      Assert.assertNotNull(SLinkOperations.getTarget(thisNode, "nodeRangeSelectionEnd", false));
      Assert.assertEquals(MapSequence.fromMap(nodeToCopy).get(SLinkOperations.getTarget(thisNode, "nodeRangeSelectionStart", false)), MapSequence.fromMap(map).get(rangeSelection.getFirstNode()));
      Assert.assertEquals(MapSequence.fromMap(nodeToCopy).get(SLinkOperations.getTarget(thisNode, "nodeRangeSelectionEnd", false)), MapSequence.fromMap(map).get(rangeSelection.getLastNode()));
    } else {
      if (selection != null) {
        Assert.fail("Selection of unsupported type: " + selection.getClass());
      } else {
        Assert.fail("Selection was not set in resulting editor");
      }
    }
  }

  public static void call_setupCaretAndSelection_9114978211826243747(SNode thisNode, EditorCell cellWithId) {
    if (cellWithId instanceof EditorCell_Label) {
      EditorCell_Label label = (EditorCell_Label) cellWithId;
      label.setCaretPosition(AnonymousCellAnnotation_Behavior.call_getCaretPosition_6268941039745717986(thisNode, label));
      label.setSelectionStart(SPropertyOperations.getInteger(thisNode, "selectionStart"));
      label.setSelectionEnd(SPropertyOperations.getInteger(thisNode, "selectionEnd"));
    }
  }

  public static EditorComponent call_setupInspector_5681471431307922086(SNode thisNode, SNode node, NodeEditorComponent nodeEditorComponent) {
    SNode nodeToSelect = node;
    while (nodeToSelect != null && nodeEditorComponent.findNodeCell(nodeToSelect) == null) {
      nodeToSelect = SNodeOperations.getParent(nodeToSelect);
    }
    nodeEditorComponent.selectNode(nodeToSelect);
    return nodeEditorComponent.getInspector();
  }
}
