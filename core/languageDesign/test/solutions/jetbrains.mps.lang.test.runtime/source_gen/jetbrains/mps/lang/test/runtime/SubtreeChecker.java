package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import junit.framework.Assert;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.test.matcher.NodesMatcher;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.dataFlow.DataFlowManager;
import java.util.Set;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import jetbrains.mps.lang.dataFlow.framework.AnalysisResult;
import jetbrains.mps.lang.dataFlow.framework.VarSet;
import jetbrains.mps.lang.dataFlow.framework.analyzers.InitializedVariablesAnalyzer;
import jetbrains.mps.lang.dataFlow.framework.analyzers.LivenessAnalyzer;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class SubtreeChecker {
  public SubtreeChecker() {
  }

  public static void checkNodeForErrors(SNode node) {
    checkNodeForErrors(node, false, false);
  }

  public static void checkNodeForErrors(SNode node, boolean allowErrors, boolean allowWarnings) {
    Assert.assertFalse("should be false (never used anyway)", allowErrors || allowWarnings);
    TypeCheckingContext typeCheckingContext = TypeContextManager.getInstance().createTypeCheckingContext(node.getContainingRoot());
    typeCheckingContext.checkIfNotChecked(node, true);
    for (SNode child : SNodeOperations.getDescendants(node, "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{})) {
      boolean isError = false;
      if (AttributeOperations.getAttribute(child, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.test.structure.NodePropertiesContainer"))) != null) {
        SNode container = AttributeOperations.getAttribute(child, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.test.structure.NodePropertiesContainer")));
        for (SNode property : SLinkOperations.getTargets(container, "properties", true)) {
          if (SNodeOperations.isInstanceOf(property, "jetbrains.mps.lang.test.structure.NodeTypeProperty")) {
            SNode type1 = typeCheckingContext.getTypeDontCheck(child);
            SNode type2 = SLinkOperations.getTarget(SNodeOperations.cast(property, "jetbrains.mps.lang.test.structure.NodeTypeProperty"), "type", true);
            Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), type1), ListSequence.fromListAndArray(new ArrayList<SNode>(), type2)));
          }
          if (SNodeOperations.isInstanceOf(property, "jetbrains.mps.lang.test.structure.NodeTypeSetProperty")) {
            SNode type1 = typeCheckingContext.getTypeDontCheck(child);
            boolean hasType = false;
            for (SNode type2 : SLinkOperations.getTargets(SNodeOperations.cast(property, "jetbrains.mps.lang.test.structure.NodeTypeSetProperty"), "type", true)) {
              if (MatchingUtil.matchNodes(type1, type2)) {
                hasType = true;
                break;
              }
            }
            Assert.assertTrue(hasType);
          }
          if (SNodeOperations.isInstanceOf(property, "jetbrains.mps.lang.test.structure.NodeErrorPropety")) {
            Assert.assertTrue(typeCheckingContext.getTypeMessageDontCheck(child) != null);
            Assert.assertFalse(typeCheckingContext.getTypeMessageDontCheck(child).getMessageStatus() == MessageStatus.WARNING);
            isError = true;
          }
          if (SNodeOperations.isInstanceOf(property, "jetbrains.mps.lang.test.structure.NodeWarningProperty")) {
            Assert.assertTrue(typeCheckingContext.getTypeMessageDontCheck(child) != null);
            Assert.assertTrue(typeCheckingContext.getTypeMessageDontCheck(child).getMessageStatus() == MessageStatus.WARNING);
            isError = true;
          }
        }
      }
      if (!(isError)) {
        IErrorReporter reporter = typeCheckingContext.getTypeMessageDontCheck(child);
        if (reporter != null) {
          if (!(allowErrors)) {
            Assert.assertTrue(reporter.getMessageStatus() != MessageStatus.ERROR);
          }
          if (!(allowWarnings)) {
            Assert.assertTrue(reporter.getMessageStatus() != MessageStatus.WARNING);
          }
        }
      }
    }
    typeCheckingContext.dispose();
  }

  public static void checkDataFlow(SNode node) {
    Program program = DataFlowManager.getInstance().buildProgramFor(node);
    Set<Instruction> unreachable = program.getUnreachableInstructions();
    AnalysisResult<VarSet> initialized = program.analyze(new InitializedVariablesAnalyzer());
    AnalysisResult<VarSet> live = program.analyze(new LivenessAnalyzer());
    for (SNode child : SNodeOperations.getDescendants(node, "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{})) {
      if (AttributeOperations.getAttribute(child, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.test.structure.NodePropertiesContainer"))) != null) {
        SNode container = AttributeOperations.getAttribute(child, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.test.structure.NodePropertiesContainer")));
        for (SNode property : SLinkOperations.getTargets(container, "properties", true)) {
          Instruction instruction;
          List<Instruction> instructions = program.getInstructionsFor(child);
          if (ListSequence.fromList(instructions).count() > 0) {
            instruction = program.getInstructionsFor(child).get(0);
          } else {
            continue;
          }
          if (SNodeOperations.isInstanceOf(property, "jetbrains.mps.lang.test.structure.NodeReachable")) {
            Assert.assertFalse(SetSequence.fromSet(unreachable).contains(instruction));
          }
          if (SNodeOperations.isInstanceOf(property, "jetbrains.mps.lang.test.structure.NodeUnreachable")) {
            Assert.assertTrue(SetSequence.fromSet(unreachable).contains(instruction));
          }
          if (SNodeOperations.isInstanceOf(property, "jetbrains.mps.lang.test.structure.NodeUnreachable")) {
            Assert.assertTrue(SetSequence.fromSet(unreachable).contains(instruction));
          }
          if (SNodeOperations.isInstanceOf(property, "jetbrains.mps.lang.test.structure.VariableInialized")) {
            Set<Object> vars = (Set<Object>) initialized.get(instruction);
            SNode var = SLinkOperations.getTarget(SNodeOperations.cast(property, "jetbrains.mps.lang.test.structure.VariableInialized"), "var", true);
            Assert.assertTrue(SetSequence.fromSet(vars).contains(SLinkOperations.getTarget(var, "variableDeclaration", false)));
          }
          if (SNodeOperations.isInstanceOf(property, "jetbrains.mps.lang.test.structure.VariableLive")) {
            Set<Object> vars = (Set<Object>) live.get(instruction);
            SNode var = SLinkOperations.getTarget(SNodeOperations.cast(property, "jetbrains.mps.lang.test.structure.VariableInialized"), "var", true);
            Assert.assertTrue(SetSequence.fromSet(vars).contains(SLinkOperations.getTarget(var, "variableDeclaration", false)));
          }
        }
      }
    }
  }

  public static void performOperations(SNode node) {
    for (SNode nodeToCheck : SNodeOperations.getDescendants(node, "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{})) {
      if (nodeToCheck != null) {
        if (AttributeOperations.getAttribute(nodeToCheck, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.test.structure.NodeOperationsContainer"))) != null) {
          for (SNode operation : SLinkOperations.getTargets(AttributeOperations.getAttribute(nodeToCheck, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.test.structure.NodeOperationsContainer"))), "operations", true)) {
            BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(operation, "jetbrains.mps.lang.test.structure.NodeOperation"), "virtual_perform_1215601182156", new Class[]{SNode.class, SNode.class}, nodeToCheck);
          }
        }
      }
    }
  }

  public static void runTest() {
  }
}
