package jetbrains.mps.lang.structure.generator_new.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.structure.behavior.PrimitiveDataTypeDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class QueriesUtil {
  public static boolean propertyDataType_isString(SNode property) {
    SNode dataType = SLinkOperations.getTarget(property, "dataType", false);
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration")) {
      return PrimitiveDataTypeDeclaration_Behavior.call_isString_1220268752134(SNodeOperations.cast(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration"));
    }
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.ConstrainedDataTypeDeclaration")) {
      return true;
    }
    return false;
  }

  public static boolean propertyDataType_isBoolean(SNode property) {
    SNode dataType = SLinkOperations.getTarget(property, "dataType", false);
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration")) {
      return PrimitiveDataTypeDeclaration_Behavior.call_isBoolean_1220268791641(SNodeOperations.cast(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration"));
    }
    return false;
  }

  public static boolean propertyDataType_isInteger(SNode property) {
    SNode dataType = SLinkOperations.getTarget(property, "dataType", false);
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration")) {
      return PrimitiveDataTypeDeclaration_Behavior.call_isInteger_1220268780075(SNodeOperations.cast(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration"));
    }
    return false;
  }

  public static boolean propertyDataType_isEnum(SNode property) {
    SNode dataType = SLinkOperations.getTarget(property, "dataType", false);
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration")) {
      return true;
    }
    return false;
  }

  public static boolean isRefLink_card_1_nospec(SNode link) {
    if (SPropertyOperations.hasValue(link, "metaClass", "reference", "reference")) {
      if (SPropertyOperations.hasValue(link, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(link, "sourceCardinality", "1", "0..1")) {
        return SLinkOperations.getTarget(link, "specializedLink", false) == null;
      }
    }
    return false;
  }

  public static boolean isRefLink_card_1_spec(SNode link) {
    if (SLinkOperations.getTarget(link, "specializedLink", false) != null) {
      SNode genuineLink = SModelUtil.getGenuineLinkDeclaration(link);
      if (SPropertyOperations.hasValue(genuineLink, "metaClass", "reference", "reference")) {
        if (SPropertyOperations.hasValue(genuineLink, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(genuineLink, "sourceCardinality", "1", "0..1")) {
          return true;
        }
      }
    }
    return false;
  }

  public static boolean isAggLink_card_1_nospec(SNode link) {
    if (SPropertyOperations.hasValue(link, "metaClass", "aggregation", "reference")) {
      if (SPropertyOperations.hasValue(link, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(link, "sourceCardinality", "1", "0..1")) {
        return SLinkOperations.getTarget(link, "specializedLink", false) == null;
      }
    }
    return false;
  }

  public static boolean isAggLink_card_n_nospec(SNode link) {
    if (SPropertyOperations.hasValue(link, "metaClass", "aggregation", "reference")) {
      if (SPropertyOperations.hasValue(link, "sourceCardinality", "0..n", "0..1") || SPropertyOperations.hasValue(link, "sourceCardinality", "1..n", "0..1")) {
        return SLinkOperations.getTarget(link, "specializedLink", false) == null;
      }
    }
    return false;
  }

  public static boolean isAggLink_card_1_spec(SNode link) {
    if (SLinkOperations.getTarget(link, "specializedLink", false) != null) {
      SNode genuineLink = SModelUtil.getGenuineLinkDeclaration(link);
      if (SPropertyOperations.hasValue(genuineLink, "metaClass", "aggregation", "reference")) {
        if (SPropertyOperations.hasValue(genuineLink, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(genuineLink, "sourceCardinality", "1", "0..1")) {
          return true;
        }
      }
    }
    return false;
  }

  public static List<SNode> conceptAndItsInterfaces(SNode concept) {
    List<SNode> result = ListSequence.fromListAndArray(new ArrayList<SNode>(), concept);
    ListSequence.fromList(result).addSequence(ListSequence.fromList(SModelUtil.getDirectSuperInterfacesAndTheirSupers(concept)));
    return result;
  }

  public static boolean AL_isNodeStereotypeAndSingular(SNode al) {
    return SPropertyOperations.hasValue(al, "stereotype", "node", "node") && QueriesUtil.AL_isSingular(al);
  }

  public static boolean AL_isNodeStereotypeAndPlural(SNode al) {
    return SPropertyOperations.hasValue(al, "stereotype", "node", "node") && QueriesUtil.AL_isPlural(al);
  }

  public static boolean AL_isPropertyStereotypeAndSingular(SNode al) {
    return SPropertyOperations.hasValue(al, "stereotype", "property", "node") && QueriesUtil.AL_isSingular(al);
  }

  public static boolean AL_isPropertyStereotypeAndPlural(SNode al) {
    return SPropertyOperations.hasValue(al, "stereotype", "property", "node") && QueriesUtil.AL_isPlural(al);
  }

  public static boolean AL_isLinkStereotypeAndSingular(SNode al) {
    return SPropertyOperations.hasValue(al, "stereotype", "link", "node") && QueriesUtil.AL_isSingular(al);
  }

  public static boolean AL_isLinkStereotypeAndPlural(SNode al) {
    return SPropertyOperations.hasValue(al, "stereotype", "link", "node") && QueriesUtil.AL_isPlural(al);
  }

  public static boolean AL_isSingular(SNode al) {
    boolean b1 = SPropertyOperations.hasValue(al, "sourceCardinality", "0..1", "0..1");
    return b1;
  }

  public static boolean AL_isPlural(SNode al) {
    boolean b1 = SPropertyOperations.hasValue(al, "sourceCardinality", "0..n", "0..1");
    return b1;
  }

  public static String conceptClassFQName(SNode conceptDeclaration) {
    if ((conceptDeclaration == null)) {
      return "jetbrains.mps.core.structure.BaseConcept";
    }
    return SNodeOperations.getModel(conceptDeclaration).getLongName() + "." + SPropertyOperations.getString(conceptDeclaration, "name");
  }

  public static String getEnumClassResolveInfo(SNode enumDeclaration) {
    return "[" + SModelOperations.getModelName(SNodeOperations.getModel(enumDeclaration)) + "]" + SPropertyOperations.getString(enumDeclaration, "name");
  }

  public static String AL_class_getterName(SNode node) {
    return "get" + NameUtil.capitalize(SPropertyOperations.getString(node, "role"));
  }

  public static String AL_class_listGetterName(SNode node) {
    String role = NameUtil.pluralize(SPropertyOperations.getString(node, "role"));
    return "get" + NameUtil.capitalize(role);
  }

  public static String AL_class_setterName(SNode node) {
    if (QueriesUtil.AL_isSingular(node)) {
      return "set" + NameUtil.capitalize(SPropertyOperations.getString(node, "role"));
    }
    return "add" + NameUtil.capitalize(SPropertyOperations.getString(node, "role"));
  }

  public static Language getInputLanguage(SModel inputModel) {
    return Language.getLanguageFor(inputModel.getModelDescriptor());
  }

  public static int getPropertyIndex(SNode property) {
    if (SPropertyOperations.getBoolean(property, "doNotGenerate")) {
      return -1;
    }
    SNode dataType = SLinkOperations.getTarget(property, "dataType", false);
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration")) {
      SNode pdtd = SNodeOperations.cast(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration");
      if (PrimitiveDataTypeDeclaration_Behavior.call_isString_1220268752134(pdtd)) {
        return 0;
      }
      if (PrimitiveDataTypeDeclaration_Behavior.call_isBoolean_1220268791641(pdtd)) {
        return 1;
      }
      if (PrimitiveDataTypeDeclaration_Behavior.call_isInteger_1220268780075(pdtd)) {
        return 2;
      }
    }
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.ConstrainedDataTypeDeclaration")) {
      return 0;
    }
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration")) {
      return 3;
    }
    return 4;
  }

  public static int getInterfacePropertyIndex(SNode property) {
    if (SPropertyOperations.getBoolean(property, "doNotGenerate")) {
      return 4;
    }
    SNode dataType = SLinkOperations.getTarget(property, "dataType", false);
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration")) {
      SNode pdtd = SNodeOperations.cast(dataType, "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration");
      if (PrimitiveDataTypeDeclaration_Behavior.call_isString_1220268752134(pdtd)) {
        return 0;
      }
      if (PrimitiveDataTypeDeclaration_Behavior.call_isBoolean_1220268791641(pdtd)) {
        return 1;
      }
      if (PrimitiveDataTypeDeclaration_Behavior.call_isInteger_1220268780075(pdtd)) {
        return 2;
      }
    }
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.ConstrainedDataTypeDeclaration")) {
      return 0;
    }
    if (SNodeOperations.isInstanceOf(dataType, "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration")) {
      return 3;
    }
    return 5;
  }

  public static Iterable<SNode> sortedProperties(Iterable<SNode> r) {
    return Sequence.fromIterable(r).sort(new ISelector<SNode, Comparable<?>>() {
      public Comparable<?> select(SNode it) {
        return getPropertyIndex(it);
      }
    }, true);
  }

  public static Iterable<SNode> sortedPropertiesForInterface(Iterable<SNode> r) {
    return Sequence.fromIterable(r).sort(new ISelector<SNode, Comparable<?>>() {
      public Comparable<?> select(SNode it) {
        return getPropertyIndex(it);
      }
    }, true);
  }

  public static int getLinkIndex(SNode link) {
    if (SPropertyOperations.getBoolean(link, "doNotGenerate")) {
      return -1;
    }
    if (isRefLink_card_1_nospec(link)) {
      return 0;
    }
    if (isRefLink_card_1_spec(link)) {
      return 1;
    }
    if (isAggLink_card_1_nospec(link)) {
      return 2;
    }
    if (isAggLink_card_1_spec(link)) {
      return 3;
    }
    if (isAggLink_card_n_nospec(link)) {
      return 4;
    }
    return 5;
  }

  public static int getInterfaceLinkIndex(SNode link) {
    if (SPropertyOperations.getBoolean(link, "doNotGenerate")) {
      return -1;
    }
    if (isAggLink_card_1_nospec(link)) {
      return 1;
    }
    if (isAggLink_card_1_spec(link)) {
      return 2;
    }
    if (isAggLink_card_n_nospec(link)) {
      return 3;
    }
    if (isRefLink_card_1_nospec(link)) {
      return 4;
    }
    if (isRefLink_card_1_spec(link)) {
      return 5;
    }
    return 5;
  }

  public static Iterable<SNode> sortedLinks(Iterable<SNode> r) {
    return Sequence.fromIterable(r).sort(new ISelector<SNode, Comparable<?>>() {
      public Comparable<?> select(SNode it) {
        return getLinkIndex(it);
      }
    }, true);
  }

  public static Iterable<SNode> sortedLinksForInterface(Iterable<SNode> r) {
    return Sequence.fromIterable(r).sort(new ISelector<SNode, Comparable<?>>() {
      public Comparable<?> select(SNode it) {
        return getInterfaceLinkIndex(it);
      }
    }, true);
  }
}
