package jetbrains.mps.lang.structure.refactorings;

/*Generated by MPS */

import com.intellij.ui.components.JBScrollPane;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.hierarchy.ChildHierarchyTreeNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.hierarchy.AbstractHierarchyTree;
import jetbrains.mps.refactoring.framework.ConceptAncestorsProvider;
import java.util.Set;
import java.util.HashSet;

public class NodeHierarchyChooser extends JBScrollPane {
  private NodeHierarchyChooser.MyHierarchyTree myTree;

  public NodeHierarchyChooser(final RefactoringContext context) {
    super();
    this.myTree = new NodeHierarchyChooser.MyHierarchyTree();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        NodeHierarchyChooser.this.myTree.setHierarchyNode(SNodeOperations.getAncestor(context.getSelectedNode(), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false));
      }
    });
    this.setViewportView(this.myTree);
    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        NodeHierarchyChooser.this.myTree.rebuildNow();
      }
    });
  }

  public SNode getSelectedObject() {
    final ChildHierarchyTreeNode treeNode = (ChildHierarchyTreeNode) myTree.getSelectionPath().getLastPathComponent();
    if (treeNode == null) {
      return null;
    }
    final Wrappers._T<SNode> result = new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        result.value = treeNode.getNode();
      }
    });
    return ((SNode) result.value);
  }

  public static class MyHierarchyTree extends AbstractHierarchyTree {
    private ConceptAncestorsProvider ancestorsProvider;

    public MyHierarchyTree() {
      super(null, "jetbrains.mps.lang.core.structure.BaseConcept", false);
    }

    public void setHierarchyNode(SNode node) {
      this.myHierarchyNode = node;
    }

    protected Set<SNode> getDescendants(SNode node, Set<SNode> visited) {
      this.ancestorsProvider = new ConceptAncestorsProvider();
      return this.ancestorsProvider.getDescendants(node);
    }

    protected SNode getParent(SNode node) {
      return null;
    }

    protected Set<SNode> getParents(SNode node, Set<SNode> visited) {
      return new HashSet<SNode>();
    }

    protected String noNodeString() {
      return "no node";
    }
  }
}
