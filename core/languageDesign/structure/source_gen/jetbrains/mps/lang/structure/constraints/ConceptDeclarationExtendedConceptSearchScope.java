package jetbrains.mps.lang.structure.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.search.AbstractSearchScope;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.smodel.IScope;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.Condition;
import jetbrains.mps.util.CollectionUtil;
import java.util.ArrayList;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.kernel.model.SModelUtil;

/*package*/ class ConceptDeclarationExtendedConceptSearchScope extends AbstractSearchScope {
  private SNode myConcept;
  private List<SNode> myOwnNodes;
  private IScope myScope;

  public ConceptDeclarationExtendedConceptSearchScope(@Nullable SNode concept, IScope scope) {
    myScope = scope;
    myConcept = concept;
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    if (myOwnNodes == null) {
      myOwnNodes = createOwnNodesList();
    }
    return CollectionUtil.filter(myOwnNodes, condition);
  }

  private List<SNode> createOwnNodesList() {
    if (myConcept == null) {
      return new ArrayList<SNode>();
    }
    ISearchScope allNodesScope = SModelSearchUtil.createModelAndImportedModelsScope(SNodeOperations.getModel(myConcept), myScope);
    return allNodesScope.getNodes(new Condition<SNode>() {
      public boolean met(SNode n) {
        if (n == myConcept) {
          return false;
        }
        if (!((SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")))) {
          return false;
        }
        SNode concept = SNodeOperations.cast(n, "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
        return !(SModelUtil.isAssignableConcept(concept, myConcept));
      }
    });
  }
}
