package jetbrains.mps.lang.structure.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.search.AbstractSearchScope;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.smodel.IScope;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.Condition;
import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Collections;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;

/*package*/ class ReferenceConceptLinkTargetSearchScope extends AbstractSearchScope {
  private SNode myReferenceConceptLink;
  private List<SNode> myOwnNodes;
  private IScope myScope;

  public ReferenceConceptLinkTargetSearchScope(SNode referenceConceptLink, IScope scope) {
    myScope = scope;
    myReferenceConceptLink = referenceConceptLink;
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    if (myOwnNodes == null) {
      myOwnNodes = createOwnNodesList();
    }
    return CollectionUtil.filter(myOwnNodes, condition);
  }

  private List<SNode> createOwnNodesList() {
    SNode linkDeclaration = SLinkOperations.getTarget(myReferenceConceptLink, "conceptLinkDeclaration", false);
    if (linkDeclaration == null) {
      return Collections.emptyList();
    }

    final SNode targetConcept = SLinkOperations.getTarget(linkDeclaration, "targetType", false);
    if (targetConcept == null) {
      return Collections.emptyList();
    }

    ISearchScope allNodesScope = SModelSearchUtil.createModelAndImportedModelsScope(myReferenceConceptLink.getModel(), myScope);
    return allNodesScope.getNodes(new Condition<SNode>() {
      public boolean met(SNode n) {
        return SNodeOperations.isInstanceOf(n, NameUtil.nodeFQName(targetConcept));
      }
    });
  }
}
