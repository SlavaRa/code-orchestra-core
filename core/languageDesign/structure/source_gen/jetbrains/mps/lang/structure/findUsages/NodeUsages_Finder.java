package jetbrains.mps.lang.structure.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import com.intellij.openapi.progress.ProgressIndicator;
import java.util.Set;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class NodeUsages_Finder extends GeneratedFinder {
  private static Logger LOG = Logger.getLogger("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder");

  public NodeUsages_Finder() {
  }

  public String getDescription() {
    return "Node Usages";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  protected void doFind(SNode node, IScope scope, List<SNode> _results, ProgressIndicator indicator) {
    Set<SReference> resRefs = FindUsagesManager.getInstance().findUsages(CollectionUtil.set(node), scope, new FindUsagesManager.ProgressAdapter(indicator), false);
    for (SReference reference : resRefs) {
      ListSequence.fromList(_results).addElement(reference.getSourceNode());
    }
  }

  public String getNodeCategory(SNode node) {
    return "Node Usages";
  }
}
