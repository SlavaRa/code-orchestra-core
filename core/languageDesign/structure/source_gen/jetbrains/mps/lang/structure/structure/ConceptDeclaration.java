package jetbrains.mps.lang.structure.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ConceptDeclaration extends AbstractConceptDeclaration {
  public static final String concept = "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
  public static final String ICON_PATH = "iconPath";
  public static final String ROOTABLE = "rootable";
  public static final String EXTENDS = "extends";
  public static final String IMPLEMENTS = "implements";

  public ConceptDeclaration(SNode node) {
    super(node);
  }

  public String getIconPath() {
    return this.getProperty(ConceptDeclaration.ICON_PATH);
  }

  public void setIconPath(String value) {
    this.setProperty(ConceptDeclaration.ICON_PATH, value);
  }

  public boolean getRootable() {
    return this.getBooleanProperty(ConceptDeclaration.ROOTABLE);
  }

  public void setRootable(boolean value) {
    this.setBooleanProperty(ConceptDeclaration.ROOTABLE, value);
  }

  public ConceptDeclaration getExtends() {
    return (ConceptDeclaration) this.getReferent(ConceptDeclaration.class, ConceptDeclaration.EXTENDS);
  }

  public void setExtends(ConceptDeclaration node) {
    super.setReferent(ConceptDeclaration.EXTENDS, node);
  }

  public int getImplementsesCount() {
    return this.getChildCount(ConceptDeclaration.IMPLEMENTS);
  }

  public Iterator<InterfaceConceptReference> implementses() {
    return this.children(InterfaceConceptReference.class, ConceptDeclaration.IMPLEMENTS);
  }

  public List<InterfaceConceptReference> getImplementses() {
    return this.getChildren(InterfaceConceptReference.class, ConceptDeclaration.IMPLEMENTS);
  }

  public void addImplements(InterfaceConceptReference node) {
    this.addChild(ConceptDeclaration.IMPLEMENTS, node);
  }

  public void insertImplements(InterfaceConceptReference prev, InterfaceConceptReference node) {
    this.insertChild(prev, ConceptDeclaration.IMPLEMENTS, node);
  }

  public static ConceptDeclaration newInstance(SModel sm, boolean init) {
    return (ConceptDeclaration) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ConceptDeclaration newInstance(SModel sm) {
    return ConceptDeclaration.newInstance(sm, false);
  }
}
