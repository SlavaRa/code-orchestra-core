package jetbrains.mps.lang.structure.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;

public class ConstraintsAspectDescriptor implements jetbrains.mps.smodel.runtime.ConstraintsAspectDescriptor {
  private static String[] stringSwitchCases_2qnle6_a0a0a = new String[]{"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", "jetbrains.mps.lang.structure.structure.AnnotationLinkDeclaration", "jetbrains.mps.lang.structure.structure.ConceptDeclaration", "jetbrains.mps.lang.structure.structure.ConceptLink", "jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration", "jetbrains.mps.lang.structure.structure.ConceptProperty", "jetbrains.mps.lang.structure.structure.ConstrainedDataTypeDeclaration", "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration", "jetbrains.mps.lang.structure.structure.EnumerationMemberDeclaration", "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration", "jetbrains.mps.lang.structure.structure.LinkDeclaration", "jetbrains.mps.lang.structure.structure.PropertyDeclaration", "jetbrains.mps.lang.structure.structure.ReferenceConceptLink"};

  public ConstraintsAspectDescriptor() {
  }

  public ConstraintsDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_2qnle6_a0a0a, fqName)) {
      case 8:
        return new EnumerationMemberDeclaration_Constraints();
      case 2:
        return new ConceptDeclaration_Constraints();
      case 10:
        return new LinkDeclaration_Constraints();
      case 7:
        return new EnumerationDataTypeDeclaration_Constraints();
      case 12:
        return new ReferenceConceptLink_Constraints();
      case 1:
        return new AnnotationLinkDeclaration_Constraints();
      case 3:
        return new ConceptLink_Constraints();
      case 5:
        return new ConceptProperty_Constraints();
      case 9:
        return new InterfaceConceptDeclaration_Constraints();
      case 6:
        return new ConstrainedDataTypeDeclaration_Constraints();
      case 4:
        return new ConceptLinkDeclaration_Constraints();
      case 0:
        return new AbstractConceptDeclaration_Constraints();
      case 11:
        return new PropertyDeclaration_Constraints();
      default:
        // todo: illegal in some cases? 
        return new BaseConstraintsDescriptor(fqName);
    }
  }
}
