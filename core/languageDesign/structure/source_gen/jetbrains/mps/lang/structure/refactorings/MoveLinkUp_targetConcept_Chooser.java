package jetbrains.mps.lang.structure.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.paramchooser.BaseChooser;
import javax.swing.JComponent;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.refactoring.framework.InvalidInputValueException;
import jetbrains.mps.smodel.SNode;

public class MoveLinkUp_targetConcept_Chooser extends BaseChooser {
  private NodeHierarchyChooser myMainComponent;
  private JComponent myComponentToFocus;

  public MoveLinkUp_targetConcept_Chooser(final RefactoringContext refactoringContext) {
    super(refactoringContext);
    this.myMainComponent = new NodeHierarchyChooser(MoveLinkUp_targetConcept_Chooser.this.getRefactoringContext());
    this.myComponentToFocus = this.myMainComponent;
  }

  public boolean isStretchable() {
    return true;
  }

  public JComponent getMainComponent() {
    return this.myMainComponent;
  }

  public JComponent getComponentToFocus() {
    return this.myComponentToFocus;
  }

  public void commit() throws InvalidInputValueException {
    SNode selectedObject = MoveLinkUp_targetConcept_Chooser.this.myMainComponent.getSelectedObject();
    if ((selectedObject == null)) {
      throw new InvalidInputValueException("target node is not selected");
    }
    MoveLinkUp_targetConcept_Chooser.this.getRefactoringContext().setParameter("targetConcept", selectedObject);
  }
}
