package jetbrains.mps.lang.structure.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class DeleteUndeclaredLinksAndProperties_MigrationScript extends BaseMigrationScript {
  public DeleteUndeclaredLinksAndProperties_MigrationScript(IOperationContext operationContext) {
    super("Delete Undeclared Links and Properties");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Undeclared property";
      }

      public String getAdditionalInfo() {
        return "Undeclared property";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.core.structure.BaseConcept";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        for (String propname : SetSequence.fromSet(node.getProperties().keySet())) {
          if (node.getPropertyDeclaration(propname) == null) {
            return true;
          }
        }
        return false;
      }

      public void doUpdateInstanceNode(SNode node) {
        for (String propname : SetSequence.fromSet(node.getProperties().keySet())) {
          if (node.getPropertyDeclaration(propname) == null) {
            node.setProperty(propname, null, false);
          }
        }
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Child in undeclared role";
      }

      public String getAdditionalInfo() {
        return "Child in undeclared role";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.core.structure.BaseConcept";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return (SNodeOperations.getParent(node) != null) && (SNodeOperations.getContainingLinkDeclaration(node) == null);
      }

      public void doUpdateInstanceNode(SNode node) {
        SNodeOperations.deleteNode(node);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Undeclared reference";
      }

      public String getAdditionalInfo() {
        return "Undeclared reference";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.core.structure.BaseConcept";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return Sequence.fromIterable(SNodeOperations.getReferences(node)).where(new IWhereFilter<SReference>() {
          public boolean accept(SReference it) {
            return (SLinkOperations.findLinkDeclaration(it) == null);
          }
        }).isNotEmpty();
      }

      public void doUpdateInstanceNode(SNode node) {
        for (SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(node)).where(new IWhereFilter<SReference>() {
          public boolean accept(SReference it) {
            return (SLinkOperations.findLinkDeclaration(it) == null);
          }
        }).toGenericArray(SReference.class)) {
          node.removeReference(ref);
        }
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
