package jetbrains.mps.lang.pattern.testLang.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ListValue extends BaseConcept {
  public static final String concept = "jetbrains.mps.lang.pattern.testLang.structure.ListValue";
  public static final String VARIABLE = "variable";
  public static final String VALUE = "value";

  public ListValue(SNode node) {
    super(node);
  }

  public TestListReference getVariable() {
    return (TestListReference) this.getChild(TestListReference.class, ListValue.VARIABLE);
  }

  public void setVariable(TestListReference node) {
    super.setChild(ListValue.VARIABLE, node);
  }

  public int getValuesCount() {
    return this.getChildCount(ListValue.VALUE);
  }

  public Iterator<BaseConcept> values() {
    return this.children(BaseConcept.class, ListValue.VALUE);
  }

  public List<BaseConcept> getValues() {
    return this.getChildren(BaseConcept.class, ListValue.VALUE);
  }

  public void addValue(BaseConcept node) {
    this.addChild(ListValue.VALUE, node);
  }

  public void insertValue(BaseConcept prev, BaseConcept node) {
    this.insertChild(prev, ListValue.VALUE, node);
  }

  public static ListValue newInstance(SModel sm, boolean init) {
    return (ListValue) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.pattern.testLang.structure.ListValue", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ListValue newInstance(SModel sm) {
    return ListValue.newInstance(sm, false);
  }
}
