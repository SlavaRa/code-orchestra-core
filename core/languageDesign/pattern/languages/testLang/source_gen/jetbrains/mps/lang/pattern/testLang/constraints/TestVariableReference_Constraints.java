package jetbrains.mps.lang.pattern.testLang.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class TestVariableReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_t68zsq_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:02c98d9f-8736-40ad-9bbb-eeffd3fee9b8(jetbrains.mps.lang.pattern.testLang.constraints)", "8707387027762047796");

  public TestVariableReference_Constraints() {
    super("jetbrains.mps.lang.pattern.testLang.structure.TestVariableReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("declaration", new BaseReferenceConstraintsDescriptor("declaration", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            List<SNode> variables = SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getEnclosingNode(), "jetbrains.mps.lang.pattern.testLang.structure.PatternTest", false, false), "jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration", false, new String[]{});
            List<SNode> result = new ArrayList<SNode>();
            Set<String> names = new HashSet();
            for (SNode var : variables) {
              if (!(names.contains(SPropertyOperations.getString(var, "name")))) {
                ListSequence.fromList(result).addElement(var);
                names.add(SPropertyOperations.getString(var, "name"));
              }
            }
            return result;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_t68zsq_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
