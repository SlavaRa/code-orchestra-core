package jetbrains.mps.lang.pattern.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class OrPattern extends Pattern {
  public static final String concept = "jetbrains.mps.lang.pattern.structure.OrPattern";
  public static final String CLAUSE = "clause";
  public static final String VARIABLE = "variable";

  public OrPattern(SNode node) {
    super(node);
  }

  public int getClausesCount() {
    return this.getChildCount(OrPattern.CLAUSE);
  }

  public Iterator<OrPatternClause> clauses() {
    return this.children(OrPatternClause.class, OrPattern.CLAUSE);
  }

  public List<OrPatternClause> getClauses() {
    return this.getChildren(OrPatternClause.class, OrPattern.CLAUSE);
  }

  public void addClause(OrPatternClause node) {
    this.addChild(OrPattern.CLAUSE, node);
  }

  public void insertClause(OrPatternClause prev, OrPatternClause node) {
    this.insertChild(prev, OrPattern.CLAUSE, node);
  }

  public int getVariablesCount() {
    return this.getChildCount(OrPattern.VARIABLE);
  }

  public Iterator<PatternVariableDeclaration> variables() {
    return this.children(PatternVariableDeclaration.class, OrPattern.VARIABLE);
  }

  public List<PatternVariableDeclaration> getVariables() {
    return this.getChildren(PatternVariableDeclaration.class, OrPattern.VARIABLE);
  }

  public void addVariable(PatternVariableDeclaration node) {
    this.addChild(OrPattern.VARIABLE, node);
  }

  public void insertVariable(PatternVariableDeclaration prev, PatternVariableDeclaration node) {
    this.insertChild(prev, OrPattern.VARIABLE, node);
  }

  public static OrPattern newInstance(SModel sm, boolean init) {
    return (OrPattern) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.pattern.structure.OrPattern", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static OrPattern newInstance(SModel sm) {
    return OrPattern.newInstance(sm, false);
  }
}
