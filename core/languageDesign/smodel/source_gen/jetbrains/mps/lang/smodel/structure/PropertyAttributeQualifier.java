package jetbrains.mps.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class PropertyAttributeQualifier extends AttributeQualifier {
  public static final String concept = "jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier";
  public static final String ATTRIBUTE_CONCEPT = "attributeConcept";
  public static final String PROPERTY_QUALIFIER = "propertyQualifier";

  public PropertyAttributeQualifier(SNode node) {
    super(node);
  }

  public ConceptDeclaration getAttributeConcept() {
    return (ConceptDeclaration) this.getReferent(ConceptDeclaration.class, PropertyAttributeQualifier.ATTRIBUTE_CONCEPT);
  }

  public void setAttributeConcept(ConceptDeclaration node) {
    super.setReferent(PropertyAttributeQualifier.ATTRIBUTE_CONCEPT, node);
  }

  public IPropertyQualifier getPropertyQualifier() {
    return (IPropertyQualifier) this.getChild(IPropertyQualifier.class, PropertyAttributeQualifier.PROPERTY_QUALIFIER);
  }

  public void setPropertyQualifier(IPropertyQualifier node) {
    super.setChild(PropertyAttributeQualifier.PROPERTY_QUALIFIER, node);
  }

  public static PropertyAttributeQualifier newInstance(SModel sm, boolean init) {
    return (PropertyAttributeQualifier) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static PropertyAttributeQualifier newInstance(SModel sm) {
    return PropertyAttributeQualifier.newInstance(sm, false);
  }
}
