package jetbrains.mps.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.lang.structure.structure.PropertyDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class PropertyNameRefExpression extends Expression {
  public static final String concept = "jetbrains.mps.lang.smodel.structure.PropertyNameRefExpression";
  public static final String CONCEPT_DECLARATION = "conceptDeclaration";
  public static final String PROPERTY_DECLARATION = "propertyDeclaration";

  public PropertyNameRefExpression(SNode node) {
    super(node);
  }

  public AbstractConceptDeclaration getConceptDeclaration() {
    return (AbstractConceptDeclaration) this.getReferent(AbstractConceptDeclaration.class, PropertyNameRefExpression.CONCEPT_DECLARATION);
  }

  public void setConceptDeclaration(AbstractConceptDeclaration node) {
    super.setReferent(PropertyNameRefExpression.CONCEPT_DECLARATION, node);
  }

  public PropertyDeclaration getPropertyDeclaration() {
    return (PropertyDeclaration) this.getReferent(PropertyDeclaration.class, PropertyNameRefExpression.PROPERTY_DECLARATION);
  }

  public void setPropertyDeclaration(PropertyDeclaration node) {
    super.setReferent(PropertyNameRefExpression.PROPERTY_DECLARATION, node);
  }

  public static PropertyNameRefExpression newInstance(SModel sm, boolean init) {
    return (PropertyNameRefExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.PropertyNameRefExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static PropertyNameRefExpression newInstance(SModel sm) {
    return PropertyNameRefExpression.newInstance(sm, false);
  }
}
