package jetbrains.mps.lang.smodel.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.util.NameUtil;

public class AddOperationParameter_Intention extends BaseIntention implements Intention {
  public AddOperationParameter_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.smodel.structure.SNodeOperation";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Parameter(s)";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "parameter", true)).isEmpty()) {
      return ListSequence.fromList(SLinkOperations.getConceptLinkTargets(node, "applicableParameter")).isNotEmpty();
    }
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    List<SNode> applicableParms = SLinkOperations.getConceptLinkTargets(node, "applicableParameter");
    if (ListSequence.fromList(applicableParms).count() == 1) {
      ListSequence.fromList(SLinkOperations.getTargets(node, "parameter", true)).addElement(SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(((SNode) ListSequence.fromList(applicableParms).first())), null));
    } else {
      SNodeFactoryOperations.addNewChild(node, "parameter", "jetbrains.mps.lang.smodel.structure.AbstractOperationParameter");
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.smodel.intentions";
  }
}
