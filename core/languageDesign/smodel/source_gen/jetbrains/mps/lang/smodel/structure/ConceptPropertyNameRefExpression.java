package jetbrains.mps.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ConceptPropertyNameRefExpression extends Expression {
  public static final String concept = "jetbrains.mps.lang.smodel.structure.ConceptPropertyNameRefExpression";
  public static final String CONCEPT_DECLARATION = "conceptDeclaration";
  public static final String CONCEPT_PROPERTY_DECLARATION = "conceptPropertyDeclaration";

  public ConceptPropertyNameRefExpression(SNode node) {
    super(node);
  }

  public AbstractConceptDeclaration getConceptDeclaration() {
    return (AbstractConceptDeclaration) this.getReferent(AbstractConceptDeclaration.class, ConceptPropertyNameRefExpression.CONCEPT_DECLARATION);
  }

  public void setConceptDeclaration(AbstractConceptDeclaration node) {
    super.setReferent(ConceptPropertyNameRefExpression.CONCEPT_DECLARATION, node);
  }

  public ConceptPropertyDeclaration getConceptPropertyDeclaration() {
    return (ConceptPropertyDeclaration) this.getReferent(ConceptPropertyDeclaration.class, ConceptPropertyNameRefExpression.CONCEPT_PROPERTY_DECLARATION);
  }

  public void setConceptPropertyDeclaration(ConceptPropertyDeclaration node) {
    super.setReferent(ConceptPropertyNameRefExpression.CONCEPT_PROPERTY_DECLARATION, node);
  }

  public static ConceptPropertyNameRefExpression newInstance(SModel sm, boolean init) {
    return (ConceptPropertyNameRefExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.ConceptPropertyNameRefExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ConceptPropertyNameRefExpression newInstance(SModel sm) {
    return ConceptPropertyNameRefExpression.newInstance(sm, false);
  }
}
