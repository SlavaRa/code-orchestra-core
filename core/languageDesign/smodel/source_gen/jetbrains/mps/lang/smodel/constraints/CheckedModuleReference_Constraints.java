package jetbrains.mps.lang.smodel.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;

public class CheckedModuleReference_Constraints extends BaseConstraintsDescriptor {
  public CheckedModuleReference_Constraints() {
    super("jetbrains.mps.lang.smodel.structure.CheckedModuleReference");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("moduleId", new BasePropertyConstraintsDescriptor("moduleId", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "moduleId";
        {
          String original = SPropertyOperations.getString(node, "moduleId");
          if (StringUtils.isEmpty(original)) {
            return original;
          }
          ModuleReference moduleReference = ModuleReference.fromString(original);
          IModule module = MPSModuleRepository.getInstance().getModule(moduleReference);
          return (module != null ?
            module.getModuleFqName() :
            moduleReference.getModuleFqName()
          );
        }
      }

      @Override
      public boolean hasOwnSetter() {
        return true;
      }

      @Override
      public void setValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "moduleId";
        {
          IModule module = MPSModuleRepository.getInstance().getModuleByUID((SPropertyOperations.getString(propertyValue)));
          SPropertyOperations.set(node, "moduleId", module.getModuleReference().toString());
        }
      }

      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "moduleId";
        {
          IModule module = MPSModuleRepository.getInstance().getModuleByUID((SPropertyOperations.getString(propertyValue)));
          return module != null;
        }
      }
    });
    return properties;
  }
}
