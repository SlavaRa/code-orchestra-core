package model2;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class AAA {
  public int aaa;

  public boolean aaa(SNode node) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(node, "enumMember", false), "internalValue") != null;
  }

  public boolean bbb(SNode node) {
    return SPropertyOperations.getString(node, "alias") != null;
  }

  public void ccc(SNode node) {
    List<SNode> directSuperConcepts = SConceptOperations.getDirectSuperConcepts(SNodeOperations.getConceptDeclaration(node), false);
    AAA aaa;
    boolean aaa;
    AAA aaa;
    AAA aaa;
  }

  public Iterable<SNode> getAllLocalVarsBefore(SNode n) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    SNode anchor = SNodeOperations.getAncestor(n, "jetbrains.mps.baseLanguage.structure.Statement", true, false);
    while (anchor != null) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getPrevSiblings(anchor, false)));
      anchor = SNodeOperations.getAncestor(anchor, "jetbrains.mps.baseLanguage.structure.Statement", false, false);
    }
    return ListSequence.fromList(result).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement");
      }
    }).<SNode>select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"), "localVariableDeclaration", true);
      }
    });
  }
}
