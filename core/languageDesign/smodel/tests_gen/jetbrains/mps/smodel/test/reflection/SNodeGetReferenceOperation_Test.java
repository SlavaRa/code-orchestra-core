package jetbrains.mps.smodel.test.reflection;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

@MPSLaunch
public class SNodeGetReferenceOperation_Test extends BaseTransformationTest {
  @Test
  public void test_empty() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection)");
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferenceOperation_Test$TestBody", "test_empty", true);
  }

  @Test
  public void test_byLinkDeclaration() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection)");
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferenceOperation_Test$TestBody", "test_byLinkDeclaration", true);
  }

  @Test
  public void test_bySpecializedLinkDeclaration() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection)");
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferenceOperation_Test$TestBody", "test_bySpecializedLinkDeclaration", true);
  }

  @Test
  public void test_forNull() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection)");
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferenceOperation_Test$TestBody", "test_forNull", true);
  }

  @Test
  public void test_invalidLinkDeclaration() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:8ac706c2-cfd2-4da3-8b63-a741ed2733d4(jetbrains.mps.smodel.test.reflection)");
    this.runTest("jetbrains.mps.smodel.test.reflection.SNodeGetReferenceOperation_Test$TestBody", "test_invalidLinkDeclaration", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_empty() throws Exception {
      this.addNodeById("2906110183022090592");
      this.addNodeById("2906110183022122665");
      this.addNodeById("2906110183022122679");
      Assert.assertNull(SNodeOperations.getReference(SNodeOperations.cast(this.getNodeById("2906110183022090593"), "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer"), SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer", "root")));
    }

    public void test_byLinkDeclaration() throws Exception {
      this.addNodeById("2906110183022090592");
      this.addNodeById("2906110183022122665");
      this.addNodeById("2906110183022122679");
      SNode rootLinkDeclaration = SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer", "root");
      SReference rootContainerReference = SNodeOperations.getReference(SNodeOperations.cast(this.getNodeById("2906110183022122680"), "jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept"), rootLinkDeclaration);
      Assert.assertEquals(SNodeOperations.cast(this.getNodeById("2906110183022122666"), "jetbrains.mps.lang.smodelTests.structure.Root"), SLinkOperations.getTargetNode(rootContainerReference));
      Assert.assertEquals(rootLinkDeclaration, SLinkOperations.findLinkDeclaration(rootContainerReference));
      Assert.assertEquals(SPropertyOperations.getString(rootLinkDeclaration, "role"), SLinkOperations.getRole(rootContainerReference));
      Assert.assertNotNull(SLinkOperations.getResolveInfo(rootContainerReference));
      SReference leftChildReference = SNodeOperations.getReference(SNodeOperations.cast(this.getNodeById("2906110183022122680"), "jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept"), SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer", "leftChild"));
      Assert.assertEquals(SNodeOperations.cast(this.getNodeById("2906110183022122667"), "jetbrains.mps.lang.smodelTests.structure.Child"), SLinkOperations.getTargetNode(leftChildReference));
      Assert.assertEquals(SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer", "leftChild"), SLinkOperations.findLinkDeclaration(leftChildReference));
      Assert.assertEquals(SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer", "leftChild"), "role"), SLinkOperations.getRole(leftChildReference));
      Assert.assertNotNull(SLinkOperations.getResolveInfo(leftChildReference));
    }

    public void test_bySpecializedLinkDeclaration() throws Exception {
      this.addNodeById("2906110183022090592");
      this.addNodeById("2906110183022122665");
      this.addNodeById("2906110183022122679");
      SReference refByOriginalLink = SNodeOperations.getReference(SNodeOperations.cast(this.getNodeById("2906110183022122680"), "jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept"), SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer", "rightChild"));
      Assert.assertEquals(SNodeOperations.cast(this.getNodeById("2906110183022122670"), "jetbrains.mps.lang.smodelTests.structure.ChildSubConcept"), SLinkOperations.getTargetNode(refByOriginalLink));
      Assert.assertEquals(SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer", "rightChild"), SLinkOperations.findLinkDeclaration(refByOriginalLink));
      Assert.assertEquals(SPropertyOperations.getString(SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer", "rightChild"), "role"), SLinkOperations.getRole(refByOriginalLink));
      Assert.assertNotNull(SLinkOperations.getResolveInfo(refByOriginalLink));
      SReference refBySpecializedLink = SNodeOperations.getReference(SNodeOperations.cast(this.getNodeById("2906110183022122680"), "jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept"), SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept", "specializedRightChild"));
      Assert.assertEquals(refByOriginalLink, refBySpecializedLink);
    }

    public void test_forNull() throws Exception {
      this.addNodeById("2906110183022090592");
      this.addNodeById("2906110183022122665");
      this.addNodeById("2906110183022122679");
      SNode nullReferenceContainer = null;
      Assert.assertNull(SNodeOperations.getReference(nullReferenceContainer, SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.smodelTests.structure.ReferenceContainer", "rightChild")));
      SNode nullLinkDeclaration = null;
      Assert.assertNull(SNodeOperations.getReference(SNodeOperations.cast(this.getNodeById("2906110183022090593"), "jetbrains.mps.lang.smodelTests.structure.ReferenceContainer"), nullLinkDeclaration));
    }

    public void test_invalidLinkDeclaration() throws Exception {
      this.addNodeById("2906110183022090592");
      this.addNodeById("2906110183022122665");
      this.addNodeById("2906110183022122679");
      SNode invalidLinkDeclaration = SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.structure.structure.LinkDeclaration", "specializedLink");
      Assert.assertNull(SNodeOperations.getReference(SNodeOperations.cast(this.getNodeById("2906110183022122680"), "jetbrains.mps.lang.smodelTests.structure.ReferenceContainerSubConcept"), invalidLinkDeclaration));
    }
  }
}
