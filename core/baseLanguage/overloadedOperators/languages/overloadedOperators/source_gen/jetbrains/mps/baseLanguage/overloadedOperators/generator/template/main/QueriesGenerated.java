package jetbrains.mps.baseLanguage.overloadedOperators.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.overloadedOperators.generator.template.util.BinaryOperationUtil;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.baseLanguage.overloadedOperators.behavior.OverloadedBinaryOperator_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;

public class QueriesGenerated {
  public static boolean baseMappingRule_Condition_3100399657864717070(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    Iterable<SNode> operators = ListSequence.fromList(SModelOperations.getRootsIncludingImported(_context.getOriginalInputModel(), _context.getScope(), "jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedOperatorContainer")).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "operators", true);
      }
    });
    return BinaryOperationUtil.hasOverloadedOperators(_context.getNode(), TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true)), TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true)), Sequence.fromIterable(operators).toListSequence());
  }

  public static Object propertyMacro_GetPropertyValue_6677452554240291185(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return OverloadedBinaryOperator_Behavior.call_getFunctionName_6677452554240637506(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_6677452554240269754(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_3524394717035465437(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode op = BinaryOperationUtil.getNearestOverloaded(_context.getNode(), TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true)), TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true)), ListSequence.fromList(SModelOperations.getRootsIncludingImported(SNodeOperations.getModel(_context.getNode()), _context.getScope(), "jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedOperatorContainer")).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "operators", true);
      }
    }).toListSequence());
    return INamedConcept_Behavior.call_getFqName_1213877404258(SNodeOperations.cast(SNodeOperations.getParent(op), "jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedOperatorContainer"));
  }

  public static Object propertyMacro_GetPropertyValue_3524394717035465440(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode op = BinaryOperationUtil.getNearestOverloaded(_context.getNode(), TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true)), TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true)), ListSequence.fromList(SModelOperations.getRootsIncludingImported(SNodeOperations.getModel(_context.getNode()), _context.getScope(), "jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedOperatorContainer")).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "operators", true);
      }
    }).toListSequence());
    return OverloadedBinaryOperator_Behavior.call_getFunctionName_6677452554240637506(op);
  }

  public static SNode sourceNodeQuery_6677452554240291133(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "returnType", true);
  }

  public static SNode sourceNodeQuery_6677452554240291100(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_6677452554240291154(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "leftType", true);
  }

  public static SNode sourceNodeQuery_6677452554240291170(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "rightType", true);
  }

  public static SNode sourceNodeQuery_3524394717035465527(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    BinaryOperationUtil.getNearestOverloaded(_context.getNode(), TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true)), TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true)), ListSequence.fromList(SModelOperations.getRootsIncludingImported(SNodeOperations.getModel(_context.getNode()), _context.getScope(), "jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedOperatorContainer")).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "operators", true);
      }
    }).toListSequence());
    if ((Boolean) (_context.getNode().getUserObject("reversed"))) {
      return SLinkOperations.getTarget(_context.getNode(), "rightExpression", true);
    }
    return SLinkOperations.getTarget(_context.getNode(), "leftExpression", true);
  }

  public static SNode sourceNodeQuery_3524394717035465536(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    BinaryOperationUtil.getNearestOverloaded(_context.getNode(), TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "leftExpression", true)), TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "rightExpression", true)), ListSequence.fromList(SModelOperations.getRootsIncludingImported(SNodeOperations.getModel(_context.getNode()), _context.getScope(), "jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedOperatorContainer")).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "operators", true);
      }
    }).toListSequence());
    if ((Boolean) (_context.getNode().getUserObject("reversed"))) {
      return SLinkOperations.getTarget(_context.getNode(), "leftExpression", true);
    }
    return SLinkOperations.getTarget(_context.getNode(), "rightExpression", true);
  }

  public static Iterable sourceNodesQuery_6677452554240291112(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "operators", true);
  }
}
