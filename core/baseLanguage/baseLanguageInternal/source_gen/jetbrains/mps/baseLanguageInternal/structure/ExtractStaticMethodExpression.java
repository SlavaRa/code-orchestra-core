package jetbrains.mps.baseLanguageInternal.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ExtractStaticMethodExpression extends Expression {
  public static final String concept = "jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethodExpression";
  public static final String MAKE_UNIQUE = "makeUnique";
  public static final String METHOD = "method";
  public static final String INNER = "inner";

  public ExtractStaticMethodExpression(SNode node) {
    super(node);
  }

  public boolean getMakeUnique() {
    return this.getBooleanProperty(ExtractStaticMethodExpression.MAKE_UNIQUE);
  }

  public void setMakeUnique(boolean value) {
    this.setBooleanProperty(ExtractStaticMethodExpression.MAKE_UNIQUE, value);
  }

  public StaticMethodDeclaration getMethod() {
    return (StaticMethodDeclaration) this.getChild(StaticMethodDeclaration.class, ExtractStaticMethodExpression.METHOD);
  }

  public void setMethod(StaticMethodDeclaration node) {
    super.setChild(ExtractStaticMethodExpression.METHOD, node);
  }

  public Expression getInner() {
    return (Expression) this.getChild(Expression.class, ExtractStaticMethodExpression.INNER);
  }

  public void setInner(Expression node) {
    super.setChild(ExtractStaticMethodExpression.INNER, node);
  }

  public static ExtractStaticMethodExpression newInstance(SModel sm, boolean init) {
    return (ExtractStaticMethodExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguageInternal.structure.ExtractStaticMethodExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ExtractStaticMethodExpression newInstance(SModel sm) {
    return ExtractStaticMethodExpression.newInstance(sm, false);
  }
}
