package jetbrains.mps.baseLanguageInternal.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class add_parameter_to_InternalClassifierType_Intention extends BaseIntention implements Intention {
  public add_parameter_to_InternalClassifierType_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Type Parameters";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "parameter", true)).count() == 0;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNodeFactoryOperations.addNewChild(node, "parameter", "jetbrains.mps.baseLanguage.structure.Type");
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguageInternal.intentions";
  }
}
