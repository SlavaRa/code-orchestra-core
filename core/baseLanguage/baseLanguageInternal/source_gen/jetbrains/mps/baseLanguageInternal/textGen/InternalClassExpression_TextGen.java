package jetbrains.mps.baseLanguageInternal.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.textGen.BaseLanguageTextGen;
import jetbrains.mps.textGen.TextGenManager;

public class InternalClassExpression_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    SNode type = SLinkOperations.getTarget(node, "type", true);
    if (SNodeOperations.isInstanceOf(type, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      if (SNodeOperations.isInstanceOf(type, "jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType")) {
        SNode icf = SNodeOperations.cast(type, "jetbrains.mps.baseLanguageInternal.structure.InternalClassifierType");
        String pack = NameUtil.namespaceFromLongName(SPropertyOperations.getString(icf, "fqClassName"));
        String name = NameUtil.shortNameFromLongName(SPropertyOperations.getString(icf, "fqClassName"));
        BaseLanguageTextGen.internalClassName(pack, name, this);
      } else {
        BaseLanguageTextGen.internalClassifierName(SLinkOperations.getTarget(SNodeOperations.cast(type, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false), this);
      }
    } else {
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), type, this.getSNode());
    }
    this.append(".class");
  }
}
