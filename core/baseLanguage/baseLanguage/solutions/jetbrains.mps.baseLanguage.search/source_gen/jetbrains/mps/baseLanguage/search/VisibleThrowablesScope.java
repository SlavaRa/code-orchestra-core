package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.util.NameUtil;

public class VisibleThrowablesScope extends VisibleClassifiersScope {
  private static String THROWABLE_FQ_NAME = "java.lang.Throwable";

  public VisibleThrowablesScope(@NotNull SNode contextNode, int constraint, IScope scope) {
    super(contextNode, constraint, scope);
  }

  @NotNull
  public List<SNode> getClassifiers() {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode cls : super.getClassifiers()) {
      if (ListSequence.fromList(ClassifierAndSuperClassifiersCache.getInstance(cls).getClassifiers()).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return THROWABLE_FQ_NAME.equals(NameUtil.nodeFQName(it));
        }
      }).isNotEmpty()) {
        result.add(cls);
      }
    }
    return result;
  }
}
