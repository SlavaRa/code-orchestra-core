package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.search.ModelAndImportedModelsScope;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.search.IReferenceInfoResolver;
import jetbrains.mps.kernel.model.SModelUtil;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelFqName;
import java.util.Collection;
import jetbrains.mps.project.IModule;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class ReachableClassifiersScope extends AbstractClassifiersScope {
  protected static Log log = LogFactory.getLog(ReachableClassifiersScope.class);

  private IScope myScope;
  private SModel myModel;

  public ReachableClassifiersScope(SModel model, int constraint, IScope scope) {
    super(constraint);
    this.myModel = model;
    this.myScope = scope;
  }

  public SModel getModel() {
    return this.myModel;
  }

  public IScope getScope() {
    return this.myScope;
  }

  @NotNull
  public List<SNode> getClassifiers() {
    List<SModelDescriptor> models = new ModelAndImportedModelsScope(this.myModel, false, this.myScope).getModels();
    List<SNode> result = new ArrayList<SNode>();
    for (SModelDescriptor model : models) {
      List<SNode> classifiers = ClassifiersCache.getInstance(model).getClassifiers();
      ListSequence.fromList(result).addSequence(ListSequence.fromList(classifiers));
    }
    return result;
  }

  @Override
  public IReferenceInfoResolver getReferenceInfoResolver(SNode referenceNode, SNode targetConcept) {
    if (SModelUtil.isAssignableConcept(targetConcept, "jetbrains.mps.baseLanguage.structure.Classifier")) {
      return new ReachableClassifiersScope.ClassifierReferenceInfoResolver(this.myModel, this.myScope);
    }
    return super.getReferenceInfoResolver(referenceNode, targetConcept);
  }

  protected static class ClassifierReferenceInfoResolver implements IReferenceInfoResolver {
    private SModel myModel;
    private IScope myScope;

    public ClassifierReferenceInfoResolver(SModel model, IScope scope) {
      this.myModel = model;
      this.myScope = scope;
    }

    public SNode resolve(String referenceInfo, @Nullable SModelReference targetModelReference) {
      String classname = referenceInfo;
      int dotIndex = classname.lastIndexOf(".");
      if (dotIndex >= 0 && targetModelReference == null) {
        // try local nested classes 
        List<SNode> localClassifiers = ClassifiersCache.getInstance(myModel.getModelDescriptor()).getClassifiersByRefName(classname);
        if (ListSequence.fromList(localClassifiers).count() >= 1) {
          return ListSequence.fromList(localClassifiers).first();
        }

        // search everywhere 
        String package_ = classname.substring(0, dotIndex);
        classname = classname.substring(dotIndex + 1);
        if (classname.indexOf('$') >= 0) {
          classname = classname.replace('$', '.');
        }
        return resolveClass(package_, null, classname);
      }

      if (targetModelReference == null) {
        targetModelReference = myModel.getSModelReference();
      }
      if (targetModelReference.getSModelId() != null) {
        SModelDescriptor targetModel = this.myScope.getModelDescriptor(targetModelReference);
        if (targetModel == null) {
          return null;
        }
        return ListSequence.fromList(ClassifiersCache.getInstance(targetModel).getClassifiersByRefName(classname)).first();
      }
      SModelFqName modelname = targetModelReference.getSModelFqName();
      return resolveClass(modelname.getLongName(), modelname.getStereotype(), classname);
    }

    public SNode resolveClass(String modelname, String stereotype, String nestedClassName) {
      Collection<IModule> visibleModules = IterableUtil.asCollection(myScope.getVisibleModules());

      List<SNode> classifiers = new ArrayList<SNode>();
      for (SModelDescriptor model : Sequence.fromIterable(((Iterable<IModule>) visibleModules)).translate(new ITranslator2<IModule, SModelDescriptor>() {
        public Iterable<SModelDescriptor> translate(IModule it) {
          return it.getOwnModelDescriptors();
        }
      }).distinct()) {
        SModelFqName modelFqName = model.getSModelReference().getSModelFqName();
        if (!(modelFqName.getLongName().equals(modelname))) {
          continue;
        }
        if (stereotype != null && !(modelFqName.getStereotype().equals(stereotype))) {
          continue;
        }

        ListSequence.fromList(classifiers).addSequence(ListSequence.fromList(ClassifiersCache.getInstance(model).getClassifiersByRefName(nestedClassName)));
      }

      if (ListSequence.fromList(classifiers).isEmpty()) {
        return null;
      }
      if (ListSequence.fromList(classifiers).count() > 1) {
        for (SNode cls : ListSequence.fromList(classifiers)) {
          if (SNodeOperations.getModel(cls) == myModel) {
            return cls;
          }
          if (check_x9ho2v_a0b0a0g0b0_0(check_x9ho2v_a0a1a0a6a1a_0(myModel)) == check_x9ho2v_a0b0a0g0b0(check_x9ho2v_a0a1a0a6a1a(SNodeOperations.getModel(cls)))) {
            return cls;
          }
        }

        final StringBuilder warn = new StringBuilder();
        warn.append("reference can't be resolved: ");
        warn.append(nestedClassName);
        warn.append(" in ");
        warn.append(myModel.getLongName());
        warn.append(" can reference nodes from models: ");
        ListSequence.fromList(classifiers).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            warn.append(SNodeOperations.getModel(it).getSModelReference()).append("; ");
          }
        });

        if (log.isWarnEnabled()) {
          log.warn(warn);
        }
        return null;
      }
      return ListSequence.fromList(classifiers).getElement(0);
    }

    private static IModule check_x9ho2v_a0b0a0g0b0(SModelDescriptor checkedDotOperand) {
      if (null != checkedDotOperand) {
        return checkedDotOperand.getModule();
      }
      return null;
    }

    private static SModelDescriptor check_x9ho2v_a0a1a0a6a1a(SModel checkedDotOperand) {
      if (null != checkedDotOperand) {
        return checkedDotOperand.getModelDescriptor();
      }
      return null;
    }

    private static IModule check_x9ho2v_a0b0a0g0b0_0(SModelDescriptor checkedDotOperand) {
      if (null != checkedDotOperand) {
        return checkedDotOperand.getModule();
      }
      return null;
    }

    private static SModelDescriptor check_x9ho2v_a0a1a0a6a1a_0(SModel checkedDotOperand) {
      if (null != checkedDotOperand) {
        return checkedDotOperand.getModelDescriptor();
      }
      return null;
    }
  }
}
