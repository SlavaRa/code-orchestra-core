package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.smodel.search.AbstractSearchScope;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.Condition;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.search.IReferenceInfoResolver;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.smodel.SModelReference;

public class LocalVariablesScope extends AbstractSearchScope {
  private SNode myContextNode;
  private List<SNode> myLocalVariables;

  public LocalVariablesScope(SNode contextNode) {
    this.myContextNode = contextNode;
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    if (this.myLocalVariables == null) {
      this.myLocalVariables = new ArrayList<SNode>();
      SNode statementList = SNodeOperations.as(LocalVariablesScope.findThisOrParent(this.myContextNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ILocalVariableElementList")), "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList");
      if (statementList != null) {
        SNode currentStatement = SNodeOperations.as(LocalVariablesScope.findThisOrParent(this.myContextNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ILocalVariableElement")), "jetbrains.mps.baseLanguage.structure.ILocalVariableElement");
        this._populateLocalVariables(statementList, currentStatement, this.myLocalVariables);
      }
      SNode loopStatement = SNodeOperations.as(LocalVariablesScope.findThisOrParent(this.myContextNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement")), "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement");
      if (loopStatement != null) {
        this._populateLocalVariables(loopStatement, this.myLocalVariables);
      }
      SNode catchClause = SNodeOperations.as(LocalVariablesScope.findThisOrParent(this.myContextNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CatchClause")), "jetbrains.mps.baseLanguage.structure.CatchClause");
      if (catchClause != null) {
        this._populateLocalVariablesForCatch(catchClause, this.myLocalVariables);
      }
    }
    if (condition == AbstractSearchScope.TRUE_CONDITION) {
      return this.myLocalVariables;
    }
    List<SNode> result = new ArrayList<SNode>(this.myLocalVariables.size());
    for (SNode node : this.myLocalVariables) {
      if (condition.met(node)) {
        result.add(node);
      }
    }
    return result;
  }

  private void _populateLocalVariables(SNode statementList, SNode beforeStatement, List<SNode> result) {
    if (statementList == null) {
      return;
    }
    if (statementList != beforeStatement) {
      List<SNode> varElements = ((List<SNode>) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(statementList, "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList"), "virtual_getLocalVariableElements_1238805763253", new Class[]{SNode.class}));
      for (SNode sNode : varElements) {
        if (!((SNodeOperations.isInstanceOf(sNode, "jetbrains.mps.baseLanguage.structure.ILocalVariableElement")))) {
          continue;
        }
        SNode statement = SNodeOperations.cast(sNode, "jetbrains.mps.baseLanguage.structure.ILocalVariableElement");
        if (statement == beforeStatement) {
          break;
        }
        SNode declNode = ((SNode) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(statement, "jetbrains.mps.baseLanguage.structure.ILocalVariableElement"), "virtual_getLocalVariableDeclaration_1238803857389", new Class[]{SNode.class}));
        if (declNode != null) {
          result.add(declNode);
        }
      }
    }
    SNode containingStatement = SNodeOperations.as(LocalVariablesScope.findThisOrParent(statementList, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ILocalVariableElement")), "jetbrains.mps.baseLanguage.structure.ILocalVariableElement");
    if (containingStatement != null) {
      statementList = SNodeOperations.getAncestor(containingStatement, "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList", false, false);
      this._populateLocalVariables(statementList, containingStatement, result);
    }
  }

  private void _populateLocalVariables(SNode loopStatement, List<SNode> result) {
    for (SNode child : SNodeOperations.getChildren(loopStatement)) {
      if (child.getRole_().equals("body")) {
        continue;
      }
      if (SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
        result.add(child);
      }
      List<SNode> moreChildren = SNodeOperations.getDescendants(child, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false, new String[]{});
      for (SNode child_ : moreChildren) {
        result.add(child_);
      }
    }
    SNode containingLoop = SNodeOperations.as(LocalVariablesScope.findThisOrParent(SNodeOperations.getParent(loopStatement), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement")), "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement");
    if (containingLoop != null) {
      this._populateLocalVariables(containingLoop, result);
    }
  }

  private void _populateLocalVariablesForCatch(SNode tryCatchStatement, List<SNode> result) {
    SNode throwable = SLinkOperations.getTarget(tryCatchStatement, "throwable", true);
    if (throwable != null) {
      result.add(throwable);
    }
    SNode containingCatchClause = SNodeOperations.as(LocalVariablesScope.findThisOrParent(SNodeOperations.getParent(tryCatchStatement), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.CatchClause")), "jetbrains.mps.baseLanguage.structure.CatchClause");
    if (containingCatchClause != null) {
      this._populateLocalVariablesForCatch(containingCatchClause, result);
    }
  }

  @Override
  public IReferenceInfoResolver getReferenceInfoResolver(SNode referenceNode, SNode targetConcept) {
    if (SModelUtil.isAssignableConcept(targetConcept, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"))) {
      return new IReferenceInfoResolver() {
        public SNode resolve(String referenceInfo, SModelReference targetModelReference) {
          if (referenceInfo == null) {
            return null;
          }
          for (SNode node : LocalVariablesScope.this.getNodes(AbstractSearchScope.TRUE_CONDITION)) {
            if (referenceInfo.equals(node.getName())) {
              return node;
            }
          }
          return null;
        }
      };
    }
    return super.getReferenceInfoResolver(referenceNode, targetConcept);
  }

  private static SNode findThisOrParent(SNode sourceNode, SNode concept) {
    SNode testNode = sourceNode;
    while (testNode != null) {
      if (testNode.isInstanceOfConcept(concept)) {
        return testNode;
      }
      if (SNodeOperations.isInstanceOf(testNode, "jetbrains.mps.baseLanguage.structure.ConceptFunction")) {
        if (!(SNodeOperations.isInstanceOf(testNode, "jetbrains.mps.baseLanguage.structure.Closure"))) {
          break;
        }
      }
      testNode = SNodeOperations.getParent(testNode);
    }
    return null;
  }
}
