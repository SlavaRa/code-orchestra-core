package jetbrains.mps.baseLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.behavior.ClassifierMember_Behavior;

public class ConstraintsUtil {
  private ConstraintsUtil() {
  }

  public static boolean isInNonStaticClasssifierContext(SNode node) {
    if (!(isInsideOfClassifier(node))) {
      return false;
    }
    return ListSequence.fromList(SNodeOperations.getAncestors(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember", false)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(ClassifierMember_Behavior.call_isStatic_8986964027630462944(it));
      }
    }).isNotEmpty();
  }

  public static boolean isInsideOfClassifier(SNode node) {
    return (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Classifier", true, false) != null);
  }
}
