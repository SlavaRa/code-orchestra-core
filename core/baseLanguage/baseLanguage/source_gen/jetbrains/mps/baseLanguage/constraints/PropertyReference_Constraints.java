package jetbrains.mps.baseLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.behavior.DotExpression_Behavior;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.search.ClassifierAndSuperClassifiersScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.search.VisibilityUtil;

public class PropertyReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_57atcm_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints)", "1213104859432");

  public PropertyReference_Constraints() {
    super("jetbrains.mps.baseLanguage.structure.PropertyReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("property", new BaseReferenceConstraintsDescriptor("property", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            if (!(SNodeOperations.isInstanceOf(_context.getEnclosingNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"))) {
              return null;
            }
            SNode opClassifier = DotExpression_Behavior.call_getClassifier_1213877410697(SNodeOperations.cast(_context.getEnclosingNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"));
            if (opClassifier == null) {
              return null;
            }
            List<SNode> resultProperties = new ArrayList<SNode>();
            List<SNode> classifiers = new ClassifierAndSuperClassifiersScope(opClassifier).getClassifiers();
            for (SNode classifier : ListSequence.fromList(classifiers)) {
              if (SNodeOperations.isInstanceOf(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
                for (SNode property : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "property", true))) {
                  if (VisibilityUtil.isVisible(((_context.getReferenceNode() == null) ?
                    _context.getEnclosingNode() :
                    _context.getReferenceNode()
                  ), property)) {
                    ListSequence.fromList(resultProperties).addElement(property);
                  }
                }
              }
            }
            return resultProperties;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_57atcm_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
