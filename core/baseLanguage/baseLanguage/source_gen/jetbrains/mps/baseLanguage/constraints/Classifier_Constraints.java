package jetbrains.mps.baseLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.baseLanguage.search.VisibleClassifiersScope;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.presentation.NodePresentationUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class Classifier_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_z47b7w_a0a3a0a0a1 = new SNodePointer("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints)", "1213104846413");

  public Classifier_Constraints() {
    super("jetbrains.mps.baseLanguage.structure.Classifier");
  }

  @Override
  public boolean hasOwnDefaultScopeProvider() {
    return true;
  }

  @Override
  public ReferenceScopeProvider getDefaultScopeProvider() {
    return new BaseReferenceScopeProvider() {
      @Override
      public boolean hasPresentation() {
        return true;
      }

      @Override
      public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
        return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(_context.getParameterNode(), _context.getEnclosingNode());
      }

      @Override
      public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
        return new VisibleClassifiersScope(((_context.getReferenceNode() == null) ?
          _context.getEnclosingNode() :
          _context.getReferenceNode()
        ), IClassifiersSearchScope.CLASSIFFIER, operationContext.getScope());
      }

      @Override
      public SNodePointer getSearchScopeValidatorNode() {
        return breakingNode_z47b7w_a0a3a0a0a1;
      }
    };
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("nestedName", new BasePropertyConstraintsDescriptor("nestedName", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "nestedName";
        return Classifier_Behavior.call_getNestedName_8540045600162184125(node);
      }
    });
    properties.put("resolveInfo", new BasePropertyConstraintsDescriptor("resolveInfo", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "resolveInfo";
        return SPropertyOperations.getString(node, "nestedName");
      }
    });
    properties.put("shortDescription", new BasePropertyConstraintsDescriptor("shortDescription", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "shortDescription";
        return NodePresentationUtil.getAliasOrConceptName(node) + " (" + SNodeOperations.getModel(node).getSModelFqName().getCompactPresentation() + ")";
      }
    });
    return properties;
  }
}
