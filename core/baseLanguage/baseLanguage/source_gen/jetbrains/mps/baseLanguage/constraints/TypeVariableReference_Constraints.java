package jetbrains.mps.baseLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.ClassifierMember_Behavior;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class TypeVariableReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_69suw6_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints)", "1213104844543");

  public TypeVariableReference_Constraints() {
    super("jetbrains.mps.baseLanguage.structure.TypeVariableReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("typeVariableDeclaration", new BaseReferenceConstraintsDescriptor("typeVariableDeclaration", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            boolean isStaticContext = false;
            SNode nearestMember = SNodeOperations.getAncestor(_context.getEnclosingNode(), "jetbrains.mps.baseLanguage.structure.ClassifierMember", true, false);
            if (nearestMember != null && ClassifierMember_Behavior.call_isStatic_8986964027630462944(nearestMember)) {
              isStaticContext = true;
            }
            // type-variables declared in enclosing classifier 
            List<SNode> declarations = new ArrayList<SNode>();
            for (SNode genericDeclaration : ListSequence.fromList(SNodeOperations.getAncestors(_context.getEnclosingNode(), "jetbrains.mps.baseLanguage.structure.GenericDeclaration", true))) {
              if (isStaticContext && SNodeOperations.isInstanceOf(genericDeclaration, "jetbrains.mps.baseLanguage.structure.Classifier")) {
                // if we are in static context, we cannot use classifier type variables 
                continue;
              }
              ListSequence.fromList(declarations).addSequence(ListSequence.fromList(SLinkOperations.getTargets(genericDeclaration, "typeVariableDeclaration", true)));
            }
            return declarations;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_69suw6_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
