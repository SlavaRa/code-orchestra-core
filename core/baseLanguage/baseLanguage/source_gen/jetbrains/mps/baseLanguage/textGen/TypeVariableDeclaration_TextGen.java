package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class TypeVariableDeclaration_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    this.append(SPropertyOperations.getString(node, "name"));
    if ((SLinkOperations.getTarget(node, "bound", true) != null)) {
      this.append(" extends ");
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "bound", true), this.getSNode());
      for (SNode clsType : SLinkOperations.getTargets(node, "auxBounds", true)) {
        this.append(" & ");
        BaseLanguageTextGen.importRefPart(SNodeOperations.getReference(clsType, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", "classifier")), this);
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), clsType, this.getSNode());
      }
    }
  }
}
