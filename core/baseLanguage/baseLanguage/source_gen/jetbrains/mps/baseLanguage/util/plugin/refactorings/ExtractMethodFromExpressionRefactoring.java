package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.typesystem.inference.TypeChecker;

/*package*/ class ExtractMethodFromExpressionRefactoring extends ExtractMethodRefactoring {
  @NotNull
  private SNode myExpression;

  /*package*/ ExtractMethodFromExpressionRefactoring(ExtractMethodRefactoringParameters params) {
    super(params);
    this.myExpression = SNodeOperations.cast(ListSequence.fromList(params.getNodesToRefactor()).first(), "jetbrains.mps.baseLanguage.structure.Expression");
  }

  protected SNode createMethodBody() {
    SNode body = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList", null);
    if (SNodeOperations.isInstanceOf(this.getMethodType(), "jetbrains.mps.baseLanguage.structure.VoidType")) {
      SNode expressionStatement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null);
      SLinkOperations.setTarget(expressionStatement, "expression", SNodeOperations.cast(CopyUtil.copy(this.myExpression), "jetbrains.mps.baseLanguage.structure.Expression"), true);
      ListSequence.fromList(SLinkOperations.getTargets(body, "statement", true)).addElement(expressionStatement);
    } else {
      SNode ret = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ReturnStatement", null);
      SLinkOperations.setTarget(ret, "expression", SNodeOperations.cast(CopyUtil.copy(this.myExpression), "jetbrains.mps.baseLanguage.structure.Expression"), true);
      ListSequence.fromList(SLinkOperations.getTargets(body, "statement", true)).addElement(ret);
    }
    return body;
  }

  public void replaceMatch(final MethodMatch match, final SNode methodDeclaration) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SNodeOperations.replaceWithAnother(ListSequence.fromList(match.getNodes()).first(), ExtractMethodFromExpressionRefactoring.this.createMethodCall(match, methodDeclaration));
      }
    });
  }

  @NotNull
  public SNode getMethodType() {
    SNode typeOf = TypeChecker.getInstance().getTypeOf(this.myExpression);
    assert typeOf != null;
    return SNodeOperations.cast(typeOf, "jetbrains.mps.baseLanguage.structure.Type");
  }
}
