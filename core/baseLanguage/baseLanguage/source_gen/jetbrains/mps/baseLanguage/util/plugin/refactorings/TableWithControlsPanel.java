package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JTable;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import com.intellij.ui.table.JBTable;
import javax.swing.ListSelectionModel;
import javax.swing.JButton;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.table.TableModel;

/*package*/ class TableWithControlsPanel extends JPanel {
  private TableWithControlsPanel.ExtendedTableModel myTableModel;
  private JTable myTable;

  public TableWithControlsPanel(TableWithControlsPanel.ExtendedTableModel model) {
    super(new GridBagLayout());
    this.myTableModel = model;
    GridBagConstraints c = new GridBagConstraints();
    c.anchor = GridBagConstraints.PAGE_START;
    c.fill = GridBagConstraints.HORIZONTAL;
    c.insets = new Insets(3, 3, 3, 3);
    c.gridx = 0;
    c.gridy = 0;
    c.weightx = 1;
    c.weighty = 0;
    c.gridheight = 3;
    this.myTable = new JBTable(this.myTableModel);
    this.myTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    this.add(this.myTable, c);
    // Add buttons 
    this.addButton(0, this.createAddButton());
    final JButton removeButton = this.createRemoveButton();
    this.addButton(1, removeButton);
    final JButton upButton = this.createMoveUpButton();
    this.addButton(2, upButton);
    final JButton downButton = this.createMoveDownButton();
    this.addButton(3, downButton);
    this.myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent p0) {
        TableWithControlsPanel.this.updateButtons(upButton, downButton, removeButton);
      }
    });
  }

  private void updateButtons(JButton upButton, JButton downButton, JButton removeButton) {
    int s = this.myTable.getSelectedRow();
    if (s != -1) {
      upButton.setEnabled(true);
      downButton.setEnabled(true);
      removeButton.setEnabled(true);
    } else {
      upButton.setEnabled(false);
      downButton.setEnabled(false);
      removeButton.setEnabled(false);
    }
    if (s == 0) {
      upButton.setEnabled(false);
    }
    if (s == this.myTable.getRowCount() - 1) {
      downButton.setEnabled(false);
    }
  }

  private void addButton(int position, JButton button) {
    GridBagConstraints c = new GridBagConstraints();
    c.fill = GridBagConstraints.HORIZONTAL;
    c.gridx = 1;
    c.gridy = position;
    c.weightx = 0;
    c.weighty = 0;
    c.gridheight = 1;
    this.add(button, c);
  }

  public JButton createAddButton() {
    JButton addButton = new JButton("Add");
    addButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        TableWithControlsPanel.this.stopEditing();
        TableWithControlsPanel.this.myTableModel.addRow();
      }
    });
    return addButton;
  }

  private JButton createMoveDownButton() {
    JButton downButton = new JButton("Move down");
    downButton.setEnabled(false);
    downButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        int c = TableWithControlsPanel.this.myTable.getSelectedRow();
        TableWithControlsPanel.this.stopEditing();
        TableWithControlsPanel.this.myTableModel.swapRows(c, c + 1);
        TableWithControlsPanel.this.myTable.getSelectionModel().addSelectionInterval(c + 1, c + 1);
      }
    });
    return downButton;
  }

  private JButton createMoveUpButton() {
    JButton upButton = new JButton("Move up");
    upButton.setEnabled(false);
    upButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        int c = TableWithControlsPanel.this.myTable.getSelectedRow();
        TableWithControlsPanel.this.stopEditing();
        TableWithControlsPanel.this.myTableModel.swapRows(c, c - 1);
        TableWithControlsPanel.this.myTable.getSelectionModel().addSelectionInterval(c - 1, c - 1);
      }
    });
    return upButton;
  }

  private JButton createRemoveButton() {
    JButton removeButton = new JButton("Remove");
    removeButton.setEnabled(false);
    removeButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        int c = TableWithControlsPanel.this.myTable.getSelectedRow();
        TableWithControlsPanel.this.stopEditing();
        TableWithControlsPanel.this.myTableModel.removeRow(c);
        TableWithControlsPanel.this.myTable.getSelectionModel().clearSelection();
      }
    });
    return removeButton;
  }

  private void stopEditing() {
    if (this.myTable.getCellEditor() != null) {
      this.myTable.getCellEditor().stopCellEditing();
    }
  }

  public JTable getTable() {
    return this.myTable;
  }

  /*package*/ static interface ExtendedTableModel extends TableModel {
    public void addRow();
    public void swapRows(int a, int b);
    public void removeRow(int c);
  }
}
