package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ExtractMethodWithReturn extends ExtractMethodFromStatementsRefactoring {
  /*package*/ ExtractMethodWithReturn(ExtractMethodRefactoringParameters params) {
    super(params);
  }

  public SNode getMethodType() {
    return this.myAnalyzer.getExtractMethodReafactoringProcessor().getContainerReturnType();
  }

  @Override
  public void replaceMatch(final MethodMatch match, final SNode methodDeclaration) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SNode methodCall = ExtractMethodWithReturn.this.createMethodCall(match, methodDeclaration);
        SNode returnlStatement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ReturnStatement", null);
        SLinkOperations.setTarget(returnlStatement, "expression", methodCall, true);
        List<SNode> statements = match.getNodes();
        SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(statements).first(), returnlStatement);
        for (SNode statement : ListSequence.fromList(statements)) {
          SNodeOperations.deleteNode(statement);
        }
      }
    });
  }
}
