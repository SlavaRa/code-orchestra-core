package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.awt.Frame;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.dataFlow.DataFlowManager;
import jetbrains.mps.lang.dataFlow.framework.AnalysisResult;
import java.util.Set;
import jetbrains.mps.lang.dataFlow.framework.instructions.WriteInstruction;
import jetbrains.mps.lang.dataFlow.framework.analyzers.ReachingDefinitionsAnalyzer;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class InlineVariableReferenceRefactoring extends InlineVariableRefactoring {
  private SNode myReference;
  private SNode myAssignment;

  public InlineVariableReferenceRefactoring(SNode node) {
    this.myReference = node;
    this.findAssignment(node);
  }

  public SNode doRefactoring() {
    SNode variable = SLinkOperations.getTarget(this.myReference, "variableDeclaration", false);
    SNode nodeToSelect;
    if (myAssignment == null) {
      nodeToSelect = SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(this.myReference, "variableDeclaration", false), "initializer", true));
      SNodeOperations.replaceWithAnother(this.myReference, nodeToSelect);
    } else
    if (SNodeOperations.isInstanceOf(myAssignment, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
      nodeToSelect = SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(myAssignment, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "initializer", true));
      SNodeOperations.replaceWithAnother(this.myReference, nodeToSelect);
    } else {
      nodeToSelect = SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(myAssignment, "jetbrains.mps.baseLanguage.structure.AssignmentExpression"), "rValue", true));
      SNodeOperations.replaceWithAnother(this.myReference, nodeToSelect);
      this.optimizeAssignment(SNodeOperations.cast(myAssignment, "jetbrains.mps.baseLanguage.structure.AssignmentExpression"), variable);
    }
    this.optimizeDeclaration(variable);
    return nodeToSelect;
  }

  public boolean checkRefactoring(Frame frame) {
    return true;
  }

  private void findAssignment(SNode node) {
    SNode variable = SLinkOperations.getTarget(node, "variableDeclaration", false);
    myAssignment = null;
    SNode currentList = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
    SNode currentStatement;
    while ((myAssignment == null) && (currentList != null)) {
      currentStatement = getParentStatement(node, currentList);
      Program program = DataFlowManager.getInstance().buildProgramFor(currentList);
      AnalysisResult<Set<WriteInstruction>> definitions = program.analyze(new ReachingDefinitionsAnalyzer());
      for (Instruction nodeInstruction : ListSequence.fromList(program.getInstructionsFor(currentStatement))) {
        for (WriteInstruction instruction : SetSequence.fromSet(definitions.get(nodeInstruction))) {
          if (instruction.getVariable() == variable) {
            myAssignment = ((SNode) instruction.getSource());
          }
        }
      }
      currentList = SNodeOperations.getAncestor(currentList, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
    }
  }

  private SNode getParentStatement(SNode node, SNode list) {
    SNode curParent = node;
    while ((curParent != null) && SNodeOperations.getParent(curParent) != list) {
      curParent = SNodeOperations.getParent(curParent);
    }
    return SNodeOperations.cast(curParent, "jetbrains.mps.baseLanguage.structure.Statement");
  }
}
