package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import java.awt.Frame;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.dataFlow.DataFlowManager;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.dataFlow.framework.instructions.ReadInstruction;
import jetbrains.mps.lang.dataFlow.framework.instructions.WriteInstruction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.dataFlow.framework.AnalysisResult;
import java.util.Set;
import jetbrains.mps.lang.dataFlow.framework.analyzers.ReachingReadsAnalyzer;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public abstract class InlineVariableRefactoring {
  public InlineVariableRefactoring() {
  }

  public abstract boolean checkRefactoring(Frame frame);

  public abstract SNode doRefactoring();

  public void optimizeDeclaration(SNode variable) {
    Program program = DataFlowManager.getInstance().buildProgramFor(getBaseStatementList(variable));
    for (Instruction instruction : ListSequence.fromList(program.getInstructions())) {
      if (instruction instanceof ReadInstruction) {
        ReadInstruction read = (ReadInstruction) instruction;
        if (read.getVariable() == variable) {
          return;
        }
      }
    }
    for (Instruction instruction : ListSequence.fromList(program.getInstructions())) {
      if (instruction instanceof WriteInstruction) {
        WriteInstruction write = (WriteInstruction) instruction;
        if (write.getSource() != variable && write.getVariable() == variable) {
          SNodeOperations.deleteNode(SLinkOperations.getTarget(variable, "initializer", true));
          return;
        }
      }
    }
    SNodeOperations.deleteNode(SNodeOperations.getAncestor(variable, "jetbrains.mps.baseLanguage.structure.Statement", false, false));
  }

  public void optimizeAssignment(SNode assignment, SNode variable) {
    SNode method = SNodeOperations.getAncestor(assignment, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false);
    Program program = DataFlowManager.getInstance().buildProgramFor(SLinkOperations.getTarget(method, "body", true));
    AnalysisResult<Set<ReadInstruction>> reachingReads = program.analyze(new ReachingReadsAnalyzer());
    for (Instruction instruction : ListSequence.fromList(program.getInstructionsFor(assignment))) {
      for (Instruction next : SetSequence.fromSet(instruction.succ())) {
        for (ReadInstruction read : reachingReads.get(next)) {
          if (read.getVariable() == variable) {
            return;
          }
        }
      }
    }
    SNodeOperations.deleteNode(SNodeOperations.getParent(assignment));
  }

  public SNode getBaseStatementList(SNode node) {
    SNode current = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
    while ((SNodeOperations.getAncestor(current, "jetbrains.mps.baseLanguage.structure.StatementList", false, false) != null)) {
      current = SNodeOperations.getAncestor(current, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
    }
    return current;
  }

  public static InlineVariableRefactoring createRefactoring(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
      return new InlineVariableAssignmentRefactoring(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
    } else {
      return new InlineVariableReferenceRefactoring(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.LocalVariableReference"));
    }
  }

  public static boolean isApplicable(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.LocalVariableReference");
  }
}
