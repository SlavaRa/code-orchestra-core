package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.pattern.util.MatchingUtil;

public class ChangeMethodSignatureParameters {
  private SNode myMethod;
  private SNode myOldMethod;
  private List<String> myParametersIds = ListSequence.fromList(new ArrayList<String>());

  public ChangeMethodSignatureParameters(SNode declaration) {
    this.myMethod = SNodeOperations.copyNode(declaration);
    this.myOldMethod = SNodeOperations.copyNode(declaration);
    for (SNode param : ListSequence.fromList(SLinkOperations.getTargets(this.myMethod, "parameter", true))) {
      ListSequence.fromList(this.myParametersIds).addElement(param.getId());
    }
  }

  public SNode getDeclaration() {
    return this.myMethod;
  }

  public List<String> getIdList() {
    return this.myParametersIds;
  }

  public boolean isVisibilityChanged() {
    return SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(SNodeOperations.cast(this.myMethod, "jetbrains.mps.baseLanguage.structure.IVisible"), "visibility", true)) != SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(SNodeOperations.cast(this.myOldMethod, "jetbrains.mps.baseLanguage.structure.IVisible"), "visibility", true));
  }

  public boolean isReturnValueChanged() {
    return !(MatchingUtil.matchNodes(SLinkOperations.getTarget(this.myMethod, "returnType", true), SLinkOperations.getTarget(this.myOldMethod, "returnType", true)));
  }
}
