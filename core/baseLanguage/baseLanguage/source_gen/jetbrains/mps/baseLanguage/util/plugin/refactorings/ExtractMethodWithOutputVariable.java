package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

/*package*/ class ExtractMethodWithOutputVariable extends ExtractMethodFromStatementsRefactoring {
  private SNode myOutputVariable;
  private SNode myDeclarationStatement = null;

  /*package*/ ExtractMethodWithOutputVariable(ExtractMethodRefactoringParameters parameters) {
    super(parameters);
    List<SNode> output = this.myAnalyzer.getOutputVariables();
    if (ListSequence.fromList(output).isNotEmpty()) {
      this.myOutputVariable = SNodeOperations.cast(ListSequence.fromList(output).first(), "jetbrains.mps.baseLanguage.structure.VariableDeclaration");
    }
    for (SNode statement : ListSequence.fromList(this.myStatements)) {
      if (SNodeOperations.isInstanceOf(statement, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")) {
        SNode tmp = SNodeOperations.cast(statement, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement");
        if (SLinkOperations.getTarget(tmp, "localVariableDeclaration", true) == this.myOutputVariable) {
          this.myDeclarationStatement = tmp;
        }
      }
    }
  }

  protected void modifyPartToExtract() {
    SNode returnStatement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ReturnStatement", null);
    SLinkOperations.setTarget(returnStatement, "expression", this.createReference(this.myOutputVariable), true);
    ListSequence.fromList(this.myStatements).addElement(returnStatement);
  }

  public SNode getMethodType() {
    return SNodeOperations.copyNode(SLinkOperations.getTarget(this.myOutputVariable, "type", true));
  }

  @Override
  public void replaceMatch(final MethodMatch match, final SNode methodDeclaration) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SNode methodCall = ExtractMethodWithOutputVariable.this.createMethodCall(match, methodDeclaration);
        List<SNode> statements = match.getNodes();
        if ((ExtractMethodWithOutputVariable.this.myDeclarationStatement != null)) {
          SLinkOperations.setTarget(SLinkOperations.getTarget(ExtractMethodWithOutputVariable.this.myDeclarationStatement, "localVariableDeclaration", true), "initializer", methodCall, true);
        } else {
          SNode newStatement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null);
          SLinkOperations.setTarget(newStatement, "expression", new ExtractMethodWithOutputVariable.QuotationClass_n3576q_a0a1a0c0a0a0a2().createNode(ExtractMethodWithOutputVariable.this.myOutputVariable, methodCall), true);
          SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(statements).first(), newStatement);
        }
        for (SNode statement : ListSequence.fromList(statements)) {
          if (statement != ExtractMethodWithOutputVariable.this.myDeclarationStatement) {
            SNodeOperations.deleteNode(statement);
          }
        }
      }
    });
  }

  public static class QuotationClass_n3576q_a0a1a0c0a0a0a2 {
    public QuotationClass_n3576q_a0a1a0c0a0a0a2() {
    }

    public SNode createNode(Object parameter_7, Object parameter_8) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_5 = quotedNode_2;
          quotedNode1_5.setReferent("variableDeclaration", (SNode) parameter_7);
          quotedNode_1.addChild("lValue", quotedNode1_5);
        }
        {
          quotedNode_3 = (SNode) parameter_8;
          SNode quotedNode1_6;
          if (_parameterValues_129834374.contains(quotedNode_3)) {
            quotedNode1_6 = HUtil.copyIfNecessary(quotedNode_3);
          } else {
            _parameterValues_129834374.add(quotedNode_3);
            quotedNode1_6 = quotedNode_3;
          }
          if (quotedNode1_6 != null) {
            quotedNode_1.addChild("rValue", HUtil.copyIfNecessary(quotedNode1_6));
          }
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }
}
