package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ClassRefactoringUtils {
  public ClassRefactoringUtils() {
  }

  public static Set<SNode> getClassMemberRefernce(SNode body) {
    Set<SNode> nodesToCheck = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode call : ListSequence.fromList(SNodeOperations.getDescendants(body, null, false, new String[]{}))) {
      if (MethodCallAdapter.isMethodCall(call)) {
        SetSequence.fromSet(nodesToCheck).addElement(new MethodCallAdapter(call).getMethodDeclaration());
      }
    }
    for (SNode call : ListSequence.fromList(SNodeOperations.getDescendants(body, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", false, new String[]{}))) {
      SetSequence.fromSet(nodesToCheck).addElement(SLinkOperations.getTarget(call, "fieldDeclaration", false));
    }
    for (SNode call : ListSequence.fromList(SNodeOperations.getDescendants(body, "jetbrains.mps.baseLanguage.structure.StaticFieldReference", false, new String[]{}))) {
      SetSequence.fromSet(nodesToCheck).addElement(SLinkOperations.getTarget(call, "variableDeclaration", false));
    }
    for (SNode call : ListSequence.fromList(SNodeOperations.getDescendants(body, "jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference", false, new String[]{}))) {
      SetSequence.fromSet(nodesToCheck).addElement(SLinkOperations.getTarget(call, "variableDeclaration", false));
    }
    return nodesToCheck;
  }
}
