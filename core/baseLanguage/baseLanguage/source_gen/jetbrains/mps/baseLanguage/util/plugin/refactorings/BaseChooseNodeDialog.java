package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.ide.ui.MPSTree;
import jetbrains.mps.ide.ui.MPSTreeNode;
import javax.swing.JScrollPane;
import com.intellij.ui.ScrollPaneFactory;
import jetbrains.mps.smodel.SNode;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Dialog;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelOperations;
import javax.swing.JComponent;
import jetbrains.mps.ide.ui.TextTreeNode;
import java.util.ArrayList;
import java.util.Collections;
import jetbrains.mps.util.ToStringComparator;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.ide.ui.smodel.SModelTreeNode;
import jetbrains.mps.util.Condition;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import jetbrains.mps.ide.ui.smodel.SNodeTreeNode;

public abstract class BaseChooseNodeDialog extends BaseDialog {
  private IOperationContext myContext;
  private SModelDescriptor myContextModel;
  private Set<SModelDescriptor> myVisibleModels = new HashSet<SModelDescriptor>();
  private MPSTree myTree = new MPSTree() {
    protected MPSTreeNode rebuild() {
      return BaseChooseNodeDialog.this.buildRootNode();
    }
  };
  private JScrollPane myExternalComponent = ScrollPaneFactory.createScrollPane(myTree);
  private SNode myResult;

  public BaseChooseNodeDialog(Frame mainFrame, IOperationContext context, SModelDescriptor contextModel, String text) throws HeadlessException {
    super(mainFrame, text);
    this.myContext = context;
    this.myContextModel = contextModel;
    this.init();
  }

  public BaseChooseNodeDialog(Dialog owner, IOperationContext context, SModelDescriptor contextModel, String title) throws HeadlessException {
    super(owner, title);
    this.myContext = context;
    this.myContextModel = contextModel;
    this.init();
  }

  protected abstract boolean isAcceptable(SNode node);

  private void init() {
    this.myVisibleModels.add(this.myContextModel);
    for (SModelDescriptor modelDescriptor : ListSequence.fromList(((AbstractModule) this.myContextModel.getModule()).getOwnModelDescriptors())) {
      this.myVisibleModels.add(modelDescriptor);
    }
    SModel model = this.myContextModel.getSModel();
    for (SModelReference sm : SModelOperations.getImportedModelUIDs(model)) {
      if (this.myContext.getScope().getModelDescriptor(sm) != null) {
        this.myVisibleModels.add(this.myContext.getScope().getModelDescriptor(sm));
      }
    }
    this.myTree.setRootVisible(false);
    this.myTree.setShowsRootHandles(true);
    this.myTree.rebuildLater();
  }

  protected JComponent getMainComponent() {
    return this.myExternalComponent;
  }

  private MPSTreeNode buildRootNode() {
    TextTreeNode root = new TextTreeNode("Root");
    ArrayList<SModelDescriptor> list = new ArrayList<SModelDescriptor>();
    list.addAll(this.myVisibleModels);
    Collections.sort(list, new ToStringComparator());
    for (SModelDescriptor sm : list) {
      if (SModelStereotype.isStubModelStereotype(sm.getStereotype())) {
        continue;
      }
      root.add(new SModelTreeNode(sm, null, this.myContext, new Condition<SNode>() {
        public boolean met(SNode object) {
          return BaseChooseNodeDialog.this.isAcceptable(object);
        }
      }));
    }
    return root;
  }

  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(200, 200, 800, 600);
  }

  @BaseDialog.Button(position = 0, name = "OK", mnemonic = 'O', defaultButton = true)
  public void onOk() {
    if (this.myTree.getSelectionPath() != null && this.myTree.getSelectionPath().getLastPathComponent() instanceof SNodeTreeNode) {
      SNodeTreeNode treeNode = (SNodeTreeNode) this.myTree.getSelectionPath().getLastPathComponent();
      this.myResult = treeNode.getSNode();
      this.dispose();
    } else {
      this.setErrorText("Invalid selected node");
    }
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C', defaultButton = false)
  public void onCancel() {
    this.dispose();
  }

  public SNode getResult() {
    return this.myResult;
  }
}
