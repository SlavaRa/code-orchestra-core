package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.EditorContext;
import java.awt.Frame;
import com.intellij.openapi.actionSystem.DataContext;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.openapi.ui.popup.ListPopup;
import com.intellij.openapi.ui.popup.JBPopupFactory;
import jetbrains.mps.workbench.action.ActionUtils;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.messageTargets.CellFinder;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import com.intellij.ui.awt.RelativePoint;

public class LocalVariableIntroducer {
  private IntroduceLocalVariableRefactoring myRefactoring;
  private EditorComponent myEditorComponent;
  private EditorContext myEditorContext;

  public LocalVariableIntroducer(Frame frame, IntroduceLocalVariableRefactoring refactoring, EditorComponent editorComponent, EditorContext editorContext) {
    myRefactoring = refactoring;
    myEditorComponent = editorComponent;
    myEditorContext = editorContext;
  }

  public void invoke(DataContext dataContext) {
    if (myRefactoring.hasDuplicates()) {
      AnAction thisOnly = new AnAction("Replace this occurence only") {
        public void actionPerformed(AnActionEvent e) {
          myRefactoring.setReplacingAll(false);
          execute();
        }
      };
      AnAction allOccurences = new AnAction("Replace all " + NameUtil.formatNumericalString(ListSequence.fromList(myRefactoring.getDuplicates()).count() + 1, "occurence")) {
        public void actionPerformed(AnActionEvent e) {
          myRefactoring.setReplacingAll(true);
          execute();
        }
      };
      ListPopup popup = JBPopupFactory.getInstance().createActionGroupPopup("Multiple occurences found", ActionUtils.groupFromActions(thisOnly, allOccurences), dataContext, null, false);
      popup.show(getRelativePoint());
    } else {
      execute();
    }
  }

  private void execute() {
    myRefactoring.setIsFinal(false);
    myRefactoring.setName(ListSequence.fromList(myRefactoring.getExpectedNames()).first());
    final Wrappers._T<SNode> result = new Wrappers._T<SNode>();
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        result.value = myRefactoring.doRefactoring();
        MoveRefactoringUtils.fixImportsFromNode(result.value);
      }
    });
    EditorCell cell = CellFinder.getCellForProperty(myEditorComponent, result.value, "name");
    if (cell == null) {
      myEditorContext.select(result.value);
    } else {
      if (cell instanceof EditorCell_Label) {
        EditorCell_Label ecl = ((EditorCell_Label) cell);
        myEditorComponent.getSelectionManager().setSelection(ecl, 0, 0, ecl.getText().length());
      } else {
        myEditorComponent.getSelectionManager().setSelection(cell);
      }
    }
  }

  private RelativePoint getRelativePoint() {
    return new RelativePoint(myEditorComponent, myEditorContext.getContextCell().getBounds().getLocation());
  }
}
