package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class ChangeMethodSignatureRefactoring {
  private ChangeMethodSignatureParameters myParameters;
  private SNode myDeclaration;
  private List<SNode> myUssages = new ArrayList<SNode>();

  public ChangeMethodSignatureRefactoring(ChangeMethodSignatureParameters params, SNode declaration) {
    this.myParameters = params;
    this.myDeclaration = declaration;
  }

  public void doRefactoring() {
    SPropertyOperations.set(this.myDeclaration, "name", SPropertyOperations.getString(this.myParameters.getDeclaration(), "name"));
    if (this.myParameters.isReturnValueChanged()) {
      SLinkOperations.setTarget(this.myDeclaration, "returnType", SNodeOperations.copyNode(SLinkOperations.getTarget(this.myParameters.getDeclaration(), "returnType", true)), true);
    }
    if (SNodeOperations.isInstanceOf(this.myDeclaration, "jetbrains.mps.baseLanguage.structure.IVisible")) {
      if (this.myParameters.isVisibilityChanged()) {
        SLinkOperations.setTarget(SNodeOperations.cast(this.myDeclaration, "jetbrains.mps.baseLanguage.structure.IVisible"), "visibility", SLinkOperations.getTarget(SNodeOperations.cast(this.myParameters.getDeclaration(), "jetbrains.mps.baseLanguage.structure.IVisible"), "visibility", true), true);
      }
    }
    this.changeParameters();
    ListSequence.fromList(SLinkOperations.getTargets(this.myDeclaration, "throwsItem", true)).clear();
    for (SNode throwItem : ListSequence.fromList(SLinkOperations.getTargets(this.myParameters.getDeclaration(), "throwsItem", true))) {
      ListSequence.fromList(SLinkOperations.getTargets(this.myDeclaration, "throwsItem", true)).addElement(SNodeOperations.copyNode(throwItem));
    }
    for (SNode node : ListSequence.fromList(this.myUssages)) {
      MethodCallAdapter call = new MethodCallAdapter(node);
      List<SNode> oldArgs = call.getMethodArguments();
      call.removeArguments();
      for (SNode parameter : ListSequence.fromList(SLinkOperations.getTargets(this.myParameters.getDeclaration(), "parameter", true))) {
        int index = ListSequence.fromList(this.myParameters.getIdList()).indexOf(parameter.getId());
        if (index == -1) {
          call.addArgument(SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NullLiteral", null));
        } else {
          call.addArgument(ListSequence.fromList(oldArgs).getElement(index));
        }
      }
    }
  }

  public SNode getDeclaration() {
    return myDeclaration;
  }

  private void changeParameters() {
    List<SNode> oldParams = SLinkOperations.getTargets(this.myDeclaration, "parameter", true);
    ListSequence.fromList(SLinkOperations.getTargets(this.myDeclaration, "parameter", true)).clear();
    for (SNode parameter : ListSequence.fromList(SLinkOperations.getTargets(this.myParameters.getDeclaration(), "parameter", true))) {
      int index = ListSequence.fromList(this.myParameters.getIdList()).indexOf(parameter.getId());
      if (index == -1) {
        ListSequence.fromList(SLinkOperations.getTargets(this.myDeclaration, "parameter", true)).addElement(SNodeOperations.copyNode(parameter));
      } else {
        ListSequence.fromList(SLinkOperations.getTargets(this.myDeclaration, "parameter", true)).addElement(ListSequence.fromList(oldParams).getElement(index));
        SNode newParam = ListSequence.fromList(SLinkOperations.getTargets(this.myDeclaration, "parameter", true)).last();
        SPropertyOperations.set(newParam, "name", SPropertyOperations.getString(parameter, "name").substring(0));
        SLinkOperations.setTarget(newParam, "type", SNodeOperations.copyNode(SLinkOperations.getTarget(parameter, "type", true)), true);
      }
    }
  }

  public void setUsages(List<SNode> ussages) {
    this.myUssages = ussages;
  }

  public static boolean isApplicable(SNode node) {
    return (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) != null) && (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
  }
}
