package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.behavior.AbstractExtractMethodRefactoringProcessor;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ClassExtractMethodRefactoringProcessor extends AbstractExtractMethodRefactoringProcessor {
  private SNode myClass;

  public ClassExtractMethodRefactoringProcessor(SNode clazz, List<SNode> nodesToExtract) {
    super(clazz, nodesToExtract);
    this.myClass = clazz;
  }

  public SNode createMethodCall(SNode declaration, List<SNode> parameters) {
    if (SNodeOperations.isInstanceOf(declaration, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression", null);
      SLinkOperations.setTarget(result, "operand", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression", null), true);
      SNode callOperation = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null);
      SLinkOperations.setTarget(result, "operation", callOperation, true);
      SLinkOperations.setTarget(callOperation, "baseMethodDeclaration", SNodeOperations.cast(declaration, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"), false);
      ListSequence.fromList(SLinkOperations.getTargets(callOperation, "actualArgument", true)).addSequence(ListSequence.fromList(parameters));
      return result;
    }
    if (SNodeOperations.isInstanceOf(declaration, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
      SNode call = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null);
      SLinkOperations.setTarget(call, "classConcept", SNodeOperations.cast(SNodeOperations.getParent(declaration), "jetbrains.mps.baseLanguage.structure.ClassConcept"), false);
      SLinkOperations.setTarget(call, "baseMethodDeclaration", SNodeOperations.cast(declaration, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), false);
      ListSequence.fromList(SLinkOperations.getTargets(call, "actualArgument", true)).addSequence(ListSequence.fromList(parameters));
      return call;
    }
    return null;
  }

  public SNode createNewMethod() {
    SNode containerMethod = this.getContainerMethod();
    if (SNodeOperations.isInstanceOf(containerMethod, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
      return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration", null);
    } else {
      return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null);
    }
  }

  @Override
  public void addMethod(SNode method) {
    if (SNodeOperations.getConceptDeclaration(this.getContainerMethod()) == SNodeOperations.getConceptDeclaration(method)) {
      SNodeOperations.insertNextSiblingChild(this.getContainerMethod(), method);
    } else {
      super.addMethod(method);
    }
  }
}
