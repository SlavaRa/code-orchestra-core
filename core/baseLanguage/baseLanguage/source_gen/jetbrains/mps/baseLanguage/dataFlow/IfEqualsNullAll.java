package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */

import jetbrains.mps.analyzers.runtime.framework.DataFlowConstructor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;

public class IfEqualsNullAll extends DataFlowConstructor {
  public IfEqualsNullAll() {
  }

  public boolean isApplicable(SNode node) {
    return SModelUtil_new.isAssignableConcept(INamedConcept_Behavior.call_getFqName_1213877404258(SNodeOperations.getConceptDeclaration(node)), getApplicableConceptFqName());
  }

  public String getApplicableConceptFqName() {
    return "jetbrains.mps.baseLanguage.structure.IfStatement";
  }

  public void performActions(Program o, SNode node) {
    SNode ifTrue = SLinkOperations.getTarget(node, "ifTrue", true);
    List<SNode> vars = new ArrayList<SNode>();
    for (SNode expression : NullableUtil.getOrConditions(node)) {
      if (SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.EqualsExpression")) {
        SNode notNullNode = NullableUtil.getOtherThanNull(SNodeOperations.cast(expression, "jetbrains.mps.baseLanguage.structure.EqualsExpression"));
        if (notNullNode != null) {
          ListSequence.fromList(vars).addElement(notNullNode);
        }
      }
    }
    if (!(ListSequence.fromList(SLinkOperations.getTargets(ifTrue, "statement", true)).count() == 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(ifTrue, "statement", true)).first(), "jetbrains.mps.baseLanguage.structure.ReturnStatement"))) {
      for (SNode var : vars) {
        {
          Object object = SLinkOperations.getTarget(node, "ifTrue", true);
          if (((Program) o).contains(object)) {
            boolean before = true;
            int position = ((Program) (o)).getStart(SLinkOperations.getTarget(node, "ifTrue", true));
            Instruction instruction = new nullableInstruction(var);
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      }
    }
    if (SLinkOperations.getTargets(node, "elsifClauses", true) != null) {
      for (SNode var : vars) {
        {
          Object object = ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).first();
          if (((Program) o).contains(object)) {
            boolean before = true;
            int position = ((Program) (o)).getStart(ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).first());
            Instruction instruction = new notNullInstruction(var);
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      }
    }
    for (SNode var : vars) {
      {
        Object object = SNodeOperations.getParent(var);
        if (((Program) o).contains(object)) {
          boolean before = false;
          int position = ((Program) (o)).getEnd(object);
          Instruction instruction = new notNullInstruction(var);
          instruction.setSource(node);
          ((Program) (o)).insert(instruction, position, true, before);
        }
      }
    }

  }
}
