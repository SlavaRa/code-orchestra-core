package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import java.awt.BorderLayout;
import java.awt.Component;
import javax.swing.JList;
import javax.swing.DefaultListCellRenderer;
import javax.swing.BorderFactory;
import com.intellij.util.ui.UIUtil;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;
import java.util.Comparator;
import com.intellij.ui.ColoredListCellRenderer;
import java.awt.Color;
import com.intellij.ui.SimpleTextAttributes;
import java.awt.Font;

public abstract class NodeListCellRenderer<T> extends JPanel implements ListCellRenderer {
  protected NodeListCellRenderer() {
    super(new BorderLayout());
  }

  public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
    removeAll();
    String moduleName = null;
    DefaultListCellRenderer rightRenderer = getRightCellRenderer();
    if (rightRenderer != null) {
      final Component rightCellRendererComponent = rightRenderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
      add(rightCellRendererComponent, BorderLayout.EAST);
      moduleName = rightRenderer.getText();
      final JPanel spacer = new JPanel();
      spacer.setBorder(BorderFactory.createEmptyBorder(0, 2, 0, 2));
      spacer.setBackground((isSelected ?
        UIUtil.getListSelectionBackground() :
        UIUtil.getListBackground()
      ));
      add(spacer, BorderLayout.CENTER);
    }
    final Component leftCellRendererComponent = new NodeListCellRenderer.LeftRenderer(moduleName).getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
    add(leftCellRendererComponent, BorderLayout.WEST);
    setBackground((isSelected ?
      UIUtil.getListSelectionBackground() :
      UIUtil.getListBackground()
    ));
    return this;
  }

  @Nullable
  protected DefaultListCellRenderer getRightCellRenderer() {
    return null;
  }

  public abstract String getElementText(T element);

  @Nullable
  protected abstract String getContainerText(T element, final String name);

  protected abstract Icon getIcon(T element);

  public Comparator<T> getComparator() {
    return new Comparator<T>() {
      public int compare(T o1, T o2) {
        return getText(o1).compareTo(getText(o2));
      }

      private String getText(T element) {
        String elementText = getElementText(element);
        String containerText = getContainerText(element, elementText);
        return (containerText != null ?
          elementText + " " + containerText :
          elementText
        );
      }
    };
  }

  private class LeftRenderer extends ColoredListCellRenderer {
    private final String myModuleName;

    public LeftRenderer(final String moduleName) {
      myModuleName = moduleName;
    }

    protected void customizeCellRenderer(JList list, Object value, int index, boolean selected, boolean hasFocus) {
      T element = (T) value;
      String name = getElementText((T) element);
      Color color = list.getForeground();
      SimpleTextAttributes nameAttributes = new SimpleTextAttributes(Font.PLAIN, color);
      assert name != null : "Null name for PSI element " + element;
      append(name, nameAttributes);
      setIcon(NodeListCellRenderer.this.getIcon(element));
      String containerText = getContainerText(element, name + ((myModuleName != null ?
        myModuleName + "        " :
        ""
      )));
      if (containerText != null) {
        append(" " + containerText, new SimpleTextAttributes(Font.PLAIN, Color.GRAY));
      }
      setPaintFocusBorder(false);
      setBackground((selected ?
        UIUtil.getListSelectionBackground() :
        UIUtil.getListBackground()
      ));
    }
  }
}
