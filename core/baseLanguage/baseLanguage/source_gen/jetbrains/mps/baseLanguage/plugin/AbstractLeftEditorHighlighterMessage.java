package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultEditorMessage;
import jetbrains.mps.nodeEditor.EditorMessageIconRenderer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorMessageOwner;
import java.awt.Graphics;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorMessage;
import java.awt.Cursor;

public abstract class AbstractLeftEditorHighlighterMessage extends DefaultEditorMessage implements EditorMessageIconRenderer {
  private String myTooltip;

  public AbstractLeftEditorHighlighterMessage(SNode node, EditorMessageOwner ovner, String tooltip) {
    super(node, null, "", ovner);
    myTooltip = tooltip;
  }

  @Override
  public void paint(Graphics graphics, EditorComponent component, EditorCell cell) {
  }

  @Override
  public boolean isValid(EditorComponent component) {
    return true;
  }

  @Override
  public boolean sameAs(EditorMessage message) {
    if (message instanceof AbstractLeftEditorHighlighterMessage) {
      AbstractLeftEditorHighlighterMessage other = (AbstractLeftEditorHighlighterMessage) message;
      return super.sameAs(other) && other.getType() == getType() && other.getTooltipText().equals(getTooltipText());
    }
    return false;
  }

  public String getTooltipText() {
    return myTooltip;
  }

  public Cursor getMouseOverCursor() {
    return Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
  }

  public boolean showInGutter() {
    return false;
  }
}
