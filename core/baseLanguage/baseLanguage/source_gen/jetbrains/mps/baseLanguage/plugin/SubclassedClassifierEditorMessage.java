package jetbrains.mps.baseLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorMessageIconRenderer;
import jetbrains.mps.plugins.MacrosUtil;
import jetbrains.mps.nodeEditor.cells.CellFinder;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorMessageOwner;
import jetbrains.mps.nodeEditor.cells.CellFinders;
import jetbrains.mps.util.Condition;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.ActionManager;
import javax.swing.JPopupMenu;

public class SubclassedClassifierEditorMessage extends AbstractLeftEditorHighlighterMessage {
  private static final EditorMessageIconRenderer.IconRendererType TYPE = new EditorMessageIconRenderer.IconRendererType(1);
  private static String OVERRIDEN_ICON_PATH = MacrosUtil.expandPath("${language_descriptor}/icons/gutter/overridenMethod.png", "jetbrains.mps.baseLanguage");
  private static String IMPLEMENTED_ICON_PATH = MacrosUtil.expandPath("${language_descriptor}/icons/gutter/implementedMethod.png", "jetbrains.mps.baseLanguage");

  private boolean myIsInterface;
  private CellFinder<EditorCell> myClassifierNameCellFinder;

  public SubclassedClassifierEditorMessage(final SNode node, EditorMessageOwner ovner, String tooltip, boolean isInterface) {
    super(node, ovner, tooltip);
    myIsInterface = isInterface;
    myClassifierNameCellFinder = CellFinders.byCondition(new Condition<EditorCell>() {
      public boolean met(EditorCell cell) {
        return cell.getSNode() == node && cell instanceof EditorCell_Label && ((EditorCell_Label) cell).isEditable();
      }
    }, true);
  }

  public Icon getIcon() {
    return IconManager.loadIcon((myIsInterface ?
      IMPLEMENTED_ICON_PATH :
      OVERRIDEN_ICON_PATH
    ), true);
  }

  public EditorMessageIconRenderer.IconRendererType getType() {
    return TYPE;
  }

  public EditorCell getAnchorCell(EditorCell bigCell) {
    EditorCell returnTypeCell = bigCell.findChild(myClassifierNameCellFinder);
    return (returnTypeCell != null ?
      returnTypeCell :
      bigCell
    );
  }

  public AnAction getClickAction() {
    return ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.baseLanguage.plugin.GoToInheritedClassifier_Action"));
  }

  public JPopupMenu getPopupMenu() {
    return null;
  }
}
