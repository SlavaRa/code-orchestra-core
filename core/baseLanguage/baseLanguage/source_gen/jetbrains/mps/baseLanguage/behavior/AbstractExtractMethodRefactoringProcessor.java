package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class AbstractExtractMethodRefactoringProcessor implements IExtractMethodRefactoringProcessor {
  protected SNode myNode;
  protected List<SNode> myNodesToRefactor;

  public AbstractExtractMethodRefactoringProcessor(SNode node, List<SNode> nodesToRefactor) {
    this.myNode = node;
    this.myNodesToRefactor = nodesToRefactor;
  }

  public void addMethod(SNode method) {
    universalAddMethod(this.myNode, method);
  }

  public SNode createNewMethod() {
    return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", null);
  }

  public SNode createMethodCall(SNode methodDeclaration, List<SNode> parameteres) {
    return null;
  }

  public SNode getContainerMethod() {
    SNode node = ListSequence.fromList(this.myNodesToRefactor).first();
    while (node != null) {
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
        return node;
      }
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ConceptFunction")) {
        return node;
      }
      node = SNodeOperations.getParent(node);
    }
    throw new IllegalStateException("can't be applied in this case");
  }

  public SNode getContainerReturnType() {
    SNode containerMethod = this.getContainerMethod();
    if (SNodeOperations.isInstanceOf(containerMethod, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
      return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(containerMethod, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "returnType", true));
    }
    if (SNodeOperations.isInstanceOf(containerMethod, "jetbrains.mps.baseLanguage.structure.ConceptFunction")) {
      return TypeChecker.getInstance().getRuntimeSupport().coerce_(ConceptFunction_Behavior.call_getExpectedReturnType_1213877374441(SNodeOperations.cast(containerMethod, "jetbrains.mps.baseLanguage.structure.ConceptFunction")), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.Type"), true);
    }
    return null;
  }

  public static void universalAddMethod(SNode container, SNode method) {
    SNode concept = SNodeOperations.getConceptDeclaration(method);
    for (SNode link : ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(SNodeOperations.getConceptDeclaration(container)))) {
      if (SLinkOperations.getTarget(link, "target", false) == concept) {
        container.addChild(SPropertyOperations.getString(link, "role"), method);
      }
    }
  }
}
