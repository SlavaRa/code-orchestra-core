package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;

public class ClassCreator_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getInstanceType_8008512149545154471(SNode thisNode) {
    SNode classConcept = SNodeOperations.getAncestor(SLinkOperations.getTarget(thisNode, "baseMethodDeclaration", false), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    SNode classifierType = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(classifierType, "classifier", classConcept, false);
    for (SNode typeParameter : SLinkOperations.getTargets(thisNode, "typeParameter", true)) {
      ListSequence.fromList(SLinkOperations.getTargets(classifierType, "parameter", true)).addElement(SNodeOperations.copyNode(typeParameter));
    }
    return classifierType;
  }

  public static List<SNode> virtual_getAvailableMethodDeclarations_5776618742611315379(SNode thisNode, String methodName) {
    SNode classConcept = SNodeOperations.getAncestor(SLinkOperations.getTarget(thisNode, "baseMethodDeclaration", false), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    return SLinkOperations.getTargets(classConcept, "constructor", true);
  }
}
