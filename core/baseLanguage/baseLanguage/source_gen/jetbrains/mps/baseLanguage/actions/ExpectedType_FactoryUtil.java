package jetbrains.mps.baseLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.TypeDerivable_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ExpectedType_FactoryUtil {
  public ExpectedType_FactoryUtil() {
  }

  public static boolean canComputeCastType(SNode castExpression) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(castExpression), "jetbrains.mps.baseLanguage.structure.TypeDerivable");
  }

  public static SNode createExpectedType(SNode contextNode) {
    SNode castType = null;
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(contextNode), "jetbrains.mps.baseLanguage.structure.TypeDerivable")) {
      castType = TypeDerivable_Behavior.call_deriveType_1213877435747(SNodeOperations.cast(SNodeOperations.getParent(contextNode), "jetbrains.mps.baseLanguage.structure.TypeDerivable"), contextNode);
    }
    return castType;
  }

  public static SNode getOriginalExpression(SNode enclosingNode, SNode copiedExpression) {
    SNode originalExpression = null;
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(enclosingNode))) {
      if (MatchingUtil.matchNodes(copiedExpression, child)) {
        originalExpression = SNodeOperations.cast(child, "jetbrains.mps.baseLanguage.structure.Expression");
      }
    }
    return originalExpression;
  }

  public static SNode getCorrespondingInstanceOf(SNode expressionOrItsParent) {
    SNode outer = expressionOrItsParent;
    while (SNodeOperations.isInstanceOf(outer, "jetbrains.mps.baseLanguage.structure.Expression")) {
      outer = SNodeOperations.getParent(outer);
    }
    if (SNodeOperations.isInstanceOf(outer, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
      outer = SNodeOperations.getParent(outer);
    }
    if (SNodeOperations.isInstanceOf(outer, "jetbrains.mps.baseLanguage.structure.Statement") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(outer), "jetbrains.mps.baseLanguage.structure.StatementList")) {
      SNode list = SNodeOperations.cast(SNodeOperations.getParent(outer), "jetbrains.mps.baseLanguage.structure.StatementList");
      if (ListSequence.fromList(SLinkOperations.getTargets(list, "statement", true)).first() == outer) {
        outer = list;
      } else {
        outer = null;
      }
    }
    if (SNodeOperations.isInstanceOf(outer, "jetbrains.mps.baseLanguage.structure.StatementList")) {
      SNode condition = null;
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(outer), "jetbrains.mps.baseLanguage.structure.ElsifClause")) {
        condition = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(outer), "jetbrains.mps.baseLanguage.structure.ElsifClause"), "condition", true);
      } else if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(outer), "jetbrains.mps.baseLanguage.structure.IfStatement")) {
        condition = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(outer), "jetbrains.mps.baseLanguage.structure.IfStatement"), "condition", true);
      }
      if (SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.InstanceOfExpression")) {
        return SNodeOperations.cast(condition, "jetbrains.mps.baseLanguage.structure.InstanceOfExpression");
      }
    }
    return null;
  }
}
