package jetbrains.mps.baseLanguage.actions;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;

public class PrecedenceUtil {
  public PrecedenceUtil() {
  }

  @NotNull
  public static SNode getTargetForRightTransform(@NotNull SNode contextNode) {
    SNode targetNode = contextNode;
    for (SNode parentNode = SNodeOperations.getParent(targetNode); parentNode != null && SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.Expression"); parentNode = SNodeOperations.getParent(targetNode)) {
      if (SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.IMethodCall") || SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
        // if parent expression is IMethodCall then targetNode is either actualArgument 
        // or typeArgument (parameters of method call), so we should not go upper 
        // same with ParenthesizedExpression 
        break;
      }
      SNode targetContainingLink = SNodeOperations.getContainingLinkDeclaration(targetNode);
      if (SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.BinaryOperation") && targetContainingLink == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation", "leftExpression")) {
        // if parent expression is BinaryOperation and target is left child of it 
        // then we should rather transform current target 
        break;
      }
      if (SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.DotExpression") && targetContainingLink == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", "operand")) {
        // if parent expression is DotExpression and target is operang ("left" part of the expression) 
        // then we should rather transform current target 
        break;
      }
      targetNode = SNodeOperations.cast(parentNode, "jetbrains.mps.baseLanguage.structure.Expression");
    }
    return targetNode;
  }

  @NotNull
  public static SNode getTargetForLeftTransform(@NotNull SNode contextNode, @NotNull SNode resultNode) {
    int resultingExpressionPriority = getPriority(SNodeOperations.getConceptDeclaration(resultNode)).ordinal();
    SNode targetNode = contextNode;
    for (SNode parentNode = SNodeOperations.getParent(targetNode); parentNode != null && SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.Expression") && getPriority(SNodeOperations.getConceptDeclaration(parentNode)).ordinal() < resultingExpressionPriority; parentNode = SNodeOperations.getParent(targetNode)) {
      if (SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.IMethodCall") || SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
        // if parent expression is IMethodCall then targetNode is either actualArgument 
        // or typeArgument (parameters of method call), so we should not go upper 
        // same with ParenthesizedExpression 
        break;
      }
      if (SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.baseLanguage.structure.BinaryOperation") && SNodeOperations.getContainingLinkDeclaration(targetNode) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation", "rightExpression")) {
        // if parent expression is BinaryOperation having higher priority and target is rhigh child of it 
        // then we should rather transform current target and add additional parenthesis around resulting expression 
        break;
      }
      targetNode = SNodeOperations.cast(parentNode, "jetbrains.mps.baseLanguage.structure.Expression");
    }
    return targetNode;
  }

  public static boolean isSamePriority(SNode firstExpression, SNode secondExpression) {
    return getPriority(SNodeOperations.getConceptDeclaration(firstExpression)) == getPriority(SNodeOperations.getConceptDeclaration(secondExpression));
  }

  public static SNode parenthesiseIfNecessary(@NotNull SNode contextNode) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(contextNode), "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      SNode parentBinaryOperation = SNodeOperations.cast(SNodeOperations.getParent(contextNode), "jetbrains.mps.baseLanguage.structure.BinaryOperation");
      if (SNodeOperations.getContainingLinkDeclaration(contextNode) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.BinaryOperation", "rightExpression") && isHigherPriority(parentBinaryOperation, contextNode)) {
        SNode result = SNodeFactoryOperations.replaceWithNewChild(contextNode, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
        SLinkOperations.setTarget(result, "expression", contextNode, true);
        return result;
      }
    }
    return contextNode;
  }

  private static boolean isHigherPriority(SNode firstExpression, SNode secondExpression) {
    return getPriority(SNodeOperations.getConceptDeclaration(firstExpression)).ordinal() < getPriority(SNodeOperations.getConceptDeclaration(secondExpression)).ordinal();
  }

  private static PrecedenceUtil.Precedence getPriority(SNode expression) {
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      switch (SConceptPropertyOperations.getInteger(((SNode) expression), "priority")) {
        case -2:
          // || 
          return PrecedenceUtil.Precedence.J_13;
        case -1:
          // && 
          return PrecedenceUtil.Precedence.J_12;
        case 0:
          // ==, != 
          return PrecedenceUtil.Precedence.J_8;
        case 1:
          // <, <=, >, >= 
          return PrecedenceUtil.Precedence.J_7;
        case 2:
          // +, - 
          return PrecedenceUtil.Precedence.J_5;
        case 3:
          // *, /, % 
          return PrecedenceUtil.Precedence.J_4;
        case 4:
          return PrecedenceUtil.Precedence.MPS_EQUALITY_OPERATIONS;
        case 5:
          // >>, << 
          return PrecedenceUtil.Precedence.J_6;
        case 8:
          // & 
          return PrecedenceUtil.Precedence.J_9;
        case 9:
          // ^ 
          return PrecedenceUtil.Precedence.J_10;
        case 10:
          // | 
          return PrecedenceUtil.Precedence.J_11;
        default:
      }
    }

    // TODO: not sure concerning ParenthesizedExpression priorities.. 
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
      return PrecedenceUtil.Precedence.PARENTHESES;
    }
    // TODO: m.b. we should make "Default" precenence higher then all the user extensions 
    // TODO: will be recognized as high-priority expressions 
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.ArrayAccessExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.IMethodCall") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.VariableReference") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.collections.structure.MapElement") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression")) {
      return PrecedenceUtil.Precedence.ARRAY_OPARATIONS_AND_METHOD_CALLS;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.DotExpression")) {
      return PrecedenceUtil.Precedence.DOT_EXPRESSION;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression")) {
      return PrecedenceUtil.Precedence.POSTFIX_EXPRESSIONS;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.UnaryMinus") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.NotExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.BitwiseNotExpression")) {
      return PrecedenceUtil.Precedence.J_2;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.CastExpression") || SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.GenericNewExpression")) {
      return PrecedenceUtil.Precedence.J_3;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.InstanceOfExpression")) {
      return PrecedenceUtil.Precedence.J_7;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) {
      return PrecedenceUtil.Precedence.J_14;
    }
    if (SConceptOperations.isSubConceptOf(expression, "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression")) {
      return PrecedenceUtil.Precedence.J_15;
    }
    return PrecedenceUtil.Precedence.DEFAULT;
  }

  private static   enum Precedence {
    PARENTHESES(),
    ARRAY_OPARATIONS_AND_METHOD_CALLS(),
    DOT_EXPRESSION(),
    POSTFIX_EXPRESSIONS(),
    J_2(),
    J_3(),
    MPS_EQUALITY_OPERATIONS(),
    J_4(),
    J_5(),
    J_6(),
    J_7(),
    J_8(),
    J_9(),
    J_10(),
    J_11(),
    J_12(),
    J_13(),
    J_14(),
    J_15(),
    DEFAULT();

    Precedence() {
      // All J_ constants corresponds to the levels "defined" in java - see 
      // http://www.cs.princeton.edu/introcs/11precedence/ 

      // All MPS_ constants were introduced in MPS languages 

      // Actual priority of Expression is determined by ordinal of corresponding 
      // enumeration constant upper constants has higher priority then lower 
    }
  }
}
