package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class MakeStaticInitializerNotStatic_QuickFix extends QuickFix_Runtime {
  public MakeStaticInitializerNotStatic_QuickFix() {
  }

  public String getDescription() {
    return "Make '" + SPropertyOperations.getString(((SNode) MakeStaticInitializerNotStatic_QuickFix.this.getField("containingClass")[0]), "name") + " class initializer' not static";
  }

  public void execute(SNode node) {
    if ((SLinkOperations.getTarget(((SNode) MakeStaticInitializerNotStatic_QuickFix.this.getField("containingClass")[0]), "instanceInitializer", true) == null)) {
      SLinkOperations.setNewChild(((SNode) MakeStaticInitializerNotStatic_QuickFix.this.getField("containingClass")[0]), "instanceInitializer", "jetbrains.mps.baseLanguage.structure.InstanceInitializer");
    }
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(((SNode) MakeStaticInitializerNotStatic_QuickFix.this.getField("containingClass")[0]), "instanceInitializer", true), "statementList", true), "statement", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(((SNode) MakeStaticInitializerNotStatic_QuickFix.this.getField("staticInitializer")[0]), "statementList", true), "statement", true)));
    SNodeOperations.detachNode(((SNode) MakeStaticInitializerNotStatic_QuickFix.this.getField("staticInitializer")[0]));
    SNodeOperations.deleteNode(((SNode) MakeStaticInitializerNotStatic_QuickFix.this.getField("staticInitializer")[0]));
  }
}
