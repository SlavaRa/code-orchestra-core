package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class MakeStaticMethodNotStatic_QuickFix extends QuickFix_Runtime {
  public MakeStaticMethodNotStatic_QuickFix() {
  }

  public String getDescription() {
    return "Make '" + SPropertyOperations.getString(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "name") + "' not static";
  }

  public void execute(SNode node) {
    SNode methodDeclaration = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null);
    SPropertyOperations.set(methodDeclaration, "name", SPropertyOperations.getString(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "name"));
    SPropertyOperations.set(methodDeclaration, "isFinal", "" + SPropertyOperations.getBoolean(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "isFinal"));
    SLinkOperations.setTarget(methodDeclaration, "returnType", SLinkOperations.getTarget(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "returnType", true), true);
    ListSequence.fromList(SLinkOperations.getTargets(methodDeclaration, "parameter", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "parameter", true)));
    SLinkOperations.setTarget(methodDeclaration, "body", SLinkOperations.getTarget(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "body", true), true);
    ListSequence.fromList(SLinkOperations.getTargets(methodDeclaration, "throwsItem", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "throwsItem", true)));
    SPropertyOperations.set(methodDeclaration, "isDeprecated", "" + SPropertyOperations.getBoolean(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "isDeprecated"));
    ListSequence.fromList(SLinkOperations.getTargets(methodDeclaration, "annotation", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "annotation", true)));
    ListSequence.fromList(SLinkOperations.getTargets(methodDeclaration, "typeVariableDeclaration", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "typeVariableDeclaration", true)));
    SLinkOperations.setTarget(methodDeclaration, "visibility", SLinkOperations.getTarget(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]), "visibility", true), true);
    ListSequence.fromList(SLinkOperations.getTargets(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("containingClass")[0]), "method", true)).addElement(methodDeclaration);
    SNodeOperations.detachNode(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]));
    SNodeOperations.deleteNode(((SNode) MakeStaticMethodNotStatic_QuickFix.this.getField("staticMethod")[0]));
  }
}
