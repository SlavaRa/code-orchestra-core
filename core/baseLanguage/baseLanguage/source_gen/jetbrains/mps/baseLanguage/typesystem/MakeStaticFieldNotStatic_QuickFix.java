package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class MakeStaticFieldNotStatic_QuickFix extends QuickFix_Runtime {
  public MakeStaticFieldNotStatic_QuickFix() {
  }

  public String getDescription() {
    return "Make '" + SPropertyOperations.getString(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("staticField")[0]), "name") + "' not static";
  }

  public void execute(SNode node) {
    SNode fieldDeclaration = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldDeclaration", null);
    SPropertyOperations.set(fieldDeclaration, "name", SPropertyOperations.getString(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("staticField")[0]), "name"));
    SLinkOperations.setTarget(fieldDeclaration, "type", SLinkOperations.getTarget(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("staticField")[0]), "type", true), true);
    SPropertyOperations.set(fieldDeclaration, "isFinal", "" + SPropertyOperations.getBoolean(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("staticField")[0]), "isFinal"));
    SLinkOperations.setTarget(fieldDeclaration, "initializer", SLinkOperations.getTarget(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("staticField")[0]), "initializer", true), true);
    ListSequence.fromList(SLinkOperations.getTargets(fieldDeclaration, "annotation", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("staticField")[0]), "annotation", true)));
    SLinkOperations.setTarget(fieldDeclaration, "visibility", SLinkOperations.getTarget(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("staticField")[0]), "visibility", true), true);
    SPropertyOperations.set(fieldDeclaration, "isDeprecated", "" + SPropertyOperations.getBoolean(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("staticField")[0]), "isDeprecated"));
    ListSequence.fromList(SLinkOperations.getTargets(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("containingClass")[0]), "field", true)).addElement(fieldDeclaration);
    SNodeOperations.detachNode(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("staticField")[0]));
    SNodeOperations.deleteNode(((SNode) MakeStaticFieldNotStatic_QuickFix.this.getField("staticField")[0]));
  }
}
