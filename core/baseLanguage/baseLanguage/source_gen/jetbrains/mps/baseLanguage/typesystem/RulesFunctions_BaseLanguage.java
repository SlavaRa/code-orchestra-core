package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.dependencies.InferenceMethod;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Map;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.baseLanguage.behavior.TypeVariableDeclaration_Behavior;
import jetbrains.mps.lang.typesystem.dependencies.CheckingMethod;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration_Behavior;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.messageTargets.PropertyMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.baseLanguage.behavior.IMethodLike_Behavior;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.dataFlow.framework.AnalysisResult;
import jetbrains.mps.baseLanguage.dataFlow.NullableState;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import java.util.HashSet;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class RulesFunctions_BaseLanguage {
  public RulesFunctions_BaseLanguage() {
  }

  @InferenceMethod
  public static void comparisonOp(final TypeCheckingContext typeCheckingContext, SNode binOp) {
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(binOp, "rightExpression", true);
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1176897142200", 0, null);
      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(binOp, "rightExpression", true), "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1176897133366", true), (SNode) SLinkOperations.getTarget(new RulesFunctions_BaseLanguage.QuotationClass_5ahx9e_a0a0a0a().createNode(typeCheckingContext), "descriptor", false), true, true, _info_12389875345);
    }
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(binOp, "leftExpression", true);
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1176897185023", 0, null);
      typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(SLinkOperations.getTarget(binOp, "leftExpression", true), "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1176897185028", true), (SNode) SLinkOperations.getTarget(new RulesFunctions_BaseLanguage.QuotationClass_5ahx9e_a0a0b0a().createNode(typeCheckingContext), "descriptor", false), true, true, _info_12389875345);
    }
    {
      SNode _nodeToCheck_1029348928467 = binOp;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1203512292514", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1203512292516", true), (SNode) new RulesFunctions_BaseLanguage.QuotationClass_5ahx9e_a0a2a0().createNode(typeCheckingContext), _info_12389875345);
    }
  }

  public static Iterable<SNode> collectReturnStatements(SNode node) {
    Iterable<SNode> returnStatements = ListSequence.fromList(SNodeOperations.getChildren(node)).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(final SNode it) {
        return new Iterable<SNode>() {
          public Iterator<SNode> iterator() {
            return new YieldingIterator<SNode>() {
              private int __CP__ = 0;
              private SNode _11_returnStmt;
              private Iterator<SNode> _11_returnStmt_it;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 11:
                      this._11_returnStmt_it = Sequence.fromIterable(collectReturnStatements(it)).iterator();
                    case 12:
                      if (!(this._11_returnStmt_it.hasNext())) {
                        this.__CP__ = 3;
                        break;
                      }
                      this._11_returnStmt = this._11_returnStmt_it.next();
                      this.__CP__ = 13;
                      break;
                    case 4:
                      if (SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.ReturnStatement")) {
                        this.__CP__ = 5;
                        break;
                      }
                      this.__CP__ = 7;
                      break;
                    case 7:
                      if (SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.ConceptFunction") || SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock") || SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.IStatementListContainer") || SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.AnonymousClass") || SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.quotation.structure.Quotation")) {
                        this.__CP__ = 8;
                        break;
                      }
                      this.__CP__ = 10;
                      break;
                    case 3:
                      if (false) {
                        this.__CP__ = 2;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 6:
                      this.__CP__ = 3;
                      this.yield(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.ReturnStatement"));
                      return true;
                    case 14:
                      this.__CP__ = 12;
                      this.yield(_11_returnStmt);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 2:
                      this.__CP__ = 4;
                      break;
                    case 5:
                      this.__CP__ = 6;
                      break;
                    case 8:
                      // don't look inside closures and other code-blocks 
                      // don't look inside commented statements 
                      // don't look inside anything that implements IStatementListContainer (for extensibility) 
                      // don't look inside anonymous classes 
                      this.__CP__ = 1;
                      break;
                    case 10:
                      this.__CP__ = 11;
                      break;
                    case 13:
                      this.__CP__ = 14;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    });
    return returnStatements;
  }

  @InferenceMethod
  public static void inference_InstanceMethodCallOperation(final TypeCheckingContext typeCheckingContext, SNode imco, SNode returnType, SNode instanceType, SNode methodClassifier) {
    Map<SNode, List<SNode>> mmap = MapSequence.fromMap(new HashMap<SNode, List<SNode>>());
    RulesFunctions_BaseLanguage.inference_equateParametersAndReturnType(typeCheckingContext, imco, returnType, mmap);
    RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithTypeVariablesInternal(typeCheckingContext, methodClassifier, instanceType, mmap, imco);
    RulesFunctions_BaseLanguage.inference_matchConcreteTypesWithMethodTypeVariables(typeCheckingContext, imco, mmap);
    RulesFunctions_BaseLanguage.inference_equateMatchingTypeVariables(typeCheckingContext, mmap);
  }

  @InferenceMethod
  public static void inference_matchConcreteTypesWithTypeVariables(final TypeCheckingContext typeCheckingContext, SNode genericClassifier, SNode instanceType, Map<SNode, List<SNode>> mmap) {
    inference_matchConcreteTypesWithTypeVariablesInternal(typeCheckingContext, genericClassifier, instanceType, mmap, null);
  }

  @InferenceMethod
  public static void inference_matchConcreteTypesWithTypeVariablesInternal(final TypeCheckingContext typeCheckingContext, SNode genericClassifier, SNode instanceType, Map<SNode, List<SNode>> mmap, SNode nodeToCheck) {
    if ((genericClassifier != null) && mmap != null && !(MapSequence.fromMap(mmap).isEmpty())) {
      List<SNode> params = ListSequence.fromList(new ArrayList<SNode>());
      for (SNode tvd : SLinkOperations.getTargets(genericClassifier, "typeVariableDeclaration", true)) {
        List<SNode> nodes = MapSequence.fromMap(mmap).get(tvd);
        final SNode p_typevar_1228174472023 = typeCheckingContext.createNewRuntimeTypesVariable();
        if (nodes != null) {
          SNode tvar = ListSequence.fromList(nodes).first();
          {
            SNode _nodeToCheck_1029348928467 = null;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1228174300650", 0, null);
            typeCheckingContext.createEquation((SNode) tvar, (SNode) typeCheckingContext.getRepresentative(p_typevar_1228174472023), _info_12389875345);
          }
        }
        ListSequence.fromList(params).addElement(typeCheckingContext.getRepresentative(p_typevar_1228174472023));
      }
      {
        SNode _nodeToCheck_1029348928467 = nodeToCheck;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "6610038060571315990", 0, null);
        typeCheckingContext.createGreaterThanInequality((SNode) new RulesFunctions_BaseLanguage.QuotationClass_5ahx9e_a0a2a0a4().createNode(genericClassifier, params, typeCheckingContext), (SNode) instanceType, false, true, _info_12389875345);
      }
    }
  }

  @InferenceMethod
  public static void inference_matchConcreteTypesWithMethodTypeVariables(final TypeCheckingContext typeCheckingContext, SNode methodCall, Map<SNode, List<SNode>> mmap) {
    if (ListSequence.fromList(SLinkOperations.getTargets(methodCall, "typeArgument", true)).isNotEmpty() && (SLinkOperations.getTarget(methodCall, "baseMethodDeclaration", false) != null) && mmap != null && !(MapSequence.fromMap(mmap).isEmpty())) {
      {
        SNode tvd;
        SNode arg;
        Iterator<SNode> tvd_iterator = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(methodCall, "baseMethodDeclaration", false), "typeVariableDeclaration", true)).iterator();
        Iterator<SNode> arg_iterator = ListSequence.fromList(SLinkOperations.getTargets(methodCall, "typeArgument", true)).iterator();
        while (true) {
          if (!(tvd_iterator.hasNext())) {
            break;
          }
          if (!(arg_iterator.hasNext())) {
            break;
          }
          tvd = tvd_iterator.next();
          arg = arg_iterator.next();
          {
            List<SNode> nodes = MapSequence.fromMap(mmap).get(tvd);
            if (nodes != null) {
              SNode tvar = ListSequence.fromList(nodes).first();
              {
                SNode _nodeToCheck_1029348928467 = null;
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "7769835591074321262", 0, null);
                typeCheckingContext.createEquation((SNode) tvar, (SNode) arg, _info_12389875345);
              }
            }
          }
        }
      }
    }
  }

  @InferenceMethod
  public static void inference_equateParametersAndReturnType(final TypeCheckingContext typeCheckingContext, final SNode mc, SNode returnType, Map<SNode, List<SNode>> mmap) {
    List<SNode> parameterDeclarations = SLinkOperations.getTargets(SLinkOperations.getTarget(mc, "baseMethodDeclaration", false), "parameter", true);
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ListSequence.fromList(parameterDeclarations).last(), "type", true), "jetbrains.mps.baseLanguage.structure.VariableArityType")) {
      Iterator<SNode> formalIterator = ListSequence.fromList(parameterDeclarations).iterator();
      Iterator<SNode> actualIterator = ListSequence.fromList(SLinkOperations.getTargets(mc, "actualArgument", true)).iterator();
      SNode formalParam = null;
      SNode actualParam;
      while (true) {
        if (!(actualIterator.hasNext())) {
          break;
        }
        if (!(formalIterator.hasNext())) {
          break;
        }
        formalParam = formalIterator.next();
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(formalParam, "type", true), "jetbrains.mps.baseLanguage.structure.VariableArityType")) {
          break;
        }
        actualParam = actualIterator.next();
        SNode matchedType = inference_matchTypeWithTypeVariables(typeCheckingContext, SLinkOperations.getTarget(formalParam, "type", true), mmap);
        {
          SNode _nodeToCheck_1029348928467 = actualParam;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "3768281636845649756", 0, null);
          typeCheckingContext.createGreaterThanInequality((SNode) matchedType, (SNode) typeCheckingContext.typeOf(actualParam, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1219947530380", true), false, true, _info_12389875345);
        }
      }
      {
        SNode matchedNode_5ahx9e_f0b0g = SLinkOperations.getTarget(formalParam, "type", true);
        {
          boolean matches_5ahx9e_a5a1a6 = false;
          {
            SNode matchingNode_5ahx9e_a5a1a6 = SLinkOperations.getTarget(formalParam, "type", true);
            if (matchingNode_5ahx9e_a5a1a6 != null) {
              matches_5ahx9e_a5a1a6 = SModelUtil_new.isAssignableConcept(matchingNode_5ahx9e_a5a1a6.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.VariableArityType");
            }
          }
          if (matches_5ahx9e_a5a1a6) {
            {
              SNode componentType = SLinkOperations.getTarget(matchedNode_5ahx9e_f0b0g, "componentType", true);
              final SNode matchedType = inference_matchTypeWithTypeVariables(typeCheckingContext, componentType, mmap);
              if (ListSequence.fromList(SLinkOperations.getTargets(mc, "actualArgument", true)).count() == ListSequence.fromList(parameterDeclarations).count()) {
                // the actual parameter may appear to be an array instead of vararg 
                final SNode actual = actualIterator.next();
                {
                  final SNode actualType = typeCheckingContext.typeOf(actual, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1220347108709", true);
                  typeCheckingContext.whenConcrete(actualType, new Runnable() {
                    public void run() {
                      if (SNodeOperations.isInstanceOf(typeCheckingContext.getRepresentative(actualType), "jetbrains.mps.baseLanguage.structure.ArrayType")) {
                        {
                          SNode _nodeToCheck_1029348928467 = actual;
                          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "3056149436216248475", 0, null);
                          typeCheckingContext.createGreaterThanInequality((SNode) matchedType, (SNode) SLinkOperations.getTarget(SNodeOperations.cast(typeCheckingContext.getRepresentative(actualType), "jetbrains.mps.baseLanguage.structure.ArrayType"), "componentType", true), false, true, _info_12389875345);
                        }
                      } else {
                        SNode _nodeToCheck_1029348928467 = actual;
                        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "3768281636845649755", 0, null);
                        typeCheckingContext.createGreaterThanInequality((SNode) matchedType, (SNode) typeCheckingContext.getRepresentative(actualType), false, true, _info_12389875345);
                      }
                    }
                  }, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1220347102532", false, false);
                }
              } else {
                // in this case the actual parameter is definitely a vararg 
                while (actualIterator.hasNext()) {
                  SNode actual = actualIterator.next();
                  {
                    SNode _nodeToCheck_1029348928467 = actual;
                    EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "3768281636845649754", 0, null);
                    typeCheckingContext.createGreaterThanInequality((SNode) matchedType, (SNode) typeCheckingContext.typeOf(actual, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1219947702426", true), false, true, _info_12389875345);
                  }
                }
              }
            }
          }
        }
      }
    } else {
      {
        SNode arg;
        SNode param;
        Iterator<SNode> arg_iterator = ListSequence.fromList(SLinkOperations.getTargets(mc, "actualArgument", true)).iterator();
        Iterator<SNode> param_iterator = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(mc, "baseMethodDeclaration", false), "parameter", true)).iterator();
        while (true) {
          if (!(arg_iterator.hasNext())) {
            break;
          }
          if (!(param_iterator.hasNext())) {
            break;
          }
          arg = arg_iterator.next();
          param = param_iterator.next();
          {
            SNode matchedType = inference_matchTypeWithTypeVariables(typeCheckingContext, SLinkOperations.getTarget(param, "type", true), mmap);
            {
              SNode _nodeToCheck_1029348928467 = arg;
              EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "3768281636845649757", 0, null);
              typeCheckingContext.createGreaterThanInequality((SNode) matchedType, (SNode) typeCheckingContext.typeOf(arg, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1203441371331", true), false, true, _info_12389875345);
            }
          }
        }
      }
    }
    if (returnType != null) {
      SNode matchedType = inference_matchTypeWithTypeVariables(typeCheckingContext, returnType, mmap);
      {
        SNode _nodeToCheck_1029348928467 = mc;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1203441371359", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1203441371361", true), (SNode) matchedType, _info_12389875345);
      }
      {
        SNode _nodeToCheck_1029348928467 = null;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "3254522536313044080", 0, null);
        typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(mc, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "3254522536313044077", true), (SNode) new RulesFunctions_BaseLanguage.QuotationClass_5ahx9e_a0a2a2a6().createNode(typeCheckingContext), false, true, _info_12389875345);
      }
    }
  }

  @InferenceMethod
  public static void inference_setConcreteUpperBorders(final TypeCheckingContext typeCheckingContext, Map<SNode, List<SNode>> mmap) {
    if (mmap != null) {
      for (SNode tvd : MapSequence.fromMap(mmap).keySet()) {
        List<SNode> nodes = MapSequence.fromMap(mmap).get(tvd);
        if (nodes != null && !(ListSequence.fromList(nodes).isEmpty())) {
          {
            SNode _nodeToCheck_1029348928467 = null;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "8531167801199654648", 0, null);
            typeCheckingContext.createLessThanInequality((SNode) ListSequence.fromList(nodes).first(), (SNode) TypeVariableDeclaration_Behavior.call_getConcreteUpperBound_4346214032091509920(tvd), false, true, _info_12389875345);
          }
        }
      }
    }
  }

  @InferenceMethod
  public static void inference_equateMatchingTypeVariables(final TypeCheckingContext typeCheckingContext, Map<SNode, List<SNode>> mmap) {
    if (mmap != null) {
      for (List<SNode> nodes : MapSequence.fromMap(mmap).values()) {
        SNode prev = null;
        for (SNode tvar : nodes) {
          if (prev != null && prev != tvar) {
            {
              SNode _nodeToCheck_1029348928467 = null;
              EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1203452876024", 0, null);
              typeCheckingContext.createEquation((SNode) prev, (SNode) tvar, _info_12389875345);
            }
          }
          prev = tvar;
        }
      }
    }
  }

  @CheckingMethod
  public static SNode inference_matchTypeWithTypeVariables(final TypeCheckingContext typeCheckingContext, SNode type, Map<SNode, List<SNode>> mmap) {
    SNode resType = SNodeOperations.copyNode(type);
    if (SNodeOperations.isInstanceOf(resType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      final SNode tvar_typevar_1203439588896 = typeCheckingContext.createNewRuntimeTypesVariable();
      SNode tvd = SLinkOperations.getTarget(SNodeOperations.cast(resType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false);
      inference_mapTypeVariable(tvd, typeCheckingContext.getRepresentative(tvar_typevar_1203439588896), mmap);
      resType = typeCheckingContext.getRepresentative(tvar_typevar_1203439588896);
    } else {
      inference_mapTypeVariables(typeCheckingContext, resType, mmap);
    }
    return resType;
  }

  @CheckingMethod
  private static void inference_mapTypeVariables(final TypeCheckingContext typeCheckingContext, SNode type, Map<SNode, List<SNode>> mmap) {
    if (SNodeOperations.isInstanceOf(type, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      final SNode tvar_typevar_1203431658168 = typeCheckingContext.createNewRuntimeTypesVariable();
      SNode tvd = SLinkOperations.getTarget(SNodeOperations.cast(type, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false);
      inference_mapTypeVariable(tvd, typeCheckingContext.getRepresentative(tvar_typevar_1203431658168), mmap);
      SNodeOperations.replaceWithAnother(type, typeCheckingContext.getRepresentative(tvar_typevar_1203431658168));
    } else {
      List<SNode> children = ListSequence.fromListWithValues(new ArrayList<SNode>(), SNodeOperations.getChildren(type));
      for (SNode chld : children) {
        inference_mapTypeVariables(typeCheckingContext, chld, mmap);
      }
    }
  }

  private static void inference_mapTypeVariable(SNode tvd, SNode tvar, Map<SNode, List<SNode>> mmap) {
    putTypeVariable(tvd, tvar, mmap);
  }

  private static void putTypeVariable(SNode tvd, SNode tvar, Map<SNode, List<SNode>> mmap) {
    List<SNode> nodes = MapSequence.fromMap(mmap).get(tvd);
    if (nodes == null) {
      nodes = new ArrayList<SNode>();
      MapSequence.fromMap(mmap).put(tvd, nodes);
    }
    ListSequence.fromList(nodes).addElement(tvar);
  }

  public static boolean isWithinStatic(SNode node) {
    SNode ancestor = SNodeOperations.getAncestorWhereConceptInList(node, new String[]{"jetbrains.mps.baseLanguage.structure.FieldDeclaration", "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"}, false, false);
    if (ancestor != null && (SNodeOperations.isInstanceOf(ancestor, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration") || SNodeOperations.isInstanceOf(ancestor, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"))) {
      return true;
    }
    SNode statementList = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
    SNode prevStatementList = null;
    while ((statementList != null)) {
      prevStatementList = statementList;
      statementList = SNodeOperations.getAncestor(statementList, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
    }
    if ((prevStatementList != null)) {
      {
        SNode matchedNode_5ahx9e_a0f0n = SNodeOperations.getParent(prevStatementList);
        {
          boolean matches_5ahx9e_a0a5a31 = false;
          {
            SNode matchingNode_5ahx9e_a0a5a31 = SNodeOperations.getParent(prevStatementList);
            if (matchingNode_5ahx9e_a0a5a31 != null) {
              matches_5ahx9e_a0a5a31 = SModelUtil_new.isAssignableConcept(matchingNode_5ahx9e_a0a5a31.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.ClassConcept");
            }
          }
          if (matches_5ahx9e_a0a5a31) {
            return SLinkOperations.getTarget(matchedNode_5ahx9e_a0f0n, "staticInitializer", true) == prevStatementList;
          }
        }
      }
    }
    return false;
  }

  @CheckingMethod
  public static void checkDuplicates(final TypeCheckingContext typeCheckingContext, SNode ownMethod, SNode classifier, List<SNode> namesakes) {
    String erasureSignature = null;
    for (SNode namesake : namesakes) {
      if (namesake == ownMethod) {
        continue;
      }
      if (SNodeOperations.getParent(namesake) != classifier) {
        // can't be duplicated, is overriden 
        continue;
      }
      if (ListSequence.fromList(SLinkOperations.getTargets(namesake, "parameter", true)).count() != ListSequence.fromList(SLinkOperations.getTargets(ownMethod, "parameter", true)).count()) {
        continue;
      }
      if (erasureSignature == null) {
        erasureSignature = BaseMethodDeclaration_Behavior.call_getErasureSignature_2830572026628006618(ownMethod);
      }
      String namesakeErasureSignature = BaseMethodDeclaration_Behavior.call_getErasureSignature_2830572026628006618(namesake);
      if (namesakeErasureSignature.equals(erasureSignature)) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          errorTarget = new PropertyMessageTarget("name");
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(ownMethod, "method has duplicate erasure with " + INamedConcept_Behavior.call_getFqName_1213877404258(SNodeOperations.getAncestor(namesake, "jetbrains.mps.baseLanguage.structure.Classifier", false, false)) + "." + SPropertyOperations.getString(ownMethod, "name") + "(" + namesakeErasureSignature + ")", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "3115327157609989939", null, errorTarget);
        }
        break;
      }
    }
  }

  @CheckingMethod
  public static void check(final TypeCheckingContext typeCheckingContext, Set<SNode> throwables, SNode mainNode) {
    check(typeCheckingContext, throwables, mainNode, "uncaught exceptions:");
  }

  @CheckingMethod
  /*package*/ static void check(final TypeCheckingContext typeCheckingContext, Set<SNode> throwables, SNode mainNode, String message) {
    List<SNode> throwTypes = ListSequence.fromListWithValues(new ArrayList<SNode>(), throwables);
    ListSequence.fromList(throwTypes).removeWhere(new IWhereFilter<SNode>() {
      public boolean accept(SNode tt) {
        return TypeChecker.getInstance().getSubtypingManager().isSubtype(tt, new RulesFunctions_BaseLanguage.QuotationClass_5ahx9e_a1a0a0a0a0b0q_0().createNode(typeCheckingContext)) || TypeChecker.getInstance().getSubtypingManager().isSubtype(tt, new RulesFunctions_BaseLanguage.QuotationClass_5ahx9e_a1a0a0a0a0b0q().createNode(typeCheckingContext));
      }
    });
    if (ListSequence.fromList(throwTypes).isEmpty()) {
      return;
    }
    List<SNode> ancSLs = SNodeOperations.getAncestors(mainNode, "jetbrains.mps.baseLanguage.structure.StatementList", false);
    boolean use_quickfix = false;
    for (SNode anc : SNodeOperations.getAncestorsWhereConceptInList(mainNode, new String[]{"jetbrains.mps.baseLanguage.structure.TryStatement", "jetbrains.mps.baseLanguage.structure.TryCatchStatement", "jetbrains.mps.baseLanguage.structure.IStatementListContainer"}, false)) {
      if (ListSequence.fromList(throwTypes).isEmpty()) {
        return;
      }
      {
        SNode matchedNode_5ahx9e_b0f0q = anc;
        {
          boolean matches_5ahx9e_a1a5a61 = false;
          {
            SNode matchingNode_5ahx9e_a1a5a61 = anc;
            if (matchingNode_5ahx9e_a1a5a61 != null) {
              matches_5ahx9e_a1a5a61 = SModelUtil_new.isAssignableConcept(matchingNode_5ahx9e_a1a5a61.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.TryStatement");
            }
          }
          if (matches_5ahx9e_a1a5a61) {
            if (ListSequence.fromList(ancSLs).contains(SLinkOperations.getTarget(matchedNode_5ahx9e_b0f0q, "body", true))) {
              for (final SNode cc : SLinkOperations.getTargets(matchedNode_5ahx9e_b0f0q, "catchClause", true)) {
                ListSequence.fromList(throwTypes).removeWhere(new IWhereFilter<SNode>() {
                  public boolean accept(SNode tt) {
                    return TypeChecker.getInstance().getSubtypingManager().isSubtype(tt, SLinkOperations.getTarget(SLinkOperations.getTarget(cc, "throwable", true), "type", true));
                  }
                });
              }
            }
          } else {
            boolean matches_5ahx9e_b1a5a61 = false;
            {
              SNode matchingNode_5ahx9e_b1a5a61 = anc;
              if (matchingNode_5ahx9e_b1a5a61 != null) {
                matches_5ahx9e_b1a5a61 = SModelUtil_new.isAssignableConcept(matchingNode_5ahx9e_b1a5a61.getConceptFqName(), "jetbrains.mps.baseLanguage.structure.TryCatchStatement");
              }
            }
            if (matches_5ahx9e_b1a5a61) {
              if (ListSequence.fromList(ancSLs).contains(SLinkOperations.getTarget(matchedNode_5ahx9e_b0f0q, "body", true))) {
                for (final SNode cc : SLinkOperations.getTargets(matchedNode_5ahx9e_b0f0q, "catchClause", true)) {
                  ListSequence.fromList(throwTypes).removeWhere(new IWhereFilter<SNode>() {
                    public boolean accept(SNode tt) {
                      return TypeChecker.getInstance().getSubtypingManager().isSubtype(tt, SLinkOperations.getTarget(SLinkOperations.getTarget(cc, "throwable", true), "type", true));
                    }
                  });
                }
              }
            } else {
              if (ListSequence.fromList(ancSLs).contains(IMethodLike_Behavior.call_getBody_1239354440022(SNodeOperations.as(anc, "jetbrains.mps.baseLanguage.structure.IMethodLike")))) {
                SNode methodLike = SNodeOperations.cast(anc, "jetbrains.mps.baseLanguage.structure.IMethodLike");
                if (IMethodLike_Behavior.call_implicitThrows_4989157187872658723(methodLike)) {
                  ListSequence.fromList(throwTypes).clear();
                } else {
                  for (final SNode thr : IMethodLike_Behavior.call_getThrowableTypes_6204026822016975623(methodLike)) {
                    ListSequence.fromList(throwTypes).removeWhere(new IWhereFilter<SNode>() {
                      public boolean accept(SNode tt) {
                        return TypeChecker.getInstance().getSubtypingManager().isSubtype(tt, thr);
                      }
                    });
                  }
                  use_quickfix = true;
                }
              }
              break;
            }
          }
        }
      }
      if (ListSequence.fromList(throwTypes).isEmpty()) {
        return;
      }
    }
    if (!(ListSequence.fromList(throwTypes).isEmpty())) {
      String errorString = message;
      for (SNode exc : throwTypes) {
        errorString = errorString + " " + exc;
      }
      if (use_quickfix) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(mainNode, errorString, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "4460871289557453850", null, errorTarget);
          {
            BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.baseLanguage.typesystem.AddExceptionToMethodSignature_QuickFix", false);
            intentionProvider.putArgument("throwableType", SetSequence.fromSet(throwables).first());
            _reporter_2309309498.addIntentionProvider(intentionProvider);
          }
        }
      } else {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(mainNode, errorString, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "4460871289557914789", null, errorTarget);
        }
      }
    }
  }

  public static SNode concretifyType(SNode typeWithVars, Map<SNode, SNode> typeParamsToArgs) {
    if (SNodeOperations.isInstanceOf(typeWithVars, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      SNode variableDeclaration = SLinkOperations.getTarget(SNodeOperations.cast(typeWithVars, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false);
      if (MapSequence.fromMap(typeParamsToArgs).containsKey(variableDeclaration)) {
        return SNodeOperations.copyNode(MapSequence.fromMap(typeParamsToArgs).get(variableDeclaration));
      } else {
        return SNodeOperations.copyNode(typeWithVars);
      }
    } else {
      SNode result = SNodeOperations.copyNode(typeWithVars);
      for (SNode tvr : SNodeOperations.getDescendants(result, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", false, new String[]{})) {
        if (MapSequence.fromMap(typeParamsToArgs).containsKey(SLinkOperations.getTarget(tvr, "typeVariableDeclaration", false))) {
          SNodeOperations.replaceWithAnother(tvr, SNodeOperations.copyNode(MapSequence.fromMap(typeParamsToArgs).get(SLinkOperations.getTarget(tvr, "typeVariableDeclaration", false))));
        }
      }
      return result;
    }
  }

  public static boolean typesAreComparable(SNode t1, SNode t2) {
    return TypeChecker.getInstance().getSubtypingManager().isSubtype(t1, t2) || TypeChecker.getInstance().getSubtypingManager().isSubtype(t2, t1) || SNodeOperations.isInstanceOf(t1, "jetbrains.mps.baseLanguage.structure.Interface") || SNodeOperations.isInstanceOf(t2, "jetbrains.mps.baseLanguage.structure.Interface");
  }

  public static SNode getVariableDeclaration(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.VariableReference")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false);
    }
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.DotExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true), "jetbrains.mps.baseLanguage.structure.ThisExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"), "fieldDeclaration", false);
    }
    return null;
  }

  @CheckingMethod
  public static void checkReturningExpression(final TypeCheckingContext typeCheckingContext, SNode expression, SNode statement, Program program, AnalysisResult<Map<SNode, NullableState>> result) {
    if (SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.VariableReference")) {
      SNode variable = SLinkOperations.getTarget(SNodeOperations.cast(expression, "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false);
      List<Instruction> instructions = program.getInstructionsFor(statement);
      if (!(instructions.isEmpty())) {
        if (NullableState.canBeNull(result.get(instructions.get(instructions.size() - 1)).get(variable))) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(expression, "Expression " + expression + " might evaluate to null but is returned from method declared @NotNull", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "7249436257879820231", null, errorTarget);
          }
        }
      }
    } else if (SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.NullLiteral")) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(expression, "Null is returned from method declared @NotNull", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "7249436257879820267", null, errorTarget);
      }
    }
  }

  public static class QuotationClass_5ahx9e_a0a0a0a {
    public QuotationClass_5ahx9e_a0a0a0a() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.blTypes.structure.PrimitiveTypeRef", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("descriptor", quotedNode1_2, SModelReference.fromString("r:00000000-0000-4000-0000-011c895902de(jetbrains.mps.baseLanguage.blTypes.primitiveDescriptors)"), SNodeId.fromString("1196683729865")));
        result = quotedNode1_2;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.blTypes.structure.PrimitiveTypeRef", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("descriptor", quotedNode1_2, SModelReference.fromString("r:00000000-0000-4000-0000-011c895902de(jetbrains.mps.baseLanguage.blTypes.primitiveDescriptors)"), SNodeId.fromString("1196683729865")));
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_5ahx9e_a0a0b0a {
    public QuotationClass_5ahx9e_a0a0b0a() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.blTypes.structure.PrimitiveTypeRef", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("descriptor", quotedNode1_2, SModelReference.fromString("r:00000000-0000-4000-0000-011c895902de(jetbrains.mps.baseLanguage.blTypes.primitiveDescriptors)"), SNodeId.fromString("1196683729865")));
        result = quotedNode1_2;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.blTypes.structure.PrimitiveTypeRef", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("descriptor", quotedNode1_2, SModelReference.fromString("r:00000000-0000-4000-0000-011c895902de(jetbrains.mps.baseLanguage.blTypes.primitiveDescriptors)"), SNodeId.fromString("1196683729865")));
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_5ahx9e_a0a2a0 {
    public QuotationClass_5ahx9e_a0a2a0() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_5ahx9e_a0a2a0a4 {
    public QuotationClass_5ahx9e_a0a2a0a4() {
    }

    public SNode createNode(Object parameter_4, Object parameter_5, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.setReferent("classifier", (SNode) parameter_4);
        {
          List<SNode> nodes = (List<SNode>) parameter_5;
          for (SNode child : nodes) {
            quotedNode_1.addChild("parameter", HUtil.copyIfNecessary(child, typeCheckingContext));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }

    public SNode createNode(Object parameter_4, Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.setReferent("classifier", (SNode) parameter_4);
        {
          List<SNode> nodes = (List<SNode>) parameter_5;
          for (SNode child : nodes) {
            quotedNode_1.addChild("parameter", HUtil.copyIfNecessary(child));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_5ahx9e_a0a2a2a6 {
    public QuotationClass_5ahx9e_a0a2a2a6() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(java.lang@java_stub)"), SNodeId.fromString("~Object")));
        result = quotedNode1_2;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(java.lang@java_stub)"), SNodeId.fromString("~Object")));
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_5ahx9e_a1a0a0a0a0b0q {
    public QuotationClass_5ahx9e_a1a0a0a0a0b0q() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(java.lang@java_stub)"), SNodeId.fromString("~Error")));
        result = quotedNode1_2;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(java.lang@java_stub)"), SNodeId.fromString("~Error")));
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_5ahx9e_a1a0a0a0a0b0q_0 {
    public QuotationClass_5ahx9e_a1a0a0a0a0b0q_0() {
    }

    public SNode createNode(final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(java.lang@java_stub)"), SNodeId.fromString("~RuntimeException")));
        result = quotedNode1_2;
      }
      return result;
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(java.lang@java_stub)"), SNodeId.fromString("~RuntimeException")));
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
