package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ClassAncestors_Finder extends GeneratedFinder {
  private static Logger LOG = Logger.getLogger("jetbrains.mps.baseLanguage.findUsages.ClassAncestors_Finder");

  public ClassAncestors_Finder() {
  }

  public boolean isVisible(SNode node, IScope scope) {
    return SLinkOperations.getTarget(node, "superclass", true) != null;
  }

  public String getDescription() {
    return "Ancestors";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassConcept";
  }

  protected void doFind(SNode node, IScope scope, List<SNode> _results, ProgressIndicator indicator) {
    if (SLinkOperations.getTarget(node, "superclass", true) == null) {
      return;
    }
    SNode current = node;
    while (current != null) {
      current = SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(current, "superclass", true), "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept");
      if (current != null) {
        ListSequence.fromList(_results).addElement(current);
      }
    }
  }

  public String getNodeCategory(SNode node) {
    return "Ancestor";
  }
}
