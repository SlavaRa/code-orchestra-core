package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class AddForStatementVar extends EditorCellKeyMap {
  public AddForStatementVar() {
    this.setApplicableToEveryModel(false);
    EditorCellKeyMapAction action;
    action = new AddForStatementVar.AddForStatementVar_Action0();
    this.putAction("any", ",", action);
  }

  public static class AddForStatementVar_Action0 extends EditorCellKeyMapAction {
    public AddForStatementVar_Action0() {
      super.setCaretPolicy(EditorCellKeyMapAction.CARET_AT_LAST_POSITION);
      this.setShownInPopupMenu(false);
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (contextNode.isInstanceOfConcept("jetbrains.mps.lang.core.structure.BaseConcept")) {
        return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
      }
      return false;
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode variableDeclaration = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false, false);
      if ((variableDeclaration != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(variableDeclaration), "jetbrains.mps.baseLanguage.structure.ForStatement")) {
        SNode forStatement = SNodeOperations.cast(SNodeOperations.getParent(variableDeclaration), "jetbrains.mps.baseLanguage.structure.ForStatement");
        if (SLinkOperations.getTarget(forStatement, "variable", true) == variableDeclaration) {
          return true;
        }
      }
      return false;
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode variableDeclaration = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false, false);
      SNode forStatement = SNodeOperations.cast(SNodeOperations.getParent(variableDeclaration), "jetbrains.mps.baseLanguage.structure.ForStatement");
      ListSequence.fromList(SLinkOperations.getTargets(forStatement, "additionalVar", true)).insertElement(0, SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable", null));
    }

    public String getKeyStroke() {
      return " ,";
    }
  }
}
