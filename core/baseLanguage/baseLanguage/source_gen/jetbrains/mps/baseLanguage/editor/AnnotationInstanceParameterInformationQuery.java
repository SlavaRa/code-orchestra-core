package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.ParametersInformation;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.editor.runtime.StyledTextPrinter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;

public class AnnotationInstanceParameterInformationQuery extends ParametersInformation<SNode> {
  public AnnotationInstanceParameterInformationQuery() {
  }

  public Iterable<SNode> getMethods(SNode node, EditorContext editorContext) {
    if (SLinkOperations.getTarget(node, "annotation", false) != null) {
      return ListSequence.fromListAndArray(new ArrayList<SNode>(), SLinkOperations.getTarget(node, "annotation", false));
    } else {
      return ListSequence.fromList(new ArrayList<SNode>());
    }
  }

  public void getStyledMethodPresentation(SNode node, EditorContext editorContext, SNode parameterObject, StyledTextPrinter styledText) {
    SNode selectedAnnotationMethod = this.getSelectedAnnotationMethod(editorContext, node);
    if (SPropertyOperations.getString(parameterObject, "name") != null) {
      styledText.append(SPropertyOperations.getString(parameterObject, "name"));
    } else {
      styledText.append("<no name>");
    }
    styledText.append("(");
    for (SNode annotationMethod : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "annotation", false), "method", true))) {
      if (SNodeOperations.getIndexInParent(annotationMethod) > 0) {
        styledText.append(", ");
      }
      if (selectedAnnotationMethod == annotationMethod) {
        styledText.setBold(true);
      }
      if (SLinkOperations.getTarget(annotationMethod, "returnType", true) != null) {
        styledText.append(BaseConcept_Behavior.call_getPresentation_1213877396640(SLinkOperations.getTarget(annotationMethod, "returnType", true)));
      } else {
        styledText.append("???");
      }
      if (SPropertyOperations.getString(annotationMethod, "name") != null) {
        styledText.append(" ");
        styledText.append(SPropertyOperations.getString(annotationMethod, "name"));
      }
      styledText.setBold(false);
    }
    styledText.append(")");
  }

  public boolean isMethodCurrent(SNode node, EditorContext editorContext, SNode parameterObject) {
    return SLinkOperations.getTarget(node, "annotation", false) == parameterObject;
  }

  private SNode getSelectedAnnotationMethod(EditorContext editorContext, SNode annotationInstance) {
    for (SNode argument = editorContext.getSelectedNode(); argument != null; argument = SNodeOperations.getParent(argument)) {
      if (SNodeOperations.isInstanceOf(argument, "jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue") && SNodeOperations.getParent(argument) == annotationInstance) {
        return SLinkOperations.getTarget(SNodeOperations.cast(argument, "jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue"), "key", false);
      }
    }
    return null;
  }
}
