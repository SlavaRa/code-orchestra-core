package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.behavior.FieldReferenceOperation_Behavior;
import jetbrains.mps.baseLanguage.behavior.InstanceMethodCallOperation_Behavior;

public class ThisExpressionToLocal extends EditorCellKeyMap {
  public ThisExpressionToLocal() {
    this.setApplicableToEveryModel(false);
    EditorCellKeyMapAction action;
    action = new ThisExpressionToLocal.ThisExpressionToLocal_Action0();
    this.putAction("any", "VK_DELETE", action);
  }

  public static class ThisExpressionToLocal_Action0 extends EditorCellKeyMapAction {
    public ThisExpressionToLocal_Action0() {
      this.setShownInPopupMenu(false);
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (contextNode.isInstanceOfConcept("jetbrains.mps.baseLanguage.structure.ThisExpression")) {
        return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
      }
      return false;
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      return SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression");
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode dot = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression");
      SNode operation = SLinkOperations.getTarget(dot, "operation", true);
      if (SNodeOperations.isInstanceOf(operation, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) {
        SNode fieldRef = SNodeOperations.cast(operation, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation");
        if (FieldReferenceOperation_Behavior.call_canBeConvertedToLocal_5311267937735160942(fieldRef)) {
          FieldReferenceOperation_Behavior.call_convertToLocal_5311267937735269195(fieldRef);
          return;
        }
      }
      if (SNodeOperations.isInstanceOf(operation, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
        SNode methodCall = SNodeOperations.cast(operation, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
        if (InstanceMethodCallOperation_Behavior.call_canBeConvertedToLocal_5311267937735225328(methodCall)) {
          InstanceMethodCallOperation_Behavior.call_convertToLocal_5311267937735269230(methodCall);
          return;
        }
      }
    }

    public String getKeyStroke() {
      return " DELETE";
    }
  }
}
