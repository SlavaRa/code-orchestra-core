package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class TypeVariableDeclaration_addAuxBoundAfterBound_KeyMap extends EditorCellKeyMap {
  public TypeVariableDeclaration_addAuxBoundAfterBound_KeyMap() {
    this.setApplicableToEveryModel(false);
    EditorCellKeyMapAction action;
    action = new TypeVariableDeclaration_addAuxBoundAfterBound_KeyMap.TypeVariableDeclaration_addAuxBoundAfterBound_KeyMap_Action0();
    this.putAction("any", "&", action);
  }

  public static class TypeVariableDeclaration_addAuxBoundAfterBound_KeyMap_Action0 extends EditorCellKeyMapAction {
    public TypeVariableDeclaration_addAuxBoundAfterBound_KeyMap_Action0() {
      super.setCaretPolicy(EditorCellKeyMapAction.CARET_AT_LAST_POSITION);
      this.setShownInPopupMenu(false);
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }

      // Selected node should be within TypeVariableDeclaration 
      SNode selectedNode = ListSequence.fromList(selectedNodes).first();
      SNode typeVarDeclaration = SNodeOperations.getAncestor(selectedNode, "jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", true, false);
      if (typeVarDeclaration == null) {
        return false;
      }

      // Next cell should belong to some other SNode, not our typeVarDeclaration 
      EditorCell selectedCell = editorContext.getSelectedCell();
      EditorCell nextLeaf = selectedCell.getNextLeaf();
      if (nextLeaf == null) {
        return false;
      }
      SNode nextCellNode = (SNode) nextLeaf.getSNode();
      return nextCellNode != null && nextCellNode != typeVarDeclaration;
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode typeVarDeclaration = SNodeOperations.getAncestor(ListSequence.fromList(selectedNodes).first(), "jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", true, false);
      SNodeFactoryOperations.addNewChild(typeVarDeclaration, "auxBounds", "jetbrains.mps.baseLanguage.structure.ClassifierType");
    }

    public String getKeyStroke() {
      return " &";
    }
  }
}
