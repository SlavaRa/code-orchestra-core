package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.EditorCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ElseifClause_DeletePrevious {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new ElseifClause_DeletePrevious.ElseifClause_DeletePrevious_DELETE(node));
  }

  public static class ElseifClause_DeletePrevious_DELETE extends EditorCellAction {
    /*package*/ SNode myNode;

    public ElseifClause_DeletePrevious_DELETE(SNode node) {
      this.myNode = node;
    }

    public String getDescriptionText() {
      return "delete previous if there is one or current ";
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      if ((SNodeOperations.getPrevSibling(node) != null)) {
        SNodeOperations.deleteNode(SNodeOperations.getPrevSibling(node));
      } else {
        SNode ifStatement = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.IfStatement");
        SNode condition = SLinkOperations.getTarget(ifStatement, "condition", true);
        SNodeOperations.replaceWithAnother(condition, SNodeOperations.copyNode(SLinkOperations.getTarget(node, "condition", true)));
        SNode body = SLinkOperations.getTarget(ifStatement, "ifTrue", true);
        SNodeOperations.replaceWithAnother(body, SNodeOperations.copyNode(SLinkOperations.getTarget(node, "statementList", true)));
        SNodeOperations.deleteNode(node);
      }
    }
  }
}
