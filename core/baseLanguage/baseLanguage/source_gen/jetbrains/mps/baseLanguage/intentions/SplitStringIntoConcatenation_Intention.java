package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class SplitStringIntoConcatenation_Intention extends BaseIntention implements Intention {
  public SplitStringIntoConcatenation_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.StringLiteral";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Split String into Concatenation";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    EditorCell_Label cell = ((EditorCell_Label) editorContext.getContextCell());
    int caretPosition = cell.getCaretPosition();
    String s1 = SPropertyOperations.getString(node, "value").substring(0, caretPosition);
    String s2 = SPropertyOperations.getString(node, "value").substring(caretPosition);
    SNode plusExpression = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.PlusExpression");
    SPropertyOperations.set(SNodeFactoryOperations.setNewChild(plusExpression, "leftExpression", "jetbrains.mps.baseLanguage.structure.StringLiteral"), "value", s1);
    SPropertyOperations.set(SNodeFactoryOperations.setNewChild(plusExpression, "rightExpression", "jetbrains.mps.baseLanguage.structure.StringLiteral"), "value", s2);
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }
}
