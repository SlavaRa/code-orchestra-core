package jetbrains.mps.baseLanguage.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseRefactoring;
import jetbrains.mps.lang.core.refactorings.MoveNodes;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.refactoring.framework.paramchooser.mps.MPSChooserFactory;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.MoveStaticMethodRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.findusages.view.FindUtils;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.ide.findusages.model.SearchResults;

public class MoveStaticMethod extends BaseRefactoring {
  public MoveStaticMethod() {
    this.addTransientParameter("destination");
    this.addTransientParameter("refactor");
  }

  public String getUserFriendlyName() {
    return "Move Static Method";
  }

  public String getKeyStroke() {
    return getKeyStroke_static();
  }

  public Class getOverridenRefactoringClass() {
    return MoveNodes.class;
  }

  public IRefactoringTarget getRefactoringTarget() {
    return new MoveStaticMethod_Target();
  }

  public boolean init(final RefactoringContext refactoringContext) {
    boolean hasDestination = MoveStaticMethod.this.ask(refactoringContext, MPSChooserFactory.createNodeChooser(refactoringContext, "destination", new MoveStaticMethod_destination_Settings(refactoringContext)));
    if (hasDestination) {
      refactoringContext.setParameter("refactor", new MoveStaticMethodRefactoring(refactoringContext.getSelectedNode(), ((SNode) refactoringContext.getParameter("destination"))));
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          ((MoveStaticMethodRefactoring) refactoringContext.getParameter("refactor")).setUssages(FindUtils.getSearchResults(new EmptyProgressIndicator(), refactoringContext.getSelectedNode(), GlobalScope.getInstance(), "jetbrains.mps.baseLanguage.findUsages.ExactMethodUsages_Finder"));
        }
      });
    }
    return hasDestination;
  }

  public void refactor(final RefactoringContext refactoringContext) {
    ((MoveStaticMethodRefactoring) refactoringContext.getParameter("refactor")).doRefactoring();
  }

  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    return ((MoveStaticMethodRefactoring) refactoringContext.getParameter("refactor")).getUsages();
  }

  public static String getKeyStroke_static() {
    return MoveNodes.getKeyStroke_static();
  }
}
