package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ConvertAnnotationInstances_MigrationScript extends BaseMigrationScript {
  public ConvertAnnotationInstances_MigrationScript(IOperationContext operationContext) {
    super("Convert Deprecated Annotation Instances");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "convert deprecated annotation instances";
      }

      public String getAdditionalInfo() {
        return "convert deprecated annotation instances";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, "annotationInstance", true));
      }

      public boolean isShowAsIntention() {
        return true;
      }
    });
  }
}
