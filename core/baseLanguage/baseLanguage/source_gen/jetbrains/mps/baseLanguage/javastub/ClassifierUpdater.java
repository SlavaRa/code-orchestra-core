package jetbrains.mps.baseLanguage.javastub;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.javastub.asm.ASMClass;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.javastub.asm.ASMTypeVariable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.javastub.asm.ASMFormalTypeParameter;
import jetbrains.mps.baseLanguage.javastub.asm.ASMType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMMethod;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.javastub.asm.ASMAnnotation;
import jetbrains.mps.baseLanguage.javastub.asm.ASMField;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.List;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.javastub.asm.ASMClassType;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.javastub.asm.ASMPrimitiveType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMEnumValue;
import jetbrains.mps.baseLanguage.javastub.asm.ASMArrayType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMVarArgType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMParameterizedType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMExtendsType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMSuperType;
import jetbrains.mps.baseLanguage.javastub.asm.ASMUnboundedType;
import java.util.ArrayList;
import jetbrains.mps.util.NodeNameUtil;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.project.StubModelsResolver;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.ide.IdeMain;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class ClassifierUpdater {
  private static Set<Tuples._2<String, String>> reported = SetSequence.fromSet(new HashSet());
  private static Logger LOG = Logger.getLogger(ClassifierUpdater.class);

  private IModule myModule;
  private SNode myClassifier;
  private final boolean mySkipPrivate;
  private String myLanguageId;

  public ClassifierUpdater(String languageId, boolean skipPrivate) {
    myLanguageId = languageId;
    mySkipPrivate = skipPrivate;
  }

  public void updateClassifier(IModule module, final SNode clsfr, ASMClass ac) {
    myModule = module;
    myClassifier = clsfr;

    if (SNodeOperations.isInstanceOf(clsfr, "jetbrains.mps.baseLanguage.structure.Annotation")) {
      SNode annotation = SNodeOperations.cast(clsfr, "jetbrains.mps.baseLanguage.structure.Annotation");
      updateAnnotationMethods(ac, annotation);
      updateAnnotations(ac, annotation);
    } else if (SNodeOperations.isInstanceOf(clsfr, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      SNode cls = SNodeOperations.cast(clsfr, "jetbrains.mps.baseLanguage.structure.ClassConcept");
      SPropertyOperations.set(cls, "abstractClass", "" + ac.isAbstract());
      SPropertyOperations.set(cls, "isDeprecated", "" + ac.isDeprecated());
      SPropertyOperations.set(cls, "isFinal", "" + ac.isFinal());

      updateAnnotations(ac, cls);
      updateTypeVariables(ac, cls);
      updateExtendsAndImplements(ac, cls);
      updateInstanceFields(ac, cls);
      updateStaticFields(ac, cls);
      updateConstructors(ac, cls);
      updateInstanceMethods(ac, cls);
      updateStaticMethods(ac, cls);
    } else if (SNodeOperations.isInstanceOf(clsfr, "jetbrains.mps.baseLanguage.structure.Interface")) {
      SNode intfc = SNodeOperations.cast(clsfr, "jetbrains.mps.baseLanguage.structure.Interface");
      SPropertyOperations.set(intfc, "isDeprecated", "" + ac.isDeprecated());
      updateAnnotations(ac, intfc);
      updateTypeVariables(ac, intfc);
      updateExtendsForInterface(ac, intfc);
      updateStaticFields(ac, intfc);
      updateInstanceMethods(ac, intfc);
    } else {
      return;
    }

    SLinkOperations.setTarget(clsfr, "visibility", (ac.isPublic() ?
      new ClassifierUpdater.QuotationClass_ol94f8_a0a0f0a().createNode() :
      null
    ), true);
  }

  private void updateTypeVariables(ASMClass cls, SNode result) {
    for (ASMTypeVariable tv : cls.getTypeParameters()) {
      SNode tvd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0a1().createNode(tv.getName());
      ListSequence.fromList(SLinkOperations.getTargets(result, "typeVariableDeclaration", true)).addElement(tvd);
      if (tv instanceof ASMFormalTypeParameter) {
        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;
        if (tp.getClassBound() != null) {
          SLinkOperations.setTarget(tvd, "bound", getTypeByASMType(tp.getClassBound(), null, result), true);
        }
        for (ASMType act : tp.getInterfaceBounds()) {
          ListSequence.fromList(SLinkOperations.getTargets(tvd, "auxBounds", true)).addElement(SNodeOperations.cast(getTypeByASMType(act, null, result), "jetbrains.mps.baseLanguage.structure.ClassifierType"));
        }
      }
    }
  }

  private void updateTypeVariables(ASMMethod method, SNode result, SNode cls) {
    Map<ASMTypeVariable, SNode> typeVars = MapSequence.fromMap(new HashMap<ASMTypeVariable, SNode>());
    for (ASMTypeVariable tv : method.getTypeParameters()) {
      SNode tvd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a1a2().createNode(tv.getName());
      ListSequence.fromList(SLinkOperations.getTargets(result, "typeVariableDeclaration", true)).addElement(tvd);
      MapSequence.fromMap(typeVars).put(tv, tvd);
    }
    for (ASMTypeVariable tv : method.getTypeParameters()) {
      SNode tvd = MapSequence.fromMap(typeVars).get(tv);
      if (tv instanceof ASMFormalTypeParameter) {
        ASMFormalTypeParameter tp = (ASMFormalTypeParameter) tv;
        if (tp.getClassBound() != null) {
          SLinkOperations.setTarget(tvd, "bound", getTypeByASMType(tp.getClassBound(), result, cls), true);
        }
        for (ASMType act : tp.getInterfaceBounds()) {
          ListSequence.fromList(SLinkOperations.getTargets(tvd, "auxBounds", true)).addElement(SNodeOperations.cast(getTypeByASMType(act, result, cls), "jetbrains.mps.baseLanguage.structure.ClassifierType"));
        }
      }
    }
  }

  private SNode findTypeVariableDeclaration(SNode genDecl, final String name) {
    return ListSequence.fromList(SLinkOperations.getTargets(genDecl, "typeVariableDeclaration", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_ol94f8_a0a0a0a0a0a0a3(SPropertyOperations.getString(it, "name"), name);
      }
    }).first();
  }

  private SNode createTypeVariableReference(SNode genDecl, String name) {
    return new ClassifierUpdater.QuotationClass_ol94f8_a0a0e().createNode(findTypeVariableDeclaration(genDecl, name));
  }

  private void updateAnnotations(ASMClass ac, SNode cls) {
    for (ASMAnnotation annotation : ac.getAnnotations()) {
      ListSequence.fromList(SLinkOperations.getTargets(cls, "annotation", true)).addElement(createAnnotation(annotation));
    }
  }

  private void updateExtendsForInterface(ASMClass ac, SNode intfc) {
    for (ASMType type : ac.getGenericInterfaces()) {
      ListSequence.fromList(SLinkOperations.getTargets(intfc, "extendedInterface", true)).addElement(SNodeOperations.cast(getTypeByASMType(type, null, intfc), "jetbrains.mps.baseLanguage.structure.ClassifierType"));
    }
  }

  private void updateExtendsAndImplements(ASMClass ac, SNode cls) {
    ASMType refSuperclass = ac.getGenericSuperclass();
    if (refSuperclass != null) {
      SLinkOperations.setTarget(cls, "superclass", SNodeOperations.cast(getTypeByASMType(refSuperclass, null, cls), "jetbrains.mps.baseLanguage.structure.ClassifierType"), true);
    }
    for (ASMType type : ac.getGenericInterfaces()) {
      ListSequence.fromList(SLinkOperations.getTargets(cls, "implementedInterface", true)).addElement(SNodeOperations.cast(getTypeByASMType(type, null, cls), "jetbrains.mps.baseLanguage.structure.ClassifierType"));
    }
  }

  private void updateInstanceFields(ASMClass refCls, SNode cls) {
    for (ASMField field : refCls.getDeclaredFields()) {
      if (field.isPrivate() && mySkipPrivate) {
        continue;
      }
      if (field.isStatic()) {
        continue;
      }
      if (field.isCompilerGenerated()) {
        continue;
      }
      SNode decl = new ClassifierUpdater.QuotationClass_ol94f8_a0a3a0a8().createNode(createVisibility(field), getTypeByASMType(field.getGenericType(), null, cls), field.getName());
      SPropertyOperations.set(decl, "isDeprecated", "" + field.isDeprecated());
      for (ASMAnnotation annotation : field.getAnnotations()) {
        ListSequence.fromList(SLinkOperations.getTargets(decl, "annotation", true)).addElement(createAnnotation(annotation));
      }

      decl.setId(ASMNodeId.createId(refCls, field));
      ListSequence.fromList(SLinkOperations.getTargets(cls, "field", true)).addElement(decl);
    }
  }

  private void updateStaticFields(ASMClass ac, SNode cls) {
    for (ASMField field : ac.getDeclaredFields()) {
      if (field.isPrivate() && mySkipPrivate) {
        continue;
      }
      if (!(field.isStatic())) {
        continue;
      }
      if (field.isCompilerGenerated()) {
        continue;
      }
      if (field.isEnumConstant()) {
        SNode enumClass = SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.EnumClass");
        SNode ecd = new ClassifierUpdater.QuotationClass_ol94f8_a0a1a3a0a9().createNode(field.getName());

        ecd.setId(ASMNodeId.createId(ac, field));
        ListSequence.fromList(SLinkOperations.getTargets(enumClass, "enumConstant", true)).addElement(ecd);
      } else {
        SNode decl = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0d0a0j().createNode(createVisibility(field), getTypeByASMType(field.getGenericType(), null, cls), field.getName());
        SPropertyOperations.set(decl, "isDeprecated", "" + field.isDeprecated());
        for (ASMAnnotation annotation : field.getAnnotations()) {
          ListSequence.fromList(SLinkOperations.getTargets(decl, "annotation", true)).addElement(createAnnotation(annotation));
        }
        if (field.isFinal()) {
          SPropertyOperations.set(decl, "isFinal", "" + true);
          if (field.hasValue()) {
            Object value = field.getValue();
            if (value instanceof Integer) {
              SLinkOperations.setTarget(decl, "initializer", new ClassifierUpdater.QuotationClass_ol94f8_a0a0a1a1a3a0d0a0j().createNode(value.toString()), true);
            } else if (value instanceof String) {
              SLinkOperations.setTarget(decl, "initializer", new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0b0b0d0a3a0a9().createNode((String) value), true);
            }
          }
        }

        decl.setId(ASMNodeId.createId(ac, field));
        ListSequence.fromList(SLinkOperations.getTargets(cls, "staticField", true)).addElement(decl);
      }
    }
  }

  private void updateAnnotationMethods(ASMClass refCls, final SNode annotation) {
    for (ASMMethod m : refCls.getDeclaredMethods()) {
      SNode md = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0a01().createNode(getTypeByASMType(m.getGenericReturnType(), null, annotation), m.getName());
      SLinkOperations.setTarget(md, "visibility", new ClassifierUpdater.QuotationClass_ol94f8_a0a1a0a01().createNode(), true);
      if (m.getAnnotationDefault() != null) {
        SLinkOperations.setTarget(md, "defaultValue", getAnnotationValue(m.getAnnotationDefault()), true);
      }

      md.setId(ASMNodeId.createAnnotationMethodId(refCls.getFqName(), m.getName()));
      ListSequence.fromList(SLinkOperations.getTargets(annotation, "method", true)).addElement(md);
    }
  }

  private void updateConstructors(ASMClass ac, final SNode cls) {
    for (ASMMethod c : ac.getDeclaredConstructors()) {
      if (c.isSynthetic()) {
        continue;
      }
      if (c.isPrivate() && mySkipPrivate) {
        continue;
      }

      SNode constructor = new ClassifierUpdater.QuotationClass_ol94f8_a0a3a0a11().createNode(createVisibility(c), SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StubStatementList", null), SPropertyOperations.getString(cls, "name"));
      SPropertyOperations.set(constructor, "isDeprecated", "" + c.isDeprecated());
      for (ASMTypeVariable tv : c.getTypeParameters()) {
        ListSequence.fromList(SLinkOperations.getTargets(constructor, "typeVariableDeclaration", true)).addElement(new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0f0a0l().createNode(tv.getName()));
      }
      {
        ASMType pt;
        String pn;
        List<ASMAnnotation> pa;
        Iterator<ASMType> pt_iterator = ListSequence.fromList(c.getGenericParameterTypes()).iterator();
        Iterator<String> pn_iterator = ListSequence.fromList(c.getParameterNames()).iterator();
        Iterator<List<ASMAnnotation>> pa_iterator = ListSequence.fromList(c.getParameterAnnotations()).iterator();
        while (true) {
          if (!(pt_iterator.hasNext())) {
            break;
          }
          if (!(pn_iterator.hasNext())) {
            break;
          }
          if (!(pa_iterator.hasNext())) {
            break;
          }
          pt = pt_iterator.next();
          pn = pn_iterator.next();
          pa = pa_iterator.next();
          {
            if (!(SPropertyOperations.getBoolean(cls, "isStatic")) && c.getGenericParameterTypes().get(0) == pt) {
              continue;
            }

            SNode pd = new ClassifierUpdater.QuotationClass_ol94f8_a0a2a6a6a6a0a11().createNode(getTypeByASMType(pt, constructor, cls), pn);
            addAnnotationsToParameter(pd, pa);
            ListSequence.fromList(SLinkOperations.getTargets(constructor, "parameter", true)).addElement(pd);
          }
        }
      }
      for (ASMAnnotation annotation : c.getAnnotations()) {
        ListSequence.fromList(SLinkOperations.getTargets(constructor, "annotation", true)).addElement(createAnnotation(annotation));
      }
      for (ASMType exception : c.getExceptionTypes()) {
        ListSequence.fromList(SLinkOperations.getTargets(constructor, "throwsItem", true)).addElement(getTypeByASMType(exception, constructor, cls));
      }

      constructor.setId(ASMNodeId.createId(ac, c));
      ListSequence.fromList(SLinkOperations.getTargets(cls, "constructor", true)).addElement(constructor);
    }
  }

  private void updateInstanceMethods(ASMClass ac, SNode cls) {
    for (ASMMethod m : ac.getDeclaredMethods()) {
      if (m.isPrivate() && mySkipPrivate) {
        continue;
      }
      if (m.isStatic()) {
        continue;
      }
      if (m.isBridge()) {
        continue;
      }
      if (m.isCompilerGenerated()) {
        continue;
      }

      SNode md = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null);
      SPropertyOperations.set(md, "isAbstract", "" + m.isAbstract());
      SLinkOperations.setTarget(md, "visibility", createVisibility(m), true);
      this.updateBaseMethod(m, md, cls);

      md.setId(ASMNodeId.createId(ac, m));
      ListSequence.fromList(SLinkOperations.getTargets(cls, "method", true)).addElement(md);
    }
  }

  private void updateStaticMethods(ASMClass ac, SNode cls) {
    for (ASMMethod m : ac.getDeclaredMethods()) {
      if (m.isPrivate() && mySkipPrivate) {
        continue;
      }
      if (!(m.isStatic())) {
        continue;
      }
      if (m.isCompilerGenerated()) {
        continue;
      }
      if (SNodeOperations.isInstanceOf(cls, "jetbrains.mps.baseLanguage.structure.EnumClass") && isGeneratedEnumMethod(m)) {
        continue;
      }

      SNode md = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration", null);
      SLinkOperations.setTarget(md, "visibility", createVisibility(m), true);
      updateBaseMethod(m, md, cls);

      md.setId(ASMNodeId.createId(ac, m));
      ListSequence.fromList(SLinkOperations.getTargets(cls, "staticMethod", true)).addElement(md);
    }
  }

  private void updateBaseMethod(ASMMethod m, SNode md, SNode cls) {
    SPropertyOperations.set(md, "name", m.getName());
    SLinkOperations.setTarget(md, "body", new ClassifierUpdater.QuotationClass_ol94f8_a0a1a41().createNode(), true);
    SPropertyOperations.set(md, "isFinal", "" + m.isFinal());
    SPropertyOperations.set(md, "isDeprecated", "" + m.isDeprecated());
    updateTypeVariables(m, md, cls);
    SLinkOperations.setTarget(md, "returnType", getTypeByASMType(m.getGenericReturnType(), md, cls), true);
    {
      ASMType pt;
      String pn;
      List<ASMAnnotation> pa;
      Iterator<ASMType> pt_iterator = ListSequence.fromList(m.getGenericParameterTypes()).iterator();
      Iterator<String> pn_iterator = ListSequence.fromList(m.getParameterNames()).iterator();
      Iterator<List<ASMAnnotation>> pa_iterator = ListSequence.fromList(m.getParameterAnnotations()).iterator();
      while (true) {
        if (!(pt_iterator.hasNext())) {
          break;
        }
        if (!(pn_iterator.hasNext())) {
          break;
        }
        if (!(pa_iterator.hasNext())) {
          break;
        }
        pt = pt_iterator.next();
        pn = pn_iterator.next();
        pa = pa_iterator.next();
        {
          SNode pd = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a6a6a6a41().createNode(getTypeByASMType(pt, md, cls), pn);
          addAnnotationsToParameter(pd, pa);
          ListSequence.fromList(SLinkOperations.getTargets(md, "parameter", true)).addElement(pd);
        }
      }
    }
    for (ASMType exception : m.getExceptionTypes()) {
      ListSequence.fromList(SLinkOperations.getTargets(md, "throwsItem", true)).addElement(getTypeByASMType(exception, md, cls));
    }
    for (ASMAnnotation annotation : m.getAnnotations()) {
      ListSequence.fromList(SLinkOperations.getTargets(md, "annotation", true)).addElement(createAnnotation(annotation));
    }
  }

  private boolean isGeneratedEnumMethod(ASMMethod m) {
    if (m.getName().equals("values") && m.getParameterTypes().isEmpty()) {
      return true;
    }
    if (m.getName().equals("valueOf") && m.getParameterTypes().size() == 1 && m.getParameterTypes().get(0) instanceof ASMClassType) {
      ASMClassType type = (ASMClassType) m.getParameterTypes().get(0);
      return type.getName().equals("java.lang.String");
    }
    return false;
  }

  protected SNode createVisibility(ASMMethod m) {
    if (m.isPublic()) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0q().createNode();
    }
    if (m.isPrivate()) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0q().createNode();
    }
    if (m.isProtected()) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0q().createNode();
    }
    return null;
  }

  protected SNode createVisibility(ASMField f) {
    if (f.isPublic()) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0r().createNode();
    }
    if (f.isPrivate()) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0r().createNode();
    }
    if (f.isProtected()) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0r().createNode();
    }
    return null;
  }

  private void addAnnotationsToParameter(SNode pd, List<ASMAnnotation> anns) {
    ListSequence.fromList(SLinkOperations.getTargets(pd, "annotation", true)).addSequence(ListSequence.fromList(anns).select(new ISelector<ASMAnnotation, SNode>() {
      public SNode select(ASMAnnotation it) {
        return createAnnotation(it);
      }
    }));
  }

  private SNode createAnnotation(ASMAnnotation annotation) {
    SNode result = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a91().createNode();
    ASMClassType c = (ASMClassType) annotation.getType();
    addClassifierReference(result, "annotation", c);
    Map<String, Object> values = ((Map<String, Object>) annotation.getValues());
    for (String key : MapSequence.fromMap(values).keySet()) {
      SNode value = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a4a91().createNode(getAnnotationValue(MapSequence.fromMap(values).get(key)));
      addAnnotationMethodReference(value, "key", c, key);
      ListSequence.fromList(SLinkOperations.getTargets(result, "value", true)).addElement(value);
    }
    return result;
  }

  private SNode getAnnotationValue(Object value) {
    if (value instanceof Integer) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0u().createNode(value.toString());
    }
    if (value instanceof Byte) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0u().createNode(value.toString());
    }
    if (value instanceof Short) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0u().createNode(value.toString());
    }
    if (value instanceof Boolean) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0d0u().createNode(value.toString());
    }
    if (value instanceof Character) {
      return null;
    }
    if (value instanceof Long) {
      return null;
    }
    if (value instanceof Float) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0g0u().createNode(value.toString());
    }
    if (value instanceof Double) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0h0u().createNode(value.toString());
    }
    if (value instanceof String) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0i0u().createNode(value.toString());
    }
    if (value instanceof ASMAnnotation) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0j0u().createNode(createAnnotation((ASMAnnotation) value));
    }
    if (value instanceof ASMPrimitiveType) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0k0u().createNode(SNodeOperations.cast(getTypeByASMType((ASMPrimitiveType) value, null, null), "jetbrains.mps.baseLanguage.structure.PrimitiveType"));
    }
    if (value instanceof List) {
      List<Object> list = (List<Object>) value;
      return new ClassifierUpdater.QuotationClass_ol94f8_a0b0l0u().createNode(ListSequence.fromList(list).select(new ISelector<Object, SNode>() {
        public SNode select(Object it) {
          return getAnnotationValue(it);
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (it != null);
        }
      }).toListSequence());
    }
    if (value instanceof ASMEnumValue) {
      ASMEnumValue enumValue = (ASMEnumValue) value;
      ASMClassType c = (ASMClassType) enumValue.getType();
      SNode res = new ClassifierUpdater.QuotationClass_ol94f8_a0a2a21a02().createNode();
      addClassifierReference(res, "enumClass", c);
      addEnumConstReference(res, "enumConstantDeclaration", enumValue);
      return res;
    }
    if (value instanceof ASMClassType) {
      SNode res = new ClassifierUpdater.QuotationClass_ol94f8_a0a0a31a02().createNode();
      addClassifierReference(res, "classifier", (ASMClassType) value);
      return res;
    }
    LOG.error("couldn't create annotation value from " + ((value == null ?
      "" :
      value.getClass().getName()
    )) + " : " + value);
    return null;
  }

  private SNode getTypeByASMType(ASMType type, SNode method, SNode classifier) {
    if (type == ASMPrimitiveType.BOOLEAN) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0a0v().createNode();
    }
    if (type == ASMPrimitiveType.BYTE) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0v().createNode();
    }
    if (type == ASMPrimitiveType.SHORT) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0c0v().createNode();
    }
    if (type == ASMPrimitiveType.INT) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0d0v().createNode();
    }
    if (type == ASMPrimitiveType.LONG) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0e0v().createNode();
    }
    if (type == ASMPrimitiveType.FLOAT) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0f0v().createNode();
    }
    if (type == ASMPrimitiveType.DOUBLE) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0g0v().createNode();
    }
    if (type == ASMPrimitiveType.VOID) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0h0v().createNode();
    }
    if (type == ASMPrimitiveType.CHAR) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0i0v().createNode();
    }
    if (type instanceof ASMArrayType) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0j0v().createNode(getTypeByASMType(((ASMArrayType) type).getElementType(), method, classifier));
    }
    if (type instanceof ASMVarArgType) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0k0v().createNode(getTypeByASMType(((ASMVarArgType) type).getElementType(), method, classifier));
    }
    if (type instanceof ASMTypeVariable) {
      ASMTypeVariable tv = (ASMTypeVariable) type;
      if (method != null && findTypeVariableDeclaration(method, tv.getName()) != null) {
        return createTypeVariableReference(method, tv.getName());
      } else
      if (findTypeVariableDeclaration(classifier, tv.getName()) != null) {
        return createTypeVariableReference(classifier, tv.getName());
      } else {
        return getTypeByASMType(ASMClassType.OBJECT, method, classifier);
      }
    }
    if (type instanceof ASMClassType) {
      ASMClassType c = (ASMClassType) type;
      SNode classifierType = new ClassifierUpdater.QuotationClass_ol94f8_a0a1a21a12().createNode();
      addClassifierReference(classifierType, "classifier", c);
      return classifierType;
    }
    if (type instanceof ASMParameterizedType) {
      ASMParameterizedType pt = (ASMParameterizedType) type;
      SNode rawType = SNodeOperations.cast(getTypeByASMType(pt.getRawType(), method, classifier), "jetbrains.mps.baseLanguage.structure.ClassifierType");
      addTypeParameters(pt.getActualTypeArguments(), method, classifier, rawType);
      return rawType;
    }
    if (type instanceof ASMExtendsType) {
      ASMExtendsType e = (ASMExtendsType) type;
      if (e.getBase() instanceof ASMClassType) {
        ASMClassType ct = (ASMClassType) e.getBase();
        if (ct.getName().equals("java.lang.Object")) {
          return new ClassifierUpdater.QuotationClass_ol94f8_a0a0b0b0o0v().createNode();
        }
      }
      return new ClassifierUpdater.QuotationClass_ol94f8_a0c0o0v().createNode(getTypeByASMType(e.getBase(), method, classifier));
    }
    if (type instanceof ASMSuperType) {
      ASMSuperType e = (ASMSuperType) type;
      return new ClassifierUpdater.QuotationClass_ol94f8_a0b0p0v().createNode(getTypeByASMType(e.getBase(), method, classifier));
    }
    if (type instanceof ASMUnboundedType) {
      return new ClassifierUpdater.QuotationClass_ol94f8_a0a0q0v().createNode();
    }
    LOG.error("Can't convert type " + type + " class : ");
    return new ClassifierUpdater.QuotationClass_ol94f8_a0s0v().createNode();
  }

  private void addTypeParameters(List<? extends ASMType> typeParameters, SNode method, SNode classifier, SNode result) {
    List<SNode> toAdd = new ArrayList<SNode>();
    for (ASMType tv : typeParameters) {
      SNode type = getTypeByASMType(tv, method, classifier);
      if (type == null) {
        toAdd.clear();
        break;
      }
      toAdd.add(type);
    }
    ListSequence.fromList(SLinkOperations.getTargets(result, "parameter", true)).addSequence(ListSequence.fromList(toAdd));
  }

  private void addClassifierReference(SNode sourceNode, String role, ASMClassType clsType) {
    if (sourceNode.getReferent(role) != null) {
      return;
    }

    String pack = NodeNameUtil.getNamespace(clsType.getName());
    String resolve = NameUtil.shortNameFromLongName(clsType.getName());
    resolve = resolve.replaceAll("\\$", ".");
    SNodeId nodeId = ASMNodeId.createId(clsType.getName());
    SReference ref = createSReference(sourceNode, pack, nodeId, role, resolve);
    sourceNode.addReference(ref);
  }

  private void addAnnotationMethodReference(SNode sourceNode, String role, ASMClassType annotationType, String method) {
    if (sourceNode.getReferent(role) != null) {
      return;
    }

    String pack = NodeNameUtil.getNamespace(annotationType.getName());
    SNodeId nodeId = ASMNodeId.createAnnotationMethodId(annotationType.getName(), method);
    String resolve = NameUtil.shortNameFromLongName(annotationType.getName());
    resolve = resolve.replaceAll("\\$", ".");
    SReference ref = createSReference(sourceNode, pack, nodeId, role, resolve);
    sourceNode.addReference(ref);
  }

  private void addEnumConstReference(SNode sourceNode, String role, ASMEnumValue enumValue) {
    if (sourceNode.getReferent(role) != null) {
      return;
    }

    ASMClassType classType = (ASMClassType) enumValue.getType();
    String pack = NodeNameUtil.getNamespace(classType.getName());
    String resolve = NameUtil.shortNameFromLongName(classType.getName());
    resolve = resolve.replaceAll("\\$", ".");
    SNodeId nodeId = ASMNodeId.createFieldId(classType.getName(), enumValue.getConstant());
    SReference ref = createSReference(sourceNode, pack, nodeId, role, resolve);
    sourceNode.addReference(ref);
  }

  private SReference createSReference(SNode source, String packageName, SNodeId targetNodeId, String role, String resolveInfo) {
    SNode nodeInSameModel = SNodeOperations.getModel(myClassifier).getNodeById(targetNodeId);
    if (nodeInSameModel != null) {
      return SReference.create(role, source, SNodeOperations.getModel(myClassifier).getSModelReference(), targetNodeId, resolveInfo);
    }

    SModelReference ref = StubHelper.uidForPackageInStubs(packageName, this.getLanguageId(), null);

    Set<SModelReference> models = getModelReferencesFor(packageName);
    if (!models.isEmpty()) {
      SModelReference model = SetSequence.fromSet(models).first();
      SNodeOperations.getModel(source).addModelImport(model, false);
    }

    return SReference.create(role, source, ref, targetNodeId, resolveInfo);

    /*
    Set<SModelReference> models = getModelReferencesFor(packageName);

    if (SetSequence.fromSet(models).isEmpty()) {
      SModelReference ref = StubHelper.uidForPackageInStubs(packageName, this.getLanguageId(), moduleRef);
      return SReference.create(role, source, ref, targetNodeId, resolveInfo);
    }

    if (SetSequence.fromSet(models).count() > 1) {
      for (SModelReference model : models) {
        SNodeOperations.getModel(source).addModelImport(model, false);
      }
      return new DynamicReference(role, source, new SModelReference(packageName, SModelStereotype.getStubStereotypeForId(getLanguageId())), resolveInfo);
    }

    SModelReference model = SetSequence.fromSet(models).first();
    ModuleReference moduleRef = SModelRepository.getInstance().getModelDescriptor(model).getModule().getModuleReference();
    SModelReference ref = StubHelper.uidForPackageInStubs(packageName, this.getLanguageId(), moduleRef);
    SNodeOperations.getModel(source).addModelImport(model, false);
    return SReference.create(role, source, ref, targetNodeId, resolveInfo);

    */
  }

  private Set<SModelReference> getModelReferencesFor(String packageName) {
    Set<SModelReference> models = StubModelsResolver.getInstance().resolveModel(myModule, new SModelFqName(packageName, SModelStereotype.getStubStereotypeForId(this.getLanguageId())), null);

    if (SetSequence.fromSet(models).isEmpty()) {
      String moduleName = myModule.getModuleFqName();
      Tuples._2<String, String> p = MultiTuple.<String,String>from(packageName, moduleName);
      if (!(SetSequence.fromSet(reported).contains(p))) {
		// RE-2300

        /*
        SetSequence.fromSet(reported).addElement(p);
        if (IdeMain.getTestMode() == IdeMain.TestMode.NO_TEST) {
          LOG.warning("no module found for: " + packageName + " in " + myModule.getModuleFqName());
        }
        */        
      }
    }
    return models;
  }

  private String getLanguageId() {
    return this.myLanguageId;
  }

  public boolean isSkipPrivate() {
    return mySkipPrivate;
  }

  private static boolean eq_ol94f8_a0a0a0a0a0a0a3(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  public static class QuotationClass_ol94f8_a0a0f0a {
    public QuotationClass_ol94f8_a0a0f0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a0a1 {
    public QuotationClass_ol94f8_a0a0a0a1() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("name", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a1a2 {
    public QuotationClass_ol94f8_a0a0a1a2() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("name", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0e {
    public QuotationClass_ol94f8_a0a0e() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableReference", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReferent("typeVariableDeclaration", (SNode) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a3a0a8 {
    public QuotationClass_ol94f8_a0a3a0a8() {
    }

    public SNode createNode(Object parameter_7, Object parameter_8, Object parameter_9) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        quotedNode1_4.setProperty("name", (String) parameter_9);
        {
          quotedNode_2 = (SNode) parameter_7;
          SNode quotedNode1_5;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_5 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_5 = quotedNode_2;
          }
          if (quotedNode1_5 != null) {
            quotedNode_1.addChild("visibility", HUtil.copyIfNecessary(quotedNode1_5));
          }
        }
        {
          quotedNode_3 = (SNode) parameter_8;
          SNode quotedNode1_6;
          if (_parameterValues_129834374.contains(quotedNode_3)) {
            quotedNode1_6 = HUtil.copyIfNecessary(quotedNode_3);
          } else {
            _parameterValues_129834374.add(quotedNode_3);
            quotedNode1_6 = quotedNode_3;
          }
          if (quotedNode1_6 != null) {
            quotedNode_1.addChild("type", HUtil.copyIfNecessary(quotedNode1_6));
          }
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a0d0a0j {
    public QuotationClass_ol94f8_a0a0a0d0a0j() {
    }

    public SNode createNode(Object parameter_7, Object parameter_8, Object parameter_9) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        quotedNode1_4.setProperty("name", (String) parameter_9);
        {
          quotedNode_2 = (SNode) parameter_7;
          SNode quotedNode1_5;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_5 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_5 = quotedNode_2;
          }
          if (quotedNode1_5 != null) {
            quotedNode_1.addChild("visibility", HUtil.copyIfNecessary(quotedNode1_5));
          }
        }
        {
          quotedNode_3 = (SNode) parameter_8;
          SNode quotedNode1_6;
          if (_parameterValues_129834374.contains(quotedNode_3)) {
            quotedNode1_6 = HUtil.copyIfNecessary(quotedNode_3);
          } else {
            _parameterValues_129834374.add(quotedNode_3);
            quotedNode1_6 = quotedNode_3;
          }
          if (quotedNode1_6 != null) {
            quotedNode_1.addChild("type", HUtil.copyIfNecessary(quotedNode1_6));
          }
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a1a1a3a0d0a0j {
    public QuotationClass_ol94f8_a0a0a1a1a3a0d0a0j() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("value", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a0b0b0d0a3a0a9 {
    public QuotationClass_ol94f8_a0a0a0b0b0d0a3a0a9() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("value", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a1a3a0a9 {
    public QuotationClass_ol94f8_a0a1a3a0a9() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("name", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a0a01 {
    public QuotationClass_ol94f8_a0a0a0a01() {
    }

    public SNode createNode(Object parameter_9, Object parameter_10) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_5 = quotedNode_1;
        quotedNode1_5.setProperty("name", (String) parameter_10);
        {
          quotedNode_2 = (SNode) parameter_9;
          SNode quotedNode1_6;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_6 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_6 = quotedNode_2;
          }
          if (quotedNode1_6 != null) {
            quotedNode_1.addChild("returnType", HUtil.copyIfNecessary(quotedNode1_6));
          }
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_7 = quotedNode_3;
          quotedNode_1.addChild("visibility", quotedNode1_7);
        }
        {
          quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_8 = quotedNode_4;
          quotedNode_1.addChild("body", quotedNode1_8);
        }
        result = quotedNode1_5;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a1a0a01 {
    public QuotationClass_ol94f8_a0a1a0a01() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a3a0a11 {
    public QuotationClass_ol94f8_a0a3a0a11() {
    }

    public SNode createNode(Object parameter_9, Object parameter_10, Object parameter_11) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_5 = quotedNode_1;
        quotedNode1_5.setProperty("name", (String) parameter_11);
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VoidType", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_6 = quotedNode_2;
          quotedNode_1.addChild("returnType", quotedNode1_6);
        }
        {
          quotedNode_3 = (SNode) parameter_9;
          SNode quotedNode1_7;
          if (_parameterValues_129834374.contains(quotedNode_3)) {
            quotedNode1_7 = HUtil.copyIfNecessary(quotedNode_3);
          } else {
            _parameterValues_129834374.add(quotedNode_3);
            quotedNode1_7 = quotedNode_3;
          }
          if (quotedNode1_7 != null) {
            quotedNode_1.addChild("visibility", HUtil.copyIfNecessary(quotedNode1_7));
          }
        }
        {
          quotedNode_4 = (SNode) parameter_10;
          SNode quotedNode1_8;
          if (_parameterValues_129834374.contains(quotedNode_4)) {
            quotedNode1_8 = HUtil.copyIfNecessary(quotedNode_4);
          } else {
            _parameterValues_129834374.add(quotedNode_4);
            quotedNode1_8 = quotedNode_4;
          }
          if (quotedNode1_8 != null) {
            quotedNode_1.addChild("body", HUtil.copyIfNecessary(quotedNode1_8));
          }
        }
        result = quotedNode1_5;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a0f0a0l {
    public QuotationClass_ol94f8_a0a0a0f0a0l() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("name", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a2a6a6a6a0a11 {
    public QuotationClass_ol94f8_a0a2a6a6a6a0a11() {
    }

    public SNode createNode(Object parameter_5, Object parameter_6) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.setProperty("name", (String) parameter_6);
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("type", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a1a41 {
    public QuotationClass_ol94f8_a0a1a41() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StubStatementList", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a6a6a6a41 {
    public QuotationClass_ol94f8_a0a0a6a6a6a41() {
    }

    public SNode createNode(Object parameter_5, Object parameter_6) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.setProperty("name", (String) parameter_6);
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("type", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a0q {
    public QuotationClass_ol94f8_a0a0a0q() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0b0q {
    public QuotationClass_ol94f8_a0a0b0q() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrivateVisibility", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0c0q {
    public QuotationClass_ol94f8_a0a0c0q() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ProtectedVisibility", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a0r {
    public QuotationClass_ol94f8_a0a0a0r() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0b0r {
    public QuotationClass_ol94f8_a0a0b0r() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrivateVisibility", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0c0r {
    public QuotationClass_ol94f8_a0a0c0r() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ProtectedVisibility", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a91 {
    public QuotationClass_ol94f8_a0a0a91() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a4a91 {
    public QuotationClass_ol94f8_a0a0a4a91() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("value", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a0u {
    public QuotationClass_ol94f8_a0a0a0u() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("value", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0b0u {
    public QuotationClass_ol94f8_a0a0b0u() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("value", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0c0u {
    public QuotationClass_ol94f8_a0a0c0u() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("value", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0d0u {
    public QuotationClass_ol94f8_a0a0d0u() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("value", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0g0u {
    public QuotationClass_ol94f8_a0a0g0u() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointConstant", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("value", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0h0u {
    public QuotationClass_ol94f8_a0a0h0u() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatingPointConstant", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("value", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0i0u {
    public QuotationClass_ol94f8_a0a0i0u() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("value", (String) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0j0u {
    public QuotationClass_ol94f8_a0a0j0u() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = (SNode) parameter_3;
        SNode quotedNode1_2;
        if (_parameterValues_129834374.contains(quotedNode_1)) {
          quotedNode1_2 = HUtil.copyIfNecessary(quotedNode_1);
        } else {
          _parameterValues_129834374.add(quotedNode_1);
          quotedNode1_2 = quotedNode_1;
        }
        if (quotedNode1_2 != null) {
          result = quotedNode1_2;
        }
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0k0u {
    public QuotationClass_ol94f8_a0a0k0u() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("primitiveType", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0b0l0u {
    public QuotationClass_ol94f8_a0b0l0u() {
    }

    public SNode createNode(Object parameter_4) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayLiteral", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          List<SNode> nodes = (List<SNode>) parameter_4;
          for (SNode child : nodes) {
            quotedNode_1.addChild("item", HUtil.copyIfNecessary(child));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a2a21a02 {
    public QuotationClass_ol94f8_a0a2a21a02() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.EnumConstantReference", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a31a02 {
    public QuotationClass_ol94f8_a0a0a31a02() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0a0v {
    public QuotationClass_ol94f8_a0a0a0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0b0v {
    public QuotationClass_ol94f8_a0a0b0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ByteType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0c0v {
    public QuotationClass_ol94f8_a0a0c0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ShortType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0d0v {
    public QuotationClass_ol94f8_a0a0d0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0e0v {
    public QuotationClass_ol94f8_a0a0e0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LongType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0f0v {
    public QuotationClass_ol94f8_a0a0f0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0g0v {
    public QuotationClass_ol94f8_a0a0g0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DoubleType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0h0v {
    public QuotationClass_ol94f8_a0a0h0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VoidType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0i0v {
    public QuotationClass_ol94f8_a0a0i0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CharType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0j0v {
    public QuotationClass_ol94f8_a0a0j0v() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("componentType", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0k0v {
    public QuotationClass_ol94f8_a0a0k0v() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableArityType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("componentType", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a1a21a12 {
    public QuotationClass_ol94f8_a0a1a21a12() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0b0b0o0v {
    public QuotationClass_ol94f8_a0a0b0b0o0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.WildCardType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0c0o0v {
    public QuotationClass_ol94f8_a0c0o0v() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.UpperBoundType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("bound", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0b0p0v {
    public QuotationClass_ol94f8_a0b0p0v() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LowerBoundType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("bound", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0a0q0v {
    public QuotationClass_ol94f8_a0a0q0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.WildCardType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_ol94f8_a0s0v {
    public QuotationClass_ol94f8_a0s0v() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
