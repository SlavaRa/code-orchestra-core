package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.traceable.structure.UnitConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ClassConcept extends Classifier implements IBLDeprecatable, UnitConcept {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.ClassConcept";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String ABSTRACT_CLASS = "abstractClass";
  public static final String IS_FINAL = "isFinal";
  public static final String IS_STATIC = "isStatic";
  public static final String IS_DEPRECATED = "isDeprecated";
  public static final String SUPERCLASS = "superclass";
  public static final String INSTANCE_INITIALIZER = "instanceInitializer";
  public static final String CLASS_INITIALIZER = "classInitializer";
  public static final String STATIC_INITIALIZER = "staticInitializer";
  public static final String FIELD = "field";
  public static final String CONSTRUCTOR = "constructor";
  public static final String STATIC_METHOD = "staticMethod";
  public static final String IMPLEMENTED_INTERFACE = "implementedInterface";
  public static final String PROPERTY = "property";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public ClassConcept(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(ClassConcept.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ClassConcept.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ClassConcept.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ClassConcept.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ClassConcept.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ClassConcept.VIRTUAL_PACKAGE, value);
  }

  public boolean getAbstractClass() {
    return this.getBooleanProperty(ClassConcept.ABSTRACT_CLASS);
  }

  public void setAbstractClass(boolean value) {
    this.setBooleanProperty(ClassConcept.ABSTRACT_CLASS, value);
  }

  public boolean getIsFinal() {
    return this.getBooleanProperty(ClassConcept.IS_FINAL);
  }

  public void setIsFinal(boolean value) {
    this.setBooleanProperty(ClassConcept.IS_FINAL, value);
  }

  public boolean getIsStatic() {
    return this.getBooleanProperty(ClassConcept.IS_STATIC);
  }

  public void setIsStatic(boolean value) {
    this.setBooleanProperty(ClassConcept.IS_STATIC, value);
  }

  public boolean getIsDeprecated() {
    return this.getBooleanProperty(ClassConcept.IS_DEPRECATED);
  }

  public void setIsDeprecated(boolean value) {
    this.setBooleanProperty(ClassConcept.IS_DEPRECATED, value);
  }

  public ClassifierType getSuperclass() {
    return (ClassifierType) this.getChild(ClassifierType.class, ClassConcept.SUPERCLASS);
  }

  public void setSuperclass(ClassifierType node) {
    super.setChild(ClassConcept.SUPERCLASS, node);
  }

  public InstanceInitializer getInstanceInitializer() {
    return (InstanceInitializer) this.getChild(InstanceInitializer.class, ClassConcept.INSTANCE_INITIALIZER);
  }

  public void setInstanceInitializer(InstanceInitializer node) {
    super.setChild(ClassConcept.INSTANCE_INITIALIZER, node);
  }

  public StaticInitializer getClassInitializer() {
    return (StaticInitializer) this.getChild(StaticInitializer.class, ClassConcept.CLASS_INITIALIZER);
  }

  public void setClassInitializer(StaticInitializer node) {
    super.setChild(ClassConcept.CLASS_INITIALIZER, node);
  }

  public StatementList getStaticInitializer() {
    return (StatementList) this.getChild(StatementList.class, ClassConcept.STATIC_INITIALIZER);
  }

  public void setStaticInitializer(StatementList node) {
    super.setChild(ClassConcept.STATIC_INITIALIZER, node);
  }

  public int getFieldsCount() {
    return this.getChildCount(ClassConcept.FIELD);
  }

  public Iterator<FieldDeclaration> fields() {
    return this.children(FieldDeclaration.class, ClassConcept.FIELD);
  }

  public List<FieldDeclaration> getFields() {
    return this.getChildren(FieldDeclaration.class, ClassConcept.FIELD);
  }

  public void addField(FieldDeclaration node) {
    this.addChild(ClassConcept.FIELD, node);
  }

  public void insertField(FieldDeclaration prev, FieldDeclaration node) {
    this.insertChild(prev, ClassConcept.FIELD, node);
  }

  public int getConstructorsCount() {
    return this.getChildCount(ClassConcept.CONSTRUCTOR);
  }

  public Iterator<ConstructorDeclaration> constructors() {
    return this.children(ConstructorDeclaration.class, ClassConcept.CONSTRUCTOR);
  }

  public List<ConstructorDeclaration> getConstructors() {
    return this.getChildren(ConstructorDeclaration.class, ClassConcept.CONSTRUCTOR);
  }

  public void addConstructor(ConstructorDeclaration node) {
    this.addChild(ClassConcept.CONSTRUCTOR, node);
  }

  public void insertConstructor(ConstructorDeclaration prev, ConstructorDeclaration node) {
    this.insertChild(prev, ClassConcept.CONSTRUCTOR, node);
  }

  public int getStaticMethodsCount() {
    return this.getChildCount(ClassConcept.STATIC_METHOD);
  }

  public Iterator<StaticMethodDeclaration> staticMethods() {
    return this.children(StaticMethodDeclaration.class, ClassConcept.STATIC_METHOD);
  }

  public List<StaticMethodDeclaration> getStaticMethods() {
    return this.getChildren(StaticMethodDeclaration.class, ClassConcept.STATIC_METHOD);
  }

  public void addStaticMethod(StaticMethodDeclaration node) {
    this.addChild(ClassConcept.STATIC_METHOD, node);
  }

  public void insertStaticMethod(StaticMethodDeclaration prev, StaticMethodDeclaration node) {
    this.insertChild(prev, ClassConcept.STATIC_METHOD, node);
  }

  public int getImplementedInterfacesCount() {
    return this.getChildCount(ClassConcept.IMPLEMENTED_INTERFACE);
  }

  public Iterator<ClassifierType> implementedInterfaces() {
    return this.children(ClassifierType.class, ClassConcept.IMPLEMENTED_INTERFACE);
  }

  public List<ClassifierType> getImplementedInterfaces() {
    return this.getChildren(ClassifierType.class, ClassConcept.IMPLEMENTED_INTERFACE);
  }

  public void addImplementedInterface(ClassifierType node) {
    this.addChild(ClassConcept.IMPLEMENTED_INTERFACE, node);
  }

  public void insertImplementedInterface(ClassifierType prev, ClassifierType node) {
    this.insertChild(prev, ClassConcept.IMPLEMENTED_INTERFACE, node);
  }

  public int getPropertiesCount() {
    return this.getChildCount(ClassConcept.PROPERTY);
  }

  public Iterator<Property> properties() {
    return this.children(Property.class, ClassConcept.PROPERTY);
  }

  public List<Property> getProperties() {
    return this.getChildren(Property.class, ClassConcept.PROPERTY);
  }

  public void addProperty(Property node) {
    this.addChild(ClassConcept.PROPERTY, node);
  }

  public void insertProperty(Property prev, Property node) {
    this.insertChild(prev, ClassConcept.PROPERTY, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(ClassConcept.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, ClassConcept.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, ClassConcept.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(ClassConcept.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, ClassConcept.SMODEL_ATTRIBUTE, node);
  }

  public static ClassConcept newInstance(SModel sm, boolean init) {
    return (ClassConcept) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ClassConcept newInstance(SModel sm) {
    return ClassConcept.newInstance(sm, false);
  }
}
