package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class IfStatement extends Statement implements IContainsStatementList {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.IfStatement";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String FORCE_ONE_LINE = "forceOneLine";
  public static final String FORCE_MULTI_LINE = "forceMultiLine";
  public static final String CONDITION = "condition";
  public static final String IF_FALSE_STATEMENT = "ifFalseStatement";
  public static final String IF_TRUE = "ifTrue";
  public static final String ELSIF_CLAUSES = "elsifClauses";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public IfStatement(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(IfStatement.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(IfStatement.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(IfStatement.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(IfStatement.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(IfStatement.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(IfStatement.VIRTUAL_PACKAGE, value);
  }

  public boolean getForceOneLine() {
    return this.getBooleanProperty(IfStatement.FORCE_ONE_LINE);
  }

  public void setForceOneLine(boolean value) {
    this.setBooleanProperty(IfStatement.FORCE_ONE_LINE, value);
  }

  public boolean getForceMultiLine() {
    return this.getBooleanProperty(IfStatement.FORCE_MULTI_LINE);
  }

  public void setForceMultiLine(boolean value) {
    this.setBooleanProperty(IfStatement.FORCE_MULTI_LINE, value);
  }

  public Expression getCondition() {
    return (Expression) this.getChild(Expression.class, IfStatement.CONDITION);
  }

  public void setCondition(Expression node) {
    super.setChild(IfStatement.CONDITION, node);
  }

  public Statement getIfFalseStatement() {
    return (Statement) this.getChild(Statement.class, IfStatement.IF_FALSE_STATEMENT);
  }

  public void setIfFalseStatement(Statement node) {
    super.setChild(IfStatement.IF_FALSE_STATEMENT, node);
  }

  public StatementList getIfTrue() {
    return (StatementList) this.getChild(StatementList.class, IfStatement.IF_TRUE);
  }

  public void setIfTrue(StatementList node) {
    super.setChild(IfStatement.IF_TRUE, node);
  }

  public int getElsifClausesesCount() {
    return this.getChildCount(IfStatement.ELSIF_CLAUSES);
  }

  public Iterator<ElsifClause> elsifClauseses() {
    return this.children(ElsifClause.class, IfStatement.ELSIF_CLAUSES);
  }

  public List<ElsifClause> getElsifClauseses() {
    return this.getChildren(ElsifClause.class, IfStatement.ELSIF_CLAUSES);
  }

  public void addElsifClauses(ElsifClause node) {
    this.addChild(IfStatement.ELSIF_CLAUSES, node);
  }

  public void insertElsifClauses(ElsifClause prev, ElsifClause node) {
    this.insertChild(prev, IfStatement.ELSIF_CLAUSES, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(IfStatement.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, IfStatement.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, IfStatement.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(IfStatement.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, IfStatement.SMODEL_ATTRIBUTE, node);
  }

  public static IfStatement newInstance(SModel sm, boolean init) {
    return (IfStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static IfStatement newInstance(SModel sm) {
    return IfStatement.newInstance(sm, false);
  }
}
