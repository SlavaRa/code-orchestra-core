package jetbrains.mps.baseLanguage.stubs;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.stubs.BaseStubModelDescriptor;
import jetbrains.mps.stubs.BaseStubModelRootManager;
import jetbrains.mps.stubs.StubLocation;
import java.util.HashSet;
import jetbrains.mps.reloading.IClassPathItem;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.stubs.javastub.classpath.StubHelper;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.reloading.ClassPathFactory;
import java.io.IOException;
import jetbrains.mps.stubs.IStubRootNodeDescriptor;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.stubs.javastub.classpath.ClassifierKind;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;


/**
 * Utility class to share some functionality between JavaStubs and AllMemberJavaStubs
 */
/*package*/ class JavaStubsUtil {
  public JavaStubsUtil() {
  }

  /*package*/ static Set<BaseStubModelDescriptor> getModelDescriptors(BaseStubModelRootManager stubCreator, StubLocation location, String languageId) {
    Set<BaseStubModelDescriptor> result = new HashSet<BaseStubModelDescriptor>();
    JavaStubsUtil.getModelDescriptors(stubCreator, location, languageId, result);
    return result;
  }

  private static void getModelDescriptors(BaseStubModelRootManager stubCreator, StubLocation location, String languageId, Set<BaseStubModelDescriptor> result) {
    String pack = location.getPrefix();
    IClassPathItem cpItem = createClassPathItem(location);
    if (cpItem == null) {
      return;
    }

    for (String subpackage : cpItem.getSubpackages(pack)) {
      if (cpItem.getRootClasses(subpackage).iterator().hasNext()) {
        SModelReference modelReference = StubHelper.uidForPackageInStubs(subpackage, languageId, location.getModule().getModuleReference());
        if (SModelRepository.getInstance().getModelDescriptor(modelReference) != null) {
          SModelDescriptor descriptor = SModelRepository.getInstance().getModelDescriptor(modelReference);
          assert descriptor instanceof BaseStubModelDescriptor;
          result.add((BaseStubModelDescriptor) descriptor);
        } else {
          result.add(new BaseStubModelDescriptor(stubCreator, null, modelReference));
        }
      }
      StubLocation newLocation = new StubLocation(location.getPath(), subpackage, location.getModuleRef());
      getModelDescriptors(stubCreator, newLocation, languageId, result);
    }
  }

  @Nullable
  /*package*/ static IClassPathItem createClassPathItem(StubLocation location) {
    try {
      return ClassPathFactory.getInstance().createFromPath(location.getPath(), "JavaStubsUtil");
    } catch (IOException e) {
      return null;
    }
  }

  public static Set<IStubRootNodeDescriptor> iterateClassPath(ModuleReference module, IClassPathItem item) {
    Set<IStubRootNodeDescriptor> result = new HashSet<IStubRootNodeDescriptor>();
    iterateClassPath(module, item, result, "");
    return result;
  }

  private static void iterateClassPath(final ModuleReference module, final IClassPathItem item, Set<IStubRootNodeDescriptor> result, final String pName) {
    final SModelReference model = StubHelper.uidForPackageInStubs(pName, LanguageID.JAVA, module, false);
    for (final String cls : item.getRootClasses(pName)) {
      result.add(new IStubRootNodeDescriptor() {
        public String getName() {
          return cls;
        }

        public SNode getConcept() {
          ClassifierKind kind = item.getClassifierKind(("".equals(pName) ?
            cls :
            pName + "." + cls
          ));
          if (kind == ClassifierKind.CLASS) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept");
          }
          if (kind == ClassifierKind.INTERFACE) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Interface");
          }
          if (kind == ClassifierKind.ANNOTATIONS) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Annotation");
          }
          if (kind == ClassifierKind.ENUM) {
            return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.EnumClass");
          }
          return SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassConcept");
        }

        public SModelReference getModelReference() {
          return model;
        }
      });
    }
    for (String subpack : item.getSubpackages(pName)) {
      iterateClassPath(module, item, result, subpack);
    }
  }
}
