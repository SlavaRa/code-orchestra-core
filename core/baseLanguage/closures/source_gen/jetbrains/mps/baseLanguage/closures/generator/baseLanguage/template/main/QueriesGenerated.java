package jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper.FunctionTypeUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper.Keys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper.Values;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper.Flags;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper.ClosureLiteralUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.closures.behavior.FunctionType_Behavior;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.baseLanguage.closures.constraints.ClassifierTypeUtil;
import jetbrains.mps.baseLanguage.closures.behavior.FunctionMethodDeclaration_Behavior;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.baseLanguage.closures.behavior.RuntimeUtils;
import jetbrains.mps.baseLanguage.closures.behavior.UnrestrictedFunctionType_Behavior;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper.StatementListUtil;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.closures.util.Constants;
import jetbrains.mps.generator.template.MapSrcMacroContext;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper.PrepStatementUtil;
import jetbrains.mps.baseLanguage.behavior.TypeDerivable_Behavior;
import jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper.WrappersUtils;
import jetbrains.mps.baseLanguage.behavior.ExpressionStatement_Behavior;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class QueriesGenerated {
  public static boolean createRootRule_Condition_1216995080029(final IOperationContext operationContext, final CreateRootRuleContext _context) {
    List<SNode> adapters = FunctionTypeUtil.getAllAdaptableClassifiers(_context);
    if (adapters != null && ListSequence.fromList(adapters).count() > 0) {
      /*
        _context.putStepObject(Keys.NEEDS_WEAVING_CLASS, Boolean.TRUE);
      */
      return true;
    }
    return false;
  }

  public static boolean createRootRule_Condition_1216996889747(final IOperationContext operationContext, final CreateRootRuleContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean createRootRule_Condition_1229869411695(final IOperationContext operationContext, final CreateRootRuleContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean createRootRule_Condition_1229873995157(final IOperationContext operationContext, final CreateRootRuleContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean baseMappingRule_Condition_1201026182242(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201359295364(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean hasData = Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
    return hasData && !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "iterable", true)), "jetbrains.mps.baseLanguage.structure.ArrayType"));
  }

  public static boolean baseMappingRule_Condition_1228828862668(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean hasData = Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
    return hasData && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "iterable", true)), "jetbrains.mps.baseLanguage.structure.ArrayType");
  }

  public static boolean baseMappingRule_Condition_1201288202981(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201389225625(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201293003300(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201293028247(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201026184426(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201193354452(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201194112613(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201390750887(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201390755365(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1209567952369(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return false && Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201204773236(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "initializer", true) != null);
  }

  public static boolean baseMappingRule_Condition_1201017719800(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1201017688485(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_5451047975132812766(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "localVariableDeclaration", true), "initializer", true) == null);
  }

  public static boolean baseMappingRule_Condition_1201093930999(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false) != null) && Values.CLOSURE_DATA.get(_context, SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false)) != null;
  }

  public static boolean baseMappingRule_Condition_1207145700256(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean result = Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, _context.getNode());
    if (result) {
      Flags.WRAPPING_LOCAL_VARIABLE.clear(_context, _context.getNode());
    }
    return result;
  }

  public static boolean baseMappingRule_Condition_1207146877066(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, _context.getNode());
  }

  public static boolean baseMappingRule_Condition_1219916476737(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean result = Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, _context.getNode());
    if (result) {
      Flags.WRAPPING_LOCAL_VARIABLE.clear(_context, _context.getNode());
    }
    return result;
  }

  public static boolean baseMappingRule_Condition_1219934617805(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false) != null) && Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false)) && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.ClassCreator") && INamedConcept_Behavior.call_getFqName_1213877404258(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.ClassCreator"), "baseMethodDeclaration", false)), "jetbrains.mps.lang.core.structure.INamedConcept")).startsWith("jetbrains.mps.baseLanguage.closures.runtime.Wrappers"));
  }

  public static boolean baseMappingRule_Condition_1215452055499(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return false;
  }

  public static boolean baseMappingRule_Condition_7246115176735007897(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "function", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static boolean baseMappingRule_Condition_7246115176735007961(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "function", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType");
  }

  public static boolean baseMappingRule_Condition_55412175018273848(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.ExpressionStatement"));
  }

  public static boolean baseMappingRule_Condition_55412175018273755(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression"), "function", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static boolean baseMappingRule_Condition_55412175018238675(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression");
  }

  public static boolean baseMappingRule_Condition_1231340541220(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static boolean baseMappingRule_Condition_1231340529133(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "operation", true), "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation");
  }

  public static boolean baseMappingRule_Condition_1232364643901(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "localVariableDeclaration", true) != null) && Flags.NEEDS_INITIALIZER.isFlagged(_context, SLinkOperations.getTarget(_context.getNode(), "localVariableDeclaration", true));
  }

  public static boolean baseMappingRule_Condition_181303132969132944(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "jetbrains.mps.baseLanguage.structure.DotExpression")) {
      SNode de = SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "jetbrains.mps.baseLanguage.structure.DotExpression");
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(de, "operation", true), "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation") && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de, "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType");
    }
    return false;
  }

  public static boolean baseMappingRule_Condition_181303132969132999(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "expression", true), "jetbrains.mps.baseLanguage.structure.BaseMethodCall")) {
      List<SNode> args = SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
      for (int idx = ListSequence.fromList(args).count() - 1; idx >= 0; idx--) {
        if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(ListSequence.fromList(args).getElement(idx)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) {
          return true;
        }
      }
    }
    return false;
  }

  public static boolean baseMappingRule_Condition_1231456828270(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode ucl = SNodeOperations.getAncestorWhereConceptInList(_context.getNode(), new String[]{"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral", "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"}, false, false);
    return SNodeOperations.isInstanceOf(ucl, "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral");
  }

  public static boolean baseMappingRule_Condition_1231495055745(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "expression", true) != null);
  }

  public static boolean baseMappingRule_Condition_1231495190905(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "expression", true) == null);
  }

  public static boolean baseMappingRule_Condition_1232140884134(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean baseMappingRule_Condition_1232141046417(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true)), "jetbrains.mps.baseLanguage.structure.VoidType") && Flags.TERMINATE.isFlagged(_context, _context.getNode());
  }

  public static boolean baseMappingRule_Condition_1232140845413(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    List<SNode> statements = SLinkOperations.getTargets(SNodeOperations.as(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.StatementList"), "statement", true);
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(_context.getNode())), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral") && ListSequence.fromList(statements).last() == _context.getNode();
  }

  public static boolean baseMappingRule_Condition_1231495827362(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode ucl = SNodeOperations.getAncestorWhereConceptInList(_context.getNode(), new String[]{"jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral", "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"}, false, false);
    return SNodeOperations.isInstanceOf(ucl, "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral");
  }

  public static boolean baseMappingRule_Condition_1201018816706(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }

  public static boolean baseMappingRule_Condition_1216995176832(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode trg = FunctionTypeUtil.getAdaptableTarget(_context, _context.getNode(), ((TemplateQueryContext) _context).getGenerator());
    return Values.ADAPTABLE.get(_context, trg) != null;
  }

  public static boolean baseMappingRule_Condition_1216995176904(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return Values.PREP_DATA.isSet(_context, _context.getNode()) && !(Values.POST_DATA.isSet(_context, _context.getNode()));
  }

  public static boolean baseMappingRule_Condition_1201016704101(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return ClosureLiteralUtil.hasYieldStatement(_context.getNode());
  }

  public static boolean baseMappingRule_Condition_1201016795856(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(ClosureLiteralUtil.hasYieldStatement(_context.getNode()));
  }

  public static boolean baseMappingRule_Condition_1230127385232(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(Values.PREP_DATA.isSet(_context, _context.getNode())) || Values.POST_DATA.isSet(_context, _context.getNode());
  }

  public static boolean baseMappingRule_Condition_1207146222921(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.IntegerType");
  }

  public static boolean baseMappingRule_Condition_1219933368506(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.IntegerType");
  }

  public static boolean baseMappingRule_Condition_1207146621014(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.ShortType");
  }

  public static boolean baseMappingRule_Condition_1219933453748(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.ShortType");
  }

  public static boolean baseMappingRule_Condition_1207146446414(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.LongType");
  }

  public static boolean baseMappingRule_Condition_1219933477561(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.LongType");
  }

  public static boolean baseMappingRule_Condition_1207146459762(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.FloatType");
  }

  public static boolean baseMappingRule_Condition_1219933487990(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.FloatType");
  }

  public static boolean baseMappingRule_Condition_1207146473723(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.DoubleType");
  }

  public static boolean baseMappingRule_Condition_1219933498234(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.DoubleType");
  }

  public static boolean baseMappingRule_Condition_1207146484005(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.CharType");
  }

  public static boolean baseMappingRule_Condition_1219933514967(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.CharType");
  }

  public static boolean baseMappingRule_Condition_1207146505521(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.ByteType");
  }

  public static boolean baseMappingRule_Condition_1219933526636(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.ByteType");
  }

  public static boolean baseMappingRule_Condition_1207146608412(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.BooleanType");
  }

  public static boolean baseMappingRule_Condition_1219933537761(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.BooleanType");
  }

  public static boolean baseMappingRule_Condition_1215557569392(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.ArrayType") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference");
  }

  public static boolean baseMappingRule_Condition_1219933549981(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.ArrayType");
  }

  public static boolean baseMappingRule_Condition_1207146630681(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(_context.getNode(), "type", true), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true) != null);
  }

  public static boolean baseMappingRule_Condition_1219933878469(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(_context.getNode(), "type", true), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true) != null);
  }

  public static boolean baseMappingRule_Condition_1207146698869(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.IntegerType");
  }

  public static boolean baseMappingRule_Condition_1207146698889(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.ShortType");
  }

  public static boolean baseMappingRule_Condition_1207146698909(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.LongType");
  }

  public static boolean baseMappingRule_Condition_1207146698929(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.FloatType");
  }

  public static boolean baseMappingRule_Condition_1207146698949(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.DoubleType");
  }

  public static boolean baseMappingRule_Condition_1207146698969(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.CharType");
  }

  public static boolean baseMappingRule_Condition_1207146698989(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.ByteType");
  }

  public static boolean baseMappingRule_Condition_1207146699009(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.BooleanType");
  }

  public static boolean baseMappingRule_Condition_1215557472438(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.ArrayType") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference");
  }

  public static boolean baseMappingRule_Condition_1207146699040(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(_context.getNode(), "type", true), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true) != null);
  }

  public static boolean baseMappingRule_Condition_2857237956452406728(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(Flags.FUNCTION_METHOD.isFlagged(_context, _context.getNode())) && ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "method", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode m) {
        return SNodeOperations.isInstanceOf(m, "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration");
      }
    });
  }

  public static boolean baseMappingRule_Condition_608109309169759537(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode cl = SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false);
    List<SNode> allYAS = SNodeOperations.getDescendants(cl, "jetbrains.mps.baseLanguage.closures.structure.YieldAllStatement", false, new String[]{"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock"});
    List<SNode> allYS = SNodeOperations.getDescendants(cl, "jetbrains.mps.baseLanguage.closures.structure.YieldStatement", false, new String[]{"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock"});
    return (ListSequence.fromList(allYS).isEmpty() ?
      (ListSequence.fromList(allYAS).count() == 1 && ListSequence.fromList(allYAS).first() == ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(cl, "body", true), "statement", true)).last()) :
      false
    );
  }

  public static boolean baseMappingRule_Condition_7001216437968756006(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode cl = SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false);
    SNode cc = SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    return cc != null && cl != null && SNodeOperations.getAncestor(cl, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) == cc && !(SNodeOperations.isInstanceOf(cc, "jetbrains.mps.baseLanguage.structure.AnonymousClass"));
  }

  public static boolean baseMappingRule_Condition_7001216437968756131(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    SNode cl = SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false);
    SNode cc = SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    return cc == null && cl == null;
  }

  public static boolean baseMappingRule_Condition_7001216437968754131(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "classConcept", false) == null);
  }

  public static boolean baseMappingRule_Condition_7001216437968767987(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "operation", true), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation") && Flags.REMOVE_THIS.isFlagged(_context, SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true));
  }

  public static boolean baseMappingRule_Condition_7001216437968768489(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "operation", true), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && Flags.REMOVE_THIS.isFlagged(_context, SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true));
  }

  public static Object propertyMacro_GetPropertyValue_1201095804027(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, _context.getNode());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201390868590(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, _context.getNode());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201390896232(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, _context.getNode());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201204858049(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String) Values.CLOSURE_DATA.get(_context, _context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1201093988343(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String) Values.CLOSURE_DATA.get(_context, SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false));
  }

  public static Object propertyMacro_GetPropertyValue_1207145937389(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1232364347826(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "localVariableDeclaration", true), "name");
  }

  public static Object propertyMacro_GetPropertyValue_6995834834764135577(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "label");
  }

  public static Object propertyMacro_GetPropertyValue_1215605064282(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object propertyMacro_GetPropertyValue_1215605064359(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_void" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1215605064431(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1215605064501(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1215604434612(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object propertyMacro_GetPropertyValue_1215604213955(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_return" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1215604266219(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1215604983516(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1203245282594(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct == null) {
      ct = FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
    }
    List<SNode> imds = SLinkOperations.getTargets(SLinkOperations.getTarget(ct, "classifier", false), "method", true);
    if (ListSequence.fromList(imds).count() > 0) {
      return SPropertyOperations.getString(ListSequence.fromList(imds).getElement(0), "name");
    }
    return null;
  }

  public static Object propertyMacro_GetPropertyValue_1203250798068(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct == null) {
      ct = FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
    }
    List<SNode> imds = SLinkOperations.getTargets(SLinkOperations.getTarget(ct, "classifier", false), "method", true);
    if (ListSequence.fromList(imds).count() > 0) {
      return SPropertyOperations.getString(ListSequence.fromList(imds).getElement(0), "name");
    }
    return null;
  }

  public static Object propertyMacro_GetPropertyValue_1201019320624(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    return (String) Values.CLOSURE_DATA.get(_context, sn);
  }

  public static Object propertyMacro_GetPropertyValue_1201359405039(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1228830321715(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_idx";
  }

  public static Object propertyMacro_GetPropertyValue_1201023446586(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201093772964(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "variable", true);
    return (String) Values.CLOSURE_DATA.get(_context, sn);
  }

  public static Object propertyMacro_GetPropertyValue_1201023446649(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201023446682(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[4];
  }

  public static Object propertyMacro_GetPropertyValue_1201094822855(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201023446713(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201023446743(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201024123512(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201025995317(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201191004478(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201190969333(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201275380390(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201275443501(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1209330086337(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201275469014(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[(labels[2] != -1 ?
      2 :
      3
    )];
  }

  public static Object propertyMacro_GetPropertyValue_1201291955078(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201291955110(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201291955141(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201292912731(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201292912754(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201292912793(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201358206156(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201358877325(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "variable", true);
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201358206210(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201359082835(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "variable", true);
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201358206242(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201359122203(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "variable", true);
    return (String) Values.CLOSURE_DATA.get(_context, sn);
  }

  public static Object propertyMacro_GetPropertyValue_1201359158800(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "variable", true);
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201358206273(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201382497207(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201382561130(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "body", true);
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201382704160(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "defaultBlock", true);
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1202817907518(final IOperationContext operationContext, final PropertyMacroContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "method", true);
    return SPropertyOperations.getString(ListSequence.fromList(mds).getElement(0), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1219934143451(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_" + SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1228820677249(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1228820677287(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "variable", true);
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_idx";
  }

  public static Object propertyMacro_GetPropertyValue_1228820677312(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1228822442185(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "variable", true);
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_idx";
  }

  public static Object propertyMacro_GetPropertyValue_1228820677368(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1228828011715(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "variable", true);
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_idx";
  }

  public static Object propertyMacro_GetPropertyValue_1228827778374(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), "variable", true);
    return (String) Values.CLOSURE_DATA.get(_context, sn);
  }

  public static Object propertyMacro_GetPropertyValue_1228820677446(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1229880126035(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object propertyMacro_GetPropertyValue_1229880126160(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_void_void" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1229880126232(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1229880126242(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232027809704(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object propertyMacro_GetPropertyValue_1232027809831(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_return_void" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1232027809904(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232027809914(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232027816104(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object propertyMacro_GetPropertyValue_1232027816231(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_void_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1232027816304(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232027816314(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232027821341(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object propertyMacro_GetPropertyValue_1232027821468(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1232027821541(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232027821551(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1230041818707(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object propertyMacro_GetPropertyValue_1229880697850(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_void_void" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1229880447994(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1229880448004(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1229880448063(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_void_void" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1232028918519(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object propertyMacro_GetPropertyValue_1232028919161(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_return_void" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1232028919310(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232028919320(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232028919379(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_return_void" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1232028932371(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object propertyMacro_GetPropertyValue_1232028933012(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_void_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1232028933162(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232028933172(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232028933231(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_void_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1232028943689(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object propertyMacro_GetPropertyValue_1232028944331(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_1232028944480(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232028944490(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object propertyMacro_GetPropertyValue_1232028944549(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "_return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object propertyMacro_GetPropertyValue_6995834834764138416(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label");
    if (label == null) {
      label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label");
    }
    return label;
  }

  public static Object propertyMacro_GetPropertyValue_6995834834764138196(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label");
    if (label == null) {
      label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label");
    }
    return label;
  }

  public static Object propertyMacro_GetPropertyValue_6995834834764138674(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label");
    if (label == null) {
      label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label");
    }
    return label;
  }

  public static Object propertyMacro_GetPropertyValue_6995834834764138700(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label");
    if (label == null) {
      label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label");
    }
    return label;
  }

  public static Object propertyMacro_GetPropertyValue_7246115176735005575(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label");
    if (label == null) {
      label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label");
    }
    return label;
  }

  public static Object propertyMacro_GetPropertyValue_7246115176735005601(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label");
    if (label == null) {
      label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label");
    }
    return label;
  }

  public static Object propertyMacro_GetPropertyValue_7246115176735007685(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label");
    if (label == null) {
      label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label");
    }
    return label;
  }

  public static Object propertyMacro_GetPropertyValue_7246115176735007711(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label");
    if (label == null) {
      label = SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label");
    }
    return label;
  }

  public static Object propertyMacro_GetPropertyValue_8424084437048109312(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode adaptable = (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
    String adapterName = FunctionTypeUtil.getAdapterName(adaptable, _context.getNode());
    Map<String, List<SNode>> adaptersMultiMap = (Map<String, List<SNode>>) _context.getStepObject("adapters_map");
    List<SNode> adaptersList = MapSequence.fromMap(adaptersMultiMap).get(adapterName);
    int idx = ListSequence.fromList(adaptersList).indexOf(adaptable);
    return (idx > 0 ?
      adapterName + "_" + idx :
      adapterName
    );
  }

  public static Object propertyMacro_GetPropertyValue_4314010248456483474(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "param" + (1 + SNodeOperations.getIndexInParent(_context.getNode()));
  }

  public static Object propertyMacro_GetPropertyValue_4314010248456483562(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "param" + (1 + SNodeOperations.getIndexInParent(_context.getNode()));
  }

  public static Object propertyMacro_GetPropertyValue_8424084437048109642(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode adaptable = (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
    return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(adaptable, "method", true)).getElement(0), "name");
  }

  public static Object propertyMacro_GetPropertyValue_8424084437048109670(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "method", true)).getElement(0), "name");
  }

  public static Object propertyMacro_GetPropertyValue_8424084437048109689(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode adaptable = (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
    String adapterName = FunctionTypeUtil.getAdapterName(adaptable, _context.getNode());
    Map<String, List<SNode>> adaptersMultiMap = (Map<String, List<SNode>>) _context.getStepObject("adapters_map");
    List<SNode> adaptersList = MapSequence.fromMap(adaptersMultiMap).get(adapterName);
    int idx = ListSequence.fromList(adaptersList).indexOf(adaptable);
    return (idx > 0 ?
      adapterName + "_" + idx :
      adapterName
    );
  }

  public static Object propertyMacro_GetPropertyValue_8424084437048109930(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "P" + (1 + SNodeOperations.getIndexInParent(_context.getNode()));
  }

  public static Object propertyMacro_GetPropertyValue_608109309169759696(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName("_yield", SNodeOperations.getAncestorWhereConceptInList(_context.getNode(), new String[]{"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", "jetbrains.mps.baseLanguage.structure.IStatementListContainer"}, false, false));
  }

  public static Object propertyMacro_GetPropertyValue_7001216437968768004(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"), "fieldDeclaration", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_7001216437968776047(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"), "baseMethodDeclaration", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_2857237956452593640(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.as(ClassifierTypeUtil.getTypeCoercedToClassifierType(FunctionMethodDeclaration_Behavior.call_functionType_2857237956452412451(_context.getNode())), "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false), "method", true)).first(), "name");
  }

  public static Object referenceMacro_GetReferent_1215446201280(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes." + FunctionTypeUtil.getRuntimeSignature(_context.getNode());
  }

  public static Object referenceMacro_GetReferent_1216995176870(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode trg = FunctionTypeUtil.getAdaptableTarget(_context, _context.getNode(), ((TemplateQueryContext) _context).getGenerator());
    if ((trg != null)) {
      SNode cc = _context.getOutputNodeByInputNodeAndMappingLabel(trg, "classifierType_adapter");
      List<SNode> cds = SLinkOperations.getTargets(cc, "constructor", true);
      return ListSequence.fromList(cds).getElement(0);
    }
    _context.showErrorMessage(_context.getNode(), "Adaptable target not found");
    return null;
  }

  public static Object referenceMacro_GetReferent_1215605064274(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1215605064347(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1215604429123(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1215604507916(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1199624866931(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      return SLinkOperations.getTarget(ct, "classifier", false);
    }
    return SLinkOperations.getTarget(FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType")), "classifier", false);
  }

  public static Object referenceMacro_GetReferent_1203682419133(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct == null || !(Values.RETURN_TYPE.isSet(_context, ct))) {
      return SLinkOperations.getTarget(new QueriesGenerated.QuotationClass_x583g4_a0a0a2a212().createNode(), "classifier", false);
    } else {
      Object retClassifier = Values.RETURN_TYPE.get(_context, ct);
      return SLinkOperations.getTarget(((SNode) retClassifier), "classifier", false);
    }
  }

  public static Object referenceMacro_GetReferent_1201044570620(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      return SLinkOperations.getTarget(ct, "classifier", false);
    }
    return SLinkOperations.getTarget(FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType")), "classifier", false);
  }

  public static Object referenceMacro_GetReferent_1202817833286(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "classifier", false);
  }

  public static Object referenceMacro_GetReferent_1219933427796(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_1219933453744(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_1219933477557(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_1219933487986(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_1219933498230(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_1219933514963(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_1219933526632(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_1219933537757(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_1219933549977(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_1219933916703(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_1229880126027(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1229880126100(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232136763735(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232136770170(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232136774111(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232136677524(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232136683998(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232136689033(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232027809695(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232027809768(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232136183719(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232136219170(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232136024190(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232027816096(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232027816168(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232027821333(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232027821405(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1230041818699(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139346407(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object referenceMacro_GetReferent_1230041818848(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1230041147548(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._void_void" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1230041147569(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1230041147629(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139304689(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139304749(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139304808(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232139333289(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139333349(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139333408(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232028918511(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139274014(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object referenceMacro_GetReferent_1232028918658(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232028918722(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_void" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232028918744(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232028918804(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139233480(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139233540(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139233599(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232139262175(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139262235(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139262294(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232028932363(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139210823(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object referenceMacro_GetReferent_1232028932510(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232028932573(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._void_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232028932595(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232028932655(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232138973264(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232138980152(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232138935820(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232139004854(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139004914(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139004973(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232028943681(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139174398(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value").toLowerCase();
  }

  public static Object referenceMacro_GetReferent_1232028943828(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232028943891(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232028943913(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232028943973(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139050347(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139056285(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139064706(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1232139085863(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139085923(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder"), "value");
  }

  public static Object referenceMacro_GetReferent_1232139085982(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_UnrestrictedFunctionTypes._return_terminate" + "_P" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first") + "_E" + SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second");
  }

  public static Object referenceMacro_GetReferent_1231339526284(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "returnBoolean";
  }

  public static Object referenceMacro_GetReferent_1231339695904(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "returnByte";
  }

  public static Object referenceMacro_GetReferent_1231339492113(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "returnChar";
  }

  public static Object referenceMacro_GetReferent_1231339730258(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "returnDouble";
  }

  public static Object referenceMacro_GetReferent_1231339741795(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "returnFloat";
  }

  public static Object referenceMacro_GetReferent_1231339757644(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "returnInt";
  }

  public static Object referenceMacro_GetReferent_1231339771238(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "returnLong";
  }

  public static Object referenceMacro_GetReferent_1231339782815(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "returnShort";
  }

  public static Object referenceMacro_GetReferent_1231339813906(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "returnObject";
  }

  public static Object referenceMacro_GetReferent_1232019913225(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "terminateBoolean";
  }

  public static Object referenceMacro_GetReferent_1232019913233(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "terminateByte";
  }

  public static Object referenceMacro_GetReferent_1232019913241(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "terminateChar";
  }

  public static Object referenceMacro_GetReferent_1232019913249(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "terminateDouble";
  }

  public static Object referenceMacro_GetReferent_1232019913257(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "terminateFloat";
  }

  public static Object referenceMacro_GetReferent_1232019913265(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "terminateInt";
  }

  public static Object referenceMacro_GetReferent_1232019913273(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "terminateLong";
  }

  public static Object referenceMacro_GetReferent_1232019913281(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "terminateShort";
  }

  public static Object referenceMacro_GetReferent_1232019913288(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "terminateObject";
  }

  public static Object referenceMacro_GetReferent_1232140831660(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(FunctionType_Behavior.call_getRuntimeType_1230319150573(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")), "classifier", false);
  }

  public static Object referenceMacro_GetReferent_8665905049776863599(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return MapSequence.fromMap(RuntimeUtils.getRuntimeClassifiersMap()).get(UnrestrictedFunctionType_Behavior.call_getRuntimeAdapterClassName_1231423631922(type) + "." + FunctionType_Behavior.call_getRuntimeSignature_1213877404927(type));
  }

  public static Object referenceMacro_GetReferent_8665905049776863776(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    SNode cls = MapSequence.fromMap(RuntimeUtils.getRuntimeClassifiersMap()).get(UnrestrictedFunctionType_Behavior.call_getRuntimeAdapterClassName_1231423631922(type) + "." + FunctionType_Behavior.call_getRuntimeSignature_1213877404927(type));
    if (SNodeOperations.isInstanceOf(cls, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      List<SNode> ctrs = SLinkOperations.getTargets(SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "constructor", true);
      if (ctrs != null && ListSequence.fromList(ctrs).count() > 0) {
        return ListSequence.fromList(ctrs).getElement(0);
      }
    }
    return null;
  }

  public static Object referenceMacro_GetReferent_8665905049776865505(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return MapSequence.fromMap(RuntimeUtils.getRuntimeClassifiersMap()).get(UnrestrictedFunctionType_Behavior.call_getRuntimeAdapterClassName_1231423631922(type) + "." + FunctionType_Behavior.call_getRuntimeSignature_1213877404927(type));
  }

  public static Object referenceMacro_GetReferent_8665905049776865734(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    SNode cls = MapSequence.fromMap(RuntimeUtils.getRuntimeClassifiersMap()).get(UnrestrictedFunctionType_Behavior.call_getRuntimeAdapterClassName_1231423631922(type) + "." + FunctionType_Behavior.call_getRuntimeSignature_1213877404927(type));
    if (SNodeOperations.isInstanceOf(cls, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      List<SNode> ctrs = SLinkOperations.getTargets(SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "constructor", true);
      if (ctrs != null && ListSequence.fromList(ctrs).count() > 0) {
        return ListSequence.fromList(ctrs).getElement(0);
      }
    }
    return null;
  }

  public static Object referenceMacro_GetReferent_7246115176735005356(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_tmp_" + _context.getNode().getId();
  }

  public static Object referenceMacro_GetReferent_7246115176735007801(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "_tmp_" + _context.getNode().getId();
  }

  public static Object referenceMacro_GetReferent_8424084437048109268(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
  }

  public static Object referenceMacro_GetReferent_8424084437048109374(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
  }

  public static Object referenceMacro_GetReferent_4314010248456483447(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "P" + (1 + SNodeOperations.getIndexInParent(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false)));
  }

  public static Object referenceMacro_GetReferent_4314010248456269689(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false), "method", true);
    return "T" + (1 + SNodeOperations.getIndexInParent(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(ListSequence.fromList(mds).getElement(0), "returnType", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false)));
  }

  public static Object referenceMacro_GetReferent_4314010248456485942(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "param" + (1 + SNodeOperations.getIndexInParent(_context.getNode()));
  }

  public static Object referenceMacro_GetReferent_8424084437048109805(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_8424084437048115049(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "P" + (1 + SNodeOperations.getIndexInParent(_context.getNode()));
  }

  public static Object referenceMacro_GetReferent_5008999823682208395(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.Classifier");
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    return _context.getOutputNodeByInputNodeAndMappingLabel(MapSequence.fromMap(theMap).get(_context.getNode()), "adaptable_target_tvd");
  }

  public static Object referenceMacro_GetReferent_5008999823682209925(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.Classifier");
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    return _context.getOutputNodeByInputNodeAndMappingLabel(MapSequence.fromMap(theMap).get(_context.getNode()), "adaptable_target_tvd");
  }

  public static Object referenceMacro_GetReferent_608109309169759725(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "yieldAll_for"), "variable", true);
  }

  public static Object referenceMacro_GetReferent_7001216437968760495(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
  }

  public static Object referenceMacro_GetReferent_2857237956452412443(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(ClassifierTypeUtil.getTypeCoercedToClassifierType(FunctionMethodDeclaration_Behavior.call_functionType_2857237956452412451(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration"))), "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false);
  }

  public static boolean ifMacro_Condition_1215446294705(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "resultType", true), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_1215605064512(final IOperationContext operationContext, final IfMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean ifMacro_Condition_1215605038732(final IOperationContext operationContext, final IfMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean ifMacro_Condition_1215457391282(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }

  public static boolean ifMacro_Condition_1215457429074(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct != null;
  }

  public static boolean ifMacro_Condition_1203249920933(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }

  public static boolean ifMacro_Condition_1203249962201(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode ft = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType");
    return (SLinkOperations.getTarget(ft, "resultType", true) != null) && !(SNodeOperations.isInstanceOf(FunctionTypeUtil.unmeet(SLinkOperations.getTarget(ft, "resultType", true)), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_1203250587999(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }

  public static boolean ifMacro_Condition_1215429196709(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }

  public static boolean ifMacro_Condition_1203268216179(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct != null;
  }

  public static boolean ifMacro_Condition_1203251514451(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }

  public static boolean ifMacro_Condition_1203250752443(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }

  public static boolean ifMacro_Condition_1203250743336(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode ft = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType");
    return (SLinkOperations.getTarget(ft, "resultType", true) != null) && !(SNodeOperations.isInstanceOf(FunctionTypeUtil.unmeet(SLinkOperations.getTarget(ft, "resultType", true)), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_1203250784283(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }

  public static boolean ifMacro_Condition_1203267949368(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct != null;
  }

  public static boolean ifMacro_Condition_1201359373031(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.ForeachStatement") && !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.ForeachStatement"), "iterable", true)), "jetbrains.mps.baseLanguage.structure.ArrayType"));
  }

  public static boolean ifMacro_Condition_1228830321695(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.ForeachStatement") && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.ForeachStatement"), "iterable", true)), "jetbrains.mps.baseLanguage.structure.ArrayType");
  }

  public static boolean ifMacro_Condition_1201421585183(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> stmts = (List<SNode>) Values.CHUNK_OF_STATEMENTS.get(_context, _context.getNode());
    return ListSequence.fromList(stmts).count() == 0 || !(SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), "jetbrains.mps.baseLanguage.structure.BreakStatement") || SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), "jetbrains.mps.baseLanguage.structure.ContinueStatement") || SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), "jetbrains.mps.baseLanguage.structure.ThrowStatement"));
  }

  public static boolean ifMacro_Condition_1201421814921(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> stmts = (List<SNode>) Values.CHUNK_OF_STATEMENTS.get(_context, _context.getNode());
    return ListSequence.fromList(stmts).count() == 0 || !(SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), "jetbrains.mps.baseLanguage.structure.BreakStatement") || SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), "jetbrains.mps.baseLanguage.structure.ContinueStatement") || SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), "jetbrains.mps.baseLanguage.structure.ThrowStatement"));
  }

  public static boolean ifMacro_Condition_1201276700612(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) != null) && !(StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true)) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement"));
  }

  public static boolean ifMacro_Condition_1201378781869(final IOperationContext operationContext, final IfMacroContext _context) {
    return !((SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) != null) && !(StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true)) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement")));
  }

  public static boolean ifMacro_Condition_1201378852034(final IOperationContext operationContext, final IfMacroContext _context) {
    return !((SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) != null) && !(StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true)) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement")));
  }

  public static boolean ifMacro_Condition_1201382524702(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "defaultBlock", true) != null);
  }

  public static boolean ifMacro_Condition_1229880126301(final IOperationContext operationContext, final IfMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean ifMacro_Condition_1232027809973(final IOperationContext operationContext, final IfMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean ifMacro_Condition_1232027816373(final IOperationContext operationContext, final IfMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean ifMacro_Condition_1232027821611(final IOperationContext operationContext, final IfMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean ifMacro_Condition_1229880447867(final IOperationContext operationContext, final IfMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean ifMacro_Condition_1232028919180(final IOperationContext operationContext, final IfMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean ifMacro_Condition_1232028933031(final IOperationContext operationContext, final IfMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean ifMacro_Condition_1232028944350(final IOperationContext operationContext, final IfMacroContext _context) {
    return "jetbrains.mps.baseLanguage.closures.runtime".equals(SModelOperations.getModelName(_context.getInputModel()));
  }

  public static boolean ifMacro_Condition_1232141409462(final IOperationContext operationContext, final IfMacroContext _context) {
    return (FunctionType_Behavior.call_getTerminateType_1232032188607(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) != null);
  }

  public static boolean ifMacro_Condition_1232141456167(final IOperationContext operationContext, final IfMacroContext _context) {
    return (FunctionType_Behavior.call_getResultType_1230475757059(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) != null);
  }

  public static boolean ifMacro_Condition_1232624140224(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> stmts = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "body", true), "statement", true);
    return ListSequence.fromList(stmts).count() > 0 && SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), "jetbrains.mps.baseLanguage.structure.ExpressionStatement") && !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), "jetbrains.mps.baseLanguage.structure.ExpressionStatement"), "expression", true)), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_1232140975415(final IOperationContext operationContext, final IfMacroContext _context) {
    return (FunctionType_Behavior.call_getTerminateType_1232032188607(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) != null);
  }

  public static boolean ifMacro_Condition_1232141024321(final IOperationContext operationContext, final IfMacroContext _context) {
    return (FunctionType_Behavior.call_getResultType_1230475757059(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) != null);
  }

  public static boolean ifMacro_Condition_8665905049776863470(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return (FunctionType_Behavior.call_getTerminateType_1232032188607(type) != null);
  }

  public static boolean ifMacro_Condition_8665905049776863535(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return (FunctionType_Behavior.call_getResultType_1230475757059(type) != null);
  }

  public static boolean ifMacro_Condition_8665905049776863647(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return (FunctionType_Behavior.call_getTerminateType_1232032188607(type) != null);
  }

  public static boolean ifMacro_Condition_8665905049776863712(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return (FunctionType_Behavior.call_getResultType_1230475757059(type) != null);
  }

  public static boolean ifMacro_Condition_8665905049776864033(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return (FunctionType_Behavior.call_getResultType_1230475757059(type) != null);
  }

  public static boolean ifMacro_Condition_8665905049776864121(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType")) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "resultType", true), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_8665905049776864151(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "resultType", true), "jetbrains.mps.baseLanguage.structure.VoidType");
  }

  public static boolean ifMacro_Condition_8665905049777027947(final IOperationContext operationContext, final IfMacroContext _context) {
    return ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BreakStatement", false, new String[]{"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock", "jetbrains.mps.baseLanguage.structure.IStatementListContainer"})).isNotEmpty();
  }

  public static boolean ifMacro_Condition_8665905049776865340(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return (FunctionType_Behavior.call_getTerminateType_1232032188607(type) != null);
  }

  public static boolean ifMacro_Condition_8665905049776865423(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return (FunctionType_Behavior.call_getResultType_1230475757059(type) != null);
  }

  public static boolean ifMacro_Condition_8665905049776865562(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return (FunctionType_Behavior.call_getTerminateType_1232032188607(type) != null);
  }

  public static boolean ifMacro_Condition_8665905049776865652(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return (FunctionType_Behavior.call_getResultType_1230475757059(type) != null);
  }

  public static boolean ifMacro_Condition_8665905049776865971(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return (FunctionType_Behavior.call_getResultType_1230475757059(type) != null);
  }

  public static boolean ifMacro_Condition_8665905049776866077(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType")) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "resultType", true), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_8665905049776866107(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "resultType", true), "jetbrains.mps.baseLanguage.structure.VoidType");
  }

  public static boolean ifMacro_Condition_6995834834764138783(final IOperationContext operationContext, final IfMacroContext _context) {
    return ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BreakStatement", false, new String[]{"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock", "jetbrains.mps.baseLanguage.structure.IStatementListContainer"})).isNotEmpty();
  }

  public static boolean ifMacro_Condition_7246115176735005221(final IOperationContext operationContext, final IfMacroContext _context) {
    return (FunctionType_Behavior.call_getTerminateType_1232032188607(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) != null);
  }

  public static boolean ifMacro_Condition_7246115176735005714(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_7246115176735005742(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType");
  }

  public static boolean ifMacro_Condition_7246115176735005348(final IOperationContext operationContext, final IfMacroContext _context) {
    return false;
  }

  public static boolean ifMacro_Condition_7246115176735005381(final IOperationContext operationContext, final IfMacroContext _context) {
    return Flags.PRODUCES_VALUE.isFlagged(_context, _context.getNode());
  }

  public static boolean ifMacro_Condition_7246115176735005390(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_7246115176735005405(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.structure.VoidType");
  }

  public static boolean ifMacro_Condition_7246115176735007564(final IOperationContext operationContext, final IfMacroContext _context) {
    return (FunctionType_Behavior.call_getTerminateType_1232032188607(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "function", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) != null);
  }

  public static boolean ifMacro_Condition_7246115176735007637(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_7246115176735007665(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType");
  }

  public static boolean ifMacro_Condition_7246115176735007793(final IOperationContext operationContext, final IfMacroContext _context) {
    return false;
  }

  public static boolean ifMacro_Condition_7246115176735007826(final IOperationContext operationContext, final IfMacroContext _context) {
    return Flags.PRODUCES_VALUE.isFlagged(_context, _context.getNode());
  }

  public static boolean ifMacro_Condition_7246115176735007835(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static boolean ifMacro_Condition_7246115176735007850(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.structure.VoidType");
  }

  public static boolean ifMacro_Condition_4314010248456452405(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference"));
  }

  public static boolean ifMacro_Condition_4314010248456269585(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "method", true)).getElement(0), "returnType", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference"));
  }

  public static boolean ifMacro_Condition_4523732754034692465(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.Classifier");
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    SNode retType = SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(adaptable, "method", true)).getElement(0), "returnType", true);
    return SNodeOperations.isInstanceOf(retType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference") && SLinkOperations.getTarget(SNodeOperations.as(retType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false) == _context.getNode() && (MapSequence.fromMap(theMap).get(_context.getNode()) != null);
  }

  public static boolean ifMacro_Condition_5008999823682208465(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.Classifier");
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    SNode retType = SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(adaptable, "method", true)).getElement(0), "returnType", true);
    return SNodeOperations.isInstanceOf(retType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference") && SLinkOperations.getTarget(SNodeOperations.as(retType, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false) == _context.getNode() && (MapSequence.fromMap(theMap).get(_context.getNode()) == null);
  }

  public static boolean ifMacro_Condition_5008999823682208577(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.Classifier");
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    SNode parmType = ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(adaptable, "method", true)).getElement(0), "parameter", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode pd) {
        return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(pd, "type", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false) == _context.getNode();
      }
    });
    return (parmType != null) && (MapSequence.fromMap(theMap).get(_context.getNode()) != null);
  }

  public static boolean ifMacro_Condition_5008999823682210148(final IOperationContext operationContext, final IfMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.Classifier");
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    SNode parmType = ListSequence.fromList(SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(adaptable, "method", true)).getElement(0), "parameter", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode pd) {
        return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(pd, "type", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false) == _context.getNode();
      }
    });
    return (parmType != null) && (MapSequence.fromMap(theMap).get(_context.getNode()) == null);
  }

  public static boolean ifMacro_Condition_608109309169759689(final IOperationContext operationContext, final IfMacroContext _context) {
    return true;
  }

  public static boolean ifMacro_Condition_2857237956452627653(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType"));
  }

  public static SNode sourceNodeQuery_1201204863526(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_5451047975132812783(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "localVariableDeclaration", true);
  }

  public static SNode sourceNodeQuery_1207147314257(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false), "type", true);
  }

  public static SNode sourceNodeQuery_1219934508829(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false), "type", true);
  }

  public static SNode sourceNodeQuery_1215452022890(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(_context.getNode());
  }

  public static SNode sourceNodeQuery_1230473387093(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(_context.getNode());
  }

  public static SNode sourceNodeQuery_1215446297577(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(_context.getNode());
  }

  public static SNode sourceNodeQuery_1215446402993(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_1215446443664(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_1199644437387(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "function", true)), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"), "resultType", true);
  }

  public static SNode sourceNodeQuery_1199646374717(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "function", true);
  }

  public static SNode sourceNodeQuery_7246115176735007954(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "function", true);
  }

  public static SNode sourceNodeQuery_5296136527852385369(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "function", true)), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"), "resultType", true);
  }

  public static SNode sourceNodeQuery_55412175018273790(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression"), "function", true);
  }

  public static SNode sourceNodeQuery_55412175018273798(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression"), "function", true)), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"), "resultType", true);
  }

  public static SNode sourceNodeQuery_872684720293964757(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1231340548939(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "operand", true);
  }

  public static SNode sourceNodeQuery_5296136527852363034(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"), "resultType", true);
  }

  public static SNode sourceNodeQuery_1232469628886(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "controlClosure", true);
  }

  public static SNode sourceNodeQuery_1232364329579(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "localVariableDeclaration", true), "type", true);
  }

  public static SNode sourceNodeQuery_1232364377615(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    Flags.NEEDS_INITIALIZER.clear(_context, SLinkOperations.getTarget(_context.getNode(), "localVariableDeclaration", true));
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "localVariableDeclaration", true), "type", true);
  }

  public static SNode sourceNodeQuery_181303132969132982(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_181303132969132993(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1231495175425(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1232140938694(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1232141073364(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    Flags.TERMINATE.flag(_context, _context.getNode());
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_1199712173382(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false)), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"), "resultType", true);
  }

  public static SNode sourceNodeQuery_1216995176860(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    Values.POST_DATA.set(_context, _context.getNode(), "done");
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_4314010248456917521(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return ClassifierTypeUtil.copyTypeRecursively(_context.getNode());
  }

  public static SNode sourceNodeQuery_1199624915150(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      List<SNode> imds = SLinkOperations.getTargets(SLinkOperations.getTarget(ct, "classifier", false), "method", true);
      if (ListSequence.fromList(imds).count() > 0) {
        return FunctionTypeUtil.unbound(ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(ListSequence.fromList(imds).getElement(0), "returnType", true), ct));
      }
    }
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))));
  }

  public static SNode sourceNodeQuery_1199625045481(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1215429260858(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unbound(_context.getNode());
  }

  public static SNode sourceNodeQuery_1203249955325(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))));
  }

  public static SNode sourceNodeQuery_1203250576826(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1201045061496(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1213877405260(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
  }

  public static SNode sourceNodeQuery_1201435446113(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unbound(FunctionTypeUtil.unmeet(FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1213877405260(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))));
  }

  public static SNode sourceNodeQuery_1203251634844(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      List<SNode> imds = SLinkOperations.getTargets(SLinkOperations.getTarget(ct, "classifier", false), "method", true);
      if (ListSequence.fromList(imds).count() > 0) {
        return FunctionTypeUtil.unbound(ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(ListSequence.fromList(imds).getElement(0), "returnType", true), ct));
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1203250738235(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unbound(FunctionTypeUtil.unmeet(FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))));
  }

  public static SNode sourceNodeQuery_1203250773532(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(_context.getNode());
  }

  public static SNode sourceNodeQuery_1201019303193(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "type", true);
  }

  public static SNode sourceNodeQuery_1201359394958(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return ClassifierTypeUtil.getTypeCoercedToClassifierType(SLinkOperations.getTarget(_context.getNode(), "type", true));
  }

  public static SNode sourceNodeQuery_1201093791966(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "variable", true), "initializer", true);
  }

  public static SNode sourceNodeQuery_1201023446671(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201023446733(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "iteration", true);
  }

  public static SNode sourceNodeQuery_1201026062018(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1201275418502(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201279870277(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true);
  }

  public static SNode sourceNodeQuery_1209330067919(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201292104349(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201292912783(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201360662183(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "iterable", true);
  }

  public static SNode sourceNodeQuery_1201382468148(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1201382502829(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1201863520535(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1213877405260(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
  }

  public static SNode sourceNodeQuery_1202817864202(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "method", true);
    return SLinkOperations.getTarget(ListSequence.fromList(mds).getElement(0), "returnType", true);
  }

  public static SNode sourceNodeQuery_1202818062914(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode cl = (SNode) Values.LITERAL.get(_context, _context.getNode());
    return SLinkOperations.getTarget(cl, "body", true);
  }

  public static SNode sourceNodeQuery_1207146412156(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1207146621008(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1207146446408(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1207146459756(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1207146473717(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1207146483999(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1207146505515(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1207146608406(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1215557564777(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "type", true);
  }

  public static SNode sourceNodeQuery_1215557564769(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1219933598943(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "type", true);
  }

  public static SNode sourceNodeQuery_1207146647758(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      return SLinkOperations.getTarget(_context.getNode(), "type", true);
    }
    return TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(_context.getNode(), "type", true), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true);
  }

  public static SNode sourceNodeQuery_1207146630675(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1219933878453(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "type", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      return SLinkOperations.getTarget(_context.getNode(), "type", true);
    }
    return TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(_context.getNode(), "type", true), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true);
  }

  public static SNode sourceNodeQuery_1215557494551(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "type", true);
  }

  public static SNode sourceNodeQuery_1207146792615(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(_context.getNode(), "type", true), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true);
  }

  public static SNode sourceNodeQuery_1228829827817(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "iterable", true);
  }

  public static SNode sourceNodeQuery_1228829849416(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "iterable", true);
  }

  public static SNode sourceNodeQuery_1232141443472(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedTerminateType_1232036646585(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static SNode sourceNodeQuery_1232141460467(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static SNode sourceNodeQuery_7366956077673364259(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1232140955164(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedTerminateType_1232036646585(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static SNode sourceNodeQuery_1232141008487(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static SNode sourceNodeQuery_1232141100050(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(_context.getNode());
  }

  public static SNode sourceNodeQuery_8665905049776863503(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return FunctionType_Behavior.call_getNormalizedTerminateType_1232036646585(type);
  }

  public static SNode sourceNodeQuery_8665905049776863568(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(type);
  }

  public static SNode sourceNodeQuery_8665905049776863641(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_8665905049776863680(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return FunctionType_Behavior.call_getNormalizedTerminateType_1232036646585(type);
  }

  public static SNode sourceNodeQuery_8665905049776863745(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(type);
  }

  public static SNode sourceNodeQuery_8665905049776863904(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement", false, false);
  }

  public static SNode sourceNodeQuery_8665905049776864068(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), "controlMethod", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(parameters).count() - 1), "type", true);
    return FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(type);
  }

  public static SNode sourceNodeQuery_8665905049776864109(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true);
  }

  public static SNode sourceNodeQuery_8665905049776865382(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return FunctionType_Behavior.call_getNormalizedTerminateType_1232036646585(type);
  }

  public static SNode sourceNodeQuery_8665905049776865465(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(type);
  }

  public static SNode sourceNodeQuery_8665905049776865556(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_8665905049776865604(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    FunctionType_Behavior.call_getNormalizedTerminateType_1232036646585(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return FunctionType_Behavior.call_getNormalizedTerminateType_1232036646585(type);
  }

  public static SNode sourceNodeQuery_8665905049776865694(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(type);
  }

  public static SNode sourceNodeQuery_8665905049776865957(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodCall", false, false);
  }

  public static SNode sourceNodeQuery_8665905049776866015(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    List<SNode> siblings = SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "actualArgument", true);
    List<SNode> parameters = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), "baseMethodDeclaration", false), "parameter", true);
    SNode type = SLinkOperations.getTarget(ListSequence.fromList(parameters).getElement(ListSequence.fromList(siblings).indexOf(_context.getNode())), "type", true);
    return FunctionType_Behavior.call_getNormalizedReturnType_1213877405252(type);
  }

  public static SNode sourceNodeQuery_8665905049776866065(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true);
  }

  public static SNode sourceNodeQuery_7246115176735005209(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedTerminateType_1232036646585(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static SNode sourceNodeQuery_7246115176735005252(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "terminateType", true);
  }

  public static SNode sourceNodeQuery_7246115176735005265(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "resultType", true);
  }

  public static SNode sourceNodeQuery_7246115176735005278(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "operand", true);
  }

  public static SNode sourceNodeQuery_7246115176735005730(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true);
  }

  public static SNode sourceNodeQuery_7246115176735005369(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "terminateType", true);
  }

  public static SNode sourceNodeQuery_7246115176735007552(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedTerminateType_1232036646585(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "function", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static SNode sourceNodeQuery_7246115176735007595(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "function", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "terminateType", true);
  }

  public static SNode sourceNodeQuery_7246115176735007608(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "function", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "resultType", true);
  }

  public static SNode sourceNodeQuery_7246115176735007621(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "function", true);
  }

  public static SNode sourceNodeQuery_7246115176735007653(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "returnType", true);
  }

  public static SNode sourceNodeQuery_7246115176735007814(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "terminateType", true);
  }

  public static SNode sourceNodeQuery_4314010248456483503(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "type", true);
  }

  public static SNode sourceNodeQuery_4314010248456269651(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "method", true)).getElement(0), "returnType", true);
  }

  public static SNode sourceNodeQuery_608109309169759611(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_608109309169980431(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode st;
    SNode t = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "expression", true));
    st = TypeChecker.getInstance().getRuntimeSupport().coerce_(t, HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"), true);
    if ((st == null)) {
      st = TypeChecker.getInstance().getRuntimeSupport().coerce_(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(t, "jetbrains.mps.lang.typesystem.structure.JoinType"), "argument", true)).getElement(0), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"), true);
    }
    if ((st == null)) {
      st = TypeChecker.getInstance().getRuntimeSupport().coerce_(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(t, "jetbrains.mps.lang.typesystem.structure.JoinType"), "argument", true)).getElement(1), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.collections.structure.SequenceType"), true);
    }
    return SLinkOperations.getTarget(st, "elementType", true);
  }

  public static SNode sourceNodeQuery_9117832275706131042(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_7001216437968768472(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"), "fieldDeclaration", false), "type", true);
  }

  public static SNode sourceNodeQuery_7001216437968768502(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"), "baseMethodDeclaration", false), "returnType", true);
  }

  public static SNode sourceNodeQuery_2857237956452593591(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_2857237956452627682(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return ClassifierTypeUtil.getTypeCoercedToClassifierType(SLinkOperations.getTarget(_context.getNode(), "returnType", true));
  }

  public static Iterable sourceNodesQuery_1219916821059(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "parameter", true);
    for (SNode p : SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "parameter", true)) {
      if (Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, p)) {
        ListSequence.fromList(res).addElement(p);
      }
    }
    return res;
  }

  public static Iterable sourceNodesQuery_1219916707161(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "statement", true);
  }

  public static Iterable sourceNodesQuery_1215446400341(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(_context.getNode());
  }

  public static Iterable sourceNodesQuery_1215446433989(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionType_Behavior.call_getNormalizedThrowsTypes_3448422702164385781(_context.getNode());
  }

  public static Iterable sourceNodesQuery_1199644424783(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable sourceNodesQuery_7246115176735007933(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable sourceNodesQuery_55412175018273782(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "expression", true), "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression"), "parameter", true);
  }

  public static Iterable sourceNodesQuery_1231340548915(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "operation", true), "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation"), "parameter", true);
  }

  public static Iterable sourceNodesQuery_1199712173374(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable sourceNodesQuery_4314010248456881346(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode trg = FunctionTypeUtil.getAdaptableTarget(_context, _context.getNode(), ((TemplateQueryContext) _context).getGenerator());
    SNode ntype = FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
    ntype = (ntype == null ?
      TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(_context.getNode()), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true) :
      ntype
    );
    final Map<SNode, SNode> theMap = FunctionTypeUtil.mapAdaptableTargetTVDs(SLinkOperations.getTarget(SNodeOperations.cast(ntype, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false), trg);
    final List<SNode> params = SLinkOperations.getTargets(SNodeOperations.cast(ntype, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true);
    return ListSequence.fromList(SLinkOperations.getTargets(trg, "typeVariableDeclaration", true)).select(new ISelector<SNode, IMapping<SNode, SNode>>() {
      public IMapping<SNode, SNode> select(final SNode tvd) {
        return MapSequence.fromMap(theMap).findFirst(new IWhereFilter<IMapping<SNode, SNode>>() {
          public boolean accept(IMapping<SNode, SNode> m) {
            return m.value() == tvd;
          }
        });
      }
    }).where(new IWhereFilter<IMapping<SNode, SNode>>() {
      public boolean accept(IMapping<SNode, SNode> m) {
        return m != null;
      }
    }).select(new ISelector<IMapping<SNode, SNode>, SNode>() {
      public SNode select(IMapping<SNode, SNode> m) {
        return ListSequence.fromList(params).getElement(SNodeOperations.getIndexInParent(m.key()));
      }
    });
  }

  public static Iterable sourceNodesQuery_1215605064292(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1215605177163(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1215605064379(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1215605172278(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1215605064522(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int params = 0; params <= Constants.MAX_CLOSURE_PARAMETERS; params++) {
      for (int exceps = 0; exceps <= Constants.MAX_CLOSURE_EXCEPTIONS; exceps++) {
        SNode poi = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
        SPropertyOperations.set(poi, "first", "" + params);
        SPropertyOperations.set(poi, "second", "" + exceps);
        ListSequence.fromList(result).addElement(poi);
      }
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1215605025102(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1215605125444(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1215604254028(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1215605145584(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1215604550393(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int params = 0; params <= Constants.MAX_CLOSURE_PARAMETERS; params++) {
      for (int exceps = 0; exceps <= Constants.MAX_CLOSURE_EXCEPTIONS; exceps++) {
        SNode poi = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
        SPropertyOperations.set(poi, "first", "" + params);
        SPropertyOperations.set(poi, "second", "" + exceps);
        ListSequence.fromList(result).addElement(poi);
      }
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1199624932349(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    int idx = 0;
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode ft : FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))) {
      SNode pd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
      SLinkOperations.setTarget(pd, "type", SNodeOperations.copyNode(FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(ft))), true);
      SPropertyOperations.set(pd, "name", SPropertyOperations.getString(ListSequence.fromList(paramDecls).getElement(idx), "name"));
      SPropertyOperations.set(pd, "isFinal", "" + (SPropertyOperations.getBoolean(ListSequence.fromList(paramDecls).getElement(idx), "isFinal")));
      idx++;
      ListSequence.fromList(res).addElement(pd);
    }
    return res;
  }

  public static Iterable sourceNodesQuery_1215457425734(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      List<SNode> imds = SLinkOperations.getTargets(SLinkOperations.getTarget(ct, "classifier", false), "method", true);
      if (ListSequence.fromList(imds).count() > 0) {
        SNode imd = ListSequence.fromList(imds).getElement(0);
        List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
        int idx = 0;
        for (SNode pd : SLinkOperations.getTargets(imd, "parameter", true)) {
          if (idx >= ListSequence.fromList(paramDecls).count()) {
            _context.showErrorMessage(_context.getNode(), "Method parameters count doesn't match closure parameters count: " + SPropertyOperations.getString(imd, "shortDescription"));
            break;
          }
          SNode newpd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
          SLinkOperations.setTarget(newpd, "type", FunctionTypeUtil.unbound(ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(pd, "type", true), ct)), true);
          SPropertyOperations.set(newpd, "name", SPropertyOperations.getString(ListSequence.fromList(paramDecls).getElement(idx), "name"));
          SPropertyOperations.set(newpd, "isFinal", "" + (SPropertyOperations.getBoolean(ListSequence.fromList(paramDecls).getElement(idx), "isFinal")));
          idx++;
          ListSequence.fromList(res).addElement(newpd);
        }
        return res;
      }
    }
    return ListSequence.fromList(new ArrayList<SNode>());
  }

  public static Iterable sourceNodesQuery_1215429255567(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      List<SNode> imds = SLinkOperations.getTargets(SLinkOperations.getTarget(ct, "classifier", false), "method", true);
      if (ListSequence.fromList(imds).count() > 0) {
        SNode imd = ListSequence.fromList(imds).getElement(0);
        List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
        for (SNode tt : SLinkOperations.getTargets(imd, "throwsItem", true)) {
          ListSequence.fromList(res).addElement(ClassifierTypeUtil.resolveType(tt, ct));
        }
        return res;
      }
    }
    return FunctionType_Behavior.call_getNormalizedThrowsTypes_3448422702164385781(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
  }

  public static Iterable sourceNodesQuery_1203250582108(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
  }

  public static Iterable sourceNodesQuery_1231260332201(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionType_Behavior.call_getNormalizedThrowsTypes_3448422702164385781(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
  }

  public static Iterable sourceNodesQuery_1203268224153(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode pt : SLinkOperations.getTargets(ct, "parameter", true)) {
      ListSequence.fromList(res).addElement(FunctionTypeUtil.unbound(pt));
    }
    return res;
  }

  public static Iterable sourceNodesQuery_1201044612684(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    int idx = 0;
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode ft : FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))) {
      SNode pd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
      SLinkOperations.setTarget(pd, "type", SNodeOperations.copyNode(FunctionTypeUtil.unmeet(ft)), true);
      SPropertyOperations.set(pd, "name", SPropertyOperations.getString(ListSequence.fromList(paramDecls).getElement(idx), "name"));
      SPropertyOperations.set(pd, "isFinal", "" + (true));
      ListSequence.fromList(res).addElement(pd);
      idx++;
    }
    return res;
  }

  public static Iterable sourceNodesQuery_1203686370624(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (true || ct == null || !(Values.RETURN_TYPE.isSet(_context, ct))) {
      return ListSequence.fromListAndArray(new ArrayList<SNode>(), FunctionTypeUtil.unmeet(FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1213877405260(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))));
    } else {
      Object retClassifier = Values.RETURN_TYPE.get(_context, ct);
      return SLinkOperations.getTargets(((SNode) retClassifier), "parameter", true);
    }
  }

  public static Iterable sourceNodesQuery_1203250778897(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
  }

  public static Iterable sourceNodesQuery_1203268050251(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode pt : SLinkOperations.getTargets(ct, "parameter", true)) {
      ListSequence.fromList(res).addElement(FunctionTypeUtil.unbound(pt));
    }
    return res;
  }

  public static Iterable sourceNodesQuery_1226054358909(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return (List<SNode>) Values.CHUNK_OF_STATEMENTS.get(_context, _context.getNode());
  }

  public static Iterable sourceNodesQuery_1201187449746(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    int BEGIN = labels[0];
    int END = labels[1];
    List<SNode> results = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode());
    do {
      int beginLabel = BEGIN;
      int endLabel = END;
      SNode lastStmt = null;
      SNode slist = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList", null);
      List<SNode> chunk = ListSequence.fromList(new ArrayList<SNode>());
      Values.CHUNK_OF_STATEMENTS.set(_context, slist, chunk);
      for (SNode stmt : stmts) {
        ListSequence.fromList(chunk).addElement(stmt);
        lastStmt = stmt;
      }
      SNode cstmt;
      if ((lastStmt != null)) {
        cstmt = StatementListUtil.nextSibling(lastStmt);
      } else {
        List<SNode> allstmts = (List<SNode>) SLinkOperations.getTargets(_context.getNode(), "statement", true);
        cstmt = (ListSequence.fromList(allstmts).count() > 0 ?
          ListSequence.fromList(allstmts).getElement(0) :
          null
        );
      }
      stmts = null;
      if ((cstmt != null)) {
        labels = (Integer[]) Values.CLOSURE_DATA.get(_context, cstmt);
        endLabel = (labels != null ?
          labels[0] :
          -1
        );
        lastStmt = StatementListUtil.nextSibling(cstmt);
        while ((lastStmt != null)) {
          stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode(), lastStmt);
          if (ListSequence.fromList(stmts).count() == 0) {
            cstmt = lastStmt;
            lastStmt = StatementListUtil.nextSibling(lastStmt);
          } else {
            labels = (Integer[]) Values.CLOSURE_DATA.get(_context, cstmt);
            BEGIN = (labels != null ?
              labels[labels.length - 1] :
              -1
            );
            break;
          }
        }
      }
      ListSequence.fromList(results).addElement(slist);
      Object data = new Integer[]{beginLabel, endLabel};
      Values.CLOSURE_DATA.set(_context, slist, data);
    } while (stmts != null && ListSequence.fromList(stmts).count() > 0);
    return results;
  }

  public static Iterable sourceNodesQuery_1209329471483(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "elsifClauses", true);
  }

  public static Iterable sourceNodesQuery_1201382476594(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "case", true);
  }

  public static Iterable sourceNodesQuery_1202817925990(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> mds = SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "method", true);
    int idx = 0;
    List<SNode> ptypes = SLinkOperations.getTargets(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true);
    SNode cl = (SNode) Values.LITERAL.get(_context, _context.getNode());
    List<SNode> litParams = SLinkOperations.getTargets(cl, "parameter", true);
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode pdecl : SLinkOperations.getTargets(ListSequence.fromList(mds).getElement(0), "parameter", true)) {
      SNode pd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
      SNode ptype = SLinkOperations.getTarget(pdecl, "type", true);
      if (SNodeOperations.isInstanceOf(ptype, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
        List<SNode> psib = SNodeOperations.getPrevSiblings(SLinkOperations.getTarget(SNodeOperations.cast(ptype, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false), false);
        SLinkOperations.setTarget(pd, "type", ClassifierTypeUtil.copyTypeRecursively(ListSequence.fromList(ptypes).getElement(ListSequence.fromList(psib).count())), true);
      } else {
        SLinkOperations.setTarget(pd, "type", SNodeOperations.copyNode(ptype), true);
      }
      SPropertyOperations.set(pd, "name", SPropertyOperations.getString(ListSequence.fromList(litParams).getElement(idx), "name"));
      idx++;
      ListSequence.fromList(res).addElement(pd);
    }
    return res;
  }

  public static Iterable sourceNodesQuery_1202821929244(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> ptypes = SLinkOperations.getTargets(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true);
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode pt : ptypes) {
      ListSequence.fromList(result).addElement(ClassifierTypeUtil.copyTypeRecursively(pt));
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1229880126045(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1229880126108(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1229880126181(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1229880126250(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1229880126313(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int params = 0; params <= Constants.MAX_CLOSURE_PARAMETERS; params++) {
      for (int exceps = 0; exceps <= Constants.MAX_CLOSURE_EXCEPTIONS; exceps++) {
        SNode poi = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
        SPropertyOperations.set(poi, "first", "" + params);
        SPropertyOperations.set(poi, "second", "" + exceps);
        ListSequence.fromList(result).addElement(poi);
      }
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232136763743(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232136770178(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232136677532(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232136684006(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027809714(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027809776(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027809853(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027809922(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027809985(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int params = 0; params <= Constants.MAX_CLOSURE_PARAMETERS; params++) {
      for (int exceps = 0; exceps <= Constants.MAX_CLOSURE_EXCEPTIONS; exceps++) {
        SNode poi = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
        SPropertyOperations.set(poi, "first", "" + params);
        SPropertyOperations.set(poi, "second", "" + exceps);
        ListSequence.fromList(result).addElement(poi);
      }
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232136190675(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232136219178(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027816114(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027816176(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027816253(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027816322(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027816385(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int params = 0; params <= Constants.MAX_CLOSURE_PARAMETERS; params++) {
      for (int exceps = 0; exceps <= Constants.MAX_CLOSURE_EXCEPTIONS; exceps++) {
        SNode poi = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
        SPropertyOperations.set(poi, "first", "" + params);
        SPropertyOperations.set(poi, "second", "" + exceps);
        ListSequence.fromList(result).addElement(poi);
      }
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027821351(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027821413(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027821490(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027821559(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232027821623(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int params = 0; params <= Constants.MAX_CLOSURE_PARAMETERS; params++) {
      for (int exceps = 0; exceps <= Constants.MAX_CLOSURE_EXCEPTIONS; exceps++) {
        SNode poi = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
        SPropertyOperations.set(poi, "first", "" + params);
        SPropertyOperations.set(poi, "second", "" + exceps);
        ListSequence.fromList(result).addElement(poi);
      }
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1230041818717(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139346417(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1230041818856(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1230041147577(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1230041147637(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139304697(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139304757(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139333297(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139333357(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1229880447879(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int params = 0; params <= Constants.MAX_CLOSURE_PARAMETERS; params++) {
      for (int exceps = 0; exceps <= Constants.MAX_CLOSURE_EXCEPTIONS; exceps++) {
        SNode poi = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
        SPropertyOperations.set(poi, "first", "" + params);
        SPropertyOperations.set(poi, "second", "" + exceps);
        ListSequence.fromList(result).addElement(poi);
      }
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1229880447943(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1229880448012(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028918529(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139274024(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028918666(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028918752(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028918812(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139233488(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139233548(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139262183(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139262243(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028919192(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int params = 0; params <= Constants.MAX_CLOSURE_PARAMETERS; params++) {
      for (int exceps = 0; exceps <= Constants.MAX_CLOSURE_EXCEPTIONS; exceps++) {
        SNode poi = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
        SPropertyOperations.set(poi, "first", "" + params);
        SPropertyOperations.set(poi, "second", "" + exceps);
        ListSequence.fromList(result).addElement(poi);
      }
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028919259(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028919328(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028932381(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139210833(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028932518(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028932603(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028932663(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232138973272(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232138980160(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139004862(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139004922(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028933043(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int params = 0; params <= Constants.MAX_CLOSURE_PARAMETERS; params++) {
      for (int exceps = 0; exceps <= Constants.MAX_CLOSURE_EXCEPTIONS; exceps++) {
        SNode poi = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
        SPropertyOperations.set(poi, "first", "" + params);
        SPropertyOperations.set(poi, "second", "" + exceps);
        ListSequence.fromList(result).addElement(poi);
      }
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028933111(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028933180(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028943699(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139174408(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028943836(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028943921(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028943981(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139050355(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139056293(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139085871(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232139085931(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028944362(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int params = 0; params <= Constants.MAX_CLOSURE_PARAMETERS; params++) {
      for (int exceps = 0; exceps <= Constants.MAX_CLOSURE_EXCEPTIONS; exceps++) {
        SNode poi = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
        SPropertyOperations.set(poi, "first", "" + params);
        SPropertyOperations.set(poi, "second", "" + exceps);
        ListSequence.fromList(result).addElement(poi);
      }
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028944429(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int p = 0; p < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "first"); p++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "P" + (p + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232028944498(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (int e = 0; e < SPropertyOperations.getInteger(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.PairOfInts"), "second"); e++) {
      SNode sph = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
      SPropertyOperations.set(sph, "value", "E" + (e + 1));
      ListSequence.fromList(result).addElement(sph);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_1232141268915(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    int idx = 0;
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode ft : FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))) {
      SNode pd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
      SLinkOperations.setTarget(pd, "type", SNodeOperations.copyNode(FunctionTypeUtil.unmeet(ft)), true);
      SPropertyOperations.set(pd, "name", SPropertyOperations.getString(SNodeOperations.cast(ListSequence.fromList(paramDecls).getElement(idx), "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"), "name"));
      SPropertyOperations.set(pd, "isFinal", "" + (SPropertyOperations.getBoolean(SNodeOperations.cast(ListSequence.fromList(paramDecls).getElement(idx), "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"), "isFinal")));
      idx++;
      ListSequence.fromList(res).addElement(pd);
    }
    return res;
  }

  public static Iterable sourceNodesQuery_1232141205695(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionType_Behavior.call_getNormalizedThrowsTypes_3448422702164385781(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static Iterable sourceNodesQuery_1232624247528(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral"), "body", true), "statement", true);
  }

  public static Iterable sourceNodesQuery_1232141103446(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionType_Behavior.call_getNormalizedParameterTypes_1213877405276(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static Iterable sourceNodesQuery_1232141141928(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionType_Behavior.call_getNormalizedThrowsTypes_3448422702164385781(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"));
  }

  public static Iterable sourceNodesQuery_6995834834764138064(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> res = new ArrayList<SNode>();
    for (SNode cs : SNodeOperations.getAncestorsWhereConceptInList(_context.getNode(), new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", "jetbrains.mps.baseLanguage.structure.SwitchStatement"}, false)) {
      if (SPropertyOperations.getString(SNodeOperations.as(cs, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label") != null) {
        ListSequence.fromList(res).addElement(cs);
      }
      if (SPropertyOperations.getString(SNodeOperations.as(cs, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label") != null) {
        ListSequence.fromList(res).addElement(cs);
      }
    }
    return res;
  }

  public static Iterable sourceNodesQuery_6995834834764138728(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> res = new ArrayList<SNode>();
    for (SNode cs : SNodeOperations.getAncestorsWhereConceptInList(_context.getNode(), new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", "jetbrains.mps.baseLanguage.structure.SwitchStatement"}, false)) {
      if (SPropertyOperations.getString(SNodeOperations.as(cs, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label") != null) {
        ListSequence.fromList(res).addElement(cs);
      }
      if (SPropertyOperations.getString(SNodeOperations.as(cs, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label") != null) {
        ListSequence.fromList(res).addElement(cs);
      }
    }
    return res;
  }

  public static Iterable sourceNodesQuery_7246115176735005240(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "operation", true), "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation"), "parameter", true);
  }

  public static Iterable sourceNodesQuery_7246115176735005629(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> res = new ArrayList<SNode>();
    for (SNode cs : SNodeOperations.getAncestorsWhereConceptInList(_context.getNode(), new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", "jetbrains.mps.baseLanguage.structure.SwitchStatement"}, false)) {
      if (SPropertyOperations.getString(SNodeOperations.as(cs, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label") != null) {
        ListSequence.fromList(res).addElement(cs);
      }
      if (SPropertyOperations.getString(SNodeOperations.as(cs, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label") != null) {
        ListSequence.fromList(res).addElement(cs);
      }
    }
    return res;
  }

  public static Iterable sourceNodesQuery_7246115176735007583(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable sourceNodesQuery_7246115176735007739(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> res = new ArrayList<SNode>();
    for (SNode cs : SNodeOperations.getAncestorsWhereConceptInList(_context.getNode(), new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", "jetbrains.mps.baseLanguage.structure.SwitchStatement"}, false)) {
      if (SPropertyOperations.getString(SNodeOperations.as(cs, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label") != null) {
        ListSequence.fromList(res).addElement(cs);
      }
      if (SPropertyOperations.getString(SNodeOperations.as(cs, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label") != null) {
        ListSequence.fromList(res).addElement(cs);
      }
    }
    return res;
  }

  public static Iterable sourceNodesQuery_5008999823682210460(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode adaptable = (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
    Map<SNode, SNode> theMap = FunctionTypeUtil.mapAdaptableTargetTVDs(adaptable, _context.getNode());
    Values.THE_MAP.set(_context, adaptable, theMap);
    return SLinkOperations.getTargets(adaptable, "typeVariableDeclaration", true);
  }

  public static Iterable sourceNodesQuery_5025769645563041960(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode adaptable = (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
    Map<SNode, SNode> theMap = FunctionTypeUtil.mapAdaptableTargetTVDs(adaptable, _context.getNode());
    Values.THE_MAP.set(_context, adaptable, theMap);
    return SLinkOperations.getTargets(adaptable, "typeVariableDeclaration", true);
  }

  public static Iterable sourceNodesQuery_4314010248456452401(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "method", true)).getElement(0), "parameter", true);
  }

  public static Iterable sourceNodesQuery_4314010248456483648(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "method", true)).getElement(0), "parameter", true);
  }

  public static Iterable sourceNodesQuery_8424084437048109749(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionTypeUtil.getAllAdaptableClassifiers(_context);
  }

  public static Iterable sourceNodesQuery_8424084437048109773(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionTypeUtil.getAdaptableClassifierTargets(_context.getNode(), ((TemplateQueryContext) _context).getGenerator());
  }

  public static Iterable sourceNodesQuery_8424084437048115046(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "typeVariableDeclaration", true);
  }

  public static Iterable sourceNodesQuery_8424084437048109921(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "typeVariableDeclaration", true);
  }

  public static Iterable sourceNodesQuery_7001216437968776075(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"), "actualArgument", true);
  }

  public static Iterable sourceNodesQuery_2857237956452413154(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "method", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode m) {
        return SNodeOperations.isInstanceOf(m, "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration");
      }
    });
  }

  public static Iterable sourceNodesQuery_2857237956452627703(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(ClassifierTypeUtil.getTypeCoercedToClassifierType(FunctionMethodDeclaration_Behavior.call_functionType_2857237956452412451(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration"))), "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode pt) {
        return FunctionTypeUtil.unbound(pt);
      }
    });
  }

  public static Iterable sourceNodesQuery_2857237956452593623(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable sourceNodesQuery_2857237956452593613(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "throwsItem", true);
  }

  public static SNode mapSrcMacro_mapper_1207147150424(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode oldDecl = SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false);
    SNode newDecl = _context.getOutputNodeByInputNodeAndMappingLabel(oldDecl, "wrapped_localVar");
    SNode lvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(lvr, "variableDeclaration", newDecl, false);
    return lvr;
  }

  public static SNode mapSrcMacro_mapper_1219934508839(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode lvds = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false), "woven_LVDS");
    SNode lvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(lvr, "variableDeclaration", SLinkOperations.getTarget(lvds, "localVariableDeclaration", true), false);
    return lvr;
  }

  public static SNode mapSrcMacro_mapper_8665905049776863912(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode bmc;
    if (SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.structure.Classifier", false, false) == SNodeOperations.getAncestor(SLinkOperations.getTarget(_context.getNode(), "controlMethod", false), "jetbrains.mps.baseLanguage.structure.Classifier", false, false)) {
      bmc = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall", null);
      SLinkOperations.setTarget(SNodeOperations.cast(bmc, "jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall"), "baseMethodDeclaration", SLinkOperations.getTarget(_context.getNode(), "controlMethod", false), false);
    } else {
      bmc = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null);
      SLinkOperations.setTarget(SNodeOperations.cast(bmc, "jetbrains.mps.baseLanguage.structure.StaticMethodCall"), "classConcept", SNodeOperations.getAncestor(SLinkOperations.getTarget(_context.getNode(), "controlMethod", false), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false), false);
      SLinkOperations.setTarget(SNodeOperations.cast(bmc, "jetbrains.mps.baseLanguage.structure.StaticMethodCall"), "baseMethodDeclaration", SLinkOperations.getTarget(_context.getNode(), "controlMethod", false), false);
    }
    for (SNode p : SLinkOperations.getTargets(_context.getNode(), "actualParameter", true)) {
      SNode copy = CopyUtil.copyAndPreserveId(p, false);
      ListSequence.fromList(SLinkOperations.getTargets(bmc, "actualArgument", true)).addElement(copy);
    }
    SNode lvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(lvr, "variableDeclaration", SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.structure.BlockStatement", false, false), "statements", true), "statement", true)).first(), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"), "localVariableDeclaration", true), false);
    ListSequence.fromList(SLinkOperations.getTargets(bmc, "actualArgument", true)).addElement(lvr);
    return bmc;
  }

  public static SNode mapSrcMacro_mapper_8665905049776865883(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode copy = ((SNode) CopyUtil.copyAndPreserveId(_context.getNode(), false));
    List<SNode> args = SLinkOperations.getTargets(_context.getNode(), "actualArgument", true);
    List<SNode> copyArgs = SLinkOperations.getTargets(copy, "actualArgument", true);
    for (int idx = ListSequence.fromList(args).count() - 1; idx >= 0; idx--) {
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(ListSequence.fromList(args).getElement(idx)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) {
        SNode lvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
        SLinkOperations.setTarget(lvr, "variableDeclaration", SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.structure.BlockStatement", false, false), "statements", true), "statement", true)).first(), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"), "localVariableDeclaration", true), false);
        SNodeOperations.replaceWithAnother(ListSequence.fromList(copyArgs).getElement(idx), lvr);
        break;
      }
    }
    return copy;
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201023865086(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201359280410(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1228828839352(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201288191966(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201389219923(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201292996398(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201293019491(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201026203690(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201193348813(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201018804729(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "closure_yieldIt");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_2857237956452406726(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    Flags.FUNCTION_METHOD.flag(_context, _context.getNode());
    return _context.getCopiedOutputNodeForInputNode(_context.getNode());
  }

  public static void mappingScript_CodeBlock_1201011417446(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode cl : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral")) {
      if (ClosureLiteralUtil.hasYieldStatement(cl)) {
        PrepStatementUtil.prepStatementList(_context, SLinkOperations.getTarget(cl, "body", true), ((TemplateQueryContext) _context).getGenerator());
      }
    }
  }

  public static void mappingScript_CodeBlock_1201686683809(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> bmcs = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.BaseMethodCall");
    for (SNode bmc : bmcs) {
      List<SNode> args = SLinkOperations.getTargets(bmc, "actualArgument", true);
      List<SNode> pdecls = SLinkOperations.getTargets(SLinkOperations.getTarget(bmc, "baseMethodDeclaration", false), "parameter", true);
      if ((SLinkOperations.getTarget(bmc, "baseMethodDeclaration", false) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
        _context.showInformationMessage(bmc, "Actual arguments count != parameter declarations count");
      }
      int idx = 0;
      for (SNode pdecl : pdecls) {
        if (idx < ListSequence.fromList(args).count()) {
          SNode arg = ListSequence.fromList(args).getElement(idx);
          FunctionTypeUtil.prepAdaptations(_context, TypeDerivable_Behavior.call_deriveType_1213877435747(bmc, arg), arg);
        }
        idx++;
      }
    }
  }

  public static void mappingScript_CodeBlock_1201703119163(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> aes = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.AssignmentExpression");
    for (SNode ae : aes) {
      FunctionTypeUtil.prepAdaptations(_context, TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ae, "lValue", true)), SLinkOperations.getTarget(ae, "rValue", true));
    }
  }

  public static void mappingScript_CodeBlock_1201705474278(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> vds = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.VariableDeclaration");
    for (SNode vd : vds) {
      FunctionTypeUtil.prepAdaptations(_context, SLinkOperations.getTarget(vd, "type", true), SLinkOperations.getTarget(vd, "initializer", true));
    }
  }

  public static void mappingScript_CodeBlock_1203003871207(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode cl : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral")) {
      for (SNode vd : ClosureLiteralUtil.collectNonFinalVariableDeclarations(cl)) {
        if (!(Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, vd))) {
          SPropertyOperations.set(SNodeOperations.cast(vd, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "isFinal", "" + (true));
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_1204637450606(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode de : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.DotExpression")) {
      if (_context.isDirty(de) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(de, "operation", true), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
        SNode imco = SNodeOperations.cast(SLinkOperations.getTarget(de, "operation", true), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
        List<SNode> args = SLinkOperations.getTargets(imco, "actualArgument", true);
        List<SNode> pdecls = SLinkOperations.getTargets(SLinkOperations.getTarget(imco, "baseMethodDeclaration", false), "parameter", true);
        if ((SLinkOperations.getTarget(imco, "baseMethodDeclaration", false) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
          _context.showInformationMessage(imco, "Actual arguments count != parameter declarations count");
        }
        int idx = -1;
        for (SNode pdecl : pdecls) {
          if (++idx < ListSequence.fromList(args).count()) {
            SNode arg = ListSequence.fromList(args).getElement(idx);
            if (Constants.ONLY_CLOSURE_LITERAL_AS_FUNCTION_TYPE) {
              //  TEMP HACK: proceed only if the "right" expression is a ClosureLiteral, balk otherwise 
              //  This may cause unexpected results, so please disable in case of difficulties generating some code 
              if (!(SNodeOperations.isInstanceOf(arg, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
                continue;
              }
            }
            SNode operandType = SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de, "operand", true)), "jetbrains.mps.baseLanguage.structure.ClassifierType");
            if ((operandType == null)) {
              operandType = TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de, "operand", true)), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true);
            }
            SNode pdeclType = ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(pdecl, "type", true), operandType);
            FunctionTypeUtil.prepAdaptations(_context, FunctionTypeUtil.unmeet(pdeclType), arg);
          }
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_1207145159000(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode cl : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral")) {
      for (SNode vd : WrappersUtils.collectVariableDeclarationsToWrap(cl)) {
        if (SNodeOperations.isInstanceOf(vd, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
          Flags.WRAPPING_LOCAL_VARIABLE.flag(_context, vd);
          SNode sl = SNodeOperations.getAncestor(vd, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
          for (SNode desc : SNodeOperations.getDescendants(sl, null, false, new String[]{})) {
            if (SNodeOperations.isInstanceOf(desc, "jetbrains.mps.baseLanguage.structure.LocalVariableReference") && SLinkOperations.getTarget(SNodeOperations.cast(desc, "jetbrains.mps.baseLanguage.structure.LocalVariableReference"), "variableDeclaration", false) == vd) {
              Flags.WRAPPING_LOCAL_VARIABLE.flag(_context, desc);
            }
          }
        } else if (SNodeOperations.isInstanceOf(vd, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration")) {
          SPropertyOperations.set(vd, "isFinal", "" + (false));
          Flags.WRAPPING_LOCAL_VARIABLE.flag(_context, vd);
          Flags.WRAPPING_LOCAL_VARIABLE.flag(_context, SLinkOperations.getTarget(SNodeOperations.getAncestor(vd, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "body", true));
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_1207161784299(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> telist = ListSequence.fromListWithValues(new ArrayList<SNode>(), SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.ThisExpression"));
    for (SNode te : telist) {
      if ((SLinkOperations.getTarget(te, "classConcept", false) == null)) {
        SNode cl = SNodeOperations.getAncestor(te, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false);
        SNode thisCC = SNodeOperations.getAncestor(te, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
        if (SNodeOperations.isInstanceOf(thisCC, "jetbrains.mps.baseLanguage.structure.AnonymousClass") && SNodeOperations.getAncestor(cl, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) == thisCC) {
          SNode parent = SNodeOperations.getParent(te);
          if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.DotExpression")) {
            SNode op = SLinkOperations.getTarget(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true);
            if (SNodeOperations.isInstanceOf(op, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) {
              Flags.REMOVE_THIS.flag(_context, op);
            } else
            if (SNodeOperations.isInstanceOf(op, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
              Flags.REMOVE_THIS.flag(_context, op);
            } else {
              _context.showErrorMessage(te, "'this' expression coulnd't be removed");
            }
          }
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_1215524499704(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> rss = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.ReturnStatement");
    for (SNode rs : rss) {
      if ((SLinkOperations.getTarget(rs, "expression", true) != null)) {
        SNode anc = SNodeOperations.getAncestorWhereConceptInList(rs, new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"}, false, false);
        if (SNodeOperations.isInstanceOf(anc, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
          SNode rt = SLinkOperations.getTarget(SNodeOperations.cast(anc, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "returnType", true);
          if (!((rt != null) && SNodeOperations.isInstanceOf(rt, "jetbrains.mps.baseLanguage.structure.VoidType"))) {
            FunctionTypeUtil.prepAdaptations(_context, rt, SLinkOperations.getTarget(rs, "expression", true));
          }
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_1219747408129(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> ccs = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.ClassCreator");
    for (SNode cc : ccs) {
      List<SNode> args = SLinkOperations.getTargets(cc, "actualArgument", true);
      List<SNode> pdecls = SLinkOperations.getTargets(SLinkOperations.getTarget(cc, "baseMethodDeclaration", false), "parameter", true);
      if ((SLinkOperations.getTarget(cc, "baseMethodDeclaration", false) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
        _context.showInformationMessage(cc, "Actual arguments count != parameter declarations count");
      }
      int idx = 0;
      for (SNode pdecl : pdecls) {
        if (idx < ListSequence.fromList(args).count()) {
          SNode arg = ListSequence.fromList(args).getElement(idx);
          FunctionTypeUtil.prepAdaptations(_context, TypeDerivable_Behavior.call_deriveType_1213877435747(cc, arg), arg);
        }
        idx++;
      }
    }
  }

  public static void mappingScript_CodeBlock_1231852755668(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode ifo : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation")) {
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(ifo), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral")) {
        Flags.CONTAINS_INVOKE.flag(_context, SNodeOperations.getAncestor(ifo, "jetbrains.mps.baseLanguage.structure.Statement", false, false));
      }
    }
  }

  public static void mappingScript_CodeBlock_1232360229647(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode stmt : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.Statement")) {
      for (SNode desc : SNodeOperations.getDescendants(stmt, null, false, new String[]{})) {
        if (SNodeOperations.isInstanceOf(desc, "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation") && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(desc), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType")) {
          if (SNodeOperations.getAncestor(desc, "jetbrains.mps.baseLanguage.structure.Statement", false, false) == stmt && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(desc)), "jetbrains.mps.baseLanguage.structure.ExpressionStatement"))) {
            SNode de = SNodeOperations.cast(SNodeOperations.getParent(desc), "jetbrains.mps.baseLanguage.structure.DotExpression");
            SNode lvd = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null);
            SLinkOperations.setTarget(lvd, "type", FunctionTypeUtil.unmeet(SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de, "operand", true)), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), "terminateType", true))), true);
            SPropertyOperations.set(lvd, "name", "_tmp_" + de.getId());
            Flags.NEEDS_INITIALIZER.flag(_context, lvd);
            SNode lvds = SNodeOperations.insertPrevSiblingChild(stmt, SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null));
            SLinkOperations.setTarget(lvds, "localVariableDeclaration", lvd, true);
            SNode lvr = SNodeOperations.replaceWithAnother(de, SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null));
            SLinkOperations.setTarget(lvr, "variableDeclaration", lvd, false);
            SNode es = SNodeOperations.insertPrevSiblingChild(stmt, SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null));
            SLinkOperations.setTarget(es, "expression", de, true);
            Flags.PRODUCES_VALUE.flag(_context, de);
          }
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_8665905049777027950(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode ucl : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral")) {
      for (SNode bs : SNodeOperations.getDescendants(ucl, "jetbrains.mps.baseLanguage.structure.BreakStatement", false, new String[]{"jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock", "jetbrains.mps.baseLanguage.structure.IStatementListContainer"})) {
        SNode cs = SNodeOperations.getAncestorWhereConceptInList(bs, new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", "jetbrains.mps.baseLanguage.structure.SwitchStatement"}, false, false);
        String label = SPropertyOperations.getString(SNodeOperations.as(cs, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label");
        if (label == null) {
          label = SPropertyOperations.getString(SNodeOperations.as(cs, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label");
        }
        if (SPropertyOperations.getString(bs, "label") == null || !(SPropertyOperations.getString(bs, "label").equals(label))) {
          if (label == null) {
            label = _context.createUniqueName("label", SNodeOperations.getAncestor(cs, "jetbrains.mps.baseLanguage.structure.IStatementListContainer", false, false));
            if (SNodeOperations.isInstanceOf(cs, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement")) {
              SPropertyOperations.set(SNodeOperations.cast(cs, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label", label);
            } else {
              SPropertyOperations.set(SNodeOperations.cast(cs, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label", label);
            }
          }
          SPropertyOperations.set(bs, "label", label);
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_4923436771430697283(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode sl : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.StatementList")) {
      if (ExpressionStatement_Behavior.call_canServeAsReturn_1239355137616(SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(sl, "statement", true)).last(), "jetbrains.mps.baseLanguage.structure.ExpressionStatement"))) {
        SNode es = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(sl, "statement", true)).last(), "jetbrains.mps.baseLanguage.structure.ExpressionStatement");
        SNode anc = SNodeOperations.getAncestorWhereConceptInList(es, new String[]{"jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"}, false, false);
        if (SNodeOperations.isInstanceOf(anc, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
          SNode rt = SLinkOperations.getTarget(SNodeOperations.cast(anc, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "returnType", true);
          if (!((rt != null) && SNodeOperations.isInstanceOf(rt, "jetbrains.mps.baseLanguage.structure.VoidType"))) {
            FunctionTypeUtil.prepAdaptations(_context, rt, SLinkOperations.getTarget(es, "expression", true));
          }
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_5988816933596133427(final IOperationContext operationContext, final MappingScriptContext _context) {
    for (SNode ac : SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      List<SNode> args = SLinkOperations.getTargets(ac, "actualArgument", true);
      List<SNode> pdecls = SLinkOperations.getTargets(SLinkOperations.getTarget(ac, "baseMethodDeclaration", false), "parameter", true);
      if ((SLinkOperations.getTarget(ac, "baseMethodDeclaration", false) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
        _context.showInformationMessage(ac, "Actual arguments count != parameter declarations count");
      }
      int idx = 0;
      for (SNode pdecl : pdecls) {
        if (idx < ListSequence.fromList(args).count()) {
          SNode arg = ListSequence.fromList(args).getElement(idx);
          FunctionTypeUtil.prepAdaptations(_context, TypeDerivable_Behavior.call_deriveType_1213877435747(ac, arg), arg);
        }
        idx++;
      }
    }
  }

  public static class QuotationClass_x583g4_a0a0a2a212 {
    public QuotationClass_x583g4_a0a0a2a212() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(java.lang@java_stub)"), SNodeId.fromString("~Iterable")));
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
