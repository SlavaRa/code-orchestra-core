package jetbrains.mps.baseLanguage.closures.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Classifier;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ControlAbstractionContainer extends Classifier {
  public static final String concept = "jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionContainer";
  public static final String CONTROL_ABSTRACTION = "controlAbstraction";

  public ControlAbstractionContainer(SNode node) {
    super(node);
  }

  public int getControlAbstractionsCount() {
    return this.getChildCount(ControlAbstractionContainer.CONTROL_ABSTRACTION);
  }

  public Iterator<ControlAbstractionDeclaration> controlAbstractions() {
    return this.children(ControlAbstractionDeclaration.class, ControlAbstractionContainer.CONTROL_ABSTRACTION);
  }

  public List<ControlAbstractionDeclaration> getControlAbstractions() {
    return this.getChildren(ControlAbstractionDeclaration.class, ControlAbstractionContainer.CONTROL_ABSTRACTION);
  }

  public void addControlAbstraction(ControlAbstractionDeclaration node) {
    this.addChild(ControlAbstractionContainer.CONTROL_ABSTRACTION, node);
  }

  public void insertControlAbstraction(ControlAbstractionDeclaration prev, ControlAbstractionDeclaration node) {
    this.insertChild(prev, ControlAbstractionContainer.CONTROL_ABSTRACTION, node);
  }

  public static ControlAbstractionContainer newInstance(SModel sm, boolean init) {
    return (ControlAbstractionContainer) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionContainer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ControlAbstractionContainer newInstance(SModel sm) {
    return ControlAbstractionContainer.newInstance(sm, false);
  }
}
