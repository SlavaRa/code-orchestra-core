package jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.helper;

/*Generated by MPS */

import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class PrepStatementUtil {
  private PrepStatementUtil.Context ctx;
  private ITemplateGenerator generator;

  private PrepStatementUtil(ITemplateGenerator generator) {
    this.ctx = new PrepStatementUtil.Context();
    this.generator = generator;
  }

  private void prepTopStatementList(TemplateQueryContext genContext, SNode slist) {
    int beginLabel = this.ctx.label;
    int endLabel = this.ctx.incrementLabel();
    Object data = new Integer[]{beginLabel, endLabel};
    Values.CLOSURE_DATA.set(genContext, slist, data);
    this.prepStatementList(genContext, slist);
  }

  private int prepStatementList(TemplateQueryContext genContext, SNode slist) {
    boolean labelAutoIncremented = true;
    int label = this.ctx.incrementLabel();
    for (SNode stmt : SLinkOperations.getTargets(slist, "statement", true)) {
      if (!(labelAutoIncremented) && StatementListUtil.isControlStatement(stmt)) {
        label = this.ctx.incrementLabel();
      }
      labelAutoIncremented = StatementListUtil.isControlStatement(stmt);
      label = this.prepStatement(genContext, stmt, label);
    }
    return label;
  }

  private int prepStatement(TemplateQueryContext genContext, SNode stmt, int label) {
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.WhileStatement")) {
      return this.prepWhileStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.structure.WhileStatement"), label);
    } else
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.DoWhileStatement")) {
      return this.prepDoWhileStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.structure.DoWhileStatement"), label);
    } else
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.ForStatement")) {
      return this.prepForStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.structure.ForStatement"), label);
    } else
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.ForeachStatement")) {
      return this.prepForeachStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.structure.ForeachStatement"), label);
    } else
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.IfStatement")) {
      return this.prepIfStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.structure.IfStatement"), label);
    } else
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.SwitchStatement")) {
      return this.prepSwitchStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), label);
    } else
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")) {
      return this.prepLocalvariableDeclarationStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"), label);
    } else
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.closures.structure.YieldStatement")) {
      return this.prepYieldStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.closures.structure.YieldStatement"), label);
    } else
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.BreakStatement")) {
      this.prepBreakStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.structure.BreakStatement"));
    } else
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.ContinueStatement")) {
      this.prepContinueStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.structure.ContinueStatement"));
    } else
    if (SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.BlockStatement")) {
      return this.prepBlockStatement(genContext, SNodeOperations.cast(stmt, "jetbrains.mps.baseLanguage.structure.BlockStatement"), label);
    }
    return label;
  }

  private int prepWhileStatement(TemplateQueryContext genContext, SNode wstmt, int label) {
    int beginLabel = label;
    int blockLabel = this.ctx.incrementLabel();
    SNode sn = SLinkOperations.getTarget(wstmt, "body", true);
    Object data1 = new Integer[]{blockLabel, beginLabel};
    Values.CLOSURE_DATA.set(genContext, sn, data1);
    int nextLabel = this.calcNextLabel(genContext, wstmt);
    Object data = new Integer[]{beginLabel, beginLabel, blockLabel, nextLabel};
    Values.CLOSURE_DATA.set(genContext, wstmt, data);
    this.prepStatementList(genContext, SLinkOperations.getTarget(wstmt, "body", true));
    return nextLabel;
  }

  private int prepDoWhileStatement(TemplateQueryContext genContext, SNode dwstmt, int label) {
    int beginLabel = label;
    int condLabel = this.ctx.incrementLabel();
    SNode sn = SLinkOperations.getTarget(dwstmt, "body", true);
    Object data = new Integer[]{beginLabel, condLabel};
    Values.CLOSURE_DATA.set(genContext, sn, data);
    int nextLabel = this.calcNextLabel(genContext, dwstmt);
    Object data1 = new Integer[]{beginLabel, condLabel, nextLabel};
    Values.CLOSURE_DATA.set(genContext, dwstmt, data1);
    this.prepStatementList(genContext, SLinkOperations.getTarget(dwstmt, "body", true));
    return nextLabel;
  }

  private int prepForStatement(TemplateQueryContext genContext, SNode fstmt, int label) {
    int beginLabel = label;
    this.prepLocalVariableDeclaration(genContext, SLinkOperations.getTarget(fstmt, "variable", true));
    int condLabel = this.ctx.incrementLabel();
    int blockLabel = this.ctx.incrementLabel();
    int postLabel = this.ctx.incrementLabel();
    SNode sn = SLinkOperations.getTarget(fstmt, "body", true);
    Object data = new Integer[]{blockLabel, postLabel};
    Values.CLOSURE_DATA.set(genContext, sn, data);
    int nextLabel = this.calcNextLabel(genContext, fstmt);
    Object data1 = new Integer[]{beginLabel, postLabel, blockLabel, condLabel, nextLabel};
    Values.CLOSURE_DATA.set(genContext, fstmt, data1);
    this.prepStatementList(genContext, SLinkOperations.getTarget(fstmt, "body", true));
    return nextLabel;
  }

  private int prepForeachStatement(TemplateQueryContext genContext, SNode fstmt, int label) {
    int beginLabel = label;
    this.prepLocalVariableDeclaration(genContext, SLinkOperations.getTarget(fstmt, "variable", true));
    int condLabel = this.ctx.incrementLabel();
    int blockLabel = this.ctx.incrementLabel();
    SNode sn = SLinkOperations.getTarget(fstmt, "body", true);
    Object data1 = new Integer[]{blockLabel, condLabel};
    Values.CLOSURE_DATA.set(genContext, sn, data1);
    int nextLabel = this.calcNextLabel(genContext, fstmt);
    Object data = new Integer[]{beginLabel, condLabel, blockLabel, nextLabel};
    Values.CLOSURE_DATA.set(genContext, fstmt, data);
    this.prepStatementList(genContext, SLinkOperations.getTarget(fstmt, "body", true));
    return nextLabel;
  }

  private int prepIfStatement(TemplateQueryContext genContext, SNode ifstmt, int label) {
    int beginLabel = label;
    int ifTrueLabel = this.ctx.incrementLabel();
    int ifFalseLabel = -1;
    int nextLabel = this.calcNextLabel(genContext, ifstmt);
    SNode sn = SLinkOperations.getTarget(ifstmt, "ifTrue", true);
    Object data = new Integer[]{ifTrueLabel, nextLabel};
    Values.CLOSURE_DATA.set(genContext, sn, data);
    this.prepStatementList(genContext, SLinkOperations.getTarget(ifstmt, "ifTrue", true));
    if (ListSequence.fromList(SLinkOperations.getTargets(ifstmt, "elsifClauses", true)).count() > 0) {
      for (SNode eicls : SLinkOperations.getTargets(ifstmt, "elsifClauses", true)) {
        int tmp = this.ctx.incrementLabel();
        SNode sn1 = SLinkOperations.getTarget(eicls, "statementList", true);
        Object data1 = new Integer[]{tmp, nextLabel};
        Values.CLOSURE_DATA.set(genContext, sn1, data1);
        this.prepStatementList(genContext, SLinkOperations.getTarget(eicls, "statementList", true));
        Object data2 = new Integer[]{tmp};
        Values.CLOSURE_DATA.set(genContext, eicls, data2);
      }
    }
    if ((SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true) != null)) {
      if (StatementListUtil.isControlStatement(SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true)) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement")) {
        ifFalseLabel = this.ctx.incrementLabel();
      }
    }
    Object data2 = new Integer[]{beginLabel, ifTrueLabel, ifFalseLabel, nextLabel};
    Values.CLOSURE_DATA.set(genContext, ifstmt, data2);
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement")) {
      SNode sn1 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement"), "statements", true);
      Object data1 = new Integer[]{ifFalseLabel, nextLabel};
      Values.CLOSURE_DATA.set(genContext, sn1, data1);
      this.prepStatementList(genContext, SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement"), "statements", true));
    } else
    if ((SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true) != null)) {
      this.prepStatement(genContext, SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true), ifFalseLabel);
    }
    return nextLabel;
  }

  private int prepSwitchStatement(TemplateQueryContext genContext, SNode sstmt, int label) {
    int beginLabel = label;
    int nextLabel = this.calcNextLabel(genContext, sstmt);
    Object data1 = new Integer[]{beginLabel, nextLabel};
    Values.CLOSURE_DATA.set(genContext, sstmt, data1);
    int nextCaseLabel = this.ctx.incrementLabel();
    for (SNode scase : SLinkOperations.getTargets(sstmt, "case", true)) {
      int caseLabel = nextCaseLabel;
      nextCaseLabel = this.ctx.incrementLabel();
      if ((SLinkOperations.getTarget(scase, "body", true) != null)) {
        List<SNode> stmts = SLinkOperations.getTargets(SLinkOperations.getTarget(scase, "body", true), "statement", true);
        int endCaseLabel = nextCaseLabel;
        if (ListSequence.fromList(stmts).count() > 0 && SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), "jetbrains.mps.baseLanguage.structure.BreakStatement")) {
          endCaseLabel = nextLabel;
        }
        SNode sn = SLinkOperations.getTarget(scase, "body", true);
        Object data = new Integer[]{caseLabel, endCaseLabel};
        Values.CLOSURE_DATA.set(genContext, sn, data);
        this.prepStatementList(genContext, SLinkOperations.getTarget(scase, "body", true));
      }
    }
    if ((SLinkOperations.getTarget(sstmt, "defaultBlock", true) != null)) {
      int defLabel = this.ctx.incrementLabel();
      SNode sn = SLinkOperations.getTarget(sstmt, "defaultBlock", true);
      Object data = new Integer[]{defLabel, nextLabel};
      Values.CLOSURE_DATA.set(genContext, sn, data);
      this.prepStatementList(genContext, SLinkOperations.getTarget(sstmt, "defaultBlock", true));
    }
    return nextLabel;
  }

  private int prepYieldStatement(TemplateQueryContext genContext, SNode ystmt, int label) {
    int beginLabel = label;
    int nextLabel = this.calcNextLabel(genContext, ystmt);
    Object data = new Integer[]{beginLabel, nextLabel};
    Values.CLOSURE_DATA.set(genContext, ystmt, data);
    return nextLabel;
  }

  private void prepBreakStatement(TemplateQueryContext genContext, SNode bstmt) {
    int brLabel = -1;
    SNode node = bstmt;
    while (((node = SNodeOperations.getAncestorWhereConceptInList(node, new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", "jetbrains.mps.baseLanguage.structure.SwitchStatement"}, false, false)) != null)) {
      SNode loopLabel = (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement") ?
        SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "loopLabel", true) :
        SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "switchLabel", true)
      );
      String depLabel = (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement") ?
        SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label") :
        SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), "label")
      );
      if ((SLinkOperations.getTarget(bstmt, "loopLabelReference", true) != null) && SLinkOperations.getTarget(SLinkOperations.getTarget(bstmt, "loopLabelReference", true), "loopLabel", false) == loopLabel || SPropertyOperations.getString(bstmt, "label") == depLabel || (SPropertyOperations.getString(bstmt, "label") != null && SPropertyOperations.getString(bstmt, "label").equals(depLabel))) {
        Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(genContext, node);
        brLabel = labels[labels.length - 1];
        break;
      }
    }
    Object data = new Integer[]{brLabel};
    Values.CLOSURE_DATA.set(genContext, bstmt, data);
  }

  private void prepContinueStatement(TemplateQueryContext genContext, SNode cstmt) {
    int conLabel = -1;
    SNode node = cstmt;
    while (((node = SNodeOperations.getAncestorWhereConceptInList(node, new String[]{"jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"}, false, false)) != null)) {
      String depLabel = SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "label");
      SNode loopLabel = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "loopLabel", true);
      if (SLinkOperations.getTarget(SLinkOperations.getTarget(cstmt, "loopLabelReference", true), "loopLabel", false) == loopLabel || SPropertyOperations.getString(cstmt, "label") == depLabel || (SPropertyOperations.getString(cstmt, "label") != null && SPropertyOperations.getString(cstmt, "label").equals(depLabel))) {
        Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(genContext, node);
        conLabel = labels[1];
        break;
      }
    }
    Object data = new Integer[]{conLabel};
    Values.CLOSURE_DATA.set(genContext, cstmt, data);
  }

  private int prepBlockStatement(TemplateQueryContext genContext, SNode bs, int label) {
    int beginLabel = label;
    int nextLabel = this.calcNextLabel(genContext, bs);
    SNode sn = SLinkOperations.getTarget(bs, "statements", true);
    Object data1 = new Integer[]{beginLabel, nextLabel};
    Values.CLOSURE_DATA.set(genContext, sn, data1);
    int tmp = this.prepStatementList(genContext, SLinkOperations.getTarget(bs, "statements", true));
    Object data = new Integer[]{beginLabel, tmp};
    Values.CLOSURE_DATA.set(genContext, bs, data);
    return tmp;
  }

  private int prepLocalvariableDeclarationStatement(TemplateQueryContext genContext, SNode lstmt, int label) {
    int nextLabel = this.ctx.incrementLabel();
    Values.CLOSURE_DATA.set(genContext, lstmt, label);
    this.prepLocalVariableDeclaration(genContext, SLinkOperations.getTarget(lstmt, "localVariableDeclaration", true));
    return nextLabel;
  }

  private void prepLocalVariableDeclaration(TemplateQueryContext genContext, SNode lvd) {
    String name = "_" + this.ctx.label + "_" + SPropertyOperations.getString(lvd, "name");
    Values.CLOSURE_DATA.set(genContext, lvd, name);
  }

  private int calcNextLabel(TemplateQueryContext genContext, SNode cstmt) {
    if (SNodeOperations.isInstanceOf(cstmt, "jetbrains.mps.baseLanguage.structure.IfStatement") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(cstmt), "jetbrains.mps.baseLanguage.structure.IfStatement")) {
      SNode topIfStmt = SNodeOperations.cast(SNodeOperations.getParent(cstmt), "jetbrains.mps.baseLanguage.structure.IfStatement");
      while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(topIfStmt), "jetbrains.mps.baseLanguage.structure.IfStatement")) {
        topIfStmt = SNodeOperations.cast(SNodeOperations.getParent(topIfStmt), "jetbrains.mps.baseLanguage.structure.IfStatement");
      }
      Integer[] parentLabels = (Integer[]) Values.CLOSURE_DATA.get(genContext, topIfStmt);
      if (parentLabels != null) {
        return parentLabels[parentLabels.length - 1];
      }
    } else if ((SNodeOperations.getNextSibling(cstmt) == null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(cstmt), "jetbrains.mps.baseLanguage.structure.StatementList")) {
      SNode sn = SNodeOperations.getParent(cstmt);
      Integer[] parentLabels = (Integer[]) Values.CLOSURE_DATA.get(genContext, sn);
      if (parentLabels != null) {
        return parentLabels[parentLabels.length - 1];
      }
    }
    return this.ctx.incrementLabel();
  }

  public static void prepStatementList(TemplateQueryContext genContext, SNode slist, ITemplateGenerator generator) {
    PrepStatementUtil psu = new PrepStatementUtil(generator);
    psu.prepTopStatementList(genContext, slist);
  }

  private static class Context {
    public int label;

    public Context() {
      this.label = 0;
    }

    public int incrementLabel() {
      this.label = this.label + 1;
      return this.label;
    }
  }
}
