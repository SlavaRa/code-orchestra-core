package jetbrains.mps.baseLanguage.closures.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class UnrestrictedFunctionType extends FunctionType {
  public static final String concept = "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType";
  public static final String TERMINATE_TYPE = "terminateType";

  public UnrestrictedFunctionType(SNode node) {
    super(node);
  }

  public Type getTerminateType() {
    return (Type) this.getChild(Type.class, UnrestrictedFunctionType.TERMINATE_TYPE);
  }

  public void setTerminateType(Type node) {
    super.setChild(UnrestrictedFunctionType.TERMINATE_TYPE, node);
  }

  public static UnrestrictedFunctionType newInstance(SModel sm, boolean init) {
    return (UnrestrictedFunctionType) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static UnrestrictedFunctionType newInstance(SModel sm) {
    return UnrestrictedFunctionType.newInstance(sm, false);
  }
}
