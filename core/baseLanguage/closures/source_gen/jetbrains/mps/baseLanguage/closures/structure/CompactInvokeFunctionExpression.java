package jetbrains.mps.baseLanguage.closures.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CompactInvokeFunctionExpression extends Expression {
  public static final String concept = "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression";
  public static final String FUNCTION = "function";
  public static final String PARAMETER = "parameter";

  public CompactInvokeFunctionExpression(SNode node) {
    super(node);
  }

  public Expression getFunction() {
    return (Expression) this.getChild(Expression.class, CompactInvokeFunctionExpression.FUNCTION);
  }

  public void setFunction(Expression node) {
    super.setChild(CompactInvokeFunctionExpression.FUNCTION, node);
  }

  public int getParametersCount() {
    return this.getChildCount(CompactInvokeFunctionExpression.PARAMETER);
  }

  public Iterator<Expression> parameters() {
    return this.children(Expression.class, CompactInvokeFunctionExpression.PARAMETER);
  }

  public List<Expression> getParameters() {
    return this.getChildren(Expression.class, CompactInvokeFunctionExpression.PARAMETER);
  }

  public void addParameter(Expression node) {
    this.addChild(CompactInvokeFunctionExpression.PARAMETER, node);
  }

  public void insertParameter(Expression prev, Expression node) {
    this.insertChild(prev, CompactInvokeFunctionExpression.PARAMETER, node);
  }

  public static CompactInvokeFunctionExpression newInstance(SModel sm, boolean init) {
    return (CompactInvokeFunctionExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CompactInvokeFunctionExpression newInstance(SModel sm) {
    return CompactInvokeFunctionExpression.newInstance(sm, false);
  }
}
