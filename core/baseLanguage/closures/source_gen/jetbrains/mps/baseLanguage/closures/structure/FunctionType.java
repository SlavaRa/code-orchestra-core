package jetbrains.mps.baseLanguage.closures.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Type;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Interface;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.baseLanguage.structure.ClassifierType;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class FunctionType extends Type {
  public static final String concept = "jetbrains.mps.baseLanguage.closures.structure.FunctionType";
  public static final String RUNTIME_IFACE = "runtimeIface";
  public static final String RESULT_TYPE = "resultType";
  public static final String PARAMETER_TYPE = "parameterType";
  public static final String THROWS_TYPE = "throwsType";

  public FunctionType(SNode node) {
    super(node);
  }

  public Interface getRuntimeIface() {
    return (Interface) this.getReferent(Interface.class, FunctionType.RUNTIME_IFACE);
  }

  public void setRuntimeIface(Interface node) {
    super.setReferent(FunctionType.RUNTIME_IFACE, node);
  }

  public Type getResultType() {
    return (Type) this.getChild(Type.class, FunctionType.RESULT_TYPE);
  }

  public void setResultType(Type node) {
    super.setChild(FunctionType.RESULT_TYPE, node);
  }

  public int getParameterTypesCount() {
    return this.getChildCount(FunctionType.PARAMETER_TYPE);
  }

  public Iterator<Type> parameterTypes() {
    return this.children(Type.class, FunctionType.PARAMETER_TYPE);
  }

  public List<Type> getParameterTypes() {
    return this.getChildren(Type.class, FunctionType.PARAMETER_TYPE);
  }

  public void addParameterType(Type node) {
    this.addChild(FunctionType.PARAMETER_TYPE, node);
  }

  public void insertParameterType(Type prev, Type node) {
    this.insertChild(prev, FunctionType.PARAMETER_TYPE, node);
  }

  public int getThrowsTypesCount() {
    return this.getChildCount(FunctionType.THROWS_TYPE);
  }

  public Iterator<ClassifierType> throwsTypes() {
    return this.children(ClassifierType.class, FunctionType.THROWS_TYPE);
  }

  public List<ClassifierType> getThrowsTypes() {
    return this.getChildren(ClassifierType.class, FunctionType.THROWS_TYPE);
  }

  public void addThrowsType(ClassifierType node) {
    this.addChild(FunctionType.THROWS_TYPE, node);
  }

  public void insertThrowsType(ClassifierType prev, ClassifierType node) {
    this.insertChild(prev, FunctionType.THROWS_TYPE, node);
  }

  public static FunctionType newInstance(SModel sm, boolean init) {
    return (FunctionType) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.FunctionType", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static FunctionType newInstance(SModel sm) {
    return FunctionType.newInstance(sm, false);
  }
}
