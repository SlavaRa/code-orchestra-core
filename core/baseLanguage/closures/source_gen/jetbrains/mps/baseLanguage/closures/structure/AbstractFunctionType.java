package jetbrains.mps.baseLanguage.closures.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Type;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AbstractFunctionType extends Type {
  public static final String concept = "jetbrains.mps.baseLanguage.closures.structure.AbstractFunctionType";
  public static final String RESULT_TYPE = "resultType";
  public static final String PARAMETER_TYPE = "parameterType";

  public AbstractFunctionType(SNode node) {
    super(node);
  }

  public Type getResultType() {
    return (Type) this.getChild(Type.class, AbstractFunctionType.RESULT_TYPE);
  }

  public void setResultType(Type node) {
    super.setChild(AbstractFunctionType.RESULT_TYPE, node);
  }

  public int getParameterTypesCount() {
    return this.getChildCount(AbstractFunctionType.PARAMETER_TYPE);
  }

  public Iterator<Type> parameterTypes() {
    return this.children(Type.class, AbstractFunctionType.PARAMETER_TYPE);
  }

  public List<Type> getParameterTypes() {
    return this.getChildren(Type.class, AbstractFunctionType.PARAMETER_TYPE);
  }

  public void addParameterType(Type node) {
    this.addChild(AbstractFunctionType.PARAMETER_TYPE, node);
  }

  public void insertParameterType(Type prev, Type node) {
    this.insertChild(prev, AbstractFunctionType.PARAMETER_TYPE, node);
  }

  public static AbstractFunctionType newInstance(SModel sm, boolean init) {
    return (AbstractFunctionType) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.AbstractFunctionType", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AbstractFunctionType newInstance(SModel sm) {
    return AbstractFunctionType.newInstance(sm, false);
  }
}
