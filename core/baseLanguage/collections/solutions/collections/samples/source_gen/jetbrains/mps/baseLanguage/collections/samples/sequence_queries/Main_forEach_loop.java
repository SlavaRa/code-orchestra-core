package jetbrains.mps.baseLanguage.collections.samples.sequence_queries;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;

/*package*/ class Main_forEach_loop {
  /*package*/ Main_forEach_loop() {
  }

  /*package*/ static void main(String[] args) {
    Iterable<Integer> nums = Sequence.fromClosure(new ISequenceClosure<Integer>() {
      public Iterable<Integer> iterable() {
        return new Iterable<Integer>() {
          public Iterator<Integer> iterator() {
            return new YieldingIterator<Integer>() {
              private int __CP__ = 0;
              private int _3_num;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 4:
                      if (true) {
                        this.__CP__ = 5;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 6:
                      this.__CP__ = 7;
                      this.yield(_3_num);
                      return true;
                    case 0:
                      this._3_num = 0;
                      this.__CP__ = 4;
                      break;
                    case 5:
                      this.__CP__ = 6;
                      break;
                    case 7:
                      _3_num++;
                      this.__CP__ = 4;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    });
    System.out.println("from infinite sequence take first 10 numbers,");
    System.out.println("ignore odd numbers,");
    System.out.println("print even numbers");
    for (Integer num : Sequence.fromIterable(nums)) {
      if (num >= 10) {
        break;
      }
      if (num % 2 != 0) {
        continue;
      }
      System.out.println(num);
    }
  }
}
