package jetbrains.mps.baseLanguage.collections.sandbox.model1;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.StopIteratingException;
import jetbrains.mps.internal.collections.runtime.IVisitor;

/*package*/ class Blocks {
  private static int I;

  /*package*/ void aaa() {
    Iterable<String> ss = Sequence.fromClosure(new ISequenceClosure<String>() {
      public Iterable<String> iterable() {
        return new Iterable<String>() {
          public Iterator<String> iterator() {
            return new YieldingIterator<String>() {
              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 3:
                      if (false) {
                        this.__CP__ = 2;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      this.yield("s");
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 2:
                      this.__CP__ = 4;
                      break;
                    case 5:
                      this.__CP__ = 1;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    });
    Sequence.fromIterable(ss).select(new ISelector<String, String>() {
      public String select(String s) {
        return "a";
      }
    });
    Sequence.fromIterable(ss).translate(new ITranslator2<String, String>() {
      public Iterable<String> translate(final String in) {
        return new Iterable<String>() {
          public Iterator<String> iterator() {
            return new YieldingIterator<String>() {
              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 3:
                      if (false) {
                        this.__CP__ = 2;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      this.yield("a");
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 2:
                      this.__CP__ = 4;
                      break;
                    case 5:
                      throw new StopIteratingException();
                      this.__CP__ = 1;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    });
    Sequence.fromIterable(ss).visitAll(new IVisitor<String>() {
      public void visit(String s) {
__skip__:
        do {
          throw new StopIteratingException();
          break __skip__;
        } while (false);
      }
    });
  }
}
