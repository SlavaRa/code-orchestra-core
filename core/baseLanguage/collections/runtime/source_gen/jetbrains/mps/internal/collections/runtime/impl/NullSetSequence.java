package jetbrains.mps.internal.collections.runtime.impl;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.ISetSequence;
import java.util.Set;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.ISequence;

public class NullSetSequence<T> extends NullSequence<T> implements ISetSequence<T>, Set<T> {
  private static Object[] EMPTY_ARRAY = new Object[0];
  private static final NullSetSequence<Object> INSTANCE = new NullSetSequence<Object>();

  protected NullSetSequence() {
  }

  public boolean add(T e) {
    return false;
  }

  public boolean addAll(Collection<? extends T> c) {
    return false;
  }

  public void clear() {
  }

  public boolean contains(Object t) {
    return false;
  }

  public boolean containsAll(Collection<?> c) {
    return false;
  }

  public boolean remove(Object o) {
    return false;
  }

  public boolean removeAll(Collection<?> c) {
    return false;
  }

  public boolean retainAll(Collection<?> c) {
    return false;
  }

  public int size() {
    return 0;
  }

  public Object[] toArray() {
    return EMPTY_ARRAY;
  }

  @SuppressWarnings(value = "unchecked")
  public <U> U[] toArray(U[] a) {
    return (U[]) EMPTY_ARRAY;
  }

  public T addElement(T t) {
    return null;
  }

  public ISetSequence<T> addSequence(ISequence<? extends T> seq) {
    return this;
  }

  public T removeElement(T t) {
    return null;
  }

  public ISetSequence<T> removeSequence(ISequence<? extends T> seq) {
    return this;
  }

  @SuppressWarnings(value = "unchecked")
  public T[] toGenericArray() {
    return (T[]) EMPTY_ARRAY;
  }

  @SuppressWarnings(value = "unchecked")
  public T[] toGenericArray(Class<T> runtimeClass) {
    return (T[]) EMPTY_ARRAY;
  }

  public Set<T> toSet() {
    return this;
  }

  @SuppressWarnings(value = "unchecked")
  public static <U> NullSetSequence<U> instance() {
    return (NullSetSequence<U>) INSTANCE;
  }
}
