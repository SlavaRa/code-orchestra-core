package jetbrains.mps.internal.collections.runtime;

/*Generated by MPS */

import java.util.Collection;
import jetbrains.mps.baseLanguage.closures.runtime.AdapterClass;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Iterator;

public abstract class CollectionSequence<T> extends Sequence<T> implements ICollectionSequence<T>, Collection<T> {
  public CollectionSequence() {
  }

  public T addElement(T t) {
    if (Sequence.IGNORE_NULL_VALUES) {
      if (t == null) {
        return null;
      }
    }
    getCollection().add(t);
    return t;
  }

  public T removeElement(T t) {
    if (remove((Object) t)) {
      return t;
    }
    return null;
  }

  public ICollectionSequence<T> addSequence(ISequence<? extends T> seq) {
    if (Sequence.USE_NULL_SEQUENCE) {
      if (seq == null) {
        return this;
      }
    }
    if (seq.toIterable() instanceof Collection) {
      getCollection().addAll((Collection<? extends T>) seq.toIterable());
    } else {
      for (T t : seq.toIterable()) {
        getCollection().add(t);
      }
    }
    return this;
  }

  public ICollectionSequence<T> removeSequence(ISequence<? extends T> seq) {
    if (Sequence.USE_NULL_SEQUENCE) {
      if (seq == null) {
        return this;
      }
    }
    if (seq.toIterable() instanceof Collection) {
      getCollection().removeAll((Collection<? extends T>) seq.toIterable());
    } else {
      for (T t : seq.toIterable()) {
        getCollection().remove(t);
      }
    }
    return this;
  }

  public ICollectionSequence<T> removeWhere(@AdapterClass(value = "IWhereFilter") _FunctionTypes._return_P1_E0<? extends Boolean, ? super T> filter) {
    for (Iterator<T> it = getCollection().iterator(); it.hasNext();) {
      if (filter.invoke(it.next())) {
        it.remove();
      }
    }
    return this;
  }

  public boolean add(T e) {
    return getCollection().add(e);
  }

  public boolean addAll(Collection<? extends T> c) {
    return getCollection().addAll(c);
  }

  public void clear() {
    getCollection().clear();
  }

  public boolean contains(Object o) {
    return getCollection().contains(o);
  }

  public boolean containsAll(Collection<?> c) {
    return getCollection().containsAll(c);
  }

  @Override
  public boolean isEmpty() {
    return getCollection().isEmpty();
  }

  public boolean remove(Object o) {
    return getCollection().remove(o);
  }

  public boolean removeAll(Collection<?> c) {
    return getCollection().removeAll(c);
  }

  public boolean retainAll(Collection<?> c) {
    return getCollection().retainAll(c);
  }

  public int size() {
    return getCollection().size();
  }

  public Object[] toArray() {
    return getCollection().toArray();
  }

  public <U> U[] toArray(U[] a) {
    return getCollection().toArray(a);
  }

  public Iterator<T> iterator() {
    return getCollection().iterator();
  }

  public ICollectionSequence<T> asUnmodifiable() {
    return this;
  }

  public ICollectionSequence<T> asSynchronized() {
    return this;
  }

  @Override
  public int count() {
    return getCollection().size();
  }

  @Override
  public boolean containsSequence(ISequence<T> that) {
    if (that instanceof CollectionSequence<?>) {
      return getCollection().containsAll(((CollectionSequence<?>) that).getCollection());
    }
    return super.containsSequence(that);
  }

  @SuppressWarnings(value = "unchecked")
  @Override
  public boolean equals(Object o) {
    if (o instanceof CollectionSequence) {
      Collection<T> thatColl = ((CollectionSequence<T>) o).getCollection();
      Collection<T> thisColl = getCollection();
      if (thisColl == thatColl) {
        return true;
      }
      return (thisColl != null ?
        thisColl.equals(thatColl) :
        false
      );
    }
    return super.equals(o);
  }

  @Override
  public int hashCode() {
    return getCollection().hashCode();
  }

  protected abstract Collection<T> getCollection();
}
