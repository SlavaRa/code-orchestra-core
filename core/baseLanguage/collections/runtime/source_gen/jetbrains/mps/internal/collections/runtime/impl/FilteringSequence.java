package jetbrains.mps.internal.collections.runtime.impl;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class FilteringSequence<U> extends AbstractChainedSequence<U, U> implements Iterable<U> {
  private final _FunctionTypes._return_P1_E0<? extends Boolean, ? super U> filter;

  public FilteringSequence(Iterable<U> input, _FunctionTypes._return_P1_E0<? extends Boolean, ? super U> filter) {
    super(input);
    if (filter == null) {
      throw new NullPointerException();
    }
    this.filter = filter;
  }

  public Iterator<U> iterator() {
    return new FilteringSequence.FilteringIterator();
  }

  private class FilteringIterator implements Iterator<U> {
    private Iterator<U> inputIterator;
    private HasNextState hasNext = HasNextState.UNKNOWN;
    private U next;

    private FilteringIterator() {
    }

    public boolean hasNext() {
      if (inputIterator == null) {
        init();
      }
      if (hasNext.unknown()) {
        moveToNext();
      }
      return hasNext.hasNext();
    }

    public U next() {
      if (inputIterator == null) {
        init();
      }
      if (hasNext.unknown()) {
        moveToNext();
      }
      if (!((hasNext.hasNext()))) {
        throw new NoSuchElementException();
      }
      return this.clearNext();
    }

    public void remove() {
      throw new UnsupportedOperationException();
    }

    private void init() {
      this.inputIterator = getInput().iterator();
    }

    private void moveToNext() {
      this.hasNext = HasNextState.AT_END;
      this.next = null;
      while (inputIterator.hasNext()) {
        U tmp = inputIterator.next();
        if (filter.invoke(tmp)) {
          this.next = tmp;
          this.hasNext = HasNextState.HAS_NEXT;
          break;
        }
      }
    }

    private U clearNext() {
      U tmp = next;
      this.next = null;
      this.hasNext = HasNextState.UNKNOWN;
      return tmp;
    }
  }
}
