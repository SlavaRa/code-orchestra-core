package jetbrains.mps.internal.collections.runtime.impl;

/*Generated by MPS */

import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class LimitedCardinalitySequence<U> extends Sequence<U> {
  private final Sequence<U> input;
  private final int maxCardinality;

  public LimitedCardinalitySequence(Sequence<U> input, int maxCardinality) {
    if (input == null) {
      throw new NullPointerException();
    }
    this.input = input;
    this.maxCardinality = maxCardinality;
  }

  public Iterator<U> iterator() {
    return new LimitedCardinalitySequence.LimitedCardinalityIterator();
  }

  private class LimitedCardinalityIterator implements Iterator<U> {
    private Iterator<U> inputIt;
    private CardinalityMap<U> cardMap;
    private U next;
    private HasNextState hasNext = HasNextState.UNKNOWN;

    public LimitedCardinalityIterator() {
    }

    public boolean hasNext() {
      if (inputIt == null) {
        init();
      }
      if (hasNext.unknown()) {
        moveToNext();
      }
      return hasNext.hasNext();
    }

    public U next() {
      if (inputIt == null) {
        init();
      }
      if (hasNext.unknown()) {
        moveToNext();
      }
      if (!((hasNext.hasNext()))) {
        throw new NoSuchElementException();
      }
      return this.clearNext();
    }

    public void remove() {
      throw new UnsupportedOperationException();
    }

    private void moveToNext() {
      this.next = null;
      this.hasNext = HasNextState.AT_END;
      while (inputIt.hasNext()) {
        U tmp = inputIt.next();
        if (cardMap.postInc(tmp) < maxCardinality) {
          this.next = tmp;
          this.hasNext = HasNextState.HAS_NEXT;
          return;
        }
      }
      cardMap.clear();
    }

    private U clearNext() {
      U tmp = next;
      this.next = null;
      this.hasNext = HasNextState.UNKNOWN;
      return tmp;
    }

    private void init() {
      this.inputIt = input.iterator();
      this.cardMap = new CardinalityMap<U>();
    }
  }
}
