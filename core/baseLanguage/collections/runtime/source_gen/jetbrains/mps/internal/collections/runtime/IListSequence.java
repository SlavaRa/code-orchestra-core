package jetbrains.mps.internal.collections.runtime;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime.AdapterClass;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public interface IListSequence<T> extends ICollectionSequence<T>, ISequence<T>, List<T> {
  public T addElement(T t);
  public T removeElement(T t);
  public T removeElementAt(int idx);
  public T removeLastElement();
  public T insertElement(int idx, T t);
  public T getElement(int idx);
  public T setElement(int idx, T t);
  public IListSequence<T> addSequence(ISequence<? extends T> seq);
  public IListSequence<T> removeSequence(ISequence<? extends T> seq);
  public IListSequence<T> removeWhere(@AdapterClass(value = "IWhereFilter") _FunctionTypes._return_P1_E0<? extends Boolean, ? super T> filter);
  public IListSequence<T> reversedList();
  public IListSequence<T> subListSequence(int fromIdx, int upToIdx);
  public IListSequence<T> headListSequence(int upToIdx);
  public IListSequence<T> tailListSequence(int fromIdx);
  public List<T> toList();
  public T[] toGenericArray();
  public T[] toGenericArray(Class<T> runtimeClass);
  public IListSequence<T> asUnmodifiable();
  public IListSequence<T> asSynchronized();
}
