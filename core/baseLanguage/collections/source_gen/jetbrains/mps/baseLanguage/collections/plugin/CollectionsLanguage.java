package jetbrains.mps.baseLanguage.collections.plugin;

/*Generated by MPS */

import java.util.Queue;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.internal.collections.runtime.QueueSequence;

public class CollectionsLanguage {
  private static CollectionsLanguage INSTANCE;
  private static Queue<_FunctionTypes._void_P1_E0<? super CollectionsLanguage>> ONINIT_DELAYED_RUNMES;
  private static Queue<_FunctionTypes._void_P1_E0<? super CollectionsLanguage>> ONDISPOSE_RUNMES;
  private static Logger LOG = Logger.getLogger(CollectionsLanguage.class);

  /*package*/ CollectionsLanguage() {
    INSTANCE = this;
    this.init();
  }

  public CustomContainersRegistry getCustomContainersRegistry() {
    return CustomContainersRegistry.INSTANCE;
  }

  /*package*/ void init() {
    synchronized (CollectionsLanguage.class) {
      while (QueueSequence.fromQueue(ONINIT_DELAYED_RUNMES).isNotEmpty()) {
        try {
          QueueSequence.fromQueue(ONINIT_DELAYED_RUNMES).removeFirstElement().invoke(INSTANCE);
        } catch (Throwable thr) {
          LOG.error("Error executing delayed code", thr);
        }
      }
    }
  }

  /*package*/ void dispose() {
    synchronized (CollectionsLanguage.class) {
      while (QueueSequence.fromQueue(ONDISPOSE_RUNMES).isNotEmpty()) {
        try {
          QueueSequence.fromQueue(ONDISPOSE_RUNMES).removeFirstElement().invoke(INSTANCE);
        } catch (Throwable thr) {
          LOG.error("Error executing delayed code", thr);
        }
      }
    }
  }

  public static CollectionsLanguage getInstance() {
    if (INSTANCE == null) {
      Logger.getLogger(CollectionsLanguage.class).fatal("ColelctionsLanguage.INSTANCE is null. Context ClassLoader:" + Thread.currentThread().getContextClassLoader(), new IllegalStateException("CollectionsLanguage not initialized"));
      throw new IllegalStateException("CollectionsLanguage not initialized");
    }
    return INSTANCE;
  }

  public static void runOnInit(_FunctionTypes._void_P1_E0<? super CollectionsLanguage> runme) {
    synchronized (CollectionsLanguage.class) {
      if (INSTANCE != null) {
        runme.invoke(INSTANCE);
      } else {
        QueueSequence.fromQueue(ONINIT_DELAYED_RUNMES).addLastElement(runme);
      }
    }
  }

  public static void runOnDispose(_FunctionTypes._void_P1_E0<? super CollectionsLanguage> runme) {
    synchronized (CollectionsLanguage.class) {
      QueueSequence.fromQueue(ONINIT_DELAYED_RUNMES).addLastElement(runme);
    }
  }
}
