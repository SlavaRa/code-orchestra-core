package jetbrains.mps.baseLanguage.collections.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapperFactory;
import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapper;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaValue;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debug.evaluation.EvaluationUtils;
import jetbrains.mps.debug.evaluation.EvaluationException;
import com.sun.jdi.Value;
import java.util.List;
import jetbrains.mps.debug.runtime.java.programState.watchables.CustomJavaWatchable;
import jetbrains.mps.debug.evaluation.proxies.IObjectValueProxy;
import java.util.Collections;
import java.util.ArrayList;
import jetbrains.mps.debug.evaluation.proxies.PrimitiveValueProxy;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaObjectValue;

public class SetViewer_WrapperFactory extends ValueWrapperFactory {
  public SetViewer_WrapperFactory() {
  }

  public ValueWrapper createValueWrapper(JavaValue value) {
    return new SetViewer_WrapperFactory.SetViewerWrapper(value);
  }

  @Override
  public boolean canWrapValue(@NotNull final JavaValue javaValue) {
    return EvaluationUtils.consumeEvaluationException(new EvaluationUtils.EvaluationInvocatable<Boolean>() {
      public Boolean invoke() throws EvaluationException {
        Value value = javaValue.getValue();
        if (value == null) {
          return false;
        }
        if (!(EvaluationUtils.isInstanceOf(value.type(), "Ljava/util/Set;", value.virtualMachine()))) {
          return false;
        }
        return true;
      }
    }, false);
  }

  public static class SetViewerWrapper extends ValueWrapper {
    public SetViewerWrapper(JavaValue value) {
      super(value);
    }

    protected List<CustomJavaWatchable> getSubvaluesImpl() {
      return EvaluationUtils.consumeEvaluationException(new EvaluationUtils.EvaluationInvocatable<List<CustomJavaWatchable>>() {
        public List<CustomJavaWatchable> invoke() throws EvaluationException {
          return getSubvaluesImpl((IObjectValueProxy) myValueProxy);
        }
      }, Collections.<CustomJavaWatchable>emptyList());
    }

    protected List<CustomJavaWatchable> getSubvaluesImpl(IObjectValueProxy value) throws EvaluationException {
      // again, same as ListViewer 
      List<CustomJavaWatchable> watchables = new ArrayList<CustomJavaWatchable>();

      PrimitiveValueProxy size = ((PrimitiveValueProxy) value.invokeMethod("size", "()I"));
      watchables.add(new CollectionsWatchables.MyWatchable_size(JavaObjectValue.fromJDIValue(size.getJDIValue(), getThreadReference()), "size"));

      for (IObjectValueProxy element : EvaluationUtils.<IObjectValueProxy>toIterable(value)) {
        watchables.add(new CollectionsWatchables.MyWatchable_element(JavaObjectValue.fromJDIValue(element.getJDIValue(), getThreadReference()), "element"));
      }

      return watchables;
    }
  }
}
