package jetbrains.mps.baseLanguage.collections.constraints;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.dependencies.InferenceMethod;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.behavior.IOperation_Behavior;

public class SmartClosureParameterTypeUtil {
  public SmartClosureParameterTypeUtil() {
  }

  @InferenceMethod
  public static void equateInputType(final TypeCheckingContext typeCheckingContext, SNode scpd, SNode InputType) {
    SNode vabs = SNodeOperations.getAncestorWhereConceptInList(scpd, new String[]{"jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.baseLanguage.structure.AssignmentExpression", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.DotExpression"}, false, false);
    if (SNodeOperations.isInstanceOf(vabs, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
      {
        SNode _nodeToCheck_1029348928467 = vabs;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1206111352089", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1206111346115", true), (SNode) InputType, _info_12389875345);
      }
    } else
    if (SNodeOperations.isInstanceOf(vabs, "jetbrains.mps.baseLanguage.structure.AssignmentExpression")) {
      {
        SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(SNodeOperations.cast(vabs, "jetbrains.mps.baseLanguage.structure.AssignmentExpression"), "lValue", true);
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1206111366159", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1206111371042", true), (SNode) InputType, _info_12389875345);
      }
    } else
    if (SNodeOperations.isInstanceOf(vabs, "jetbrains.mps.baseLanguage.structure.IMethodCall") && SNodeOperations.getParent(SNodeOperations.getParent(scpd)) == vabs) {
      List<SNode> paramDecls = SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(vabs, "jetbrains.mps.baseLanguage.structure.IMethodCall"), "baseMethodDeclaration", false), "parameter", true);
      SNode pd = ListSequence.fromList(paramDecls).getElement(SNodeOperations.getIndexInParent(SNodeOperations.getParent(scpd)));
      SNode ptype = SLinkOperations.getTarget(pd, "type", true);
      if (SNodeOperations.isInstanceOf(ptype, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        {
          SNode _nodeToCheck_1029348928467 = null;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1206111460144", 0, null);
          typeCheckingContext.createEquation((SNode) InputType, (SNode) ptype, _info_12389875345);
        }
      }
    } else
    if (SNodeOperations.isInstanceOf(vabs, "jetbrains.mps.baseLanguage.structure.DotExpression")) {
      {
        SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(SNodeOperations.cast(vabs, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true);
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1206111479241", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1206111474860", true), (SNode) InputType, _info_12389875345);
      }
    }
  }

  @InferenceMethod
  public static void equateResolveType(final TypeCheckingContext typeCheckingContext, SNode scpd, SNode InputType) {
    SNode bmc = SNodeOperations.getAncestorWhereConceptInList(scpd, new String[]{"jetbrains.mps.baseLanguage.structure.IMethodCall"}, false, false);
    if (SNodeOperations.isInstanceOf(bmc, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
      {
        SNode _nodeToCheck_1029348928467 = IOperation_Behavior.call_getOperand_1213877410070(SNodeOperations.cast(bmc, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"));
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1206111787726", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1204110524611", true), (SNode) InputType, _info_12389875345);
      }
    } else
    if (SNodeOperations.isInstanceOf(bmc, "jetbrains.mps.baseLanguage.structure.ClassCreator")) {
      {
        SNode _nodeToCheck_1029348928467 = bmc;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1227649243743", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590328(jetbrains.mps.baseLanguage.collections.constraints)", "1227649243747", true), (SNode) InputType, _info_12389875345);
      }
    }
  }

  public static boolean hasResolveType(SNode scpd) {
    SNode bmc = SNodeOperations.getAncestorWhereConceptInList(scpd, new String[]{"jetbrains.mps.baseLanguage.structure.IMethodCall"}, false, false);
    return SNodeOperations.isInstanceOf(bmc, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
  }
}
