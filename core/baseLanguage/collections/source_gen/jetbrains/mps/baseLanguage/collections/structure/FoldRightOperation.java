package jetbrains.mps.baseLanguage.collections.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class FoldRightOperation extends InternalSequenceOperation {
  public static final String concept = "jetbrains.mps.baseLanguage.collections.structure.FoldRightOperation";
  public static final String SEED = "seed";

  public FoldRightOperation(SNode node) {
    super(node);
  }

  public Expression getSeed() {
    return (Expression) this.getChild(Expression.class, FoldRightOperation.SEED);
  }

  public void setSeed(Expression node) {
    super.setChild(FoldRightOperation.SEED, node);
  }

  public Expression getComb() {
    return this.ensureAdapter(Expression.class, "closure", this.getClosure());
  }

  public void setComb(Expression node) {
    this.setClosure(node);
  }

  public static FoldRightOperation newInstance(SModel sm, boolean init) {
    return (FoldRightOperation) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.FoldRightOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static FoldRightOperation newInstance(SModel sm) {
    return FoldRightOperation.newInstance(sm, false);
  }
}
