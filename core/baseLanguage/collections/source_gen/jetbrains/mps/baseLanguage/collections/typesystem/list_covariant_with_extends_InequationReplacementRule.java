package jetbrains.mps.baseLanguage.collections.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInequationReplacementRule_Runtime;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.pattern.IMatchingPattern;

public class list_covariant_with_extends_InequationReplacementRule extends AbstractInequationReplacementRule_Runtime {
  /*package*/ GeneratedMatchingPattern myMatchingPattern1;
  /*package*/ GeneratedMatchingPattern myMatchingPattern2;

  public list_covariant_with_extends_InequationReplacementRule() {
  }

  public void processInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, final TypeCheckingContext typeCheckingContext, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    {
      SNode _nodeToCheck_1029348928467 = equationInfo.getNodeWithError();
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c8959032b(jetbrains.mps.baseLanguage.collections.typesystem)", "5562883592575036766", 0, null);
      _info_12389875345.getOuterRulesIdFromInfo(equationInfo);
      typeCheckingContext.createLessThanInequality((SNode) SLinkOperations.getTarget(subtype, "elementType", true), (SNode) SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(supertype, "elementType", true), "jetbrains.mps.baseLanguage.structure.UpperBoundType"), "bound", true), false, true, _info_12389875345);
    }
  }

  public boolean checkInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    boolean result_14532009 = true;
    result_14532009 = result_14532009 && TypeChecker.getInstance().getSubtypingManager().isSubtype((SNode) SLinkOperations.getTarget(subtype, "elementType", true), (SNode) SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(supertype, "elementType", true), "jetbrains.mps.baseLanguage.structure.UpperBoundType"), "bound", true), true);
    return result_14532009;
  }

  public boolean isWeak() {
    return true;
  }

  public IsApplicableStatus isApplicableSubtypeAndPattern(SNode node) {
    {
      GeneratedMatchingPattern pattern = new list_covariant_with_extends_InequationReplacementRule.Pattern_2juelu_a0a0a0a3();
      this.myMatchingPattern1 = pattern;
      boolean b = pattern.match(node);
      return new IsApplicableStatus(b, pattern);
    }
  }

  public IsApplicableStatus isApplicableSupertypeAndPattern(SNode node) {
    {
      GeneratedMatchingPattern pattern = new list_covariant_with_extends_InequationReplacementRule.Pattern_2juelu_a0a0a0a4();
      this.myMatchingPattern2 = pattern;
      boolean b = pattern.match(node);
      return new IsApplicableStatus(b, pattern);
    }
  }

  public String getApplicableSubtypeConceptFQName() {
    return "jetbrains.mps.baseLanguage.collections.structure.ListType";
  }

  public String getApplicableSupertypeConceptFQName() {
    return "jetbrains.mps.baseLanguage.collections.structure.ListType";
  }

  public static class Pattern_2juelu_a0a0a0a3 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_sub;

    public Pattern_2juelu_a0a0a0a3() {
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_list_covariant_with_extends_l7cfoj_a0a;
        nodeToMatch_list_covariant_with_extends_l7cfoj_a0a = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.collections.structure.ListType".equals(nodeToMatch_list_covariant_with_extends_l7cfoj_a0a.getConceptFqName()))) {
          return false;
        }
        {
          String childRole_list_covariant_with_extends_l7cfoj_ = "elementType";
          if (nodeToMatch_list_covariant_with_extends_l7cfoj_a0a.getChildCount(childRole_list_covariant_with_extends_l7cfoj_) != 1) {
            return false;
          }
          {
            SNode childVar_list_covariant_with_extends_l7cfoj_a0a0 = nodeToMatch_list_covariant_with_extends_l7cfoj_a0a.getChildren(childRole_list_covariant_with_extends_l7cfoj_).get(0);
            this.patternVar_sub = childVar_list_covariant_with_extends_l7cfoj_a0a0;
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return false;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_sub = (SNode) pattern.getFieldValue("patternVar_sub");
      }
    }

    public Object getFieldValue(String fieldName) {
      if ("patternVar_sub".equals(fieldName)) {
        return patternVar_sub;
      }
      return null;
    }

    public void performActions(Object o) {
    }
  }

  public static class Pattern_2juelu_a0a0a0a4 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_super;

    public Pattern_2juelu_a0a0a0a4() {
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_list_covariant_with_extends_l7cfoj_a0a_0;
        nodeToMatch_list_covariant_with_extends_l7cfoj_a0a_0 = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.collections.structure.ListType".equals(nodeToMatch_list_covariant_with_extends_l7cfoj_a0a_0.getConceptFqName()))) {
          return false;
        }
        {
          String childRole_list_covariant_with_extends_l7cfoj__0 = "elementType";
          if (nodeToMatch_list_covariant_with_extends_l7cfoj_a0a_0.getChildCount(childRole_list_covariant_with_extends_l7cfoj__0) != 1) {
            return false;
          }
          {
            SNode childVar_list_covariant_with_extends_l7cfoj_a0a0_0 = nodeToMatch_list_covariant_with_extends_l7cfoj_a0a_0.getChildren(childRole_list_covariant_with_extends_l7cfoj__0).get(0);
            {
              SNode nodeToMatch_list_covariant_with_extends_l7cfoj_a0a0;
              nodeToMatch_list_covariant_with_extends_l7cfoj_a0a0 = childVar_list_covariant_with_extends_l7cfoj_a0a0_0;
              if (!("jetbrains.mps.baseLanguage.structure.UpperBoundType".equals(nodeToMatch_list_covariant_with_extends_l7cfoj_a0a0.getConceptFqName()))) {
                return false;
              }
              {
                String childRole_list_covariant_with_extends_l7cfoj__1 = "bound";
                if (nodeToMatch_list_covariant_with_extends_l7cfoj_a0a0.getChildCount(childRole_list_covariant_with_extends_l7cfoj__1) != 1) {
                  return false;
                }
                {
                  SNode childVar_list_covariant_with_extends_l7cfoj_a0a0a = nodeToMatch_list_covariant_with_extends_l7cfoj_a0a0.getChildren(childRole_list_covariant_with_extends_l7cfoj__1).get(0);
                  this.patternVar_super = childVar_list_covariant_with_extends_l7cfoj_a0a0a;
                }
              }
            }
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return false;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_super = (SNode) pattern.getFieldValue("patternVar_super");
      }
    }

    public Object getFieldValue(String fieldName) {
      if ("patternVar_super".equals(fieldName)) {
        return patternVar_super;
      }
      return null;
    }

    public void performActions(Object o) {
    }
  }
}
