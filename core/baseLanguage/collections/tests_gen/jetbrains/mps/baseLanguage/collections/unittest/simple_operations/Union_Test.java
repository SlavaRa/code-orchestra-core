package jetbrains.mps.baseLanguage.collections.unittest.simple_operations;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import junit.framework.Assert;

public class Union_Test extends TestCase {
  public void test_union1() throws Exception {
    Iterable<Integer> s1 = Sequence.fromClosure(new ISequenceClosure<Integer>() {
      public Iterable<Integer> iterable() {
        return new Iterable<Integer>() {
          public Iterator<Integer> iterator() {
            return new YieldingIterator<Integer>() {
              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this.__CP__ = 3;
                      this.yield((Integer) 1);
                      return true;
                    case 3:
                      this.__CP__ = 4;
                      this.yield((Integer) 2);
                      return true;
                    case 4:
                      this.__CP__ = 1;
                      this.yield((Integer) 3);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    });
    Iterable<Integer> s2 = Sequence.fromClosure(new ISequenceClosure<Integer>() {
      public Iterable<Integer> iterable() {
        return new Iterable<Integer>() {
          public Iterator<Integer> iterator() {
            return new YieldingIterator<Integer>() {
              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this.__CP__ = 3;
                      this.yield((Integer) 2);
                      return true;
                    case 3:
                      this.__CP__ = 4;
                      this.yield((Integer) 3);
                      return true;
                    case 4:
                      this.__CP__ = 1;
                      this.yield((Integer) 4);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    });
    Iterable<Integer> s3 = Sequence.fromIterable(s1).union(Sequence.fromIterable(s2));
    Assert.assertSame(Sequence.fromIterable(s3).count(), 4);
    // order in s3 is undefined 
    Assert.assertTrue(Sequence.fromIterable(s3).contains(1));
    Assert.assertTrue(Sequence.fromIterable(s3).contains(2));
    Assert.assertTrue(Sequence.fromIterable(s3).contains(3));
    Assert.assertTrue(Sequence.fromIterable(s3).contains(4));
    // null test 
    s1 = null;
    Iterable<Integer> s2_ = Sequence.fromIterable(s1).union(Sequence.fromIterable(s2));
    Assert.assertEquals(3, Sequence.fromIterable(s2_).count());
    Iterable<Integer> s2__ = Sequence.fromIterable(s2).union(null);
    Assert.assertEquals(3, Sequence.fromIterable(s2__).count());
    Iterable<Integer> s4 = Sequence.fromIterable(s1).union(null);
    Assert.assertNull(Sequence.fromIterable(s4).first());
  }
}
