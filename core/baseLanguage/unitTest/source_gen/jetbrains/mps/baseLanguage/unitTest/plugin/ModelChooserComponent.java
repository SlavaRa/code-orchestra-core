package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.runConfigurations.runtime.BaseChooserComponent;
import java.util.List;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;
import java.util.Collections;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.GlobalScope;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ModelChooserComponent extends BaseChooserComponent {
  private final List<SModelReference> myCheckedModels = ListSequence.fromList(new ArrayList<SModelReference>());

  public ModelChooserComponent() {
    super();
    this.init(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        ModelChooserComponent.this.collectModels();
        StringBuilder result = new StringBuilder();
        SModelReference modelRef = CommonChoosers.showDialogModelChooser(ModelChooserComponent.this, ModelChooserComponent.this.myCheckedModels, Collections.EMPTY_LIST);
        if (modelRef != null) {
          result.append(modelRef.getLongName());
          ModelChooserComponent.this.setText(result.toString());
        }
      }
    });
  }

  private void collectModels() {
    ListSequence.fromList(this.myCheckedModels).clear();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        List<SNode> nodes = ListSequence.fromListWithValues(new ArrayList<SNode>(), FindUsagesManager.getInstance().findInstances(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"), GlobalScope.getInstance(), new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator()), false));
        for (SNode node : nodes) {
          SModel model = SNodeOperations.getModel(node);
          SModelReference md = model.getSModelReference();
          if (ListSequence.fromList(ModelChooserComponent.this.myCheckedModels).contains(md)) {
            continue;
          }
          ListSequence.fromList(ModelChooserComponent.this.myCheckedModels).addElement(md);
        }
      }
    });
  }
}
