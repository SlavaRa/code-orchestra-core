package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class JUnit4MethodWrapper extends AbstractTestWrapper<SNode> {
  public JUnit4MethodWrapper(SNode method) {
    super(method);
  }

  public boolean isTestCase() {
    return false;
  }

  @Nullable
  @Override
  public ITestNodeWrapper getTestCase() {
    SNode clazz = SNodeOperations.getAncestor(myNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    if ((clazz != null)) {
      return new JUnit3TestWrapper(clazz);
    }
    return null;
  }

  public static boolean isJUnit4TestMethod(SNode method) {
    if (!(BaseMethodDeclaration_Behavior.call_isAbstract_1232982539764(method)) && (SLinkOperations.getTarget(method, "visibility", true) != null) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility") && (SPropertyOperations.getString(method, "name") != null)) {
      SNode annotation = ListSequence.fromList(SLinkOperations.getTargets(method, "annotation", true)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return eq_lclll2_a0a0a0a0a0a0a0a0(check_lclll2_a0a0a0a0a0a0a(it), SLinkOperations.getTarget(new JUnit4MethodWrapper.QuotationClass_lclll2_a0a0a0a0a0a0a0a().createNode(), "annotation", false));
        }
      });
      if (annotation != null) {
        return true;
      }
    }
    return false;
  }

  private static SNode check_lclll2_a0a0a0a0a0a0a(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return SLinkOperations.getTarget(checkedDotOperand, "annotation", false);
    }
    return null;
  }

  private static boolean eq_lclll2_a0a0a0a0a0a0a0a0(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  public static class QuotationClass_lclll2_a0a0a0a0a0a0a0a {
    public QuotationClass_lclll2_a0a0a0a0a0a0a0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("annotation", quotedNode1_2, SModelReference.fromString("f:java_stub#37a3367b-1fb2-44d8-aa6b-18075e74e003#org.junit(MPS.Classpath/org.junit@java_stub)"), SNodeId.fromString("~Test")));
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
