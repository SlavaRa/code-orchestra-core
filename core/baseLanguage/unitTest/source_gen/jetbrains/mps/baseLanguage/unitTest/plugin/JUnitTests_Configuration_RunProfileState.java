package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.api.run.DebuggerRunProfileState;
import com.intellij.execution.configurations.RunProfileState;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.Executor;
import com.intellij.execution.configurations.ConfigurationPerRunnerSettings;
import com.intellij.execution.configurations.RunnerSettings;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.ExecutionResult;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.project.Project;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.ui.ConsoleView;
import jetbrains.mps.execution.api.configurations.ConsoleCreator;
import jetbrains.mps.execution.lib.JavaStackTraceFilter;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.execution.api.configurations.DefaultExecutionResult;
import jetbrains.mps.execution.api.configurations.DefaultExecutionConsole;
import jetbrains.mps.debug.api.run.IDebuggerConfiguration;
import com.intellij.execution.executors.DefaultRunExecutor;
import com.intellij.execution.executors.DefaultDebugExecutor;

public class JUnitTests_Configuration_RunProfileState extends DebuggerRunProfileState implements RunProfileState {
  @NotNull
  private final JUnitTests_Configuration myRunConfiguration;
  @NotNull
  private final ExecutionEnvironment myEnvironment;

  public JUnitTests_Configuration_RunProfileState(@NotNull JUnitTests_Configuration configuration, @NotNull Executor executor, @NotNull ExecutionEnvironment environment) {
    myRunConfiguration = configuration;
    myEnvironment = environment;
  }

  public ConfigurationPerRunnerSettings getConfigurationSettings() {
    return null;
  }

  public RunnerSettings getRunnerSettings() {
    return null;
  }

  @Nullable
  public ExecutionResult execute(Executor executor, @NotNull ProgramRunner runner) throws ExecutionException {
    Project project = myEnvironment.getProject();
    List<ITestNodeWrapper> nodeWrappers = ListSequence.fromList(myRunConfiguration.getTests()).toListSequence();

    final ProcessHandler process = new Junit_Command().setDebuggerSettings(myDebuggerSettings.getCommandLine(true)).createProcess(nodeWrappers, myRunConfiguration.getJavaRunParameters().getJavaRunParameters());

    TestRunState runState = new TestRunState(nodeWrappers);
    TestEventsDispatcher eventsDispatcher = new TestEventsDispatcher(runState);
    ConsoleView console = ConsoleCreator.createConsoleView(project, false);
    console.addMessageFilter(new JavaStackTraceFilter());
    final UnitTestViewComponent viewComponent = new UnitTestViewComponent(project, ProjectOperationContext.get(project), console, runState, new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        if (process != null) {
          process.destroyProcess();
        }
      }
    });

    {
      ProcessHandler _processHandler = process;
      _processHandler.addProcessListener(new UnitTestProcessListener(eventsDispatcher));
      return new DefaultExecutionResult(_processHandler, new DefaultExecutionConsole(viewComponent, new _FunctionTypes._void_P0_E0() {
        public void invoke() {
          viewComponent.dispose();
        }
      }));
    }
  }

  @NotNull
  public IDebuggerConfiguration getDebuggerConfiguration() {
    return Junit_Command.getDebuggerConfiguration();
  }

  public static boolean canExecute(String executorId) {
    if (DefaultRunExecutor.EXECUTOR_ID.equals(executorId)) {
      return true;
    }
    if (DefaultDebugExecutor.EXECUTOR_ID.equals(executorId)) {
      return true;
    }
    return false;
  }
}
