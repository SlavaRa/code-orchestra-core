package jetbrains.mps.baseLanguage.unitTest.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class TestMethod_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getTestCase_1216134500045(SNode thisNode) {
    SNode method = thisNode;
    return SNodeOperations.getAncestor(method, "jetbrains.mps.baseLanguage.unitTest.structure.BTestCase", false, false);
  }

  public static String virtual_getTestName_1216136419751(SNode thisNode) {
    SNode method = thisNode;
    return SPropertyOperations.getString(method, "name");
  }

  public static List<SNode> virtual_getThrowableTypes_6204026822016975623(SNode thisNode) {
    List<SNode> result = new ArrayList<SNode>();
    ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "throwsItem", true)));
    ListSequence.fromList(result).addElement(new TestMethod_Behavior.QuotationClass_6y0hvj_a0a0c0d().createNode());
    return result;
  }

  public static class QuotationClass_6y0hvj_a0a0c0d {
    public QuotationClass_6y0hvj_a0a0c0d() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), SNodeId.fromString("~Exception")));
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
