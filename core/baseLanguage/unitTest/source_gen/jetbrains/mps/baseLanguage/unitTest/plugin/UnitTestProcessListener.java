package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import com.intellij.execution.process.ProcessAdapter;
import jetbrains.mps.baseLanguage.unitTest.runtime.TestEvent;
import com.intellij.execution.process.ProcessTerminatedListener;
import com.intellij.execution.process.ProcessEvent;
import com.intellij.openapi.util.Key;
import com.intellij.execution.process.ProcessOutputTypes;
import org.apache.commons.lang.StringUtils;

public class UnitTestProcessListener extends ProcessAdapter {
  private final StringBuffer myBuffer = new StringBuffer();
  private final TestEventsDispatcher myDispatcher;
  private TestEvent myLastEvent;

  public UnitTestProcessListener(TestEventsDispatcher dispatcher) {
    myDispatcher = dispatcher;
  }

  private String getLine(String text) {
    text = text.replaceAll("\r\n", "\n");
    myBuffer.append(text);

    int index = myBuffer.lastIndexOf("\n");
    if (index > 0) {
      String lineToAppend = myBuffer.substring(0, index);
      myBuffer.replace(0, index, "");
      return lineToAppend;
    } else {
      return null;
    }
  }

  private boolean isTerminatedEvent() {
    for (StackTraceElement element : Thread.currentThread().getStackTrace()) {
      if (element.getClassName().equals(ProcessTerminatedListener.class.getName())) {
        return true;
      }
    }
    return false;
  }

  public void onTextAvailable(ProcessEvent event, Key k) {
    if (this.isTerminatedEvent()) {
      this.myDispatcher.onProcessTerminated(event.getText());
    }
    boolean error = ProcessOutputTypes.STDERR.equals(k);
    boolean system = ProcessOutputTypes.SYSTEM.equals(k);
    String text = (error || system ?
      event.getText() :
      this.getLine(event.getText())
    );
    if (text == null) {
      return;
    }
    String textTrimmed = StringUtils.trim(text);
    TestEvent testEvent = TestEvent.parse(textTrimmed);
    if (testEvent != null) {
      myLastEvent = testEvent;
      this.myDispatcher.onTestEvent(testEvent);
    } else {
      if (myLastEvent != null && (TestEvent.FAILURE_TEST_PREFIX.equals(myLastEvent.getToken()) || TestEvent.ERROR_TEST_PREFIX.equals(myLastEvent.getToken()))) {
        k = ProcessOutputTypes.STDERR;
      }
      this.myDispatcher.onSimpleTextAvailable(text, k);
    }
  }
}
