package jetbrains.mps.baseLanguage.classifiers.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class CreateReferenceOnClassifier_Intention extends BaseIntention implements Intention {
  public CreateReferenceOnClassifier_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.classifiers.structure.ThisClassifierExpression";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Create a Reference on Outer Classifier";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SNodeOperations.getAncestor(SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", false, false), "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", false, false) != null);
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode outerConcept = SNodeOperations.getAncestor(SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", false, false), "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", false, false);
    SLinkOperations.setTarget(node, "classifier", outerConcept, false);
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.classifiers.intentions";
  }
}
