package jetbrains.mps.baseLanguage.classifiers.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DefaultClassifierMethodCallOperation extends BaseConcept implements IMemberOperation {
  public static final String concept = "jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String MEMBER = "member";
  public static final String ACTUAL_ARGUMENT = "actualArgument";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public DefaultClassifierMethodCallOperation(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(DefaultClassifierMethodCallOperation.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(DefaultClassifierMethodCallOperation.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(DefaultClassifierMethodCallOperation.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(DefaultClassifierMethodCallOperation.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(DefaultClassifierMethodCallOperation.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(DefaultClassifierMethodCallOperation.VIRTUAL_PACKAGE, value);
  }

  public IMember getMember() {
    return (IMember) this.getReferent(IMember.class, DefaultClassifierMethodCallOperation.MEMBER);
  }

  public void setMember(IMember node) {
    super.setReferent(DefaultClassifierMethodCallOperation.MEMBER, node);
  }

  public DefaultClassifierMethodDeclaration getMethod() {
    return this.ensureAdapter(DefaultClassifierMethodDeclaration.class, "member", this.getMember());
  }

  public void setMethod(DefaultClassifierMethodDeclaration node) {
    this.setMember(node);
  }

  public int getActualArgumentsCount() {
    return this.getChildCount(DefaultClassifierMethodCallOperation.ACTUAL_ARGUMENT);
  }

  public Iterator<Expression> actualArguments() {
    return this.children(Expression.class, DefaultClassifierMethodCallOperation.ACTUAL_ARGUMENT);
  }

  public List<Expression> getActualArguments() {
    return this.getChildren(Expression.class, DefaultClassifierMethodCallOperation.ACTUAL_ARGUMENT);
  }

  public void addActualArgument(Expression node) {
    this.addChild(DefaultClassifierMethodCallOperation.ACTUAL_ARGUMENT, node);
  }

  public void insertActualArgument(Expression prev, Expression node) {
    this.insertChild(prev, DefaultClassifierMethodCallOperation.ACTUAL_ARGUMENT, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(DefaultClassifierMethodCallOperation.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, DefaultClassifierMethodCallOperation.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, DefaultClassifierMethodCallOperation.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(DefaultClassifierMethodCallOperation.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, DefaultClassifierMethodCallOperation.SMODEL_ATTRIBUTE, node);
  }

  public static DefaultClassifierMethodCallOperation newInstance(SModel sm, boolean init) {
    return (DefaultClassifierMethodCallOperation) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodCallOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DefaultClassifierMethodCallOperation newInstance(SModel sm) {
    return DefaultClassifierMethodCallOperation.newInstance(sm, false);
  }
}
