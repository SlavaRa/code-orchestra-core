package jetbrains.mps.baseLanguage.tuples.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class NamedTupleLiteral extends Expression {
  public static final String concept = "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleLiteral";
  public static final String CPR_LeftBracket = "leftBracket";
  public static final String CPR_RightBracket = "rightBracket";
  public static final String TUPLE_DECLARATION = "tupleDeclaration";
  public static final String COMPONENT_REF = "componentRef";

  public NamedTupleLiteral(SNode node) {
    super(node);
  }

  public NamedTupleDeclaration getTupleDeclaration() {
    return (NamedTupleDeclaration) this.getReferent(NamedTupleDeclaration.class, NamedTupleLiteral.TUPLE_DECLARATION);
  }

  public void setTupleDeclaration(NamedTupleDeclaration node) {
    super.setReferent(NamedTupleLiteral.TUPLE_DECLARATION, node);
  }

  public int getComponentRefsCount() {
    return this.getChildCount(NamedTupleLiteral.COMPONENT_REF);
  }

  public Iterator<NamedTupleComponentReference> componentRefs() {
    return this.children(NamedTupleComponentReference.class, NamedTupleLiteral.COMPONENT_REF);
  }

  public List<NamedTupleComponentReference> getComponentRefs() {
    return this.getChildren(NamedTupleComponentReference.class, NamedTupleLiteral.COMPONENT_REF);
  }

  public void addComponentRef(NamedTupleComponentReference node) {
    this.addChild(NamedTupleLiteral.COMPONENT_REF, node);
  }

  public void insertComponentRef(NamedTupleComponentReference prev, NamedTupleComponentReference node) {
    this.insertChild(prev, NamedTupleLiteral.COMPONENT_REF, node);
  }

  public static NamedTupleLiteral newInstance(SModel sm, boolean init) {
    return (NamedTupleLiteral) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleLiteral", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NamedTupleLiteral newInstance(SModel sm) {
    return NamedTupleLiteral.newInstance(sm, false);
  }
}
