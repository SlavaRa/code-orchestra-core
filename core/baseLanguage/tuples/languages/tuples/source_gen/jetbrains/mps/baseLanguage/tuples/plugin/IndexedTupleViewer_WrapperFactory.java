package jetbrains.mps.baseLanguage.tuples.plugin;

/*Generated by MPS */

import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapperFactory;
import jetbrains.mps.debug.runtime.java.programState.proxies.ValueWrapper;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaValue;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debug.evaluation.EvaluationUtils;
import jetbrains.mps.debug.evaluation.EvaluationException;
import com.sun.jdi.Value;
import java.util.List;
import jetbrains.mps.debug.runtime.java.programState.watchables.CustomJavaWatchable;
import jetbrains.mps.debug.evaluation.proxies.IObjectValueProxy;
import java.util.Collections;
import java.util.ArrayList;
import jetbrains.mps.debug.evaluation.proxies.IArrayValueProxy;
import jetbrains.mps.debug.runtime.java.programState.proxies.JavaObjectValue;

public class IndexedTupleViewer_WrapperFactory extends ValueWrapperFactory {
  public IndexedTupleViewer_WrapperFactory() {
  }

  public ValueWrapper createValueWrapper(JavaValue value) {
    return new IndexedTupleViewer_WrapperFactory.IndexedTupleViewerWrapper(value);
  }

  @Override
  public boolean canWrapValue(@NotNull final JavaValue javaValue) {
    return EvaluationUtils.consumeEvaluationException(new EvaluationUtils.EvaluationInvocatable<Boolean>() {
      public Boolean invoke() throws EvaluationException {
        Value value = javaValue.getValue();
        if (value == null) {
          return false;
        }
        if (!(EvaluationUtils.isInstanceOf(value.type(), "Ljetbrains/mps/baseLanguage/tuples/runtime/MultiTuple;", value.virtualMachine()))) {
          return false;
        }
        return true;
      }
    }, false);
  }

  public static class IndexedTupleViewerWrapper extends ValueWrapper {
    public IndexedTupleViewerWrapper(JavaValue value) {
      super(value);
    }

    protected List<CustomJavaWatchable> getSubvaluesImpl() {
      return EvaluationUtils.consumeEvaluationException(new EvaluationUtils.EvaluationInvocatable<List<CustomJavaWatchable>>() {
        public List<CustomJavaWatchable> invoke() throws EvaluationException {
          return getSubvaluesImpl((IObjectValueProxy) myValueProxy);
        }
      }, Collections.<CustomJavaWatchable>emptyList());
    }

    protected List<CustomJavaWatchable> getSubvaluesImpl(IObjectValueProxy value) throws EvaluationException {
      List<CustomJavaWatchable> result = new ArrayList<CustomJavaWatchable>();
      IArrayValueProxy values = ((IArrayValueProxy) value.getFieldValue("values"));
      for (int i = 0; i < ((IArrayValueProxy) values).getLength(); i++) {
        result.add(new TuplesWatchables.MyWatchable_element(JavaObjectValue.fromJDIValue(((IObjectValueProxy) values.getElementAt(i)).getJDIValue(), getThreadReference()), "element"));
      }
      return result;
    }

    public String getValuePresentation() {
      return EvaluationUtils.consumeEvaluationException(new EvaluationUtils.EvaluationInvocatable<String>() {
        public String invoke() throws EvaluationException {
          return getValuePresentation((IObjectValueProxy) myValueProxy);
        }
      }, "");
    }

    protected String getValuePresentation(IObjectValueProxy value) throws EvaluationException {
      return "tuple " + (String) (((IObjectValueProxy) value.invokeMethod("toString", "()Ljava/lang/String;"))).getJavaValue();
    }
  }
}
