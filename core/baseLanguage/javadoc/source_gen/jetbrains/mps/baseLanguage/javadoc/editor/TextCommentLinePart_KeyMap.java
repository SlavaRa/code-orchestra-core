package jetbrains.mps.baseLanguage.javadoc.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.javadoc.behavior.CommentLinePart_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.javadoc.behavior.CommentLine_Behavior;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;

public class TextCommentLinePart_KeyMap extends EditorCellKeyMap {
  public TextCommentLinePart_KeyMap() {
    this.setApplicableToEveryModel(false);
    EditorCellKeyMapAction action;
    action = new TextCommentLinePart_KeyMap.TextCommentLinePart_KeyMap_Action0();
    this.putAction("any", "VK_ENTER", action);
    action = new TextCommentLinePart_KeyMap.TextCommentLinePart_KeyMap_Action1();
    this.putAction("any", "VK_BACK_SPACE", action);
    action = new TextCommentLinePart_KeyMap.TextCommentLinePart_KeyMap_Action2();
    this.putAction("any", "VK_DELETE", action);
  }

  public static class TextCommentLinePart_KeyMap_Action0 extends EditorCellKeyMapAction {
    public TextCommentLinePart_KeyMap_Action0() {
      this.setShownInPopupMenu(false);
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (contextNode.isInstanceOfConcept("jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")) {
        return true;
      }
      return false;
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode nextLine;
      EditorCell_Label editorCell = ((EditorCell_Label) editorContext.getSelectedCell());
      int caretPosition = editorCell.getCaretPosition();
      nextLine = TextCommentPartUtil.divideLineBetweenCaretAndInsertNewLine(node, caretPosition, caretPosition, editorCell.getText());
      editorContext.selectWRTFocusPolicy(nextLine);
      ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(0);
    }

    public String getKeyStroke() {
      return " ENTER";
    }
  }

  public static class TextCommentLinePart_KeyMap_Action1 extends EditorCellKeyMapAction {
    public TextCommentLinePart_KeyMap_Action1() {
      super.setCaretPolicy(EditorCellKeyMapAction.CARET_AT_FIRST_POSITION);
      this.setShownInPopupMenu(false);
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (contextNode.isInstanceOfConcept("jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")) {
        return true;
      }
      return false;
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      //  Caret is at the beginning of part 
      boolean isFirstPart;
      boolean isFirstLine;
      SNode nodeToSelect;
      int caret;
      isFirstPart = (SNodeOperations.getPrevSibling(node) == null);
      isFirstLine = (SNodeOperations.getPrevSibling(SNodeOperations.getParent(node)) == null);
      if (isFirstPart) {
        if (isFirstLine) {
          //  This is beginning of comment lines container 
          if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(node)), "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment")) {
            //  Shouldn't delete documentation comment 
          } else if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(node)), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart")) {
            NodeCaretPair nodeCaret = CommentLinePart_Behavior.call_smartDelete_9042833497008205283(SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.getParent(node)), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"), true);
            editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
            ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
          }
          return;
        } else {
          //  This is the beginning of line 
          SNode curLine = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
          SNode prevLine = SNodeOperations.cast(SNodeOperations.getPrevSibling(curLine), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
          nodeToSelect = ListSequence.fromList(SLinkOperations.getTargets(prevLine, "part", true)).last();
          int index = ListSequence.fromList(SLinkOperations.getTargets(prevLine, "part", true)).count() - 1;
          ListSequence.fromList(SLinkOperations.getTargets(prevLine, "part", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(curLine, "part", true)));
          if (SNodeOperations.isInstanceOf(nodeToSelect, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart") && StringUtils.isNotEmpty(SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text"))) {
            caret = SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text").length();
          } else {
            caret = 0;
          }
          CommentLine_Behavior.call_tryMergeToRight_439148907936414403(prevLine, index);

          SNodeOperations.deleteNode(curLine);
          editorContext.selectWRTFocusPolicy(nodeToSelect);
          ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(caret);
          return;
        }
      } else {
        //  Caret is at the beginning of text part inside comment line 
        if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(node), "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")) {
          nodeToSelect = SNodeOperations.getPrevSibling(node);
          SNode linePart = SNodeOperations.cast(nodeToSelect, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart");
          if (StringUtils.isEmpty(SPropertyOperations.getString(linePart, "text"))) {
            SNodeOperations.deleteNode(nodeToSelect);
            nodeToSelect = node;
          } else {
            SPropertyOperations.set(linePart, "text", SPropertyOperations.getString(linePart, "text").substring(0, SPropertyOperations.getString(linePart, "text").length() - 1));
          }
          editorContext.selectWRTFocusPolicy(nodeToSelect);
        } else if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(node), "jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart") || SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(node), "jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement")) {
          NodeCaretPair nodeCaret = CommentLinePart_Behavior.call_smartDelete_9042833497008205283(SNodeOperations.cast(SNodeOperations.getPrevSibling(node), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"), false);
          editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
          ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
        }
        return;
      }
    }

    public String getKeyStroke() {
      return " BACK_SPACE";
    }
  }

  public static class TextCommentLinePart_KeyMap_Action2 extends EditorCellKeyMapAction {
    public TextCommentLinePart_KeyMap_Action2() {
      this.setShownInPopupMenu(false);
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (contextNode.isInstanceOfConcept("jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")) {
        return true;
      }
      return false;
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      final Wrappers._T<SNode> nodeToSelect = new Wrappers._T<SNode>(null);
      final Wrappers._int caret = new Wrappers._int(-1);
      EditorCell_Label selectedCell = ((EditorCell_Label) editorContext.getSelectedCell());
      if (StringUtils.isNotEmpty(selectedCell.getSelectedText())) {
        selectedCell.deleteSelection();
        if (StringUtils.isEmpty(selectedCell.getText())) {
          if ((SNodeOperations.getNextSibling(node) == null)) {
            CommentLine_Behavior.call_tryMergeToRight_439148907936414403(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine"), SNodeOperations.getIndexInParent(node));
          } else {
            nodeToSelect.value = SNodeOperations.getNextSibling(node);
            SNodeOperations.deleteNode(node);
          }
        }
        editorContext.selectWRTFocusPolicy(nodeToSelect.value);
        return;
      } else if (selectedCell.getCaretPosition() == selectedCell.getText().length()) {
        //  Caret is at the end of part 
        final Wrappers._boolean isLastPart = new Wrappers._boolean();
        final Wrappers._boolean isLastLine = new Wrappers._boolean();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            isLastPart.value = (SNodeOperations.getNextSibling(node) == null);
            isLastLine.value = (SNodeOperations.getNextSibling(SNodeOperations.getParent(node)) == null);
          }
        });
        if (isLastPart.value) {
          if (isLastLine.value) {
            //  This is end of comment lines container 
            if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(node)), "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment")) {
              //  Shouldn't delete documentation comment 
            } else if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(SNodeOperations.getParent(node)), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart")) {
              NodeCaretPair nodeCaret = CommentLinePart_Behavior.call_smartDelete_9042833497008205283(SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.getParent(node)), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"), false);
              editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
              ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
            }
            return;
          } else {
            //  This is the end of line 
            ModelAccess.instance().runWriteActionInCommand(new Runnable() {
              public void run() {
                SNode curLine = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
                SNode nextLine = SNodeOperations.cast(SNodeOperations.getNextSibling(curLine), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine");
                nodeToSelect.value = ListSequence.fromList(SLinkOperations.getTargets(curLine, "part", true)).last();
                int index = SNodeOperations.getIndexInParent(node);
                ListSequence.fromList(SLinkOperations.getTargets(curLine, "part", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(nextLine, "part", true)));
                if (SNodeOperations.isInstanceOf(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart") && StringUtils.isNotEmpty(SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text"))) {
                  caret.value = SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text").length();
                } else {
                  caret.value = 0;
                }
                CommentLine_Behavior.call_tryMergeToRight_439148907936414403(curLine, index);

                SNodeOperations.deleteNode(nextLine);
                editorContext.selectWRTFocusPolicy(nodeToSelect.value);
                ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(caret.value);
              }
            });
            return;
          }
        } else {
          //  Caret is at the end of text part inside comment line 
          if (SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(node), "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart")) {
            nodeToSelect.value = SNodeOperations.getNextSibling(node);
            if (StringUtils.isEmpty(SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text"))) {
              SNodeOperations.deleteNode(nodeToSelect.value);
              nodeToSelect.value = node;
            } else {
              SPropertyOperations.set(SNodeOperations.cast(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text", SPropertyOperations.getString(SNodeOperations.cast(nodeToSelect.value, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), "text").substring(1));
            }
            editorContext.selectWRTFocusPolicy(nodeToSelect.value);
            ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(caret.value);
          } else if (SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(node), "jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart") || SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(node), "jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement")) {
            NodeCaretPair nodeCaret = CommentLinePart_Behavior.call_smartDelete_9042833497008205283(SNodeOperations.cast(SNodeOperations.getNextSibling(node), "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"), true);
            editorContext.selectWRTFocusPolicy(nodeCaret.myNode);
            ((EditorCell_Label) editorContext.getSelectedCell()).setCaretPosition(nodeCaret.myCaret);
          }
          return;
        }
      } else {
        SPropertyOperations.set(node, "text", SPropertyOperations.getString(node, "text").substring(0, selectedCell.getCaretPosition()) + SPropertyOperations.getString(node, "text").substring(selectedCell.getCaretPosition() + 1));
        return;
      }
    }

    public String getKeyStroke() {
      return " DELETE";
    }
  }
}
