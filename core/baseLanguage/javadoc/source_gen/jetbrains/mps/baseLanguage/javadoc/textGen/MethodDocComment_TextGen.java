package jetbrains.mps.baseLanguage.javadoc.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.textGen.TextGenManager;

public class MethodDocComment_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    DocCommentTextGen.docCommentStart(node, this);

    if (ListSequence.fromList(SLinkOperations.getTargets(node, "param", true)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getTargets(node, "param", true)) {
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
      }
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "throwsTag", true)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getTargets(node, "throwsTag", true)) {
        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());
      }
    }
    if ((SLinkOperations.getTarget(node, "return", true) != null)) {
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "return", true), this.getSNode());
    }

    DocCommentTextGen.docCommentEnd(node, this);
  }
}
