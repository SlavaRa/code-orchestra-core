package jetbrains.mps.baseLanguage.runConfigurations.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.lang.plugin.editor.RunConfigurationHeader;
import jetbrains.mps.lang.plugin.editor.RunConfigurationPresentation;
import jetbrains.mps.lang.plugin.editor.RunConfigurationBody;
import jetbrains.mps.lang.plugin.editor.RunConfigurationMethods;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.nodeEditor.BlockCells;

public class JavaRunConfiguration_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_gt2apr_a(editorContext, node);
  }

  private EditorCell createCollection_gt2apr_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_gt2apr_a");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createCollection_gt2apr_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_gt2apr_b0(editorContext, node));
    if (renderingCondition_gt2apr_a2a(node, editorContext, editorContext.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createConstant_gt2apr_c0(editorContext, node));
    }
    return editorCell;
  }

  private EditorCell createCollection_gt2apr_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_gt2apr_a0");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createComponent_gt2apr_a0a(editorContext, node));
    if (renderingCondition_gt2apr_a1a0(node, editorContext, editorContext.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createConstant_gt2apr_b0a(editorContext, node));
    }
    return editorCell;
  }

  private EditorCell createCollection_gt2apr_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_gt2apr_b0");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createIndentCell_gt2apr_a1a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_gt2apr_b1a(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_gt2apr_b1a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_gt2apr_b1a");
    editorCell.addEditorCell(this.createComponent_gt2apr_a1b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_gt2apr_b1b0(editorContext, node));
    editorCell.addEditorCell(this.createComponent_gt2apr_c1b0(editorContext, node));
    editorCell.addEditorCell(this.createComponent_gt2apr_d1b0(editorContext, node));
    return editorCell;
  }

  private EditorCell createComponent_gt2apr_a0a(EditorContext editorContext, SNode node) {
    AbstractCellProvider provider = new RunConfigurationHeader(node);
    EditorCell editorCell = provider.createEditorCell(editorContext);
    return editorCell;
  }

  private EditorCell createComponent_gt2apr_a1b0(EditorContext editorContext, SNode node) {
    AbstractCellProvider provider = new RunConfigurationPresentation(node);
    EditorCell editorCell = provider.createEditorCell(editorContext);
    return editorCell;
  }

  private EditorCell createComponent_gt2apr_c1b0(EditorContext editorContext, SNode node) {
    AbstractCellProvider provider = new RunConfigurationBody(node);
    EditorCell editorCell = provider.createEditorCell(editorContext);
    return editorCell;
  }

  private EditorCell createComponent_gt2apr_d1b0(EditorContext editorContext, SNode node) {
    AbstractCellProvider provider = new RunConfigurationMethods(node);
    EditorCell editorCell = provider.createEditorCell(editorContext);
    return editorCell;
  }

  private EditorCell createConstant_gt2apr_b0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "{");
    editorCell.setCellId("Constant_gt2apr_b0a");
    BaseLanguageStyle_StyleSheet.getLeftBrace(editorCell).apply(editorCell);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_gt2apr_b1b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_gt2apr_b1b0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_gt2apr_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "}");
    editorCell.setCellId("Constant_gt2apr_c0");
    BaseLanguageStyle_StyleSheet.getRightBrace(editorCell).apply(editorCell);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createIndentCell_gt2apr_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Indent result = new EditorCell_Indent(editorContext, node);
    return result;
  }

  private static boolean renderingCondition_gt2apr_a1a0(SNode node, EditorContext editorContext, IScope scope) {
    return BlockCells.useBraces();
  }

  private static boolean renderingCondition_gt2apr_a2a(SNode node, EditorContext editorContext, IScope scope) {
    return BlockCells.useBraces();
  }
}
