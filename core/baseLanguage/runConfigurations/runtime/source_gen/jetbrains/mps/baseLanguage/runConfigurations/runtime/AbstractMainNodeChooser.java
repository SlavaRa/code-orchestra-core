package jetbrains.mps.baseLanguage.runConfigurations.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.findUsages.FindUsagesManager;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public abstract class AbstractMainNodeChooser extends BaseChooserComponent {
  private SNode myNode;
  private final Map<IJavaNodeChangeListener, _FunctionTypes._void_P1_E0<? super SNode>> myLegacyListenersMap = MapSequence.fromMap(new HashMap<IJavaNodeChangeListener, _FunctionTypes._void_P1_E0<? super SNode>>());
  private final List<_FunctionTypes._void_P1_E0<? super SNode>> myListeners = ListSequence.fromList(new ArrayList<_FunctionTypes._void_P1_E0<? super SNode>>());

  public AbstractMainNodeChooser() {
    this.init(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {

        final FindUsagesManager findUsegesManager = FindUsagesManager.getInstance();
        final FindUsagesManager.ProgressAdapter progressAdapter = new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator());

        final Wrappers._T<List<SNode>> toChooseFrom = new Wrappers._T<List<SNode>>();
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            toChooseFrom.value = findToChooseFromOnInit(findUsegesManager, progressAdapter);
          }
        });

        SNode selectedNode = CommonChoosers.showDialogNodeChooser(AbstractMainNodeChooser.this, toChooseFrom.value);
        setNode(selectedNode);
      }
    });

    addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        final String text = getText();
        if (StringUtils.isEmpty(text)) {
          setNode(null);
          return;
        }
        int lastDot = text.lastIndexOf(".");
        if (lastDot <= 0) {
          setNode(null);
          return;
        }

        final List<SModelDescriptor> descriptors = getModelDescriptors(text.substring(0, lastDot));
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            SNode foundNode = null;
            for (SModelDescriptor descriptor : ListSequence.fromList(descriptors)) {
              SModel smodel = descriptor.getSModel();
              Iterable<SNode> nodes = findNodes(smodel, text);
              if (!(Sequence.fromIterable(nodes).isEmpty())) {
                foundNode = Sequence.fromIterable(nodes).first();
                break;
              }
            }
            setNode(foundNode);
          }
        });
      }
    });
  }

  protected abstract Iterable<SNode> findNodes(SModel model, String fqName);

  protected abstract List<SModelDescriptor> getModelDescriptors(String model);

  protected abstract List<SNode> findToChooseFromOnInit(FindUsagesManager manager, FindUsagesManager.ProgressAdapter progressAdapter);

  public SNode getNode() {
    return this.myNode;
  }

  public void setNode(final SNode node) {
    if (this.myNode == node) {
      return;
    }
    if (node == null) {
      if (this.myNode == null) {
        this.setText(null);
        return;
      } else {
        myNode = null;
      }
    } else {
      this.myNode = node;
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          AbstractMainNodeChooser.this.setText(getFqName(node));
        }
      });
    }
    this.fireNodeChanged();
  }

  public String getFqName(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept")) {
      return ((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "jetbrains.mps.lang.core.structure.INamedConcept"), "virtual_getFqName_1213877404258", new Class[]{SNode.class}));
    } else {
      String longName = SNodeOperations.getModel(node).getLongName();
      if (longName.equals("")) {
        return node.getSNodeId().toString();
      }
      return longName + "." + node.getSNodeId().toString();
    }
  }

  public void addNodeChangeListener(@NotNull final IJavaNodeChangeListener listener) {
    _FunctionTypes._void_P1_E0<? super SNode> function = new _FunctionTypes._void_P1_E0<SNode>() {
      public void invoke(SNode node) {
        listener.nodeChanged(node);
      }
    };
    MapSequence.fromMap(myLegacyListenersMap).put(listener, function);
    ListSequence.fromList(this.myListeners).addElement(function);
  }

  public void addNodeChangeListener(@NotNull _FunctionTypes._void_P1_E0<? super SNode> listener) {
    ListSequence.fromList(this.myListeners).addElement(listener);
  }

  public void removeNodeChangeListener(IJavaNodeChangeListener listener) {
    ListSequence.fromList(this.myListeners).removeElement(MapSequence.fromMap(myLegacyListenersMap).get(listener));
    MapSequence.fromMap(myLegacyListenersMap).removeKey(listener);
  }

  private void fireNodeChanged() {
    ListSequence.fromList(this.myListeners).visitAll(new IVisitor<_FunctionTypes._void_P1_E0<? super SNode>>() {
      public void visit(_FunctionTypes._void_P1_E0<? super SNode> it) {
        it.invoke(AbstractMainNodeChooser.this.myNode);
      }
    });
  }

  public void dispose() {
    super.dispose();
    ListSequence.fromList(myListeners).clear();
  }
}
