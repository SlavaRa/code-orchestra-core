package jetbrains.mps.editor.runtime.impl;

/*Generated by MPS */

import java.util.Comparator;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModel;

public class NodeSubstituteActionsComparator implements Comparator<INodeSubstituteAction> {
  private SNode myContainingRoot;

  public NodeSubstituteActionsComparator(SNode containingRoot) {
    myContainingRoot = containingRoot;
  }

  public int compare(INodeSubstituteAction action1, INodeSubstituteAction action2) {
    Object parameter1 = action1.getParameterObject();
    Object parameter2 = action2.getParameterObject();

    if (parameter1 instanceof SNode) {
      return (parameter2 instanceof SNode ?
        compare((SNode) parameter1, (SNode) parameter2) :
        -1
      );
    } else {
      return (parameter2 instanceof SNode ?
        1 :
        0
      );
    }
  }

  private int compare(SNode node1, SNode node2) {
    if (SNodeOperations.isInstanceOf(node1, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")) {
      return (SNodeOperations.isInstanceOf(node2, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration") ?
        0 :
        1
      );
    } else if (SNodeOperations.isInstanceOf(node2, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")) {
      return -1;
    }

    SModel containigModel = SNodeOperations.getModel(myContainingRoot);
    if (SNodeOperations.getModel(node1) != containigModel) {
      return (SNodeOperations.getModel(node2) != containigModel ?
        0 :
        1
      );
    } else if (SNodeOperations.getModel(node2) != containigModel) {
      return -1;
    }

    if (SNodeOperations.getContainingRoot(node1) != myContainingRoot) {
      return (SNodeOperations.getContainingRoot(node2) != myContainingRoot ?
        0 :
        1
      );
    } else if (SNodeOperations.getContainingRoot(node2) != myContainingRoot) {
      return -1;
    }

    SNode container1 = SNodeOperations.getAncestor(node1, "jetbrains.mps.lang.core.structure.IContainer", true, false);
    SNode container2 = SNodeOperations.getAncestor(node2, "jetbrains.mps.lang.core.structure.IContainer", true, false);
    if (container1 == container2) {
      return 0;
    }
    while (container1 != null) {
      container1 = SNodeOperations.getAncestor(container1, "jetbrains.mps.lang.core.structure.IContainer", false, false);
      if (container1 == container2) {
        return -1;
      }
    }
    return 1;
  }
}
