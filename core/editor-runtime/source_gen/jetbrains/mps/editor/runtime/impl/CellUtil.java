package jetbrains.mps.editor.runtime.impl;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class CellUtil {
  public CellUtil() {
  }

  public static String getDefaultSideTransformTag() {
    return SEnumOperations.getEnumMemberValue(SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:00000000-0000-4000-0000-011c8959029e(jetbrains.mps.lang.editor.structure)", "RightTransformAnchorTag"), "default_"));
  }

  public static void setupIDeprecatableStyles(SNode node, EditorCell cell) {
    SNode deprecatable = SNodeOperations.as(node, "jetbrains.mps.lang.core.structure.IDeprecatable");
    if (deprecatable != null && (((Boolean) BehaviorManager.getInstance().invoke(Boolean.class, SNodeOperations.cast(deprecatable, "jetbrains.mps.lang.core.structure.IDeprecatable"), "virtual_isDeprecated_1224609060727", new Class[]{SNode.class})) || ((Boolean) BehaviorManager.getInstance().invoke(Boolean.class, SNodeOperations.cast(SNodeOperations.getConceptDeclaration(deprecatable), "jetbrains.mps.lang.core.structure.IDeprecatable"), "virtual_isDeprecated_1224609060727", new Class[]{SNode.class})))) {
      cell.getStyle().set(StyleAttributes.STRIKE_OUT, true);
    }
  }

  public static SNode getNodeToDelete(SNode node) {
    while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.lang.core.structure.IWrapper")) {
      node = SNodeOperations.getParent(node);
    }
    return node;
  }

  public static SNode getConceptPropertyDeclaration(SNode node, final String conceptPropertyName) {
    return ListSequence.fromList(((List<SNode>) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(SNodeOperations.getConceptDeclaration(node), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"), "call_getConceptPropertyDeclarations_1213877394562", new Class[]{SNode.class}))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return conceptPropertyName.equals(SPropertyOperations.getString(it, "name"));
      }
    });
  }

  /**
   * TODO: think of moving jetbrains.mps.lang.editor.generator.internal into MPS
   */
  public static SNode getLinkDeclarationTarget(SNode linkDeclaration) {
    return SLinkOperations.getTarget(linkDeclaration, "target", false);
  }

  public static String getLinkDeclarationRole(SNode linkDeclaration) {
    return SPropertyOperations.getString(linkDeclaration, "role");
  }
}
