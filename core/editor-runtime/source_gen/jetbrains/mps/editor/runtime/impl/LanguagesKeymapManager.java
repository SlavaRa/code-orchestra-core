package jetbrains.mps.editor.runtime.impl;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.reloading.ReloadAdapter;
import java.util.Map;
import jetbrains.mps.smodel.Language;
import java.util.List;
import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.library.LibraryManager;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.util.Collections;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.smodel.ModuleRepositoryAdapter;
import jetbrains.mps.project.IModule;

public class LanguagesKeymapManager implements ApplicationComponent {
  private static final Logger LOG = Logger.getLogger(LanguagesKeymapManager.class);

  private ReloadAdapter myReloadHandler = new ReloadAdapter() {
    public void unload() {
      clearCaches();
    }
  };
  private Map<Language, List<EditorCellKeyMap>> myLanguagesToKeyMaps = MapSequence.fromMap(new HashMap<Language, List<EditorCellKeyMap>>());
  private LanguagesKeymapManager.MyModuleRepositoryListener myListener = new LanguagesKeymapManager.MyModuleRepositoryListener();
  private MPSModuleRepository myRepository;
  private ClassLoaderManager myClassLoaderManager;

  public LanguagesKeymapManager(MPSModuleRepository repository, ClassLoaderManager manager, LibraryManager libraryManager) {
    myRepository = repository;
    myClassLoaderManager = manager;
  }

  public List<EditorCellKeyMap> getKeyMapsForLanguage(@NotNull Language l) {
    if (!(MapSequence.fromMap(myLanguagesToKeyMaps).containsKey(l))) {
      registerLanguageKeyMaps(l);
    }
    return MapSequence.fromMap(myLanguagesToKeyMaps).get(l);
  }

  public void initComponent() {
    myClassLoaderManager.addReloadHandler(myReloadHandler);
    myRepository.addModuleRepositoryListener(myListener);
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "Language KeyMap Manager";
  }

  public void disposeComponent() {
    myRepository.removeModuleRepositoryListener(myListener);
    myClassLoaderManager.removeReloadHandler(myReloadHandler);
  }

  private void clearCaches() {
    MapSequence.fromMap(myLanguagesToKeyMaps).clear();
  }

  private void registerLanguageKeyMaps(Language language) {
    SModelDescriptor editorModelDescriptor = language.getEditorModelDescriptor();
    SModel editorModel = (editorModelDescriptor != null ?
      editorModelDescriptor.getSModel() :
      null
    );
    List<EditorCellKeyMap> keyMaps;
    if (editorModel != null) {
      keyMaps = ListSequence.fromList(new ArrayList<EditorCellKeyMap>());
      for (SNode keyMapDeclaration : ListSequence.fromList(SModelOperations.getRoots(editorModel, "jetbrains.mps.lang.editor.structure.CellKeyMapDeclaration"))) {
        try {
          Class<EditorCellKeyMap> keyMapClass = findKeyMapClassByDeclaration(keyMapDeclaration);
          if (keyMapClass != null) {
            EditorCellKeyMap keyMap = keyMapClass.newInstance();
            if (keyMap.isApplicableToEveryModel()) {
              ListSequence.fromList(keyMaps).addElement(keyMap);
            }
          }
        } catch (Throwable t) {
          LOG.error(t);
        }
      }
    } else {
      keyMaps = Collections.emptyList();
    }
    MapSequence.fromMap(myLanguagesToKeyMaps).put(language, keyMaps);
  }

  private Class<EditorCellKeyMap> findKeyMapClassByDeclaration(SNode declaration) {
    String fqName = ((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(declaration, "jetbrains.mps.lang.core.structure.INamedConcept"), "virtual_getFqName_1213877404258", new Class[]{SNode.class}));
    String namespace = NameUtil.namespaceFromLongName(fqName);
    assert namespace.endsWith(".editor");
    String languageNamespace = namespace.substring(0, namespace.length() - ".editor".length());
    Language language = (Language) MPSModuleRepository.getInstance().getModuleByUID(languageNamespace);
    if (language == null) {
      return null;
    }
    return language.getClass(fqName);
  }

  private void unregisterLanguageKeyMaps(Language language) {
    MapSequence.fromMap(myLanguagesToKeyMaps).removeKey(language);
  }

  public static LanguagesKeymapManager getInstance() {
    return ApplicationManager.getApplication().getComponent(LanguagesKeymapManager.class);
  }

  private class MyModuleRepositoryListener extends ModuleRepositoryAdapter {
    private MyModuleRepositoryListener() {
    }

    public void moduleInitialized(IModule module) {
    }

    public void beforeModuleRemoved(IModule module) {
      if (module instanceof Language) {
        unregisterLanguageKeyMaps((Language) module);
      }
    }
  }
}
