package jetbrains.mps.refactoring.framework;

/*Generated by MPS */

import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.refactoring.framework.paramchooser.IChooser;
import jetbrains.mps.refactoring.framework.paramchooser.mps.IChooserSettings;
import javax.swing.JOptionPane;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import java.util.ArrayList;
import jetbrains.mps.ide.findusages.model.SearchResults;

public abstract class BaseRefactoring implements IRefactoring {
  private Set<String> myTransientParameters = new HashSet<String>();

  public BaseRefactoring() {
  }

  protected void addTransientParameter(String parameter) {
    myTransientParameters.add(parameter);
  }

  public Set<String> getTransientParameters() {
    return myTransientParameters;
  }

  public boolean ask(RefactoringContext refactoringContext, IChooser... choosers) {
    AskDialog dialog = new AskDialog(refactoringContext, choosers);
    dialog.showDialog();
    return !(dialog.isCancelled());
  }

  public boolean askBool(RefactoringContext refactoringContext, String text, String paramName, IChooserSettings<Boolean> settings) {
    String[] options = {"Yes", "No", "Cancel"};
    Boolean value = settings.getInitialValue();
    boolean bValue = value != null && value;
    int option = JOptionPane.showOptionDialog(refactoringContext.getCurrentOperationContext().getMainFrame(), text, settings.getTitle(), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[(bValue ?
      0 :
      1
    )]);
    if (option == 2) {
      return false;
    }
    refactoringContext.setParameter(paramName, option == 0);
    return true;
  }

  public String getKeyStroke() {
    return "";
  }

  public Class getOverridenRefactoringClass() {
    return null;
  }

  public boolean init(RefactoringContext refactoringContext) {
    return true;
  }

  public List<SModel> getModelsToGenerate(RefactoringContext refactoringContext) {
    return new ArrayList<SModel>();
  }

  public void doWhenDone(RefactoringContext refactoringContext) {
  }

  public SearchResults getAffectedNodes(RefactoringContext refactoringContext) {
    return new SearchResults();
  }
}
