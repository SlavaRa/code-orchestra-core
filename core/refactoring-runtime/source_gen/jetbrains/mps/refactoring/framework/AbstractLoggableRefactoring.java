package jetbrains.mps.refactoring.framework;

/*Generated by MPS */

import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.util.Computable;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.IModule;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.ide.findusages.model.SearchResults;
import java.util.Map;
import java.util.HashMap;

public abstract class AbstractLoggableRefactoring {
  public AbstractLoggableRefactoring() {
  }

  public String getUserFriendlyName() {
    return null;
  }

  public String getKeyStroke() {
    return "";
  }

  public Class getOverridenRefactoringClass() {
    return null;
  }

  public RefactoringTarget getRefactoringTarget() {
    return RefactoringTarget.NODE;
  }

  public List<IChooseComponent> getChooseComponents(final RefactoringContext refactoringContext) {
    return new ArrayList<IChooseComponent>();
  }

  public boolean askForInfo(final RefactoringContext refactoringContext) {
    List<IChooseComponent> components = ModelAccess.instance().runReadAction(new Computable<List<IChooseComponent>>() {
      public List<IChooseComponent> compute() {
        return getChooseComponents(refactoringContext);
      }
    });
    if (components.isEmpty()) {
      return ModelAccess.instance().runReadAction(new Computable<Boolean>() {
        public Boolean compute() {
          return isApplicable(refactoringContext);
        }
      });
    } else {
      ChooseRefactoringInputDataDialog dialog = new ChooseRefactoringInputDataDialog(this, refactoringContext, components);
      dialog.getResult();
      return dialog.getResult();
    }
  }

  public boolean isApplicable(RefactoringContext refactoringContext) {
    return true;
  }

  public boolean isOneTargetOnly() {
    return false;
  }

  public boolean isApplicableWRTConcept(SNode node) {
    return false;
  }

  public boolean isApplicableToModel(SModelDescriptor model) {
    return true;
  }

  public boolean isApplicableToModule(IModule module) {
    if (getRefactoringTarget() == RefactoringTarget.SOLUTION) {
      return module instanceof Solution;
    }
    if (getRefactoringTarget() == RefactoringTarget.LANGUAGE) {
      return module instanceof Language;
    }
    if (getRefactoringTarget() == RefactoringTarget.DEVKIT) {
      return module instanceof DevKit;
    }
    return false;
  }

  public boolean refactorImmediatelyIfNoUsages() {
    return false;
  }

  public void doRefactor(RefactoringContext refactoringContext) {
  }

  public boolean doesUpdateModel() {
    return false;
  }

  public List<SModel> getModelsToUpdate(RefactoringContext refactoringContext) {
    return new ArrayList<SModel>();
  }

  public boolean showsAffectedNodes() {
    return false;
  }

  public SearchResults getAffectedNodes(RefactoringContext refactoringContext) {
    return null;
  }

  public void updateModel(SModel model, RefactoringContext refactoringContext) {
  }

  public Map<IModule, List<SModel>> getModelsToGenerate(RefactoringContext refactoringContext) {
    return new HashMap<IModule, List<SModel>>();
  }

  public List<SNode> getNodesToOpen(RefactoringContext refactoringContext) {
    return new ArrayList<SNode>();
  }
}
