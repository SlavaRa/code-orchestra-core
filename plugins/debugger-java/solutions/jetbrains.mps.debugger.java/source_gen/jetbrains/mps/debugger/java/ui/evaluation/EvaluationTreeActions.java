package jetbrains.mps.debugger.java.ui.evaluation;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.debugger.java.evaluation.model.AbstractEvaluationModel;
import jetbrains.mps.debugger.java.evaluation.EvaluationProvider;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.dialogs.project.components.parts.actions.icons.Icons;
import jetbrains.mps.debug.api.evaluation.IEvaluationProvider;
import jetbrains.mps.debugger.api.ui.DebugActionsUtil;

public class EvaluationTreeActions {
  public EvaluationTreeActions() {
  }

  public static class EditWatchAction extends AnAction {
    public EditWatchAction() {
      super("Edit Watch");
    }

    public void actionPerformed(AnActionEvent event) {
      AbstractEvaluationModel model = EvaluationUi.EVALUATION_MODEL.getData(event.getDataContext());
      // todo remove cast 
      ((EvaluationProvider) model.getDebugSession().getEvaluationProvider()).showEditWatchDialog(MPSDataKeys.OPERATION_CONTEXT.getData(event.getDataContext()), model);
    }

    @Override
    public void update(AnActionEvent event) {
      super.update(event);
      event.getPresentation().setVisible(EvaluationUi.EVALUATION_MODEL.getData(event.getDataContext()) != null);
    }
  }

  public static class AddWatchAction extends AnAction {
    public AddWatchAction() {
      super("New Watch...", "New Watch...", Icons.ADD);
    }

    public void actionPerformed(AnActionEvent event) {
      IEvaluationProvider evaluationProvider = DebugActionsUtil.getEvaluationProvider(event);
      if (evaluationProvider != null) {
        ((EvaluationProvider) evaluationProvider).createWatch();
      }
    }

    @Override
    public void update(AnActionEvent event) {
      event.getPresentation().setEnabled(DebugActionsUtil.getDebugSession(event) != null);
    }
  }

  public static class RemoveWatchAction extends AnAction {
    public RemoveWatchAction() {
      super("Remove Watch", "Remove Watch", Icons.REMOVE);
    }

    public void actionPerformed(AnActionEvent event) {
      AbstractEvaluationModel model = EvaluationUi.EVALUATION_MODEL.getData(event.getDataContext());
      IEvaluationProvider evaluationProvider = DebugActionsUtil.getEvaluationProvider(event);
      if (evaluationProvider != null) {
        ((EvaluationProvider) evaluationProvider).removeWatch(model);
      }
    }

    @Override
    public void update(AnActionEvent event) {
      event.getPresentation().setEnabled(EvaluationUi.EVALUATION_MODEL.getData(event.getDataContext()) != null);
    }
  }
}
