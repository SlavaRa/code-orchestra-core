package jetbrains.mps.debugger.java.ui.breakpoints;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import jetbrains.mps.workbench.actions.goTo.matcher.ChooseByNamePanel;
import com.intellij.ide.util.gotoByName.ChooseByNameModel;
import java.awt.Frame;
import java.awt.HeadlessException;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.actions.goTo.matcher.MpsPopupFactory;
import com.intellij.ide.util.gotoByName.ChooseByNamePopupComponent;
import com.intellij.openapi.application.ModalityState;
import javax.swing.JComponent;
import jetbrains.mps.workbench.actions.goTo.index.descriptor.BaseSNodeDescriptor;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;

public abstract class StubsClassChooserDialog extends BaseDialog {
  private final ChooseByNamePanel myPanel;
  private String mySelected;
  private final ChooseByNameModel myModel;

  public StubsClassChooserDialog(Frame mainFrame, String text) throws HeadlessException {
    super(mainFrame, text);
    myModel = new ChooseFromStubsByNameModel() {
      @Override
      protected boolean isValid(SNode node) {
        return StubsClassChooserDialog.this.isValid(node);
      }
    };
    myPanel = MpsPopupFactory.createPanelForNode(myModel, false);
    myPanel.invoke(new ChooseByNamePopupComponent.Callback() {
      @Override
      public void elementChosen(Object element) {
        onOk();
      }
    }, ModalityState.NON_MODAL, false);
  }

  @Override
  protected JComponent getMainComponent() {
    return myPanel.getPanel();
  }

  public String getSelected() {
    return mySelected;
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C', defaultButton = false)
  public void onCancel() {
    dispose();
  }

  @BaseDialog.Button(position = 0, name = "OK", mnemonic = 'O', defaultButton = true)
  public void onOk() {
    BaseSNodeDescriptor chosenElement = (BaseSNodeDescriptor) myPanel.getChosenElement();
    if (chosenElement != null) {
      mySelected = myModel.getFullName(chosenElement);
    }
    dispose();
  }

  @Override
  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(100, 200, 600, 300);
  }

  protected abstract boolean isValid(SNode node);
}
