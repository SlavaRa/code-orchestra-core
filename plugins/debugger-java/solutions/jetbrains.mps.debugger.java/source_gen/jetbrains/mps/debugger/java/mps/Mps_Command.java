package jetbrains.mps.debugger.java.mps;

/*Generated by MPS */

import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.execution.lib.Java_Command;
import java.io.File;
import jetbrains.mps.debug.api.IDebugger;
import jetbrains.mps.InternalFlag;
import com.intellij.util.SystemProperties;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.io.IOException;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.debug.api.run.IDebuggerConfiguration;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.debug.api.IDebuggerSettings;
import jetbrains.mps.debug.runtime.settings.LocalConnectionSettings;
import jetbrains.mps.debug.api.Debuggers;

public class Mps_Command {
  private String myVirtualMachineParameters = Mps_Command.getDefaultVirtualMachineParameters();
  private String myJrePath;
  private String myConfigurationPath = Mps_Command.getDefaultConfigurationPath();
  private String mySystemPath = Mps_Command.getDefaultSystemPath();
  private String myDebuggerSettings;

  public Mps_Command() {
  }

  public Mps_Command setVirtualMachineParameters(String virtualMachineParameters) {
    if (virtualMachineParameters != null) {
      myVirtualMachineParameters = virtualMachineParameters;
    }
    return this;
  }

  public Mps_Command setJrePath(String jrePath) {
    if (jrePath != null) {
      myJrePath = jrePath;
    }
    return this;
  }

  public Mps_Command setConfigurationPath(String configurationPath) {
    if (configurationPath != null) {
      myConfigurationPath = configurationPath;
    }
    return this;
  }

  public Mps_Command setSystemPath(String systemPath) {
    if (systemPath != null) {
      mySystemPath = systemPath;
    }
    return this;
  }

  public Mps_Command setDebuggerSettings(String debuggerSettings) {
    if (debuggerSettings != null) {
      myDebuggerSettings = debuggerSettings;
    }
    return this;
  }

  public ProcessHandler createProcess() throws ExecutionException {
    String mpsProperties = Mps_Command.getConfigPathArgument(myConfigurationPath) + " " + Mps_Command.getSystemPathArgument(mySystemPath);
    return new Java_Command().setClassPath(Mps_Command.getClassPath()).setVirtualMachineParameter(myVirtualMachineParameters + " " + mpsProperties).setDebuggerSettings(myDebuggerSettings).setWorkingDirectory(new File(System.getProperty("user.dir"))).setJrePath(myJrePath).createProcess("jetbrains.mps.Launcher");
  }

  public static IDebugger getDebugger() {
    return getDebuggerConfiguration().getDebugger();
  }

  public static String getDefaultVirtualMachineParameters() {
    return "-client -Xss1024k -ea -Xmx1200m -XX:MaxPermSize=150m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8" + ((InternalFlag.isInternalMode() ?
      " -Dmps.internal=true" :
      ""
    ));
  }

  public static String getDefaultConfigurationPath() {
    return SystemProperties.getUserHome().replace(File.separator, "/") + "/" + ".MPSDebug2x/config";
  }

  public static String getDefaultSystemPath() {
    return SystemProperties.getUserHome().replace(File.separator, "/") + "/" + ".MPSDebug2x/system";
  }

  private static String getSystemPathArgument(String systemPath) {
    return Java_Command.protect("-Didea.system.path=" + systemPath);
  }

  private static String getConfigPathArgument(String configPath) {
    return Java_Command.protect("-Didea.config.path=" + configPath);
  }

  private static List<String> getClassPath() {
    Iterable<String> currentClassPath = ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), System.getProperty("java.class.path").split(File.pathSeparator))).select(new ISelector<String, String>() {
      public String select(String it) {
        try {
          return new File(it).getCanonicalPath();
        } catch (IOException e) {
          return it;
        }
      }
    });
    return Sequence.fromIterable(currentClassPath).where(new IWhereFilter<String>() {
      public boolean accept(String it) {
        return !(it.startsWith(System.getProperty("java.home")));
      }
    }).toListSequence();
  }

  public static IDebuggerConfiguration getDebuggerConfiguration() {
    return new IDebuggerConfiguration() {
      @Nullable
      public IDebuggerSettings createDebuggerSettings() {
        return new LocalConnectionSettings(true);
      }

      public IDebugger getDebugger() {
        return Debuggers.getInstance().getDebuggerByName("Java");
      }
    };
  }
}
