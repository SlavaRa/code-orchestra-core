package jetbrains.mps.debugger.java.ui.breakpoints;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.awt.Frame;
import java.awt.HeadlessException;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.generator.JavaModelUtil_new;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ExceptionChooserDialog extends StubsClassChooserDialog {
  private final SNode myThrowableClassifier;

  public ExceptionChooserDialog(Frame mainFrame, String title) throws HeadlessException {
    super(mainFrame, title);
    final Wrappers._T<SNode> node = new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        node.value = JavaModelUtil_new.findClassifier(Throwable.class.getPackage().getName(), Throwable.class.getSimpleName());
      }
    });
    myThrowableClassifier = node.value;
  }

  @Override
  protected boolean isValid(SNode node) {
    SNode base = node;
    while (base != null && SNodeOperations.isInstanceOf(base, "jetbrains.mps.baseLanguage.structure.ClassConcept") && !((eq_lt001m_a0a0a1a0(base, myThrowableClassifier)))) {
      base = SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(base, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "superclass", true), "classifier", false);
    }
    return (base != null) && SNodeOperations.isInstanceOf(base, "jetbrains.mps.baseLanguage.structure.ClassConcept");
  }

  private static boolean eq_lt001m_a0a0a1a0(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
