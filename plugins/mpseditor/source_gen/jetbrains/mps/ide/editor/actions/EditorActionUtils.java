package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.selection.Selection;
import jetbrains.mps.nodeEditor.selection.SingularSelection;
import java.util.Iterator;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.nodeEditor.ChildrenCollectionFinder;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.EditorCellAction;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class EditorActionUtils {
  public EditorActionUtils() {
  }

  /*package*/ static boolean isReadonlyActionEnabled(EditorComponent editorComponent) {
    return editorComponent.isFocusOwner() && !(editorComponent.getNodeSubstituteChooser().isVisible()) && editorComponent.getSelectionManager().getSelection() != null;
  }

  /*package*/ static boolean isWriteActionEnabled(EditorComponent editorComponent) {
    return isReadonlyActionEnabled(editorComponent) && !(editorComponent.isReadOnly());
  }

  /*package*/ static EditorCell getEditorCellToInsert(EditorComponent editorComponent) {
    Selection selection = editorComponent.getSelectionManager().getSelection();
    // TODO: remove this limitation 
    if (!(selection instanceof SingularSelection)) {
      return null;
    }
    Iterator<EditorCell> iterator = selection.getSelectedCells().iterator();
    if (!(iterator.hasNext())) {
      return null;
    }
    EditorCell editorCell = iterator.next();
    return (editorCell instanceof EditorCell_Component ?
      null :
      editorCell
    );
  }

  /**
   * Should be executed inside read action
   */
  /*package*/ static void callInsertAction(@NotNull EditorCell cell) {
    if (cell.isErrorState() && cell.validate(false, true)) {
      return;
    }

    if (cell instanceof EditorCell_Label && !(isLinkCollection(cell))) {
      // Looking for the next child collection to the right from this cell 
      EditorCell cellWithRole = new ChildrenCollectionFinder(cell, true).find();

      if (cellWithRole == null && cell.isLastPositionInBigCell() && hasSingleRolesAtRightBoundary(cell) && cell.getNextLeaf() != null) {
        // Looking for the next child collection to the right from next leaf cell 
        cellWithRole = new ChildrenCollectionFinder(cell.getNextLeaf(), true).find();
      }

      if (cellWithRole != null && cellWithRole.executeAction(CellActionType.INSERT)) {
        return;
      }
    }

    cell.executeAction(CellActionType.INSERT);
  }

  /**
   * Should be executed inside read action
   */
  /*package*/ static void callInsertBeforeAction(@NotNull EditorCell cell) {
    if (cell.isErrorState() && cell.validate(true, true)) {
      return;
    }

    if (cell instanceof EditorCell_Label && !(isLinkCollection(cell))) {
      // Looking for the prev. child collection (to the left from this cell) 
      EditorCell cellWithRole = new ChildrenCollectionFinder(cell, false).find();

      if (cellWithRole == null && cell.isFirstPositionInBigCell() && hasSingleRolesAtLeftBoundary(cell) && cell.getPrevLeaf() != null) {
        // Looking for the prev. child collection (to the left from prev. leaf cell) 
        cellWithRole = new ChildrenCollectionFinder(cell.getPrevLeaf(), false).find();
      }

      if (cellWithRole != null && cellWithRole.executeAction(CellActionType.INSERT_BEFORE)) {
        return;
      }
    }

    cell.executeAction(CellActionType.INSERT_BEFORE);
  }

  /*package*/ static void runEditorComponentAction(EditorComponent editorComponent, CellActionType actionType) {
    EditorCellAction action = editorComponent.getComponentAction(CellActionType.UP);
    EditorContext editorContext = editorComponent.getEditorContext();
    if (action != null && action.canExecute(editorContext)) {
      action.execute(editorContext);
    }
  }

  /**
   * We can use this method to determine if we should redispatch insert event to the corresponding
   * child collection below the cell returned from cell.getNextLeaf() or we should go on and insert
   * next child into a collection containing cell itself.
   * 
   * @return true if we should redispatch insert event to the next leaft cell
   */
  private static boolean hasSingleRolesAtRightBoundary(EditorCell cell) {
    if (!(hasSingleRole(cell))) {
      return false;
    }

    if (cell.isOnRightBoundary()) {
      EditorCell_Collection parentCell = cell.getParent();
      return (parentCell != null ?
        hasSingleRolesAtRightBoundary(parentCell) :
        true
      );
    }
    return true;
  }

  /**
   * We can use this method to determine if we should redispatch insert event to the corresponding
   * child collection below the cell returned from cell.getPrevLeaf() or we should go on and insert
   * prev. child into a collection containing cell itself
   * 
   * @return true if we should redispatch insert event to the prev. leaft cell
   */
  private static boolean hasSingleRolesAtLeftBoundary(EditorCell cell) {
    if (!(hasSingleRole(cell))) {
      return false;
    }

    if (cell.isOnLeftBoundary()) {
      EditorCell_Collection parentCell = cell.getParent();
      return (parentCell != null ?
        hasSingleRolesAtLeftBoundary(parentCell) :
        true
      );
    }
    return true;
  }

  private static boolean hasSingleRole(final EditorCell cell) {
    final boolean[] result = new boolean[1];
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SNode linkDeclaration = SNodeOperations.getContainingLinkDeclaration(((SNode) cell.getSNode()));
        result[0] = linkDeclaration != null && ((Boolean) BehaviorManager.getInstance().invoke(Boolean.class, SNodeOperations.cast(linkDeclaration, "jetbrains.mps.lang.structure.structure.LinkDeclaration"), "call_isSingular_1213877254557", new Class[]{SNode.class}));
      }
    });
    return result[0];
  }

  private static boolean isLinkCollection(EditorCell cell) {
    return cell.getRole() != null;
  }
}
