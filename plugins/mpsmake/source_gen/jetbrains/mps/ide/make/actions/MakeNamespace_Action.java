package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.make.IMakeService;
import javax.swing.tree.TreeNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.projectPane.NamespaceTextNode;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.project.IModule;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class MakeNamespace_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(MakeNamespace_Action.class);

  private boolean cleanMake;

  public MakeNamespace_Action(boolean cleanMake_par) {
    super("Make", "", ICON);
    this.cleanMake = cleanMake_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (IMakeService.INSTANCE.get().isSessionActive()) {
      return false;
    }
    for (TreeNode selectedNode : ((List<TreeNode>) MapSequence.fromMap(_params).get("ppNodes"))) {
      if (!(selectedNode instanceof NamespaceTextNode)) {
        return false;
      }
    }
    String text = new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get("context")), null, null, MakeNamespace_Action.this.selectedModules(_params), null).actionText(MakeNamespace_Action.this.cleanMake);
    if (text != null) {
      event.getPresentation().setText(text);
      return true;
    }
    return false;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "MakeNamespace", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("ppNodes", event.getData(MPSDataKeys.LOGICAL_VIEW_NODES));
    if (MapSequence.fromMap(_params).get("ppNodes") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      new MakeActionImpl(((IOperationContext) MapSequence.fromMap(_params).get("context")), new MakeActionParameters(((IOperationContext) MapSequence.fromMap(_params).get("context")), null, null, MakeNamespace_Action.this.selectedModules(_params), null), MakeNamespace_Action.this.cleanMake).executeAction();

    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "MakeNamespace", t);
      }
    }
  }

  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(((Object) this.cleanMake).toString());
    res.append("!");
    return res.toString();
  }

  private List<IModule> selectedModules(final Map<String, Object> _params) {
    List<IModule> models = new ArrayList<IModule>();
    for (TreeNode ppNode : ListSequence.fromList(((List<TreeNode>) MapSequence.fromMap(_params).get("ppNodes")))) {
      for (IModule module : ListSequence.fromList(((NamespaceTextNode) ppNode).getModulesUnder())) {
        models.add(module);
      }
    }
    return models;
  }
}
