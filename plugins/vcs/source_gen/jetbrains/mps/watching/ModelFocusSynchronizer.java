package jetbrains.mps.watching;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import com.intellij.ide.FrameStateManager;
import com.intellij.ide.FrameStateListener;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Set;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectManager;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.fileEditor.FileEditorManager;
import jetbrains.mps.workbench.nodesFs.MPSNodeVirtualFile;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.editors.MPSEditorUtil;
import com.intellij.openapi.vfs.newvfs.RefreshSession;
import com.intellij.openapi.vfs.newvfs.RefreshQueue;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class ModelFocusSynchronizer implements ApplicationComponent {
  public ModelFocusSynchronizer(FrameStateManager frameStateManager) {
    frameStateManager.addListener(new FrameStateListener() {
      public void onFrameDeactivated() {
      }

      public void onFrameActivated() {
        ModelAccess.instance().runReadInEDT(new Runnable() {
          public void run() {
            Set<SModel> models = SetSequence.fromSet(new HashSet<SModel>());
            for (Project project : ProjectManager.getInstance().getOpenProjects()) {
              for (VirtualFile vf : FileEditorManager.getInstance(project).getSelectedFiles()) {
                if (vf instanceof MPSNodeVirtualFile) {
                  MPSNodeVirtualFile nvf = ((MPSNodeVirtualFile) vf);
                  SNode node = MPSEditorUtil.getCurrentEditedNode(project, nvf);
                  if (node == null) {
                    node = nvf.getNode();
                  }
                  if (node != null) {
                    SetSequence.fromSet(models).addElement(node.getModel());
                  }
                }
              }
            }

            RefreshSession session = RefreshQueue.getInstance().createSession(true, true, null);
            for (SModel model : SetSequence.fromSet(models)) {
              SModelDescriptor descriptor = model.getModelDescriptor();
              if (descriptor instanceof EditableSModelDescriptor) {
                IFile modelFile = ((EditableSModelDescriptor) descriptor).getModelFile();
                if (modelFile != null) {
                  IFile fileToRefresh = modelFile;
                  while (!(fileToRefresh.exists())) {
                    fileToRefresh = fileToRefresh.getParent();
                  }
                  VirtualFile virtualFile = VirtualFileUtils.getVirtualFile(modelFile);
                  if (virtualFile != null) {
                    session.addFile(virtualFile);
                  }
                }
              }
            }
            session.launch();
          }
        });
      }
    });
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return getClass().getName();
  }

  public void initComponent() {
  }

  public void disposeComponent() {
  }
}
