package jetbrains.mps.watching;

/*Generated by MPS */

import com.intellij.openapi.vfs.newvfs.events.VFileEvent;
import com.intellij.openapi.vfs.newvfs.events.VFileContentChangeEvent;
import com.intellij.openapi.vfs.newvfs.events.VFileCopyEvent;
import com.intellij.openapi.vfs.newvfs.events.VFileCreateEvent;
import com.intellij.openapi.vfs.newvfs.events.VFileDeleteEvent;
import com.intellij.openapi.vfs.newvfs.events.VFileMoveEvent;
import com.intellij.openapi.vfs.newvfs.events.VFilePropertyChangeEvent;
import com.intellij.openapi.vfs.VirtualFile;

/*package*/ abstract class EventProcessor {
  /*package*/ EventProcessor() {
  }

  public final void process(VFileEvent event, ReloadSession reloadSession) {
    if (event instanceof VFileContentChangeEvent) {
      processContentChanged(event, reloadSession);
    } else
    if (event instanceof VFileCopyEvent) {
      processCopy(event, reloadSession);
    } else
    if (event instanceof VFileCreateEvent) {
      processCreate(event, reloadSession);
    } else
    if (event instanceof VFileDeleteEvent) {
      processDelete(event, reloadSession);
    } else
    if (event instanceof VFileMoveEvent) {
      processMove(event, reloadSession);
    } else
    if (event instanceof VFilePropertyChangeEvent) {
      processPropertyChanged(event, reloadSession);
    } else
    if (event instanceof VFileEventDecorator) {
      VFileEventDecorator eventDecorator = (VFileEventDecorator) event;
      if (eventDecorator.undecorate() instanceof VFileContentChangeEvent) {
        processContentChanged(event, reloadSession);
      } else
      if (eventDecorator.undecorate() instanceof VFileCopyEvent) {
        processCopy(event, reloadSession);
      } else
      if (eventDecorator.undecorate() instanceof VFileCreateEvent) {
        processCreate(event, reloadSession);
      } else
      if (eventDecorator.undecorate() instanceof VFileDeleteEvent) {
        processDelete(event, reloadSession);
      } else
      if (eventDecorator.undecorate() instanceof VFileMoveEvent) {
        processMove(event, reloadSession);
      } else
      if (eventDecorator.undecorate() instanceof VFilePropertyChangeEvent) {
        processPropertyChanged(event, reloadSession);
      }
    }
  }

  protected void processContentChanged(VFileEvent event, ReloadSession reloadSession) {
  }

  protected void processCopy(VFileEvent event, ReloadSession reloadSession) {
  }

  protected void processCreate(VFileEvent event, ReloadSession reloadSession) {
  }

  protected void processDelete(VFileEvent event, ReloadSession reloadSession) {
  }

  protected void processMove(VFileEvent event, ReloadSession reloadSession) {
  }

  protected void processPropertyChanged(VFileEvent event, ReloadSession reloadSession) {
  }

  protected VirtualFile refreshAndGetVFile(VFileEvent event) {
    return event.getFileSystem().refreshAndFindFileByPath(event.getPath());
  }

  protected VirtualFile getVFile(VFileEvent event) {
    return event.getFileSystem().findFileByPath(event.getPath());
  }
}
