package jetbrains.mps.watching;

/*Generated by MPS */

import com.intellij.openapi.vfs.newvfs.events.VFileEvent;
import com.intellij.openapi.fileEditor.FileDocumentManager;
import jetbrains.mps.project.IModule;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.util.Computable;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.vfs.FileSystem;

/*package*/ class ModuleFileProcessor extends EventProcessor {
  private static final ModuleFileProcessor INSTANCE = new ModuleFileProcessor();

  /*package*/ ModuleFileProcessor() {
  }

  @Override
  protected void processContentChanged(VFileEvent event, ReloadSession reloadSession) {
    if (event.isFromRefresh() || event.getRequestor() instanceof FileDocumentManager) {
      IModule module = ModuleFileProcessor.getModuleByEvent(event);
      if ((module != null) && (module.needReloading())) {
        reloadSession.addChangedModule(module);
      }
    }
  }

  @Override
  protected void processCopy(VFileEvent event, ReloadSession reloadSession) {
    processCreate(event, reloadSession);
  }

  @Override
  protected void processMove(VFileEvent event, ReloadSession reloadSession) {
    processCreate(event, reloadSession);
  }

  @Override
  protected void processCreate(VFileEvent event, ReloadSession reloadSession) {
    IModule module = ModuleFileProcessor.getModuleByEvent(event);
    if (module == null) {
      VirtualFile vfile = refreshAndGetVFile(event);
      if (vfile == null) {
        return;
      }
      reloadSession.addNewModuleFile(vfile);
    }
  }

  @Override
  protected void processDelete(VFileEvent event, ReloadSession reloadSession) {
    IModule module = ModuleFileProcessor.getModuleByEvent(event);
    if (module != null) {
      reloadSession.addDeletedModule(module);
    }
  }

  public static ModuleFileProcessor getInstance() {
    return INSTANCE;
  }

  public static IModule getModuleByEvent(final VFileEvent event) {
    return ModelAccess.instance().runReadAction(new Computable<IModule>() {
      public IModule compute() {
        return MPSModuleRepository.getInstance().getModuleByFile(FileSystem.getInstance().getFileByPath(event.getPath()));
      }
    });
  }
}
