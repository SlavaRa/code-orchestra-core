package jetbrains.mps.vcs.diff.oldchanges;

/*Generated by MPS */

import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.Arrays;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.PropertyMessageTarget;
import com.intellij.openapi.util.Pair;

@Deprecated
public class OldSetPropertyChange extends OldChange {
  private SNodeId myNodeId;
  private String myProperty;
  private String myNewValue;

  @Deprecated
  public OldSetPropertyChange(SNodeId nodeId, String property, String newValue) {
    myNodeId = nodeId;
    myProperty = property;
    myNewValue = newValue;
  }

  public String getProperty() {
    return myProperty;
  }

  public String getNewValue() {
    return myNewValue;
  }

  public String toString() {
    return "set property " + myProperty + " for node " + myNodeId + " to " + myNewValue;
  }

  public SNodeId getAffectedNodeId() {
    return myNodeId;
  }

  public boolean apply(SModel m) {
    SNode n = m.getNodeById(myNodeId);
    if (n == null) {
      return false;
    }
    n.setProperty(getProperty(), getNewValue());
    return true;
  }

  @Override
  public List<SNodeId> getDependencies() {
    return Arrays.asList(getAffectedNodeId());
  }

  @Override
  public MessageTarget getMessageTarget() {
    return new PropertyMessageTarget(myProperty);
  }

  @Override
  public Object getChangeKey() {
    return new Pair<SNodeId, String>(getAffectedNodeId(), getProperty());
  }

  @Override
  public boolean isSameChange(OldChange c) {
    if (this == c) {
      return true;
    }
    if (c == null || getClass() != c.getClass()) {
      return false;
    }
    OldSetPropertyChange that = (OldSetPropertyChange) c;
    if ((myNewValue != null ?
      !(myNewValue.equals(that.myNewValue)) :
      that.myNewValue != null
    )) {
      return false;
    }
    if ((myNodeId != null ?
      !(myNodeId.equals(that.myNodeId)) :
      that.myNodeId != null
    )) {
      return false;
    }
    if ((myProperty != null ?
      !(myProperty.equals(that.myProperty)) :
      that.myProperty != null
    )) {
      return false;
    }
    return true;
  }
}
