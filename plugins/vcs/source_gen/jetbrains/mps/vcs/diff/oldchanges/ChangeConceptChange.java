package jetbrains.mps.vcs.diff.oldchanges;

/*Generated by MPS */

import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.HackSNodeUtil;

@Deprecated
public class ChangeConceptChange extends OldChange {
  private final SNodeId mySNodeId;
  private final String myConceptFqName;

  @Deprecated
  public ChangeConceptChange(SNodeId sNodeId, String conceptFqName) {
    mySNodeId = sNodeId;
    myConceptFqName = conceptFqName;
  }

  public SNodeId getAffectedNodeId() {
    return mySNodeId;
  }

  public boolean apply(SModel m) {
    SNode node = m.getNodeById(mySNodeId);
    if (node == null) {
      return false;
    }
    HackSNodeUtil.setConceptFqName(node, myConceptFqName);
    return true;
  }

  @Override
  public String toString() {
    return "change concept of node " + mySNodeId + " to " + myConceptFqName;
  }

  @Override
  public boolean isSameChange(OldChange c) {
    if (this == c) {
      return true;
    }
    if (c == null || getClass() != c.getClass()) {
      return false;
    }
    ChangeConceptChange that = (ChangeConceptChange) c;
    if (!(myConceptFqName.equals(that.myConceptFqName))) {
      return false;
    }
    if (!(mySNodeId.equals(that.mySNodeId))) {
      return false;
    }
    return true;
  }

  @Override
  public Object getChangeKey() {
    return mySNodeId;
  }

  public String getConceptFqName() {
    return myConceptFqName;
  }
}
