package jetbrains.mps.vcs.diff.oldchanges;

/*Generated by MPS */

import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.List;
import java.util.Arrays;
import jetbrains.mps.util.Pair;

@Deprecated
public class SetNodeChange extends NewNodeChange {
  /*package*/ SNodeId myOldChildId;
  private String myPrevRole;

  @Deprecated
  public SetNodeChange(String conceptFqName, SNodeId nodeId, String role, SNodeId parentId, SNodeId oldChildId, String prevRole) {
    super(conceptFqName, nodeId, role, parentId);
    myOldChildId = oldChildId;
    myPrevRole = prevRole;
  }

  public String toString() {
    return "set node " + getAffectedNodeId() + " in role " + getNodeRole();
  }

  public boolean apply(SModel m) {
    SNode parent = m.getNodeById(getNodeParent());
    if (parent == null) {
      return false;
    }
    SNode n = SModelUtil_new.instantiateConceptDeclaration(getConceptFqName(), m, GlobalScope.getInstance(), false);
    assert n != null;
    n.setId(getAffectedNodeId());
    SNode prevNode = null;
    if (myPrevRole != null) {
      List<SNode> children = parent.getChildren(myPrevRole);
      if (children.size() > 0) {
        prevNode = children.get(children.size() - 1);
      }
    }
    parent.insertChild(prevNode, getNodeRole(), n);
    return true;
  }

  public void secondApply(SModel m) {
    SNode n = m.getNodeById(getAffectedNodeId());
    if (n == null) {
      return;
    }
    SNode parent = n.getParent();
    for (SNode pc : parent.getChildren(getNodeRole())) {
      if (pc != n) {
        parent.removeChild(pc);
      }
    }
  }

  @Override
  public List<SNodeId> getDependencies() {
    return Arrays.asList(getNodeParent());
  }

  public SNodeId getOldChildId() {
    return myOldChildId;
  }

  @Override
  public Object getChangeKey() {
    return new Pair<SNodeId, String>(getNodeParent(), getNodeRole());
  }

  @Override
  public OldChangeType getChangeType() {
    if (getOldChildId() != null) {
      return OldChangeType.CHANGE;
    }
    return OldChangeType.ADD;
  }
}
