package jetbrains.mps.vcs.diff.oldchanges;

/*Generated by MPS */

import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.StaticReference;
import java.util.List;
import java.util.Arrays;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.ReferenceMessageTarget;
import com.intellij.openapi.util.Pair;

@Deprecated
public class OldSetReferenceChange extends OldChange {
  protected final SNodeId myNodeId;
  private final SModel myModel;
  protected final String myRole;
  private final String myResolveInfo;
  private final SModelReference myTargetModel;
  private final boolean myInternal;
  private SNodePointer myNodePointer;
  private SNodeId myTargetId;

  @Deprecated
  public OldSetReferenceChange(SNodeId id, SModel model, SReference reference, SNode target) {
    myNodeId = id;
    myModel = model;
    myRole = reference.getRole();
    myResolveInfo = reference.getResolveInfo();
    myTargetModel = reference.getTargetSModelReference();
    if (target == null || target.getModel() != model) {
      myInternal = false;
      myNodePointer = new SNodePointer(target);
      myTargetId = reference.getTargetNodeId();
    } else {
      myInternal = true;
      myTargetId = target.getSNodeId();
    }
  }

  public String getRole() {
    return myRole;
  }

  public SNodePointer getPointer() {
    return myNodePointer;
  }

  public boolean isBrokenReference() {
    if (!(myInternal) && myNodePointer.getNode() == null) {
      return true;
    }
    return false;
  }

  public String toString() {
    if (!(myInternal)) {
      if (myNodePointer.getNode() == null) {
        return "set reference" + myNodeId + " in role to " + myResolveInfo + " [NOT FOUND]";
      } else {
        return "set reference " + myNodeId + " in role " + myRole + " to " + myNodePointer + " in model " + myNodePointer.getModel();
      }
    } else {
      return "set reference " + myNodeId + " in role " + myRole + " to " + myModel.getNodeById(myTargetId);
    }
  }

  public SNodeId getAffectedNodeId() {
    return myNodeId;
  }

  public boolean apply(SModel m) {
    SNode node = m.getNodeById(myNodeId);
    if (node != null) {
      if (myInternal) {
        SNode target = m.getNodeById(myTargetId);
        node.setReferent(myRole, target);
        if (target == null) {
          node.addReference(new StaticReference(myRole, node, node.getModel().getSModelReference(), myTargetId, myResolveInfo));
        }
      } else {
        SReference reference = SReference.create(myRole, node, myTargetModel, myTargetId);
        node.removeReferent(myRole);
        node.addReference(reference);
        if (reference != null) {
          reference.setResolveInfo(myResolveInfo);
        }
      }
    }
    return true;
  }

  @Override
  public List<SNodeId> getDependencies() {
    return Arrays.asList(myNodeId);
  }

  public String getResolveInfo() {
    return myResolveInfo;
  }

  @Override
  public MessageTarget getMessageTarget() {
    return new ReferenceMessageTarget(myRole);
  }

  @Override
  public Object getChangeKey() {
    return new Pair<SNodeId, String>(getAffectedNodeId(), getRole());
  }

  @Override
  public boolean isSameChange(OldChange c) {
    if (this == c) {
      return true;
    }
    if (c == null || getClass() != c.getClass()) {
      return false;
    }
    OldSetReferenceChange that = (OldSetReferenceChange) c;
    if (myInternal != that.myInternal) {
      return false;
    }
    if ((myNodeId != null ?
      !(myNodeId.equals(that.myNodeId)) :
      that.myNodeId != null
    )) {
      return false;
    }
    if ((myResolveInfo != null ?
      !(myResolveInfo.equals(that.myResolveInfo)) :
      that.myResolveInfo != null
    )) {
      return false;
    }
    if ((myRole != null ?
      !(myRole.equals(that.myRole)) :
      that.myRole != null
    )) {
      return false;
    }
    if ((myTargetId != null ?
      !(myTargetId.equals(that.myTargetId)) :
      that.myTargetId != null
    )) {
      return false;
    }
    if ((myTargetModel != null ?
      !(myTargetModel.equals(that.myTargetModel)) :
      that.myTargetModel != null
    )) {
      return false;
    }
    return true;
  }
}
