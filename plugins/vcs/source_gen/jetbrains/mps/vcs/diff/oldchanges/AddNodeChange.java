package jetbrains.mps.vcs.diff.oldchanges;

/*Generated by MPS */

import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Arrays;

@Deprecated
public class AddNodeChange extends NewNodeChange {
  private SNodeId myPreviousNode;
  private String myPreviousRole;

  @Deprecated
  public AddNodeChange(String conceptFqName, SNodeId nodeId, String role, SNodeId parentId, SNodeId prevNode, String prevRole) {
    super(conceptFqName, nodeId, role, parentId);
    myPreviousNode = prevNode;
    myPreviousRole = prevRole;
  }

  public SNodeId getPreviousNode() {
    return myPreviousNode;
  }

  public String toString() {
    return "add node " + getAffectedNodeId() + " in role " + getNodeRole() + " before " + getPreviousNode();
  }

  public boolean apply(SModel m) {
    SNode parent = m.getNodeById(getNodeParent());
    if (parent == null) {
      return false;
    }
    SNodeId prevNode = getPreviousNode();
    SNode prev = null;
    if (prevNode != null) {
      prev = m.getNodeById(prevNode);
    } else {
      if (myPreviousRole != null) {
        List<SNode> children = parent.getChildren(myPreviousRole);
        if (children.size() > 0) {
          prev = children.get(children.size() - 1);
        }
      }
    }
    SNode n = SModelUtil_new.instantiateConceptDeclaration(getConceptFqName(), m, GlobalScope.getInstance(), false);
    assert n != null;
    n.setId(getAffectedNodeId());
    parent.insertChild(prev, getNodeRole(), n);
    return true;
  }

  @Override
  public List<SNodeId> getDependencies() {
    return Arrays.asList(getNodeParent(), getPreviousNode());
  }

  @Override
  public OldChangeType getChangeType() {
    return OldChangeType.ADD;
  }
}
