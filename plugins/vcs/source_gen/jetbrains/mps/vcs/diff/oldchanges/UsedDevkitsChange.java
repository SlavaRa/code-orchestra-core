package jetbrains.mps.vcs.diff.oldchanges;

/*Generated by MPS */

import jetbrains.mps.project.structure.modules.ModuleReference;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SModel;

@Deprecated
public class UsedDevkitsChange extends OldChange {
  private final boolean myIsDeleted;
  private final ModuleReference myReference;

  @Deprecated
  public UsedDevkitsChange(@NotNull ModuleReference reference, boolean isDeleted) {
    myIsDeleted = isDeleted;
    myReference = reference;
  }

  public SNodeId getAffectedNodeId() {
    return null;
  }

  @Override
  public String toString() {
    String format;
    if (myIsDeleted) {
      format = "delete used devkit %s (%s)";
    } else {
      format = "add used devkit %s (%s)";
    }
    return String.format(format, myReference.getModuleFqName(), myReference.getModuleId().toString());
  }

  public boolean apply(SModel m) {
    if (myIsDeleted) {
      m.deleteDevKit(myReference);
    } else {
      m.addDevKit(myReference);
    }
    return true;
  }

  @Override
  public OldChangeType getChangeType() {
    return (myIsDeleted ?
      OldChangeType.DELETE :
      OldChangeType.ADD
    );
  }

  public boolean isOppositeTo(UsedDevkitsChange that) {
    return this.myReference.equals(that.myReference) && this.myIsDeleted != that.myIsDeleted;
  }
}
