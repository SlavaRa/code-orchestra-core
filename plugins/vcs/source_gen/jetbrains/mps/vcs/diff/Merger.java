package jetbrains.mps.vcs.diff;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import java.util.List;
import jetbrains.mps.vcs.diff.oldchanges.OldChange;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Collections;
import jetbrains.mps.vcs.diff.oldchanges.AddLanguageAspectChange;
import jetbrains.mps.vcs.diff.oldchanges.OldSetPropertyChange;
import jetbrains.mps.vcs.diff.oldchanges.OldSetReferenceChange;
import jetbrains.mps.vcs.diff.oldchanges.DeleteNodeChange;
import jetbrains.mps.vcs.diff.oldchanges.AddNodeChange;
import jetbrains.mps.vcs.diff.oldchanges.OldAddRootChange;
import jetbrains.mps.vcs.diff.oldchanges.MoveNodeChange;
import jetbrains.mps.vcs.diff.oldchanges.ChangeConceptChange;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.vcs.diff.oldchanges.SetNodeChange;
import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.util.NameUtil;
import java.util.LinkedHashSet;
import jetbrains.mps.vcs.diff.oldchanges.UsedLanguagesChange;
import jetbrains.mps.vcs.diff.oldchanges.ModelImportChange;
import jetbrains.mps.vcs.diff.oldchanges.NewNodeChange;

@Deprecated
public class Merger {
  private final SModel[] mySourceModels = new SModel[Merger.Version.values().length];
  private SModel myResultModel;
  private List<OldChange> myBaseMineChanges;
  private Map<OldChange, SNode> myChangeGroups = new HashMap<OldChange, SNode>();
  private List<OldChange> myBaseRepoChanges;
  private Set<OldChange> myExcludedChanges = new HashSet<OldChange>();
  private Set<OldChange> myAppliedChanges = new HashSet<OldChange>();
  private List<Conflict> myConflicts = new ArrayList<Conflict>();
  private List<Warning> myWarnings = new ArrayList<Warning>();
  private Set<OldChange> myUnresolvedConflictingChanges;
  private Set<OldChange> myConflictingChanges = new HashSet<OldChange>();
  private Set<OldChange> mySymmetricChanges = new HashSet<OldChange>();
  private boolean myPreviewMode = false;

  @Deprecated
  public Merger(SModel base, SModel mine, SModel repo) {
    mySourceModels[Merger.Version.BASE.ordinal()] = base;
    mySourceModels[Merger.Version.MINE.ordinal()] = mine;
    mySourceModels[Merger.Version.REPO.ordinal()] = repo;
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        DiffBuilder mineDiffBuilder = new DiffBuilder(getBase(mySourceModels), getMine(mySourceModels));
        myBaseMineChanges = mineDiffBuilder.getChanges();
        myChangeGroups.putAll(mineDiffBuilder.getChangeGroups());
        DiffBuilder repoDiffBuilder = new DiffBuilder(getBase(mySourceModels), getRepo(mySourceModels));
        myBaseRepoChanges = repoDiffBuilder.getChanges();
        myChangeGroups.putAll(repoDiffBuilder.getChangeGroups());
      }
    });
  }

  public SModel getResultModel() {
    return myResultModel;
  }

  public Set<OldChange> getExcludedChanges() {
    return Collections.unmodifiableSet(myExcludedChanges);
  }

  public List<Warning> getWarnings() {
    return Collections.unmodifiableList(myWarnings);
  }

  public List<Conflict> getConflicts() {
    return Collections.unmodifiableList(myConflicts);
  }

  public List<Conflict> getUnresolvedConflicts() {
    ArrayList<Conflict> result = new ArrayList<Conflict>();
    for (Conflict conflict : myConflicts) {
      if (!(getExcludedChanges().contains(conflict.getChange1())) && !(getExcludedChanges().contains(conflict.getChange2()))) {
        result.add(conflict);
      }
    }
    return result;
  }

  public void includeChange(OldChange change) {
    myExcludedChanges.remove(change);
  }

  public void excludeChange(OldChange change) {
    myExcludedChanges.add(change);
  }

  public void doRebuild(final Runnable afterRebuild) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        collectConflicts();
        collectWarnings();
        rebuldResultModel();
        afterRebuild.run();
      }
    });
  }

  public List<OldChange> getBaseMineChanges() {
    return myBaseMineChanges;
  }

  public List<OldChange> getBaseRepoChanges() {
    return myBaseRepoChanges;
  }

  private SModel getRepo(SModel[] models) {
    return models[Merger.Version.REPO.ordinal()];
  }

  private SModel getMine(SModel[] models) {
    return models[Merger.Version.MINE.ordinal()];
  }

  private SModel getBase(SModel[] models) {
    return models[Merger.Version.BASE.ordinal()];
  }

  private void collectConflicts() {
    myConflicts.clear();
    myConflictingChanges.clear();
    collectConflictsByClass(AddLanguageAspectChange.class);
    collectConflictsByClass(OldSetPropertyChange.class);
    collectConflictsByClass(OldSetReferenceChange.class);
    collectSetNodeConflicts();
    collectConflictsByClass(DeleteNodeChange.class);
    collectConflictsByClass(AddNodeChange.class);
    collectConflictsByClass(OldAddRootChange.class);
    collectDeleteDependencyConflicts();
    collectConflictsByClass(MoveNodeChange.class);
    collectConflictsByClass(ChangeConceptChange.class);
    for (OldChange change : new ArrayList<OldChange>(myConflictingChanges)) {
      myConflictingChanges.addAll(getChangeGroupOf(change));
    }
  }

  public List<OldChange> getChangeGroupOf(OldChange change) {
    List<OldChange> result = new ArrayList<OldChange>();
    if (myChangeGroups.get(change) != null) {
      SNode group = myChangeGroups.get(change);
      for (Map.Entry<OldChange, SNode> e : myChangeGroups.entrySet()) {
        if (e.getValue().equals(group)) {
          result.add(e.getKey());
        }
      }
    }
    return result;
  }

  public Set<OldChange> getConflictingChanges() {
    return myConflictingChanges;
  }

  private void collectWarnings() {
    myWarnings.clear();
    for (OldSetReferenceChange srf : getChanges(OldSetReferenceChange.class)) {
      if (srf.isBrokenReference()) {
        myWarnings.add(new Warning(srf.getAffectedNodeId(), "Maybe broken reference to " + srf.getResolveInfo() + " at " + srf.getAffectedNodeId()));
      }
    }
    for (ChangeConceptChange ch : getChanges(ChangeConceptChange.class)) {
      myWarnings.add(new Warning(ch.getAffectedNodeId(), "Concept changed to " + ch.getConceptFqName() + " for node " + ch.getAffectedNodeId()));
    }
  }

  private <C extends OldChange> void collectConflictsByClass(Class<C> changeClass) {
    Map<Object, List<C>> changesMap = new HashMap<Object, List<C>>();
    List<C> changes = getChanges(changeClass);
    for (C change : changes) {
      Object key = change.getChangeKey();
      if (changesMap.get(key) == null) {
        changesMap.put(key, new ArrayList<C>());
      }
      changesMap.get(key).add(change);
    }
    for (Object k : changesMap.keySet()) {
      handlePossibleConflictOrSymmetry(changesMap.get(k));
    }
  }

  private <C extends OldChange> void handlePossibleConflictOrSymmetry(List<C> changesPair) {
    if (changesPair.size() <= 1) {
      return;
    }
    assert changesPair.size() == 2;
    C first = changesPair.get(0);
    C second = changesPair.get(1);
    if (first.isSameChange(second)) {
      mySymmetricChanges.add(first);
      mySymmetricChanges.add(second);
      myAppliedChanges.add(first);
      myExcludedChanges.add(second);
    } else {
      myConflicts.add(new Conflict(first, second));
      myConflictingChanges.add(first);
      myConflictingChanges.add(second);
    }
  }

  private void collectSetNodeConflicts() {
    Map<Pair<SNodeId, String>, List<SetNodeChange>> changes = new HashMap<Pair<SNodeId, String>, List<SetNodeChange>>();
    List<SetNodeChange> sets = getChanges(SetNodeChange.class);
    for (SetNodeChange spc : sets) {
      if (isOneOrZeroCardinality(getNodeByIdAndChange(spc, spc.getNodeParent()), spc.getNodeRole())) {
        if (changes.get(new Pair<SNodeId, String>(spc.getNodeParent(), spc.getNodeRole())) == null) {
          changes.put(new Pair<SNodeId, String>(spc.getNodeParent(), spc.getNodeRole()), new ArrayList<SetNodeChange>());
        }
        changes.get(new Pair<SNodeId, String>(spc.getNodeParent(), spc.getNodeRole())).add(spc);
      }
    }
    for (MoveNodeChange mnc : getChanges(MoveNodeChange.class)) {
      String newRole = mnc.getNewRole();
      for (SNode newParent : CollectionUtil.set(getMine(mySourceModels).getNodeById(mnc.getNewParent()), getMine(mySourceModels).getNodeById(mnc.getNewParent()))) {
        while (newParent != null) {
          if (changes.containsKey(new Pair<Object, Object>(newParent.getId(), newRole))) {
            List<SetNodeChange> cs = new ArrayList<SetNodeChange>(changes.get(new Pair<Object, Object>(newParent.getId(), newRole)));
            myConflicts.add(new Conflict(cs.get(0), mnc));
            myConflictingChanges.add(cs.get(0));
            myConflictingChanges.add(mnc);
          }
          newRole = newParent.getRole_();
          newParent = newParent.getParent();
        }
      }
    }
    for (Pair<SNodeId, String> p : changes.keySet()) {
      handlePossibleConflictOrSymmetry(changes.get(p));
    }
  }

  private SNode getNodeByIdAndChange(SetNodeChange spc, SNodeId nodeId) {
    return (isMine(spc) ?
      getMine(mySourceModels).getNodeById(nodeId) :
      getRepo(mySourceModels).getNodeById(nodeId)
    );
  }

  private boolean isOneOrZeroCardinality(SNode parent, String role) {
    SNode ld = (SNode) SModelSearchUtil.findLinkDeclaration(SModelUtil.findConceptDeclaration(parent.getConceptFqName(), GlobalScope.getInstance()), role);
    if (ld == null) {
      return false;
    }
    return SPropertyOperations.hasValue(ld, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(ld, "sourceCardinality", "1", "0..1");
  }

  private void collectDeleteDependencyConflicts() {
    collectDeleteDependencyConflicts(myBaseMineChanges, myBaseRepoChanges);
    collectDeleteDependencyConflicts(myBaseRepoChanges, myBaseMineChanges);
  }

  private void collectDeleteDependencyConflicts(List<OldChange> list1, List<OldChange> list2) {
    for (OldChange c : list1) {
      if (!(mySymmetricChanges.contains(c))) {
        for (DeleteNodeChange d : CollectionUtil.filter(DeleteNodeChange.class, list2)) {
          if (!(mySymmetricChanges.contains(d)) && c.getDependencies().contains(d.getAffectedNodeId())) {
            myConflicts.add(new Conflict(c, d));
            myConflictingChanges.add(c);
            myConflictingChanges.add(d);
          }
        }
      }
    }
  }

  private <C extends OldChange> List<C> getChanges(Class<C> changeClass) {
    List<C> result = new ArrayList<C>();
    result.addAll(CollectionUtil.filter(changeClass, myBaseMineChanges));
    result.addAll(CollectionUtil.filter(changeClass, myBaseRepoChanges));
    return result;
  }

  public void rebuldResultModel() {
    myResultModel = CopyUtil.copyModel(getBase(mySourceModels));
    boolean wasLoading = myResultModel.setLoading(true);
    try {
      ModuleReference languageNamespace = ModuleReference.fromString("jetbrains.mps.core");
      SNode tmp = new SNode(myResultModel, NameUtil.conceptFQNameFromNamespaceAndShortName(languageNamespace.getModuleFqName(), "BaseConcept"));
      boolean notRemoveLanguage = false;
      if (myResultModel.importedLanguages().contains(languageNamespace)) {
        notRemoveLanguage = true;
      }
      myResultModel.addRoot(tmp);
      myUnresolvedConflictingChanges = new LinkedHashSet<OldChange>();
      for (Conflict conflict : myConflicts) {
        if (!(myExcludedChanges.contains(conflict.getChange1())) && !(myExcludedChanges.contains(conflict.getChange2()))) {
          myUnresolvedConflictingChanges.add(conflict.getChange1());
          myUnresolvedConflictingChanges.add(conflict.getChange2());
        }
      }
      for (OldChange change : new ArrayList<OldChange>(myUnresolvedConflictingChanges)) {
        myUnresolvedConflictingChanges.addAll(getChangeGroupOf(change));
      }
      applyChangesByClass(UsedLanguagesChange.class);
      applyChangesByClass(ModelImportChange.class);
      applyChangesByClass(AddLanguageAspectChange.class);
      applyStructuralChanges();
      applyChangesByClass(ChangeConceptChange.class);
      applyChangesByClass(OldSetPropertyChange.class);
      applyChangesByClass(OldSetReferenceChange.class);
      myResultModel.removeRoot(tmp);
      if (!(notRemoveLanguage)) {
        myResultModel.deleteLanguage(languageNamespace);
      }
    } finally {
      myResultModel.setLoading(wasLoading);
    }
  }

  private boolean isChangeApplicable(OldChange change) {
    if (myPreviewMode && !(myAppliedChanges.contains(change))) {
      return false;
    }
    if (myExcludedChanges.contains(change)) {
      return false;
    }
    if (isChangeUnresolved(change)) {
      return false;
    }
    return true;
  }

  private <C extends OldChange> List<C> getApplicableChanges(Class<C> changeClass) {
    List<C> result = new ArrayList<C>();
    for (C change : getChanges(changeClass)) {
      if (isChangeApplicable(change)) {
        result.add(change);
      }
    }
    return result;
  }

  private void applyChangesByClass(Class<? extends OldChange> changeClass) {
    for (OldChange change : getApplicableChanges(changeClass)) {
      if (change.apply(myResultModel)) {
        myAppliedChanges.add(change);
      }
    }
  }

  private void applyStructuralChanges() {
    List<OldChange> structuralChanges = new ArrayList<OldChange>();
    structuralChanges.addAll(getApplicableChanges(NewNodeChange.class));
    structuralChanges.addAll(getApplicableChanges(DeleteNodeChange.class));
    structuralChanges.addAll(getApplicableChanges(MoveNodeChange.class));
    Map<SNodeId, OldChange> nodeIdToChangeMap = new HashMap<SNodeId, OldChange>();
    for (OldChange structuralChange : structuralChanges) {
      SNodeId nodeId = structuralChange.getAffectedNodeId();
      OldChange sameChange = nodeIdToChangeMap.get(nodeId);
      if (sameChange != null) {
        if (structuralChange instanceof DeleteNodeChange && sameChange instanceof DeleteNodeChange) {
        } else {
          assert false;
        }
      }
      nodeIdToChangeMap.put(nodeId, structuralChange);
    }
    Set<OldChange> alreadyApplied = new HashSet<OldChange>();
    for (OldChange change : structuralChanges) {
      applyStructurualChange(nodeIdToChangeMap, alreadyApplied, change);
    }
  }

  private List<SNodeId> getRealDependencies(Map<SNodeId, OldChange> nodeIdToChangeMap, OldChange change) {
    if (change instanceof DeleteNodeChange) {
      ArrayList<SNodeId> result = new ArrayList<SNodeId>();
      for (SNodeId nodeId : change.getDependencies()) {
        if (nodeIdToChangeMap.get(nodeId) instanceof DeleteNodeChange) {
          result.add(nodeId);
        }
      }
      return result;
    } else {
      return change.getDependencies();
    }
  }

  private boolean applyStructurualChange(Map<SNodeId, OldChange> nodeIdToChangeMap, Set<OldChange> alreadyApplied, OldChange change) {
    if (myPreviewMode && !(myAppliedChanges.contains(change))) {
      return false;
    }
    if (myExcludedChanges.contains(change) || isChangeUnresolved(change)) {
      return false;
    }
    if (alreadyApplied.contains(change)) {
      return true;
    }
    for (SNodeId dependency : getRealDependencies(nodeIdToChangeMap, change)) {
      if (!(nodeIdToChangeMap.containsKey(dependency))) {
        continue;
      }
      if (!(applyStructurualChange(nodeIdToChangeMap, alreadyApplied, nodeIdToChangeMap.get(dependency)))) {
        return false;
      }
    }
    boolean applied = change.apply(myResultModel);
    if (applied) {
      alreadyApplied.add(change);
    }
    return applied;
  }

  private boolean isChangeUnresolved(OldChange ch) {
    if (myPreviewMode) {
      return myConflictingChanges.contains(ch) && myUnresolvedConflictingChanges.contains(ch);
    } else {
      return myConflictingChanges.contains(ch) && myUnresolvedConflictingChanges.contains(ch) && myBaseRepoChanges.contains(ch);
    }
  }

  public boolean isResolved() {
    return myUnresolvedConflictingChanges.isEmpty();
  }

  public boolean isMine(OldChange change) {
    return myBaseMineChanges.contains(change);
  }

  public void setPreviewMode(boolean b) {
    myPreviewMode = b;
  }

  public Set<OldChange> getAppliedChanges() {
    return myAppliedChanges;
  }

  public Set<OldChange> getConflictedWith(OldChange change) {
    Set<OldChange> result = new HashSet<OldChange>();
    if (!(myConflictingChanges.contains(change))) {
      return result;
    }
    for (Conflict c : myConflicts) {
      if (c.getChange1() == change) {
        result.add(c.getChange2());
        result.addAll(getChangeGroupOf(c.getChange2()));
      }
      if (c.getChange2() == change) {
        result.add(c.getChange1());
        result.addAll(getChangeGroupOf(c.getChange1()));
      }
    }
    return result;
  }

  public Set<OldChange> getUnresolvedConflictingChanges() {
    return myUnresolvedConflictingChanges;
  }

  private static   enum Version {
    MINE(),
    BASE(),
    REPO();

    Version() {
    }
  }
}
