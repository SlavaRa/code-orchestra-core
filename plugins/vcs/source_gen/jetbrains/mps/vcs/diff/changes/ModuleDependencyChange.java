package jetbrains.mps.vcs.diff.changes;

/*Generated by MPS */

import jetbrains.mps.project.structure.modules.ModuleReference;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class ModuleDependencyChange extends DependencyChange {
  private ModuleReference myModuleReference;
  private ModuleDependencyChange.DependencyType myType;

  public ModuleDependencyChange(@NotNull ChangeSet changeSet, @NotNull ModuleReference moduleReference, @NotNull ModuleDependencyChange.DependencyType type, boolean delete) {
    super(changeSet, delete);
    myModuleReference = moduleReference;
    myType = type;
  }

  @Override
  public String toString() {
    return ((isDelete() ?
      "Delete" :
      "Add"
    )) + " " + myType.myName + " " + myModuleReference;
  }

  @NotNull
  protected ModelChange createOppositeChange() {
    return new ModuleDependencyChange(getChangeSet().getOppositeChangeSet(), myModuleReference, myType, !(isDelete()));
  }

  public void apply(@NotNull SModel model, @NotNull NodeCopier nodeCopier) {
    if (isDelete()) {
      myType.myDeleteTask.invoke(model, myModuleReference);
    } else {
      myType.myAddTask.invoke(model, myModuleReference);
    }
  }

  public ModuleReference getModuleReference() {
    return myModuleReference;
  }

  public ModuleDependencyChange.DependencyType getDependencyType() {
    return myType;
  }

  public static   enum DependencyType {
    USED_LANG("Used Language", new _FunctionTypes._void_P2_E0<SModel, ModuleReference>() {
      public void invoke(SModel model, ModuleReference module) {
        model.addLanguage(module);
      }
    }, new _FunctionTypes._void_P2_E0<SModel, ModuleReference>() {
      public void invoke(SModel model, ModuleReference module) {
        model.deleteLanguage(module);
      }
    }),
    USED_DEVKIT("Used Devkit", new _FunctionTypes._void_P2_E0<SModel, ModuleReference>() {
      public void invoke(SModel model, ModuleReference module) {
        model.addDevKit(module);
      }
    }, new _FunctionTypes._void_P2_E0<SModel, ModuleReference>() {
      public void invoke(SModel model, ModuleReference module) {
        model.deleteDevKit(module);
      }
    }),
    LANG_ENGAGED_ON_GENERATION("Language Engaged on Generation", new _FunctionTypes._void_P2_E0<SModel, ModuleReference>() {
      public void invoke(SModel model, ModuleReference module) {
        model.addEngagedOnGenerationLanguage(module);
      }
    }, new _FunctionTypes._void_P2_E0<SModel, ModuleReference>() {
      public void invoke(SModel model, ModuleReference module) {
        model.removeEngagedOnGenerationLanguage(module);
      }
    });

    private String myName;
    private _FunctionTypes._void_P2_E0<? super SModel, ? super ModuleReference> myAddTask;
    private _FunctionTypes._void_P2_E0<? super SModel, ? super ModuleReference> myDeleteTask;

    DependencyType(String name, _FunctionTypes._void_P2_E0<? super SModel, ? super ModuleReference> addTask, _FunctionTypes._void_P2_E0<? super SModel, ? super ModuleReference> deleteTask) {
      myName = name;
      myAddTask = addTask;
      myDeleteTask = deleteTask;
    }
  }
}
