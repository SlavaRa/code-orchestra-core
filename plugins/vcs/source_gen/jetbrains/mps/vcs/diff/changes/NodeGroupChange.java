package jetbrains.mps.vcs.diff.changes;

/*Generated by MPS */

import jetbrains.mps.smodel.SNodeId;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.annotations.Nullable;

public class NodeGroupChange extends ModelChange {
  private SNodeId myParentNodeId;
  private String myRole;
  private int myBegin;
  private int myEnd;
  private int myResultBegin;
  private int myResultEnd;
  private List<SNodeId> myPreparedIdsToDelete = null;
  private SNodeId myPreparedAnchorId = null;

  public NodeGroupChange(@NotNull ChangeSet changeSet, @NotNull SNodeId parentNodeId, @NotNull String role, int begin, int end, int resultBegin, int resultEnd) {
    super(changeSet);
    myParentNodeId = parentNodeId;
    myRole = role;
    myBegin = begin;
    myEnd = end;
    myResultBegin = resultBegin;
    myResultEnd = resultEnd;
  }

  @NotNull
  public SNodeId getParentNodeId() {
    return myParentNodeId;
  }

  @NotNull
  public String getRole() {
    return myRole;
  }

  public int getBegin() {
    return myBegin;
  }

  public int getEnd() {
    return myEnd;
  }

  public int getResultEnd() {
    return myResultEnd;
  }

  public int getResultBegin() {
    return myResultBegin;
  }

  public void prepare() {
    if (myPreparedIdsToDelete == null) {
      SNode parent = getChangeSet().getOldModel().getNodeById(myParentNodeId);
      assert parent != null;

      List<SNode> children = parent.getChildren(myRole);
      myPreparedIdsToDelete = ListSequence.fromList(new ArrayList<SNodeId>());
      for (int i = myBegin; i < myEnd; i++) {
        ListSequence.fromList(myPreparedIdsToDelete).addElement(children.get(i).getSNodeId());
      }
      myPreparedAnchorId = (myBegin == 0 ?
        null :
        children.get(myBegin - 1).getSNodeId()
      );
    }
  }

  public void apply(@NotNull final SModel model, @NotNull NodeCopier nodeCopier) {
    // delete old nodes 
    prepare();
    ListSequence.fromList(myPreparedIdsToDelete).visitAll(new IVisitor<SNodeId>() {
      public void visit(SNodeId id) {
        model.getNodeById(id).delete();
      }
    });
    myPreparedIdsToDelete = null;

    // copy nodes to insert 
    List<SNode> nodesToAdd = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> newChildren = getChangeSet().getNewModel().getNodeById(myParentNodeId).getChildren(myRole);
    for (int i = myResultBegin; i < myResultEnd; i++) {
      ListSequence.fromList(nodesToAdd).addElement(nodeCopier.copyNode(newChildren.get(i)));
    }

    // insert new nodes 
    SNode anchor = (myPreparedAnchorId == null ?
      null :
      model.getNodeById(myPreparedAnchorId)
    );
    SNode parent = model.getNodeById(myParentNodeId);
    for (SNode newNode : ListSequence.fromList(nodesToAdd).reversedList()) {
      parent.insertChild(anchor, myRole, newNode);
    }
  }

  @Nullable
  @Override
  public SNodeId getRootId() {
    return getChangeSet().getOldModel().getNodeById(myParentNodeId).getContainingRoot().getSNodeId();
  }

  @NotNull
  public ChangeType getType() {
    if (myBegin == myEnd) {
      return ChangeType.ADD;
    }
    if (myResultBegin == myResultEnd) {
      return ChangeType.DELETE;
    }
    return ChangeType.CHANGE;
  }

  @Override
  public String toString() {
    if (myEnd == myBegin) {
      return String.format("Insert %s into position #%d in role %s of node %s", nodeRange(myResultBegin, myResultEnd), myBegin, myRole, myParentNodeId);
    }
    if (myResultEnd == myResultBegin) {
      return String.format("Delete %s in role %s of node %s", nodeRange(myBegin, myEnd), myRole, myParentNodeId);
    }
    return String.format("Replace %s with nodes %s in role %s of node %s", nodeRange(myBegin, myEnd), nodeRange(myResultBegin, myResultEnd), myRole, myParentNodeId);
  }

  @NotNull
  protected ModelChange createOppositeChange() {
    return new NodeGroupChange(getChangeSet().getOppositeChangeSet(), myParentNodeId, myRole, myResultBegin, myResultEnd, myBegin, myEnd);
  }

  private static String nodeRange(int begin, int end) {
    return (begin + 1 == end ?
      String.format("node #%d", begin) :
      String.format("nodes #%d-%d", begin, end - 1)
    );
  }
}
