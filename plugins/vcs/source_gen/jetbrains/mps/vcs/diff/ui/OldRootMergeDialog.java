package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import jetbrains.mps.nodeEditor.EditorMessageOwner;
import javax.swing.JPanel;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.vcs.diff.Merger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.selection.SelectionListener;
import jetbrains.mps.nodeEditor.selection.SingularSelectionListenerAdapter;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.selection.SingularSelection;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.JComponent;
import java.awt.GridLayout;
import java.awt.BorderLayout;
import javax.swing.JLabel;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import jetbrains.mps.vcs.diff.oldchanges.OldChange;
import javax.swing.JSplitPane;
import java.awt.Component;
import java.awt.FlowLayout;
import javax.swing.JButton;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import java.util.Set;
import jetbrains.mps.smodel.SNodeId;
import java.util.ArrayList;
import jetbrains.mps.vcs.diff.Conflict;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.vcs.diff.oldchanges.DeleteNodeChange;
import jetbrains.mps.ide.projectPane.Icons;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class OldRootMergeDialog extends BaseDialog implements EditorMessageOwner {
  private JPanel myTopComponent;
  private JPanel myBottomComponent;
  private OldDiffEditorComponent myResultEditorComponent;
  private OldDiffEditorComponent myChange1EditorComponent;
  private OldDiffEditorComponent myChange2EditorComponent;
  private SModel myChange1Model;
  private SModel myChange2Model;
  private SModel myResultModel;
  private IOperationContext myContext;
  private JPanel myContainer;
  private Merger myMerger;
  private SNode myRoot;
  private SelectionListener myCellSelectionListener = new SingularSelectionListenerAdapter() {
    @Override
    protected void selectionChangedTo(EditorComponent component, final SingularSelection newSelection) {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          if (newSelection != null && newSelection.getEditorCell().getSNode() != null) {
            SNode sNode;
            sNode = myChange1Model.getNodeById(newSelection.getEditorCell().getSNode().getSNodeId());
            myChange1EditorComponent.inspect(sNode);
            sNode = myResultModel.getNodeById(newSelection.getEditorCell().getSNode().getSNodeId());
            myResultEditorComponent.inspect(sNode);
            sNode = myChange2Model.getNodeById(newSelection.getEditorCell().getSNode().getSNodeId());
            myChange2EditorComponent.inspect(sNode);
          }
        }
      });
      super.selectionChangedTo(component, newSelection);
    }
  };
  private boolean myVeiwportSetInProgress = false;

  public OldRootMergeDialog(IOperationContext context, SModel change1, SModel change2, boolean modal) {
    super(context.getMainFrame(), "Merge");
    setModal(modal);
    myContext = context;
    myChange1Model = change1;
    myChange2Model = change2;
  }

  protected JComponent getMainComponent() {
    return myContainer;
  }

  private OldDiffEditorComponent addEditor(SNode node, String revisionName) {
    final OldDiffEditorComponent result = new OldDiffEditorComponent(myContext, node) {
      @Override
      public void configureBlock(OldChangesBlock block) {
        JComponent panel = new JPanel();
        panel.setLayout(new GridLayout(1, 2));
        panel.setSize(20, 10);
        panel.add(new OldRootMergeDialog.ApplyMenu(block.getChanges()));
        panel.add(new OldRootMergeDialog.ExcludeMenu(block.getChanges()));
        block.setRollbackButton(panel);
      }
    };
    result.editNode(node, myContext);
    result.setReadOnly(true);
    JPanel panel = new JPanel(new BorderLayout());
    panel.add(new JLabel(revisionName), BorderLayout.NORTH);
    panel.add(result.getExternalComponent(), BorderLayout.CENTER);
    myTopComponent.add(panel);
    myBottomComponent.add(result.getInspector().getExternalComponent());
    result.getSelectionManager().addSelectionListener(myCellSelectionListener);
    result.getViewport().addChangeListener(new ChangeListener() {
      public void stateChanged(ChangeEvent e) {
        if (myVeiwportSetInProgress) {
          return;
        }
        myVeiwportSetInProgress = true;
        result.synchronizeViewWith(myChange1EditorComponent);
        result.synchronizeViewWith(myResultEditorComponent);
        result.synchronizeViewWith(myChange2EditorComponent);
        myVeiwportSetInProgress = false;
      }
    });
    return result;
  }

  public void init(final SNode node, Merger merger) {
    myRoot = node;
    myMerger = merger;
    final SNode[] change1Node = new SNode[1];
    final SNode[] resultNode = new SNode[1];
    final SNode[] change2Node = new SNode[1];
    merger.rebuldResultModel();
    final SModel resultModel = merger.getResultModel();
    change1Node[0] = myChange1Model.getNodeById(node.getSNodeId());
    resultNode[0] = resultModel.getNodeById(node.getSNodeId());
    change2Node[0] = myChange2Model.getNodeById(node.getSNodeId());
    myTopComponent = new JPanel(new GridLayout(1, 3));
    myBottomComponent = new JPanel(new GridLayout(1, 3));
    for (OldChange conflict : merger.getConflictingChanges()) {
      conflict.setError(true);
    }
    myChange1EditorComponent = addEditor(change1Node[0], "My Changes");
    myResultEditorComponent = addEditor(resultNode[0], "Merge Result");
    myChange2EditorComponent = addEditor(change2Node[0], "Repository Changes");
    rebuildChangeBlocks();
    JSplitPane modelsPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, myTopComponent, myBottomComponent);
    modelsPane.setResizeWeight(1);
    myContainer = new JPanel(new BorderLayout());
    myContainer.add(modelsPane);
    myContainer.add(createControlsPanel(), BorderLayout.PAGE_START);
  }

  private Component createControlsPanel() {
    JPanel controlPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    controlPanel.add(new JButton(new AbstractAction("Revert all") {
      public void actionPerformed(ActionEvent e) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            Set<SNodeId> ids = collectRootIds();
            for (OldChange change : new ArrayList<OldChange>(myMerger.getExcludedChanges())) {
              if (ids.contains(change.getAffectedNodeId())) {
                myMerger.includeChange(change);
              }
            }
            for (OldChange change : new ArrayList<OldChange>(myMerger.getAppliedChanges())) {
              if (ids.contains(change.getAffectedNodeId())) {
                myMerger.getAppliedChanges().remove(change);
              }
            }
            rebuildChangeBlocks();
          }
        });
      }
    }));
    controlPanel.add(new JButton(new AbstractAction("Apply all") {
      public void actionPerformed(ActionEvent e) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            Set<SNodeId> ids = collectRootIds();
            ArrayList<OldChange> changes = new ArrayList<OldChange>();
            changes.addAll(myMerger.getBaseMineChanges());
            changes.addAll(myMerger.getBaseRepoChanges());
            changes.removeAll(myMerger.getExcludedChanges());
            for (Conflict conflict : myMerger.getUnresolvedConflicts()) {
              changes.remove(conflict.getChange1());
              changes.remove(conflict.getChange2());
            }
            for (OldChange change : changes) {
              if (ids.contains(change.getAffectedNodeId())) {
                myMerger.getAppliedChanges().add(change);
              }
            }
            rebuildChangeBlocks();
          }
        });
      }
    }));
    return controlPanel;
  }

  private Set<SNodeId> collectRootIds() {
    Set<SNodeId> ids = new HashSet<SNodeId>();
    addNodeIds(ids, myChange1Model);
    addNodeIds(ids, myResultModel);
    addNodeIds(ids, myChange2Model);
    return ids;
  }

  private void addNodeIds(Set<SNodeId> ids, SModel model) {
    SNode change1Node = SModelOperations.getRootByName(model, myRoot.getName());
    if (change1Node != null) {
      ids.add(change1Node.getSNodeId());
      for (SNode node : change1Node.getDescendants()) {
        ids.add(node.getSNodeId());
      }
    }
  }

  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(10, 10, 1000, 900);
  }

  @BaseDialog.Button(name = "Close", mnemonic = 'C', position = 0, defaultButton = true)
  public void onClose() {
    dispose();
  }

  private void rebuildChangeBlocks() {
    myResultEditorComponent.removeAllChanges();
    myChange1EditorComponent.removeAllChanges();
    myChange2EditorComponent.removeAllChanges();
    myMerger.doRebuild(new Runnable() {
      public void run() {
      }
    });
    myResultModel = myMerger.getResultModel();
    final Wrappers._T<SNode> resultNode = new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        resultNode.value = myResultModel.getNodeById(myRoot.getSNodeId());
      }
    });
    myResultEditorComponent.editNode(resultNode.value, myContext);
    List<OldChange> mineChange = new ArrayList<OldChange>(myMerger.getBaseMineChanges());
    mineChange.removeAll(myMerger.getAppliedChanges());
    mineChange.removeAll(myMerger.getExcludedChanges());
    myChange1EditorComponent.hightlight(mineChange, false, false);
    myChange1EditorComponent.makeChangeBlocks();
    ArrayList<OldChange> removedNodes = new ArrayList<OldChange>();
    removedNodes.addAll(CollectionUtil.filter(DeleteNodeChange.class, myMerger.getBaseMineChanges()));
    removedNodes.addAll(CollectionUtil.filter(DeleteNodeChange.class, myMerger.getBaseRepoChanges()));
    removedNodes.removeAll(myMerger.getExcludedChanges());
    myResultEditorComponent.hightlight(removedNodes, false, false);
    myResultEditorComponent.makeChangeBlocks();
    List<OldChange> repoChange = new ArrayList<OldChange>(myMerger.getBaseRepoChanges());
    repoChange.removeAll(myMerger.getAppliedChanges());
    repoChange.removeAll(myMerger.getExcludedChanges());
    myChange2EditorComponent.hightlight(repoChange, false, false);
    myChange2EditorComponent.makeChangeBlocks();
  }

  /*package*/ class ApplyMenu extends JLabel {
    private List<OldChangeEditorMessage> myChanges;

    public ApplyMenu(List<OldChangeEditorMessage> changes) {
      super(Icons.APPLY);
      myChanges = changes;
      setToolTipText("Apply Changes");
      setPreferredSize(new Dimension(getWidth(), getHeight()));
      setSize(getWidth(), getHeight());
      addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent e) {
          apply();
        }
      });
    }

    public int getWidth() {
      return getIcon().getIconWidth();
    }

    public int getHeight() {
      return getIcon().getIconHeight();
    }

    protected void apply() {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          for (OldChangeEditorMessage m : myChanges) {
            if (myMerger.getConflictingChanges().contains(m.getChange())) {
              for (OldChange ch : myMerger.getConflictedWith(m.getChange())) {
                myMerger.excludeChange(ch);
              }
            }
            myMerger.getAppliedChanges().add(m.getChange());
          }
        }
      });
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          rebuildChangeBlocks();
        }
      });
    }
  }

  /*package*/ class ExcludeMenu extends JLabel {
    private List<OldChangeEditorMessage> myChanges;

    public ExcludeMenu(List<OldChangeEditorMessage> changes) {
      super(Icons.EXCLUDE);
      myChanges = changes;
      setToolTipText("Exclude Changes");
      setPreferredSize(new Dimension(getWidth(), getHeight()));
      setSize(getWidth(), getHeight());
      addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent e) {
          exclude();
        }
      });
    }

    public int getWidth() {
      return getIcon().getIconWidth();
    }

    public int getHeight() {
      return getIcon().getIconHeight();
    }

    private void exclude() {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          for (OldChangeEditorMessage m : myChanges) {
            if (myMerger.getConflictingChanges().contains(m.getChange())) {
              for (OldChange ch : myMerger.getConflictedWith(m.getChange())) {
                myMerger.getAppliedChanges().add(ch);
              }
            }
            myMerger.excludeChange(m.getChange());
          }
        }
      });
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          rebuildChangeBlocks();
        }
      });
    }
  }
}
