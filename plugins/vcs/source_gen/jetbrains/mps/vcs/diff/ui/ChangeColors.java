package jetbrains.mps.vcs.diff.ui;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.vcs.diff.changes.ChangeType;
import java.awt.Color;
import java.util.EnumMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.vcs.FileStatus;

public class ChangeColors {
  private static final Map<ChangeType, Color> ourColors = new EnumMap<ChangeType, Color>(ChangeType.class);
  private static final Map<ChangeType, Color> ourTreeColors = new EnumMap<ChangeType, Color>(ChangeType.class);
  public static final Color ADD = new Color(214, 245, 214);
  public static final Color DELETE = new Color(203, 203, 203);
  public static final Color CHANGE = new Color(188, 207, 249);
  private static final Color CONFLICTED = new Color(245, 164, 164);

  private ChangeColors() {
  }

  @NotNull
  public static Color get(@NotNull ChangeType changeType) {
    return MapSequence.fromMap(ourColors).get(changeType);
  }

  @NotNull
  public static Color getForTree(@NotNull ChangeType changeType) {
    return MapSequence.fromMap(ourTreeColors).get(changeType);
  }

  static {
    MapSequence.fromMap(ourColors).put(ChangeType.ADD, ADD);
    MapSequence.fromMap(ourTreeColors).put(ChangeType.ADD, FileStatus.COLOR_ADDED);

    MapSequence.fromMap(ourColors).put(ChangeType.DELETE, DELETE);
    MapSequence.fromMap(ourTreeColors).put(ChangeType.DELETE, FileStatus.COLOR_MISSING);

    MapSequence.fromMap(ourColors).put(ChangeType.CHANGE, CHANGE);
    MapSequence.fromMap(ourTreeColors).put(ChangeType.CHANGE, FileStatus.COLOR_MODIFIED);

    MapSequence.fromMap(ourColors).put(ChangeType.CONFLICTED, CONFLICTED);
    MapSequence.fromMap(ourTreeColors).put(ChangeType.CONFLICTED, FileStatus.MERGED_WITH_CONFLICTS.getColor());
  }
}
