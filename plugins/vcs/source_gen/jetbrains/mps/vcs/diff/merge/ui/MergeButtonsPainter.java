package jetbrains.mps.vcs.diff.merge.ui;

/*Generated by MPS */

import jetbrains.mps.vcs.diff.ui.ButtonsPainter;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.vcs.diff.ui.ChangeGroupBuilder;
import jetbrains.mps.vcs.diff.ui.FoldingAreaButton;
import jetbrains.mps.vcs.diff.ui.ChangeGroup;
import jetbrains.mps.ide.projectPane.Icons;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.vcs.diff.merge.MergeContext;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import java.util.Arrays;
import jetbrains.mps.vcs.diff.ui.DiffEditor;
import javax.swing.Icon;
import jetbrains.mps.smodel.ModelAccess;

public class MergeButtonsPainter extends ButtonsPainter {
  private MergeRootsDialog myDialog;

  private MergeButtonsPainter(MergeRootsDialog dialog, EditorComponent editorComponent, ChangeGroupBuilder changeGroupBuilder) {
    super(2, editorComponent, changeGroupBuilder);
    myDialog = dialog;
  }

  protected Iterable<FoldingAreaButton> createButtonsForChangeGroup(ChangeGroup changeGroup, int y) {
    int applyX = (isHighlightLeft() ?
      getX(0) :
      getX(1)
    );
    int excludeX = (isHighlightLeft() ?
      getX(1) :
      getX(0)
    );
    FoldingAreaButton apply = new MergeButtonsPainter.MyButton(changeGroup, applyX, y, "Apply", (isHighlightLeft() ?
      MIRRORED_APPLY_ICON :
      Icons.APPLY
    ), new _FunctionTypes._void_P2_E0<MergeContext, Iterable<ModelChange>>() {
      public void invoke(MergeContext context, Iterable<ModelChange> changes) {
        context.applyChanges(changes);
      }
    });
    FoldingAreaButton exclude = new MergeButtonsPainter.MyButton(changeGroup, excludeX, y, "Exclude", Icons.EXCLUDE, new _FunctionTypes._void_P2_E0<MergeContext, Iterable<ModelChange>>() {
      public void invoke(MergeContext context, Iterable<ModelChange> changes) {
        context.excludeChanges(changes);
      }
    });
    return Arrays.asList(apply, exclude);
  }

  public static MergeButtonsPainter addTo(MergeRootsDialog dialog, DiffEditor diffEditor, ChangeGroupBuilder changeGroupBuilder, boolean inspector) {
    EditorComponent editorComponent = diffEditor.getEditorComponent(inspector);
    MergeButtonsPainter painter = new MergeButtonsPainter(dialog, editorComponent, changeGroupBuilder);
    editorComponent.getLeftEditorHighlighter().addFoldingAreaPainter(painter);
    return painter;
  }

  private class MyButton extends FoldingAreaButton {
    private _FunctionTypes._void_P2_E0<? super MergeContext, ? super Iterable<ModelChange>> myAction;

    private MyButton(ChangeGroup changeGroup, int x, int y, String name, Icon icon, _FunctionTypes._void_P2_E0<? super MergeContext, ? super Iterable<ModelChange>> action) {
      super(changeGroup, x, y, name, icon);
      myAction = action;
    }

    public void performAction() {
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          myAction.invoke(getChangeGroupBuilder().getMergeContext(), getChangeGroup().getChanges());
          myDialog.rehighlight();
        }
      });
    }
  }
}
