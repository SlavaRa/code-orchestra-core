package jetbrains.mps.vcs.queue;

/*Generated by MPS */

import com.intellij.openapi.project.ProjectManager;
import jetbrains.mps.watching.ModelChangesWatcher;
import com.intellij.openapi.vfs.VirtualFileManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.vfs.VirtualFileManagerListener;

public abstract class TaskQueue<T> extends BaseTaskQueue<T> {
  private final TaskQueue.BanVFMListener myVirtualFileManagerListener = new TaskQueue.BanVFMListener();
  private final TaskQueue.BanReloadListener myReloadListener = new TaskQueue.BanReloadListener();
  private ProjectManager myManager;
  private ModelChangesWatcher myWatcher;
  private VirtualFileManager myVirtualFileManager;

  public TaskQueue(ProjectManager manager, ModelChangesWatcher watcher, VirtualFileManager virtualFileManager) {
    super();
    myManager = manager;
    myWatcher = watcher;
    myVirtualFileManager = virtualFileManager;
    myWatcher.addReloadListener(myReloadListener);
    myVirtualFileManager.addVirtualFileManagerListener(myVirtualFileManagerListener);
  }

  public void dispose() {
    myWatcher.removeReloadListener(myReloadListener);
    myVirtualFileManager.removeVirtualFileManagerListener(myVirtualFileManagerListener);
  }

  protected boolean isProcessingAllowed() {
    for (Project p : myManager.getOpenProjects()) {
      ProjectLevelVcsManager vcsMan = p.getComponent(ProjectLevelVcsManager.class);
      if (vcsMan.isBackgroundVcsOperationRunning()) {
        return false;
      }
    }
    if (myVirtualFileManagerListener.isBanned()) {
      return false;
    }
    if (myReloadListener.isBanned()) {
      return false;
    }
    return true;
  }

  private class BanVFMListener implements VirtualFileManagerListener {
    private int myVFMBan = 0;

    private BanVFMListener() {
    }

    public void beforeRefreshStart(boolean async) {
      if (async) {
        return;
      }
      myVFMBan++;
    }

    public void afterRefreshFinish(boolean async) {
      if (async) {
        return;
      }
      myVFMBan--;
    }

    public boolean isBanned() {
      return myVFMBan != 0;
    }
  }

  private class BanReloadListener implements ModelChangesWatcher.IReloadListener {
    private int myReloadBan = 0;

    private BanReloadListener() {
    }

    public void reloadStarted() {
      myReloadBan++;
    }

    public void reloadFinished() {
      myReloadBan--;
    }

    public boolean isBanned() {
      return myReloadBan != 0;
    }
  }
}
