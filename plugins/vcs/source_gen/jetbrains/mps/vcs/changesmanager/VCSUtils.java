package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.vcs.AbstractVcs;
import com.intellij.openapi.vcs.ProjectLevelVcsManager;
import com.intellij.openapi.vcs.diff.DiffProvider;
import com.intellij.openapi.vcs.history.VcsRevisionNumber;
import com.intellij.openapi.vcs.changes.ContentRevision;
import com.intellij.openapi.vcs.VcsException;

public class VCSUtils {
  protected static Log log = LogFactory.getLog(VCSUtils.class);

  private VCSUtils() {
  }

  @Nullable
  public static String getBaseVersionContent(@NotNull VirtualFile file, @NotNull Project project) {
    if (ModelAccess.instance().canRead()) {
      if (log.isErrorEnabled()) {
        log.error("VCSUtils.getBaseVersionContent() is invoked from read action: possible deadlock", new IllegalStateException());
      }
    }
    try {
      AbstractVcs vcs = ProjectLevelVcsManager.getInstance(project).getVcsFor(file);
      if (vcs == null) {
        return null;
      }
      DiffProvider diffProvider = vcs.getDiffProvider();
      if (diffProvider == null) {
        return null;
      }
      VcsRevisionNumber revisionNumber = diffProvider.getCurrentRevision(file);
      if (revisionNumber == null) {
        return null;
      }
      ContentRevision revision = diffProvider.createFileContent(revisionNumber, file);
      if (revision == null) {
        return null;
      }
      return revision.getContent();
    } catch (VcsException ex) {
      if (log.isWarnEnabled()) {
        log.warn("VcsException during getting base version content: ", ex);
      }
      return null;
    }
  }
}
