package jetbrains.mps.vcs.changesmanager;

/*Generated by MPS */

import jetbrains.mps.ide.ui.smodel.PropertiesTreeNode;
import jetbrains.mps.ide.ui.smodel.SNodeTreeNode;
import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ide.ui.smodel.PropertyTreeNode;
import org.apache.commons.lang.ObjectUtils;
import jetbrains.mps.ide.ui.smodel.ReferencesTreeNode;
import jetbrains.mps.ide.ui.smodel.ReferenceTreeNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Collections;

public class MPSTreeUtils {
  public MPSTreeUtils() {
  }

  /*package*/ static PropertiesTreeNode findPropertiesTreeNode(final SNodeTreeNode _this) {
    for (MPSTreeNode child : Sequence.fromIterable(_this)) {
      if (child instanceof PropertiesTreeNode) {
        return ((PropertiesTreeNode) child);
      }
    }
    return null;
  }

  /*package*/ static PropertyTreeNode findPropertyTreeNode(final SNodeTreeNode _this, String propertyName) {
    for (MPSTreeNode child : Sequence.fromIterable(MPSTreeUtils.findPropertiesTreeNode(_this))) {
      if (child instanceof PropertyTreeNode && ObjectUtils.equals(((PropertyTreeNode) child).getProperty(), propertyName)) {
        return ((PropertyTreeNode) child);
      }
    }
    return null;
  }

  /*package*/ static ReferencesTreeNode findReferencesTreeNode(final SNodeTreeNode _this) {
    for (MPSTreeNode child : Sequence.fromIterable(_this)) {
      if (child instanceof ReferencesTreeNode) {
        return ((ReferencesTreeNode) child);
      }
    }
    return null;
  }

  /*package*/ static ReferenceTreeNode findReferenceTreeNode(final SNodeTreeNode _this, String role) {
    for (MPSTreeNode child : Sequence.fromIterable(MPSTreeUtils.findReferencesTreeNode(_this))) {
      if (child instanceof ReferenceTreeNode && ObjectUtils.equals(((ReferenceTreeNode) child).getRef().getRole(), role)) {
        return ((ReferenceTreeNode) child);
      }
    }
    return null;
  }

  /*package*/ static Iterable<MPSTreeNode> getDescendants(final MPSTreeNode _this) {
    List<MPSTreeNode> children = ListSequence.fromList(new ArrayList<MPSTreeNode>());
    Iterable<MPSTreeNode> descendants = Sequence.fromIterable(Collections.<MPSTreeNode>emptyList());
    for (MPSTreeNode child : Sequence.fromIterable(_this)) {
      ListSequence.fromList(children).addElement(child);
      descendants = Sequence.fromIterable(descendants).concat(Sequence.fromIterable(MPSTreeUtils.getDescendants(child)));
    }
    return ListSequence.fromList(children).concat(Sequence.fromIterable(descendants));
  }
}
