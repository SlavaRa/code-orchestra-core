package jetbrains.mps.vcs.actions;

/*Generated by MPS */

import com.intellij.openapi.vcs.actions.AbstractVcsAction;
import java.util.concurrent.atomic.AtomicReference;
import jetbrains.mps.make.MakeSession;
import com.intellij.openapi.vcs.actions.VcsContext;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.make.IMakeService;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.generator.generationTypes.IGenerationHandler;
import java.util.Collection;
import com.intellij.openapi.vfs.VirtualFile;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.actionSystem.Presentation;
import com.intellij.openapi.actionSystem.AnActionEvent;

public abstract class GenerateFromChangeListAction extends AbstractVcsAction {
  private AtomicReference<MakeSession> myMakeSession = new AtomicReference<MakeSession>();

  public GenerateFromChangeListAction() {
  }

  protected void actionPerformed(VcsContext vcsContext) {
    List<SModelDescriptor> modelsToGenerate = getModelsToGenerate(vcsContext);
    Project project = vcsContext.getProject();
    IOperationContext context = ProjectOperationContext.get(project);
    if (myMakeSession.compareAndSet(null, new MakeSession(context))) {
      try {
        if (IMakeService.INSTANCE.get().openNewSession(myMakeSession.get())) {
          doPerformAction(myMakeSession.get(), context, modelsToGenerate);
        }
      } finally {
        myMakeSession.set(null);
      }
    }
    // <node> 
  }

  protected void doPerformAction(MakeSession session, IOperationContext context, List<SModelDescriptor> modelsToGenerate) {
    IMakeService.INSTANCE.get().make(session, new ModelsToResources(context, modelsToGenerate).resources(false));
  }

  protected abstract IGenerationHandler getGenerationHandler();

  protected List<SModelDescriptor> getModelsToGenerate(VcsContext vcsContext) {
    Collection<VirtualFile> filesCollection = vcsContext.getSelectedFilesCollection();
    List<SModelDescriptor> modelsToGenerate = new ArrayList<SModelDescriptor>();
    for (VirtualFile f : filesCollection) {
      if (f.exists() && !(f.isDirectory())) {
        SModelDescriptor model = SModelRepository.getInstance().findModel(VirtualFileUtils.toIFile(f));
        if (model != null) {
          modelsToGenerate.add(model);
        }
      }
    }
    return modelsToGenerate;
  }

  protected void update(VcsContext vcsContext, Presentation presentation) {
    List<SModelDescriptor> modelsToGenerate = getModelsToGenerate(vcsContext);
    if (modelsToGenerate.isEmpty()) {
      enable(presentation, false);
      presentation.setText("Rebuild " + getWhatToGenerateName());
    } else
    if (modelsToGenerate.size() == 1) {
      enable(presentation, myMakeSession.get() == null && !(IMakeService.INSTANCE.get().isSessionActive()));
      presentation.setText("Rebuild " + getWhatToGenerateName() + " From Model");
    } else {
      enable(presentation, myMakeSession.get() == null && !(IMakeService.INSTANCE.get().isSessionActive()));
      presentation.setText("Rebuild " + getWhatToGenerateName() + " From Models");
    }
  }

  @Override
  protected boolean forceSyncUpdate(AnActionEvent e) {
    return true;
  }

  protected void enable(Presentation presentation, boolean enable) {
    presentation.setVisible(enable);
    presentation.setEnabled(enable);
  }

  protected abstract String getWhatToGenerateName();
}
