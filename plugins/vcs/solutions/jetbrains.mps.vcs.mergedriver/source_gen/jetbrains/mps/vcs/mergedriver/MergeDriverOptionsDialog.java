package jetbrains.mps.vcs.mergedriver;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import javax.swing.JPanel;
import java.awt.GridLayout;
import java.awt.FlowLayout;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.WindowManager;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import javax.swing.JComponent;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.JCheckBox;

public class MergeDriverOptionsDialog extends BaseDialog {
  private JPanel myPanel = new JPanel(new GridLayout(0, 1));
  private JPanel myMainPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
  private Project myProject;
  private MergeDriverOptionsDialog.InstallerCheckBox<GitGlobalConfigFixesInstaller> myGitFixes;
  private MergeDriverOptionsDialog.InstallerCheckBox<GitGlobalInstaller> myGitGlobal;
  private MergeDriverOptionsDialog.InstallerCheckBox<GitRepositoriesInstaller> myGitRepos;
  private MergeDriverOptionsDialog.InstallerCheckBox<SvnInstaller> myCommonSvn;
  private MergeDriverOptionsDialog.InstallerCheckBox<SvnInstaller> myIdeSvn;

  public MergeDriverOptionsDialog(Project project) {
    super(WindowManager.getInstance().getFrame(project), "MPS VCS Add-ons");
    // TODO get rid of code duplication 
    myProject = project;
    myGitFixes = new MergeDriverOptionsDialog.InstallerCheckBox<GitGlobalConfigFixesInstaller>(new GitGlobalConfigFixesInstaller(myProject));
    myGitGlobal = new MergeDriverOptionsDialog.InstallerCheckBox<GitGlobalInstaller>(new GitGlobalInstaller(myProject));
    myGitRepos = new MergeDriverOptionsDialog.InstallerCheckBox<GitRepositoriesInstaller>(new GitRepositoriesInstaller(myProject));
    myCommonSvn = new MergeDriverOptionsDialog.InstallerCheckBox<SvnInstaller>(new SvnInstaller(myProject, false));
    myIdeSvn = new MergeDriverOptionsDialog.InstallerCheckBox<SvnInstaller>(new SvnInstaller(myProject, true));
    if (myCommonSvn.myInstaller.sameAs(myIdeSvn.myInstaller)) {
      myIdeSvn = null;
    }

    myGitFixes.adIfNeeded();
    myGitGlobal.addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent e) {
        myGitRepos.setEnabled(myGitGlobal.isSelected());
      }
    });
    myGitGlobal.adIfNeeded();
    myGitRepos.adIfNeeded();
    myCommonSvn.adIfNeeded();
    if (myIdeSvn != null) {
      myIdeSvn.adIfNeeded();
    }
    myMainPanel.add(myPanel);
  }

  protected JComponent getMainComponent() {
    return myMainPanel;
  }

  @Override
  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return DialogDimensionsSettings.generateDialogDimensions(600, 200);
  }

  @BaseDialog.Button(position = 0, name = "OK", mnemonic = 'O', defaultButton = true)
  public void ok() {
    ModelAccess.instance().runWriteInEDT(new Runnable() {
      public void run() {
        myGitFixes.installIfNeeded();
        myGitGlobal.installIfNeeded();
        if (myGitGlobal.myInstaller.getCurrentState() == AbstractInstaller.State.INSTALLED) {
          myGitRepos.installIfNeeded();
        }
        myCommonSvn.installIfNeeded();
        if (myIdeSvn != null) {
          myIdeSvn.installIfNeeded();
        }
        dispose();
      }
    });
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C')
  public void cancel() {
    dispose();
  }

  private class InstallerCheckBox<I extends AbstractInstaller> extends JCheckBox {
    private I myInstaller;

    public InstallerCheckBox(I installer) {
      super(installer.getActionTitle() + ((installer.getCurrentState() == AbstractInstaller.State.OUTDATED ?
        " (update)" :
        ""
      )));
      myInstaller = installer;
    }

    private void adIfNeeded() {
      AbstractInstaller.State currentState = myInstaller.getCurrentState();
      if (currentState != AbstractInstaller.State.INSTALLED) {
        myPanel.add(this);
        setText(myInstaller.getActionTitle() + ((currentState == AbstractInstaller.State.OUTDATED ?
          " (update)" :
          ""
        )));
        setToolTipText(myInstaller.getActionTooltip());
        setSelected(true);
      }
    }

    private void installIfNeeded() {
      if (isSelected() && isEnabled()) {
        myInstaller.install();
        MergeDriverNotification.getInstance(myProject).setNotificationsSuppressed(false);
      }
    }
  }
}
