package jetbrains.mps.ide.modelchecker.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;

import java.util.Iterator;
import java.util.List;

import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.ide.findusages.model.holders.IHolder;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.IModule;
import jetbrains.mps.ide.findusages.model.holders.ModelsHolder;
import jetbrains.mps.ide.findusages.model.holders.ModulesHolder;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class ModelCheckerIssueFinder implements IFinder {

  private boolean errorsOnly;

  public ModelCheckerIssueFinder() {
  }

  public void setErrorsOnly(boolean errorsOnly) {
    this.errorsOnly = errorsOnly;
  }

  protected List<SpecificChecker> getSpecificCheckers() {
    return null;
  }

  public SearchResults find(SearchQuery searchQuery, ProgressIndicator indicator) {
    IHolder objectHolder = searchQuery.getObjectHolder();
    IOperationContext operationContext;
    List<SModelDescriptor> modelDescriptors;
    List<IModule> modules = null;
    if (objectHolder instanceof ModelsHolder) {
      ModelsHolder modelsHolder = (ModelsHolder) objectHolder;
      operationContext = modelsHolder.getOperationContext();
      modelDescriptors = modelsHolder.getObject();
    } else if (objectHolder instanceof ModulesHolder) {
      ModulesHolder modulesHolder = (ModulesHolder) objectHolder;
      operationContext = modulesHolder.getOperationContext();
      modelDescriptors = ModelCheckerUtils.getModelDescriptors(modulesHolder.getObject());
      modules = modulesHolder.getObject();
    } else {
      throw new IllegalArgumentException();
    }

    ProgressContext progressContext = new ProgressContext(indicator, ListSequence.fromList(modelDescriptors).select(new ISelector<SModelDescriptor, String>() {
      public String select(SModelDescriptor md) {
        return getTaskName(md);
      }
    }));
    ModuleChecker moduleChecker = null;
    if (modules != null) {
      moduleChecker = new ModuleChecker(progressContext);
      indicator.setIndeterminate(true);
      for (IModule module : ListSequence.fromList(modules)) {
        moduleChecker.checkModule(module);
        if (moduleChecker.isCancelled()) {
          break;
        }
      }
    }
    ModelChecker modelChecker;
    if (moduleChecker != null) {
      modelChecker = new ModelChecker(operationContext, progressContext, moduleChecker.getSearchResults());
    } else {
      modelChecker = new ModelChecker(operationContext, progressContext);
    }
    modelChecker.setSpecificCheckers(getSpecificCheckers());

    for (SModelDescriptor modelDescriptor : ListSequence.fromList(modelDescriptors)) {
      long modelStartTime = System.currentTimeMillis();

      modelChecker.checkModel(modelDescriptor);
      if (modelChecker.isCancelled()) {
        break;
      }

      progressContext.saveEstimatedTime(modelStartTime);
    }

    // RE-2878
    if (errorsOnly) {
      Iterator<SearchResult<ModelCheckerIssue>> searchResultIterator = modelChecker.getSearchResults().getSearchResults().iterator();
      while (searchResultIterator.hasNext()) {
        SearchResult<ModelCheckerIssue> searchResult = searchResultIterator.next();
        String severity = searchResult.getCategories().get(0).o2;
        if (!ModelChecker.SEVERITY_ERROR.equals(severity)) {
          searchResultIterator.remove();
        }
      }
    }

    return modelChecker.getSearchResults();
  }

  private static String getTaskName(SModelDescriptor modelDescriptor) {
    return modelDescriptor.getLongName() + "_modelcheck";
  }
}
