package jetbrains.mps.ide.modelchecker.actions;

/*Generated by MPS */

import com.intellij.openapi.vcs.checkin.CheckinHandler;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vcs.CheckinProjectPanel;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.vcs.ui.RefreshableOnComponent;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.GridLayout;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import jetbrains.mps.project.ProjectOperationContext;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import java.io.File;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import com.intellij.openapi.vcs.checkin.CheckinHandlerFactory;
import org.jetbrains.annotations.NotNull;

public class ModelCheckerCheckinHandler extends CheckinHandler {
  private Project myProject;
  private CheckinProjectPanel myPanel;

  public ModelCheckerCheckinHandler(Project project, CheckinProjectPanel panel) {
    myProject = project;
    myPanel = panel;
  }

  @Nullable
  @Override
  public RefreshableOnComponent getBeforeCheckinConfigurationPanel() {
    final JCheckBox checkModelCheckBox = new JCheckBox("Perform check for affected models");
    return new RefreshableOnComponent() {
      public JComponent getComponent() {
        JPanel panel = new JPanel(new GridLayout(1, 0));
        panel.add(checkModelCheckBox);
        return panel;
      }

      public void restoreState() {
        checkModelCheckBox.setSelected(ModelCheckerSettings.getInstance().isCheckBeforeCommit());
      }

      public void saveState() {
        ModelCheckerSettings.getInstance().setCheckBeforeCommit(checkModelCheckBox.isSelected());
      }

      public void refresh() {
      }
    };
  }

  @Override
  public CheckinHandler.ReturnResult beforeCheckin() {
    if (!(ModelCheckerSettings.getInstance().isCheckBeforeCommit())) {
      return CheckinHandler.ReturnResult.COMMIT;
    }

    return myProject.getComponent(ProjectPluginManager.class).getTool(ModelCheckerTool_Tool.class).checkModelsBeforeCommit(ProjectOperationContext.get(myProject), getModelDescriptorsByFiles(myPanel.getFiles()));
  }

  private static List<SModelDescriptor> getModelDescriptorsByFiles(Iterable<File> files) {
    final SModelRepository repository = SModelRepository.getInstance();
    return Sequence.fromIterable(files).select(new ISelector<File, EditableSModelDescriptor>() {
      public EditableSModelDescriptor select(File file) {
        return repository.findModel(FileSystem.getInstance().getFileByPath(file.getAbsolutePath()));
      }
    }).where(new IWhereFilter<EditableSModelDescriptor>() {
      public boolean accept(EditableSModelDescriptor modelDescriptor) {
        return modelDescriptor != null;
      }
    }).select(new ISelector<EditableSModelDescriptor, SModelDescriptor>() {
      public SModelDescriptor select(EditableSModelDescriptor it) {
        return (SModelDescriptor) it;
      }
    }).toListSequence();
  }

  public static class ModelCheckerCheckinHandlerFactory extends CheckinHandlerFactory {
    public ModelCheckerCheckinHandlerFactory() {
    }

    @NotNull
    public CheckinHandler createHandler(CheckinProjectPanel panel) {
      return new ModelCheckerCheckinHandler(panel.getProject(), panel);
    }
  }
}
