package jetbrains.mps.ide.modelchecker.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.util.TimePresentationUtil;
import jetbrains.mps.ide.progress.TaskProgressSettings;

public class ProgressContext {
  private long myStartTime;
  private long myEstimatedTime;
  private List<String> myTaskNames = ListSequence.fromList(new ArrayList<String>());
  private int myCurrentTaskIndex = 0;
  private ProgressIndicator myProgressIndicator;

  public ProgressContext(ProgressIndicator progressIndicator, List<String> taskNames) {
    myTaskNames = taskNames;
    myProgressIndicator = progressIndicator;
    myStartTime = System.currentTimeMillis();
    myEstimatedTime = getEstimatedTimeMillis(taskNames);
  }

  public ProgressContext(ProgressIndicator progressIndicator, Iterable<String> taskNames) {
    this(progressIndicator, Sequence.fromIterable(taskNames).toListSequence());
  }

  public ProgressContext(ProgressIndicator progressIndicator, String taskName) {
    this(progressIndicator, Sequence.fromArray(new String[]{taskName}));
  }

  public void saveEstimatedTime(long subtaskStartTime) {
    addEstimatedTimeMillis(ListSequence.fromList(myTaskNames).getElement(myCurrentTaskIndex), subtaskStartTime);
    myCurrentTaskIndex++;
  }

  public void saveEstimatedTime() {
    saveEstimatedTime(myStartTime);
  }

  public long getStartTime() {
    return myStartTime;
  }

  public long getEstimatedTime() {
    return myEstimatedTime;
  }

  public ProgressIndicator getProgressIndicator() {
    return myProgressIndicator;
  }

  public boolean checkAndUpdateIndicator(String text) {
    ProgressIndicator indicator = getProgressIndicator();
    long estimatedTime = getEstimatedTime();
    // Return false if operation was cancelled 
    if (indicator.isCanceled()) {
      return false;
    }

    long elapsedTime = System.currentTimeMillis() - getStartTime();
    String estimatedTimeString = TimePresentationUtil.timeIntervalStringPresentation(estimatedTime);
    String elapsedTimeString = TimePresentationUtil.timeIntervalStringPresentation(elapsedTime);
    indicator.setText(text);
    indicator.setText2("Estimated time: " + estimatedTimeString + ", elapsed time: " + elapsedTimeString);
    if (elapsedTime < estimatedTime) {
      indicator.setIndeterminate(false);
      indicator.setFraction(elapsedTime * 1.0 / estimatedTime);
    } else {
      indicator.setIndeterminate(true);
    }
    return true;
  }

  private static long getEstimatedTimeMillis(String taskName) {
    return TaskProgressSettings.getInstance().getEstimatedTimeMillis(taskName);
  }

  private static long getEstimatedTimeMillis(Iterable<String> taskNames) {
    long result = 0;
    for (String taskName : Sequence.fromIterable(taskNames)) {
      result += getEstimatedTimeMillis(taskName);
    }
    return result;
  }

  private static void addEstimatedTimeMillis(String taskName, long startTime) {
    TaskProgressSettings.getInstance().addEstimatedTimeMillis(taskName, System.currentTimeMillis() - startTime);
  }
}
