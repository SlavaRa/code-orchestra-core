package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.custom.BaseCustomApplicationPlugin;
import jetbrains.mps.ide.datatransfer.CopyPasteUtil;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.datatransfer.TextPasteUtil;
import jetbrains.mps.ide.java.util.JavaPaster;
import jetbrains.mps.ide.java.parser.FeatureKind;
import jetbrains.mps.datatransfer.PasteNodeData;
import jetbrains.mps.ide.datatransfer.SNodeTransferable;

public class PasteJavaTextAsNodes_CustomApplicationPlugin extends BaseCustomApplicationPlugin {
  private int MIN_TEXT_LENGTH_TO_CONVERT = 100;

  public PasteJavaTextAsNodes_CustomApplicationPlugin() {
  }

  public void doInit() {
    CopyPasteUtil.setDataConverter(new CopyPasteUtil.IDataConverter() {
      public boolean canPasteAsNodes(SModel model, SNode anchor) {
        String text = TextPasteUtil.getStringFromClipboard();
        return text != null && text.length() > PasteJavaTextAsNodes_CustomApplicationPlugin.this.MIN_TEXT_LENGTH_TO_CONVERT;
      }

      public void pasteAsNodes(SModel model, SNode anchor) {
        String text = TextPasteUtil.getStringFromClipboard();
        if (text != null && text.length() > PasteJavaTextAsNodes_CustomApplicationPlugin.this.MIN_TEXT_LENGTH_TO_CONVERT) {
          new JavaPaster().pasteJavaAsNode(anchor, model, text, null, FeatureKind.STATEMENTS);
        }
      }

      public PasteNodeData getPasteNodeData(SModel model) {
        // requires write action :( 
        String text = TextPasteUtil.getStringFromClipboard();
        if (text != null && text.length() > PasteJavaTextAsNodes_CustomApplicationPlugin.this.MIN_TEXT_LENGTH_TO_CONVERT) {
          SNodeTransferable transferable = new SNodeTransferable(JavaPaster.getStatementsFromJavaText(text, model, null), text);
          return transferable.createNodeData(model);
        }
        return null;
      }
    });

  }

  public void doDispose() {
    CopyPasteUtil.setDataConverter(null);
  }
}
