package jetbrains.mps.plugin;

/*Generated by MPS */

import jetbrains.mps.generator.generationTypes.java.JavaGenerationHandler;
import jetbrains.mps.smodel.IOperationContext;
import java.util.List;
import jetbrains.mps.util.Pair;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.ide.progress.ITaskProgressHelper;
import java.io.IOException;
import jetbrains.mps.generator.GenerationCanceledException;
import jetbrains.mps.ide.progress.util.ModelsProgressUtil;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.MPSCore;
import com.intellij.openapi.project.Project;

public class IdeaAwareJavaGenerationHandler extends JavaGenerationHandler {
  public IdeaAwareJavaGenerationHandler() {
  }

  @Override
  public boolean compile(IOperationContext operationContext, List<Pair<IModule, List<SModelDescriptor>>> input, boolean generationOK, ITaskProgressHelper progressHelper) throws IOException, GenerationCanceledException {
    boolean compiledSuccessfully = generationOK;
    boolean[] ideaIsFresh = new boolean[]{false};
    writeFiles();
    IProjectHandler projectHandler = getProjectHandler(operationContext.getProject());
    if (generationOK) {
      long compilationStart = System.currentTimeMillis();
      boolean needToReload = false;
      for (Pair<IModule, List<SModelDescriptor>> moduleListPair : input) {
        IModule module = moduleListPair.o1;
        if (module != null && module.reloadClassesAfterGeneration()) {
          needToReload = true;
        }
        boolean compilationResult = compileModule(module, projectHandler, ideaIsFresh, progressHelper);
        compiledSuccessfully = compiledSuccessfully && compilationResult;
      }
      if (compiledSuccessfully && needToReload) {
        reloadClasses(progressHelper);
      }
      info("Compilation finished in " + (System.currentTimeMillis() - compilationStart) + " ms");
    }
    if (isIDEAPresent(projectHandler) && !(ideaIsFresh[0])) {
      projectHandler.refreshFS();
    }
    return compiledSuccessfully;
  }

  protected boolean compileModule(IModule module, IProjectHandler projectHandler, boolean[] ideaIsFresh, ITaskProgressHelper progressHelper) throws IOException, GenerationCanceledException {
    if (module != null) {
      if (module.isCompileInMPS()) {
        return compileModuleInMPS(module, progressHelper);
      } else {
        return compileModuleInIDEA(module, projectHandler, ideaIsFresh, progressHelper);
      }
    }
    return true;
  }

  protected boolean compileModuleInIDEA(IModule module, IProjectHandler projectHandler, boolean[] ideaIsFresh, ITaskProgressHelper progressHelper) throws IOException, GenerationCanceledException {
    boolean compiledSuccessfully = true;
    if (module != null) {
      if (!(isIDEAPresent(projectHandler))) {
        error("Module is compiled in IntelliJ IDEA but IntelliJ IDEA isn't present.");
        error("Can't compile it.");
        compiledSuccessfully = false;
      } else {
        checkMonitorCanceled(progressHelper);
        progressHelper.startLeafTask(ModelsProgressUtil.TASK_NAME_REFRESH_FS);
        projectHandler.refreshFS();
        ideaIsFresh[0] = true;
        progressHelper.finishTask();
        String info = "compiling in IntelliJ IDEA...";
        progressHelper.setText2(info);
        info(info);
        progressHelper.startLeafTask(ModelsProgressUtil.TASK_NAME_COMPILE_IN_IDEA);
        CompilationResult compilationResult = projectHandler.buildModule(module.getGeneratorOutputPath());
        progressHelper.finishTask();
        if (compilationResult == null || compilationResult.getErrors() > 0) {
          compiledSuccessfully = false;
        }
        if (compilationResult != null) {
          if (compilationResult.getErrors() > 0) {
            error("" + compilationResult);
          } else
          if (compilationResult.getWarnings() > 0) {
            warning("" + compilationResult);
          } else {
            info("" + compilationResult);
          }
        }
      }
      progressHelper.setText2("");
      checkMonitorCanceled(progressHelper);
    }
    return compiledSuccessfully;
  }

  @Override
  protected void performWritingFilesTask(final Runnable writingTask) {
    ModelAccess.instance().writeFilesInEDT(writingTask);
  }

  protected boolean isIDEAPresent(IProjectHandler handler) {
    return !(MPSCore.getInstance().isTestMode()) && handler != null;
  }

  protected IProjectHandler getProjectHandler(Project p) {
    if (MPSCore.getInstance().isTestMode()) {
      return null;
    }
    return MPSPlugin.getInstance().getProjectHandler(p);
  }
}
