package jetbrains.mps.plugin;

/*Generated by MPS */

import com.intellij.openapi.components.ProjectComponent;
import jetbrains.mps.internal.make.runtime.java.IAuxProjectPeer;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.make.runtime.java.IJavaCompiler;
import jetbrains.mps.MPSCore;
import java.rmi.RemoteException;
import jetbrains.mps.make.MPSCompilationResult;
import jetbrains.mps.project.IModule;

public class IDEAProjectPeer implements ProjectComponent, IAuxProjectPeer {
  private final Project myProject;
  private IProjectHandler myIdeaProjectHandler;

  public IDEAProjectPeer(Project project) {
    myProject = project;
  }

  public void projectOpened() {
    new Thread(new Runnable() {
      public void run() {
        IDEAProjectPeer.this.myIdeaProjectHandler = getIdeaProjectHandler();
      }
    }).start();
  }

  public void projectClosed() {
  }

  @NotNull
  public String getComponentName() {
    return "IDEA Project Peer";
  }

  public void initComponent() {
  }

  public void disposeComponent() {
  }

  public IJavaCompiler getJavaCompiler() {
    return new IDEAProjectPeer.IDEACompiler();
  }

  public boolean isValid() {
    return isIDEAPresent();
  }

  private boolean isIDEAPresent() {
    return !(MPSCore.getInstance().isTestMode()) && myIdeaProjectHandler != null;
  }

  private IProjectHandler getIdeaProjectHandler() {
    if (MPSCore.getInstance().isTestMode()) {
      return null;
    }
    return MPSPlugin.getInstance().getProjectHandler(myProject);
  }

  private class IDEACompiler implements IJavaCompiler {
    private IDEACompiler() {
    }

    public void refreshFiles() {
      if (!(isIDEAPresent())) {
        return;
      }
      try {
        myIdeaProjectHandler.refreshFS();
      } catch (RemoteException e) {
        e.printStackTrace();
      }
    }

    public MPSCompilationResult compileModule(IModule module) {
      if (!(isIDEAPresent())) {
        return null;
      }
      try {
        CompilationResult cr = myIdeaProjectHandler.buildModule(module.getGeneratorOutputPath());
        if (cr != null) {
          return new MPSCompilationResult(cr.getErrors(), cr.getWarnings(), cr.isAborted(), cr.isCompiledAnything());
        }
      } catch (RemoteException e) {
        e.printStackTrace();
      }
      return null;
    }
  }
}
