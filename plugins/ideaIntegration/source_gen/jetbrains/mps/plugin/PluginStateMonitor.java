package jetbrains.mps.plugin;

/*Generated by MPS */

import com.intellij.openapi.components.ProjectComponent;
import jetbrains.mps.logging.Logger;
import com.intellij.openapi.project.Project;
import javax.swing.JLabel;
import com.intellij.openapi.wm.StatusBar;
import java.awt.event.MouseAdapter;

import jetbrains.mps.util.annotation.CodeOrchestraPatch;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import java.awt.event.MouseEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.ide.ThreadUtils;
import javax.swing.SwingUtilities;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.wm.IdeFrame;
import com.intellij.openapi.wm.WindowManager;
import jetbrains.mps.plugin.icons.Icons;
import javax.swing.Icon;
import javax.swing.Timer;

public class PluginStateMonitor implements ProjectComponent {
  private static Logger LOG = Logger.getLogger(PluginStateMonitor.class);
  private static final int INITIAL_DELAY = 4000;
  private static final int CRITICAL_DELAY = 16000;
  private static final double DELAY_MUL = 2.0;
  private static final Object LOCK = new Object();

  private Project myProject;
  private PluginStateMonitor.MyTimer myTimer;
  private JLabel myLabel;
  private PluginStateMonitor.State myState = PluginStateMonitor.State.TRYING_TO_CONNECT;
  private StatusBar myStatusBar;
  private MouseAdapter myListener;

  public PluginStateMonitor(Project project) {
    myProject = project;
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return PluginStateMonitor.class.getSimpleName();
  }

  public void initComponent() {
  }

  public void disposeComponent() {
  }

  @CodeOrchestraPatch
  public void projectOpened() {
    myStatusBar = getStatusBar();
    if (myStatusBar == null) {
      return;
    }
    myLabel = new JLabel();
    myListener = new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        if (myState == PluginStateMonitor.State.DISCONNECTED) {
          setNewState(PluginStateMonitor.State.TRYING_TO_CONNECT);
          myTimer.setNewDelay(PluginStateMonitor.INITIAL_DELAY);
        }
      }
    };
    myLabel.addMouseListener(myListener);
    myStatusBar.addCustomIndicationComponent(myLabel);
    myTimer = new PluginStateMonitor.MyTimer(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
          public void run() {
            tick();
          }
        });
      }
    });
    myTimer.start();

    // RE-2300
    myLabel.setVisible(false);
  }

  public void projectClosed() {
    if (myStatusBar == null) {
      return;
    }
    if (myTimer.isRunning()) {
      myTimer.stop();
    }
    myLabel.removeMouseListener(myListener);
    myStatusBar.removeCustomIndicationComponent(myLabel);
  }

  private void tick() {
    LOG.assertLog(!(ThreadUtils.isEventDispatchThread()), "You should not do this in EDT");
    synchronized (LOCK) {
      if (myState == PluginStateMonitor.State.CONNECTED) {
        if (isConnected()) {
          if (canOperate()) {
            return;
          } else {
            setNewState(PluginStateMonitor.State.CONNECTED_BAD_PROJECT);
          }
        } else {
          setNewState(PluginStateMonitor.State.TRYING_TO_CONNECT);
        }
      } else
      if (myState == PluginStateMonitor.State.CONNECTED_BAD_PROJECT) {
        if (isConnected()) {
          if (canOperate()) {
            setNewState(PluginStateMonitor.State.CONNECTED);
          } else {
            return;
          }
        } else {
          setNewState(PluginStateMonitor.State.TRYING_TO_CONNECT);
        }
      } else
      if (myState == PluginStateMonitor.State.DISCONNECTED) {
        if (MPSPlugin.getInstance().openConnectionPresent()) {
          if (isConnected()) {
            if (canOperate()) {
              setNewState(PluginStateMonitor.State.CONNECTED);
            } else {
              setNewState(PluginStateMonitor.State.CONNECTED_BAD_PROJECT);
            }
          }
        }
      } else
      if (myState == PluginStateMonitor.State.TRYING_TO_CONNECT) {
        if (isConnected()) {
          if (canOperate()) {
            setNewState(PluginStateMonitor.State.CONNECTED);
          } else {
            setNewState(PluginStateMonitor.State.CONNECTED_BAD_PROJECT);
          }
        } else {
          int newDelay = (int) (myTimer.getDelay() * DELAY_MUL);
          if (newDelay <= CRITICAL_DELAY) {
            myTimer.setNewDelay(newDelay);
          } else {
            setNewState(PluginStateMonitor.State.DISCONNECTED);
          }
        }
      }
    }
  }

  private void setNewState(PluginStateMonitor.State state) {
    assert myState != state : "myState: " + myState.getHelpText() + "; state: " + state.getHelpText();
    myState = state;
    myTimer.setNewDelay(state.getDefaultDelay());
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        myLabel.setIcon(myState.getIcon());
        myLabel.setToolTipText(myState.getHelpText());
      }
    });
  }

  private boolean isConnected() {
    return MPSPlugin.getInstance().isIDEAPresent();
  }

  private boolean canOperate() {
    return MPSPlugin.getInstance().getProjectHandler(myProject) != null;
  }

  @Nullable
  private StatusBar getStatusBar() {
    IdeFrame ideFrame = WindowManager.getInstance().getIdeFrame(myProject);
    if (ideFrame == null) {
      return null;
    }
    return ideFrame.getStatusBar();
  }

  private static   enum State {
    DISCONNECTED(Icons.DISCONNECTED, "Not connected to IDEA. Click to reconnect.", PluginStateMonitor.INITIAL_DELAY),
    TRYING_TO_CONNECT(Icons.TRYING_TO_CONNECT, "Connecting to IDEA...", PluginStateMonitor.INITIAL_DELAY),
    CONNECTED_BAD_PROJECT(Icons.CONNECTED_ERRORS, "Connected to IDEA, Project does not match", PluginStateMonitor.CRITICAL_DELAY),
    CONNECTED(Icons.CONNECTED, "Connected to IDEA", PluginStateMonitor.INITIAL_DELAY);

    private Icon myIcon;
    private String myHelpText;
    private int myDefaultDelay;

    State(Icon icon, String helpText, int defaultDelay) {
      myIcon = icon;
      myHelpText = helpText;
      myDefaultDelay = defaultDelay;
    }

    public Icon getIcon() {
      return myIcon;
    }

    public String getHelpText() {
      return myHelpText;
    }

    public int getDefaultDelay() {
      return myDefaultDelay;
    }
  }

  private static class MyTimer extends Timer {
    public MyTimer(ActionListener listener) {
      super(PluginStateMonitor.INITIAL_DELAY, listener);
    }

    public void setNewDelay(int delay) {
      setDelay(delay);
      setInitialDelay(delay);
      restart();
    }
  }
}
