package jetbrains.mps.samples.matrixLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.AbstractLoopStatement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ForEachMatrixElement extends AbstractLoopStatement {
  public static final String concept = "jetbrains.mps.samples.matrixLanguage.structure.ForEachMatrixElement";
  public static final String ROW = "row";
  public static final String COLUMN = "column";
  public static final String ELEMENT = "element";
  public static final String MATRIX = "matrix";

  public ForEachMatrixElement(SNode node) {
    super(node);
  }

  public MatrixIndexVariableDeclaration getRow() {
    return (MatrixIndexVariableDeclaration) this.getChild(MatrixIndexVariableDeclaration.class, ForEachMatrixElement.ROW);
  }

  public void setRow(MatrixIndexVariableDeclaration node) {
    super.setChild(ForEachMatrixElement.ROW, node);
  }

  public MatrixIndexVariableDeclaration getColumn() {
    return (MatrixIndexVariableDeclaration) this.getChild(MatrixIndexVariableDeclaration.class, ForEachMatrixElement.COLUMN);
  }

  public void setColumn(MatrixIndexVariableDeclaration node) {
    super.setChild(ForEachMatrixElement.COLUMN, node);
  }

  public MatrixElementVariableDeclaration getElement() {
    return (MatrixElementVariableDeclaration) this.getChild(MatrixElementVariableDeclaration.class, ForEachMatrixElement.ELEMENT);
  }

  public void setElement(MatrixElementVariableDeclaration node) {
    super.setChild(ForEachMatrixElement.ELEMENT, node);
  }

  public Expression getMatrix() {
    return (Expression) this.getChild(Expression.class, ForEachMatrixElement.MATRIX);
  }

  public void setMatrix(Expression node) {
    super.setChild(ForEachMatrixElement.MATRIX, node);
  }

  public static ForEachMatrixElement newInstance(SModel sm, boolean init) {
    return (ForEachMatrixElement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.samples.matrixLanguage.structure.ForEachMatrixElement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ForEachMatrixElement newInstance(SModel sm) {
    return ForEachMatrixElement.newInstance(sm, false);
  }
}
