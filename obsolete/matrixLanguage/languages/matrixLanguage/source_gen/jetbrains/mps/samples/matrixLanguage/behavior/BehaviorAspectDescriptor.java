package jetbrains.mps.samples.matrixLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;

public class BehaviorAspectDescriptor implements jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor {
  private static String[] stringSwitchCases_846f5o_a0a0a = new String[]{"jetbrains.mps.samples.matrixLanguage.structure.DeterminantExpression", "jetbrains.mps.samples.matrixLanguage.structure.ForEachMatrixElement", "jetbrains.mps.samples.matrixLanguage.structure.MatrixAddExpression", "jetbrains.mps.samples.matrixLanguage.structure.MatrixDivExpression", "jetbrains.mps.samples.matrixLanguage.structure.MatrixElementVariableDeclaration", "jetbrains.mps.samples.matrixLanguage.structure.MatrixElementVariableReference", "jetbrains.mps.samples.matrixLanguage.structure.MatrixIndexVariableDeclaration", "jetbrains.mps.samples.matrixLanguage.structure.MatrixIndexVariableReference", "jetbrains.mps.samples.matrixLanguage.structure.MatrixLiteral", "jetbrains.mps.samples.matrixLanguage.structure.MatrixMultExpression", "jetbrains.mps.samples.matrixLanguage.structure.MatrixRow", "jetbrains.mps.samples.matrixLanguage.structure.MatrixSubExpression", "jetbrains.mps.samples.matrixLanguage.structure.MatrixType", "jetbrains.mps.samples.matrixLanguage.structure.TransposeExpression"};

  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {
      case 12:
        return new MatrixType_BehaviorDescriptor();
      case 8:
        return new MatrixLiteral_BehaviorDescriptor();
      case 10:
        return new MatrixRow_BehaviorDescriptor();
      case 0:
        return new DeterminantExpression_BehaviorDescriptor();
      case 13:
        return new TransposeExpression_BehaviorDescriptor();
      case 9:
        return new MatrixMultExpression_BehaviorDescriptor();
      case 2:
        return new MatrixAddExpression_BehaviorDescriptor();
      case 11:
        return new MatrixSubExpression_BehaviorDescriptor();
      case 3:
        return new MatrixDivExpression_BehaviorDescriptor();
      case 1:
        return new ForEachMatrixElement_BehaviorDescriptor();
      case 6:
        return new MatrixIndexVariableDeclaration_BehaviorDescriptor();
      case 4:
        return new MatrixElementVariableDeclaration_BehaviorDescriptor();
      case 5:
        return new MatrixElementVariableReference_BehaviorDescriptor();
      case 7:
        return new MatrixIndexVariableReference_BehaviorDescriptor();
      default:
        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
    }
  }
}
