package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runner.Runner;
import org.junit.runner.Description;
import org.junit.runner.notification.RunNotifier;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.make.ModuleMaker;
import jetbrains.mps.make.MPSCompilationResult;
import java.util.LinkedHashSet;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import org.junit.runner.notification.Failure;
import javax.swing.SwingUtilities;
import com.intellij.openapi.vfs.LocalFileSystem;
import java.lang.reflect.InvocationTargetException;

public class MakeRunner extends Runner {
  private Description myDescription;

  public MakeRunner(Class<?> class_) {
    myDescription = Description.createTestDescription(class_, "Making");
  }

  public void run(final RunNotifier notifier) {
    notifier.fireTestStarted(myDescription);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ModuleMaker maker = new ModuleMaker();
        MPSCompilationResult compilationResult = maker.make(new LinkedHashSet<IModule>(MPSModuleRepository.getInstance().getAllModules()), new EmptyProgressIndicator());
        if (compilationResult != null && compilationResult.getErrors() > 0) {
          notifier.fireTestFailure(new Failure(myDescription, new Exception("Compilation errors: " + compilationResult)));
        }
      }
    });

    try {
      SwingUtilities.invokeAndWait(new Runnable() {
        public void run() {
          ModelAccess.instance().runWriteAction(new Runnable() {
            public void run() {
              LocalFileSystem.getInstance().refresh(false);
            }
          });
        }
      });
    } catch (InterruptedException e) {
      notifier.fireTestFailure(new Failure(myDescription, e));
    } catch (InvocationTargetException e) {
      notifier.fireTestFailure(new Failure(myDescription, e));
    }
    notifier.fireTestFinished(myDescription);
  }

  public Description getDescription() {
    return myDescription;
  }
}
