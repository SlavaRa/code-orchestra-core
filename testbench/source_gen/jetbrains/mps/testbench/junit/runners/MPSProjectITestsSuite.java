package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.Suite;
import java.util.List;
import org.junit.runner.Runner;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.junit.runners.model.RunnerBuilder;
import java.util.Collections;
import org.junit.runners.model.InitializationError;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.MPSProject;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

public class MPSProjectITestsSuite extends Suite {
  private static String PROPERTY_MODULE_UUID = "mps.junit.projectSuite.moduleUUID";
  private static String PROPERTY_MODEL_NAME = "mps.junit.projectSuite.modelLongName";
  private static String PROPERTY_TESTCLASS_NAME = "mps.junit.projectSuite.testClassName";

  private List<Runner> myRunners = ListSequence.fromList(new ArrayList<Runner>());

  public MPSProjectITestsSuite(Class<?> klass, RunnerBuilder builder) throws Throwable {
    super(klass, Collections.<Runner>emptyList());
    for (Class<?> parameter : ListSequence.fromList(getUnitTestClasses(getTestClass()))) {
      ListSequence.fromList(myRunners).addElement(builder.runnerForClass(parameter));
    }
  }

  private List<Class<?>> getUnitTestClasses(org.junit.runners.model.TestClass klass) throws InitializationError {
    List<Class<?>> result = ListSequence.fromList(new ArrayList<Class<?>>());
    for (Tuples._2<String, IModule> testClassDescriptor : ListSequence.fromList(getTestClassDescriptors(klass))) {
      Class testClass = testClassDescriptor._1().getClass(testClassDescriptor._0());
      if (testClass != null) {
        ListSequence.fromList(result).addElement(testClass);
      } else {
        throw new InitializationError("Unable to load class for ITestCase by fq name: " + testClassDescriptor._0() + " from module: " + testClassDescriptor._1().getModuleFqName());
      }
    }
    return result;
  }

  private List<Tuples._2<String, IModule>> getTestClassDescriptors(org.junit.runners.model.TestClass klass) throws InitializationError {
    final List<SModelDescriptor> modelDescriptors = getModelDescriptors(klass);
    String testClassName = getTestClassName(klass);
    if (testClassName != null) {
      if (ListSequence.fromList(modelDescriptors).isEmpty()) {
        throw new InitializationError("Unable to locate class: " + testClassName + " - no model descriptors found (model or module was not specified)");
      }
      return Collections.singletonList(MultiTuple.<String,IModule>from(testClassName, ListSequence.fromList(modelDescriptors).first().getModule()));
    }

    final List<Tuples._2<String, IModule>> testClassDescriptors = ListSequence.fromList(new ArrayList<Tuples._2<String, IModule>>());
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (SModelDescriptor modelDescriptor : ListSequence.fromList(modelDescriptors)) {
          SModel sModel = modelDescriptor.getSModel();
          for (SNode testCase : ListSequence.fromList(SModelOperations.getRoots(sModel, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))) {
            ListSequence.fromList(testClassDescriptors).addElement(MultiTuple.<String,IModule>from(((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"), "virtual_getClassName_1216136193905", new Class[]{SNode.class})), modelDescriptor.getModule()));
          }
        }
      }
    });
    return testClassDescriptors;
  }

  private List<SModelDescriptor> getModelDescriptors(org.junit.runners.model.TestClass klass) throws InitializationError {
    MPSProject mpsProject = MPSOpenProjectRunner.getCurrentMPSProject();

    String moduleUUID = getModuleUUID(klass);
    if (moduleUUID != null) {
      for (IModule module : ListSequence.fromList(mpsProject.getModules())) {
        if (moduleUUID.equals(module.getModuleDescriptor().getUUID())) {
          return module.getOwnModelDescriptors();
        }
      }
      throw new InitializationError("Module with specified UUID: " + moduleUUID + " was not found in MPS project: " + mpsProject.getProjectFile().getAbsolutePath());
    }

    String modelLongName = getModelLongName(klass);
    if (modelLongName != null) {
      for (SModelDescriptor modelDescriptor : ListSequence.fromList(mpsProject.getProjectModels())) {
        if (modelLongName.equals(modelDescriptor.getLongName())) {
          return Collections.singletonList(modelDescriptor);
        }
      }
      throw new InitializationError("Model with specified longName: " + modelLongName + " was not found in MPS project: " + mpsProject.getProjectFile().getAbsolutePath());
    }

    return mpsProject.getProjectModels();
  }

  private String getModuleUUID(org.junit.runners.model.TestClass klass) {
    MPSProjectITestsSuite.ModuleUUID moduleAnnotation = klass.getJavaClass().getAnnotation(MPSProjectITestsSuite.ModuleUUID.class);
    if (moduleAnnotation != null) {
      return moduleAnnotation.value();
    }
    return System.getProperty(MPSProjectITestsSuite.PROPERTY_MODULE_UUID);
  }

  private String getModelLongName(org.junit.runners.model.TestClass klass) {
    MPSProjectITestsSuite.ModelLongName modelAnnotation = klass.getJavaClass().getAnnotation(MPSProjectITestsSuite.ModelLongName.class);
    if (modelAnnotation != null) {
      return modelAnnotation.value();
    }
    return System.getProperty(PROPERTY_MODEL_NAME);
  }

  private String getTestClassName(org.junit.runners.model.TestClass klass) {
    MPSProjectITestsSuite.TestClass testClassAnnotation = klass.getJavaClass().getAnnotation(MPSProjectITestsSuite.TestClass.class);
    if (testClassAnnotation != null) {
      return testClassAnnotation.value();
    }
    return System.getProperty(PROPERTY_TESTCLASS_NAME);
  }

  @Override
  protected List<Runner> getChildren() {
    return myRunners;
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
public static   @interface ModuleUUID {
    /**
     * 
     * 
     * @return path to MPS project
     */
    String value();
}

@Retention(RetentionPolicy.RUNTIME)
@Target(value = {ElementType.TYPE})
public static @interface ModelLongName {
  /**
   * 
   * 
   * @return path to MPS project
   */
  String value();
}

@Retention(RetentionPolicy.RUNTIME)
@Target(value = {ElementType.TYPE})
public static @interface TestClass {
/**
 * 
 * 
 * @return path to MPS project
 */
String value();
}
}
