package jetbrains.mps.testbench.junit.runners;

/*Generated by MPS */

import org.junit.runners.Suite;
import java.util.List;
import org.junit.runner.Runner;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.junit.runners.model.RunnerBuilder;
import java.util.Collections;
import org.junit.runners.model.TestClass;
import org.junit.runners.model.FrameworkMethod;
import java.lang.reflect.Modifier;
import org.junit.runner.notification.RunNotifier;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

public class ParameterizedSuite extends Suite {
  private List<Runner> myRunners = ListSequence.fromList(new ArrayList<Runner>());

  public ParameterizedSuite(Class<?> klass, RunnerBuilder builder) throws Throwable {
    super(klass, Collections.<Runner>emptyList());
    for (Class<?> parameter : ListSequence.fromList(getParametersList(getTestClass()))) {
      ListSequence.fromList(myRunners).addElement(builder.runnerForClass(parameter));
    }
  }

  private List<Class<?>> getParametersList(TestClass klass) throws Throwable {
    return (List<Class<?>>) getParametersMethod(klass).invokeExplosively(null);
  }

  private FrameworkMethod getParametersMethod(TestClass testClass) throws Exception {
    List<FrameworkMethod> methods = testClass.getAnnotatedMethods(ParameterizedSuite.SuiteClasses.class);
    for (FrameworkMethod each : ListSequence.fromList(methods)) {
      int modifiers = each.getMethod().getModifiers();
      if (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)) {
        return each;
      }
    }
    throw new Exception("No public static parameters method on class " + testClass.getName());
  }

  @Override
  protected List<Runner> getChildren() {
    return myRunners;
  }

  @Override
  public void run(RunNotifier notifier) {
    if (ListSequence.fromList(myRunners).isEmpty()) {
      notifier.fireTestStarted(getDescription());
      notifier.fireTestFinished(getDescription());
      return;
    }
    super.run(notifier);
  }

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.METHOD})
public static   @interface SuiteClasses {
}
}
