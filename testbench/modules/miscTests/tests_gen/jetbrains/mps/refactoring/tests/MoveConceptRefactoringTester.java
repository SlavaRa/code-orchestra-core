package jetbrains.mps.refactoring.tests;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelOperations;
import java.util.Arrays;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.smodel.ModelLoadingState;

public class MoveConceptRefactoringTester implements IRefactoringTester {
  public MoveConceptRefactoringTester() {
  }

  public boolean testRefactoring(final Project project, final SModelDescriptor sandbox1, final SModelDescriptor sandbox2, final Language testRefactoringLanguage, final Language testRefactoringTargetLanguage) {
    final String conceptName = "MyVeryGoodConcept1";
    final Wrappers._T<IRefactoring> refactoring = new Wrappers._T<IRefactoring>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        refactoring.value = RefactoringUtil.getRefactoringByClassName(((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590291(jetbrains.mps.lang.structure.scripts)", "1198173570106"), "jetbrains.mps.lang.refactoring.structure.OldRefactoring"), "call_getGeneratedClassLongName_4598603396803851284", new Class[]{SNode.class})));
      }
    });
    final RefactoringContext refactoringContext = new RefactoringContext(refactoring.value);
    refactoringContext.setCurrentOperationContext(ProjectOperationContext.get(project));
    final SModelDescriptor[] targetStructureModelDescriptor = new SModelDescriptor[]{null};
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SModelDescriptor structureModelDescriptor = testRefactoringLanguage.getStructureModelDescriptor();
        targetStructureModelDescriptor[0] = testRefactoringTargetLanguage.getStructureModelDescriptor();
        SModel model = structureModelDescriptor.getSModel();
        SNode concept = SModelOperations.getRootByName(model, conceptName);
        refactoringContext.setSelectedProject(project);
        refactoringContext.setSelectedNode(concept);
        refactoringContext.setSelectedNodes(Arrays.asList(concept));
        refactoringContext.setSelectedModel(structureModelDescriptor);
        refactoringContext.setParameter("targetModel", targetStructureModelDescriptor[0]);
      }
    });
    new RefactoringTestFacade().doExecuteInTest(refactoringContext);
    final boolean[] result = new boolean[]{false};
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            try {
              if (sandbox1.getLoadingState() != ModelLoadingState.NOT_LOADED) {
                System.err.println("test environment is invalid: model sandbox1 is already initialized, should be not");
                result[0] = false;
                return;
              }
              SModel sModel = sandbox1.getSModel();
              result[0] = sModel.rootsIterator().next().getConceptFqName().equals(targetStructureModelDescriptor[0].getSModelReference().getSModelFqName() + "." + conceptName);
            } catch (Throwable t) {
              t.printStackTrace();
              result[0] = false;
              return;
            }
          }
        });
      }
    });
    return result[0];
  }
}
