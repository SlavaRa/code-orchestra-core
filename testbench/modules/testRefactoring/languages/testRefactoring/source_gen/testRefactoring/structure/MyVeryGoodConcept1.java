package testRefactoring.structure;

/*Generated by MPS */

import testRefactoringTargetLang.structure.AbstractGoodConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MyVeryGoodConcept1 extends AbstractGoodConcept implements INamedConcept {
  public static final String concept = "testRefactoring.structure.MyVeryGoodConcept1";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String BROTHER = "brother";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public MyVeryGoodConcept1(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(MyVeryGoodConcept1.NAME);
  }

  public void setName(String value) {
    this.setProperty(MyVeryGoodConcept1.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(MyVeryGoodConcept1.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(MyVeryGoodConcept1.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(MyVeryGoodConcept1.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(MyVeryGoodConcept1.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(MyVeryGoodConcept1.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(MyVeryGoodConcept1.VIRTUAL_PACKAGE, value);
  }

  public MyVeryGoodConcept1 getBrother() {
    return (MyVeryGoodConcept1) this.getReferent(MyVeryGoodConcept1.class, MyVeryGoodConcept1.BROTHER);
  }

  public void setBrother(MyVeryGoodConcept1 node) {
    super.setReferent(MyVeryGoodConcept1.BROTHER, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(MyVeryGoodConcept1.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, MyVeryGoodConcept1.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, MyVeryGoodConcept1.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(MyVeryGoodConcept1.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, MyVeryGoodConcept1.SMODEL_ATTRIBUTE, node);
  }

  public static MyVeryGoodConcept1 newInstance(SModel sm, boolean init) {
    return (MyVeryGoodConcept1) SModelUtil_new.instantiateConceptDeclaration("testRefactoring.structure.MyVeryGoodConcept1", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MyVeryGoodConcept1 newInstance(SModel sm) {
    return MyVeryGoodConcept1.newInstance(sm, false);
  }
}
