package jetbrains.mps.tests;

/*Generated by MPS */

import jetbrains.mps.testbench.junit.runners.ModuleSymbolicSuite;
import org.junit.runner.RunWith;

@ModuleSymbolicSuite.ModuleClassSymbols(classes = {"intGeom2DTest.IsIntersects_Test", "orthogonalLayoutTest.VisibilityRepresentation_Test", "orthogonalLayoutTest.OrthogonalFromVisibility_Test", "orthogonalLayoutTest.ConstraintsSupporter_Test", "orthogonalLayoutTest.OrthogonalPointFlowLayouter_Test", "orthogonalLayoutTest.AmbiguityLayout_Test", "orthogonalLayoutTest.RectOrthogonalLayouter_Test", "orthogonalLayoutTest.EmbeddedGraphModifier_Test", "orthogonalLayoutTest.RectOrthogonalFlowLayouter_Test", "orthogonalLayoutTest.QuasiOrthogonalRepresentation_Test", "orthogonalLayoutTest.ConstraintsGraph_Test", "orthogonalLayoutTest.OrthogonalFlowLayouterConstraints_Test", "orthogonalLayoutTest.OrthogonalFlowLabelProcessing_Test", "orthogonalLayoutTest.OrthogonalFlowLayouterNoLabels_Test", "orthogonalLayoutTest.HyperGraphLayouter_Test", "graphTest.TopologicalSorting_Test", "graphTest.TopologicalNumbering_Test", "graphTest.ShortestPath_Test", "graphTest.STNumbering_Test", "graphTest.BiconnectAugmentation_Test", "graphTest.WeightedTopologicalNumbering_Test", "graphTest.BiconnectComponent_Test", "graphTest.FordBellman_Test", "graphTest.MinCostMaxFlow_Test", "graphTest.MinCirculation_Test", "graphTest.Dijkstra_Test", "graphTest.MinCostMaxFlowWithPotentials_Test", "graphTest.GroupedGraphModificationSynchronizer_Test", "layeredLayoutTest.DFSEdgeReverter_Test", "layeredLayoutTest.TopologicalLayerer_Test", "layeredLayoutTest.DFSNodeSorter_Test", "layeredLayoutTest.BlockGraphProcessor_Test", "internalTest.TestRandomGraph_Test", "planarizationTest.TreeEmbeddingFinder_Find_Test", "planarizationTest.STPlanarGraph_Test", "planarizationTest.BiconnectedInitialEmbeddingFinder_Test", "planarizationTest.ShortestPathEmbeddingFinder_Test", "planarizationTest.PQPlanarityTest_Test", "planarizationTest.PQPlanarizationFinder_Test", "planarizationTest.AmbiguityPlanarizationFinder_Test", "planarizationTest.ClusterEmbeddingConstructor_Test", "planarizationTest.ClusterEmbeddingMakeBiconnected_Test", "planarizationTest.SubsequenceFinder_Test"}, tests = {"test_sameLine1,test_sameLine2,test_interByEnd,test_simplyInter", "test_test1,test_BookGraph,test_K5", "test_BookGraph", "test_test1,test_K5", "test_test1,test_test2,test_test3,test_test4,test_test5,test_test6,test_test7", "test_test1,test_test2", "test_test1", "test_test1,test_test2", "test_test1,test_test2,test_test3,test_test4,test_test5,test_test6,test_test7", "test_test1,test_test2,test_test3,test_test4,test_test5,test_K4,test_test6,test_test7,test_test8", "test_test1,test_test2,test_test3,test_testModification1", "test_test1,test_test2,test_test3,test_test4,test_test5,test_test6,test_test7,test_testSplitEdges", "test_test1,test_test2,test_test3,test_test4,test_test5,test_testLabel", "test_test1", "test_test1,test_test2", "test_test1", "test_sandwatches,test_test1", "test_triangle", "test_test1,test_graphFromPaper,test_K5plus", "test_chain3,test_test1,test_test2,test_test3,test_test4", "test_test1", "test_test1,test_test2,test_test3,test_test4,test_test5,test_chain", "test_triangle", "test_test1,test_test2", "test_test1,test_test2", "test_triangle,test_test2,test_test3,test_test4", "test_test1", "test_test1", "test_cycle", "test_chain1,test_chain2,test_chain3,test_triangle,test_cycle,test_sandwatches,test_simpleFourLayers", "test_Chain,test_simpleFourLeyers", "test_test1,test_test2,test_test3", "test_threeLayersGraph", "test_triangle,test_test1,test_test2,test_K5,test_K3_3,test_BookGraph", "test_test1,test_K5,test_BookGraph", "test_cycle,test_test1,test_K5,test_K3_3,test_BookGraph", "test_cycle,test_test1,test_K5,test_BookGraph,test_K3_3,test_test2", "test_test1,test_test2,test_test3,test_test4,test_test5,test_test7", "test_test1,test_testForBreakingST,test_test2,test_test3,test_JTSPaperGraph,test_test4,test_test5,test_test6", "test_test1,test_test2", "test_connectedTriagles,test_manyClusters,test_noEdges,test_test1", "test_connectedTriagles,test_noEdges,test_test1", "test_test1,test_test2,test_testCyclic1"})
@ModuleSymbolicSuite.ModuleReference("1cf9ab03-28e6-49cc-b765-555cd6dcfc28(jetbrains.mps.graphLayout.test)")
@RunWith(ModuleSymbolicSuite.class)
public class TestModule_jetbrains_mps_graphLayout_test {
  public TestModule_jetbrains_mps_graphLayout_test() {
  }
}
