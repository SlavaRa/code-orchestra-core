package jetbrains.mps.tests;

/*Generated by MPS */

import jetbrains.mps.testbench.junit.runners.ModuleSymbolicSuite;
import org.junit.runner.RunWith;

@ModuleSymbolicSuite.ModuleClassSymbols(classes = {"jetbrains.mps.closures.test.YieldClosures_Test", "jetbrains.mps.closures.test.ClosuresBase_Test", "jetbrains.mps.closures.test.FunctionTypes_Test", "jetbrains.mps.closures.test.SequenceFunctionTypes_Test", "jetbrains.mps.closures.test.AdvancedFunctionTypes_Test", "jetbrains.mps.closures.test.ClassifierAdapters_Test", "jetbrains.mps.closures.test.ExternalReferences_Test", "jetbrains.mps.closures.test.ThisExpression_Test", "jetbrains.mps.closures.test.FinalClosureParameter_Test", "jetbrains.mps.closures.test.WhileBreak_Test", "jetbrains.mps.closures.test.Parent_Test", "jetbrains.mps.closures.test.Child_Test"}, tests = {"test_ifStatement,test_whileStatement,test_doWhileStatement,test_forStatement,test_foreachStatement,test_dmitriev,test_switchStatement,test_elseIfClauses,test_mps7920,test_mps_1503,test_allKindsOfLoopLabels,test_yieldAllLast,test_yieldAll,test_yieldYieldAll,test_yieldAllYieldAll,test_yieldAllInCycle,test_timur1,test_timur2,test_mps3477,test_mps10427,test_yieldNext,test_delayedException,test_mps10640,test_stub", "test_stub", "test_functionTypeAdapter_simple,test_exceptions,test_exceptionsYield,test_functionTypeAdapter_complex,test_return_null,test_specifiedInterface", "test_returnSequence,test_acceptSequence,test_resultsReturnSequence,test_stub", "test_returnsFunction,test_acceptsFunction", "test_interfaceAsFunctionType,test_functionTypeAsInterface,test_closureLiteralAsInterface,test_yieldClosureLiteralAsInterface,test_genericInterfaceAdapter,test_instanceMethodCall,test_exceptions,test_closureLiteralAsComparator,test_closureLiteralAsParameterToConstructor,test_closureLiteralAsParameterToAnonymousClass,test_wrongParametersNumber,test__returnWorker,test__returnProcessor,test_mps5315,test_mps5316,test_compactInvoke,test_mps7619,test_translate,test_mps9190", "test_localVariableDeclaration,test_alteredLocalvariable,test_alteredLocalVariable2,test_alteredLocalVariable3,test_methodParameter,test_methodParameter2,test_field,test_mps4102,test_mps7432,test_mps10242,test_mps12286", "test_anonymousClass,test_topLevelClass", "test_runnable", "test_mps6546,test_stub", "testStub", "testFoo"})
@ModuleSymbolicSuite.ModuleReference("7a0c7a21-43a3-4bb4-b898-a819ebed44a5(closures.test)")
@RunWith(ModuleSymbolicSuite.class)
public class TestModule_closures_test {
  public TestModule_closures_test() {
  }
}
