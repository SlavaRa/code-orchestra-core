package jetbrains.mps.transformation.test.outputLang.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.textGen.TextGenManager;

public class OutputRoot_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    this.append((SPropertyOperations.getString(node, "name") == null ?
      "<no name>" :
      SPropertyOperations.getString(node, "name")
    ));
    this.append(" : ");
    this.append((SPropertyOperations.getString(node, "text") == null ?
      "<no text>" :
      SPropertyOperations.getString(node, "text")
    ));
    if ((SLinkOperations.getTarget(node, "specialChild", true) != null)) {
      this.appendNewLine();
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "specialChild", true), this.getSNode());
      this.appendNewLine();
    }
    for (SNode output : SLinkOperations.getTargets(node, "outputChild", true)) {
      this.appendNewLine();
      this.appendNewLine();
      this.increaseDepth();
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), output, this.getSNode());
      this.decreaseDepth();
    }
  }
}
