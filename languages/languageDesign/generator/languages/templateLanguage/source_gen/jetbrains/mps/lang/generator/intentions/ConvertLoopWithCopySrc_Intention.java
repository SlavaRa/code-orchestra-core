package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class ConvertLoopWithCopySrc_Intention extends BaseIntention implements Intention {
  public ConvertLoopWithCopySrc_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.generator.structure.LoopMacro";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert to $COPY-SRCL$";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    Iterable<SNode> nodes = ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(node))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.generator.structure.NodeMacro");
      }
    });
    boolean seen = false;
    for (SNode n : nodes) {
      if (seen) {
        if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.CopySrcNodeMacro")) {
          SNode m = SLinkOperations.getTarget(SNodeOperations.cast(n, "jetbrains.mps.lang.generator.structure.CopySrcNodeMacro"), "sourceNodeQuery", true);
          if ((m == null) || (SLinkOperations.getTarget(m, "body", true) == null) || ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(m, "body", true), "statement", true)).isEmpty() || ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(m, "body", true), "statement", true)).count() > 1) {
            return false;
          }
          SNode st = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(m, "body", true), "statement", true)).first();
          return SNodeOperations.isInstanceOf(st, "jetbrains.mps.baseLanguage.structure.ExpressionStatement") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(st, "jetbrains.mps.baseLanguage.structure.ExpressionStatement"), "expression", true), "jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_sourceNode");
        } else {
          return false;
        }
      } else if (n == node) {
        seen = true;
      }
    }
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    Iterable<SNode> nodes = ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(node))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.generator.structure.NodeMacro");
      }
    });
    boolean seen = false;
    for (SNode n : nodes) {
      if (seen) {
        if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.CopySrcNodeMacro")) {
          SNodeOperations.deleteNode(n);
          SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.lang.generator.structure.CopySrcListMacro");
        }
        return;
      } else if (n == node) {
        seen = true;
      }
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.generator.intentions";
  }
}
