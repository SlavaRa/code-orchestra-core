package jetbrains.mps.lang.generator.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MappingScript extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.lang.generator.structure.MappingScript";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String MODIFIES_MODEL = "modifiesModel";
  public static final String SCRIPT_KIND = "scriptKind";
  public static final String CODE_BLOCK = "codeBlock";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public MappingScript(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(MappingScript.NAME);
  }

  public void setName(String value) {
    this.setProperty(MappingScript.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(MappingScript.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(MappingScript.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(MappingScript.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(MappingScript.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(MappingScript.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(MappingScript.VIRTUAL_PACKAGE, value);
  }

  public boolean getModifiesModel() {
    return this.getBooleanProperty(MappingScript.MODIFIES_MODEL);
  }

  public void setModifiesModel(boolean value) {
    this.setBooleanProperty(MappingScript.MODIFIES_MODEL, value);
  }

  public MappingScriptKind getScriptKind() {
    String value = super.getProperty(MappingScript.SCRIPT_KIND);
    return MappingScriptKind.parseValue(value);
  }

  public void setScriptKind(MappingScriptKind value) {
    super.setProperty(MappingScript.SCRIPT_KIND, value.getValueAsString());
  }

  public MappingScript_CodeBlock getCodeBlock() {
    return (MappingScript_CodeBlock) this.getChild(MappingScript_CodeBlock.class, MappingScript.CODE_BLOCK);
  }

  public void setCodeBlock(MappingScript_CodeBlock node) {
    super.setChild(MappingScript.CODE_BLOCK, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(MappingScript.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, MappingScript.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, MappingScript.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(MappingScript.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, MappingScript.SMODEL_ATTRIBUTE, node);
  }

  public static MappingScript newInstance(SModel sm, boolean init) {
    return (MappingScript) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.generator.structure.MappingScript", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MappingScript newInstance(SModel sm) {
    return MappingScript.newInstance(sm, false);
  }
}
