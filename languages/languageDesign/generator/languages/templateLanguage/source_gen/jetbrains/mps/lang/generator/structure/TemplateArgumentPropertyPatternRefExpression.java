package jetbrains.mps.lang.generator.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.pattern.structure.PropertyPatternVariableDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class TemplateArgumentPropertyPatternRefExpression extends TemplateArgumentPatternRef {
  public static final String concept = "jetbrains.mps.lang.generator.structure.TemplateArgumentPropertyPatternRefExpression";
  public static final String PROPERTY_PATTERN = "propertyPattern";

  public TemplateArgumentPropertyPatternRefExpression(SNode node) {
    super(node);
  }

  public PropertyPatternVariableDeclaration getPropertyPattern() {
    return (PropertyPatternVariableDeclaration) this.getReferent(PropertyPatternVariableDeclaration.class, TemplateArgumentPropertyPatternRefExpression.PROPERTY_PATTERN);
  }

  public void setPropertyPattern(PropertyPatternVariableDeclaration node) {
    super.setReferent(TemplateArgumentPropertyPatternRefExpression.PROPERTY_PATTERN, node);
  }

  public static TemplateArgumentPropertyPatternRefExpression newInstance(SModel sm, boolean init) {
    return (TemplateArgumentPropertyPatternRefExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateArgumentPropertyPatternRefExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static TemplateArgumentPropertyPatternRefExpression newInstance(SModel sm) {
    return TemplateArgumentPropertyPatternRefExpression.newInstance(sm, false);
  }
}
