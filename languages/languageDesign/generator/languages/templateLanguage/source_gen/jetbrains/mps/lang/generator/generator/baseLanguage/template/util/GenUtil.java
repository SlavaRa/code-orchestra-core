package jetbrains.mps.lang.generator.generator.baseLanguage.template.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class GenUtil {
  private static final String KEY = "VarName";

  public GenUtil() {
  }

  public static String getVar(TemplateQueryContext context, SNode node, int skipMacro) {
    List<SNode> macros = ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.generator.structure.NodeMacro");
      }
    }).toListSequence();
    SNode real = (ListSequence.fromList(macros).count() <= skipMacro ?
      node :
      ListSequence.fromList(macros).getElement(skipMacro)
    );
    return (String) context.getTransientObject(MultiTuple.<String,SNode>from(KEY, real));
  }

  public static String saveVar(TemplateQueryContext context, SNode node, String var) {
    SNode original = (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.NodeMacro") ?
      SNodeOperations.getParent(node) :
      node
    );
    if (context.getTransientObject(original) == null) {
      context.putTransientObject(original, var);
    }
    context.putTransientObject(MultiTuple.<String,SNode>from(KEY, node), var);
    return var;
  }

  public static boolean isGeneratable(SModel model) {
    SNode node = SModelOperations.getModuleStub(model);
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.project.structure.Generator")) {
      return SPropertyOperations.getBoolean(SNodeOperations.cast(node, "jetbrains.mps.lang.project.structure.Generator"), "generateTemplates");
    }
    return false;
  }

  public static String asIdentifier(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      if (c == '_') {
        sb.append("__");
      } else if (Character.isDigit(c) && sb.length() > 0) {
        sb.append(c);
      } else if (Character.isJavaIdentifierStart(c) && c != '$') {
        sb.append(c);
      } else {
        sb.append('_');
        String val = Integer.toHexString(c);
        if (val.length() < 4) {
          val = "0000".substring(val.length()) + val;
        }
        sb.append('x');
        sb.append(val);
      }
    }

    return sb.toString();
  }
}
