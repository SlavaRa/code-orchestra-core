package jetbrains.mps.lang.generator.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.nodeEditor.InspectorTool;
import jetbrains.mps.ide.generator.GeneratedQueriesOpener;

public class MacrosSwitch_KeyMap extends EditorCellKeyMap {
  public MacrosSwitch_KeyMap() {
    this.setApplicableToEveryModel(true);
    EditorCellKeyMapAction action;
    action = new MacrosSwitch_KeyMap.MacrosSwitch_KeyMap_Action0();
    this.putAction("ctrl+shift", "VK_F", action);
    action = new MacrosSwitch_KeyMap.MacrosSwitch_KeyMap_Action1();
    this.putAction("ctrl+shift", "VK_M", action);
    action = new MacrosSwitch_KeyMap.MacrosSwitch_KeyMap_Action2();
    this.putAction("ctrl+shift", "VK_M", action);
    action = new MacrosSwitch_KeyMap.MacrosSwitch_KeyMap_Action3();
    this.putAction("ctrl+shift", "VK_M", action);
    action = new MacrosSwitch_KeyMap.MacrosSwitch_KeyMap_Action4();
    this.putAction("ctrl+alt+shift", "VK_Q", action);
  }

  public static class MacrosSwitch_KeyMap_Action0 extends EditorCellKeyMapAction {
    public MacrosSwitch_KeyMap_Action0() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "create template fragmet";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }
      if (SNodeOperations.getAncestorWhereConceptInList(node, new String[]{"jetbrains.mps.lang.generator.structure.TemplateDeclaration", "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence"}, false, false) == null) {
        return false;
      }
      if (ListSequence.fromList(SNodeOperations.getAncestors(node, null, false)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isAttribute(it);
        }
      }).isNotEmpty()) {
        return false;
      }
      if (QueriesUtil.isInsideTemplateFragment(node)) {
        return false;
      }
      return true;
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      // do not hang <TF> on other attributes 
      SNode applyToNode = ListSequence.fromList(SNodeOperations.getAncestors(node, null, true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SNodeOperations.isAttribute(it));
        }
      }).first();
      QueriesUtil.createTemplateFragment(applyToNode);
    }

    public String getKeyStroke() {
      return "ctrl shift F";
    }
  }

  public static class MacrosSwitch_KeyMap_Action1 extends EditorCellKeyMapAction {
    public MacrosSwitch_KeyMap_Action1() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "add node macro";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }
      return QueriesUtil.isNodeMacroApplicable(node);
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode nodeMacro = QueriesUtil.addNodeMacro(node);
      // set caret 
      editorContext.selectAndSetCaret(nodeMacro, 1);
    }

    public String getKeyStroke() {
      return "ctrl shift M";
    }
  }

  public static class MacrosSwitch_KeyMap_Action2 extends EditorCellKeyMapAction {
    public MacrosSwitch_KeyMap_Action2() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "add property macro";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }
      return QueriesUtil.isPropertyMacroApplicable(node, editorContext.getSelectedCell());
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode propertyMacro = QueriesUtil.addPropertyMacro(node, editorContext.getSelectedCell());
      // set caret 
      editorContext.selectAndSetCaret(propertyMacro, 0);
      InspectorTool inspector = editorContext.getOperationContext().getComponent(InspectorTool.class);
      assert inspector != null;
      inspector.openTool(true);
    }

    public String getKeyStroke() {
      return "ctrl shift M";
    }
  }

  public static class MacrosSwitch_KeyMap_Action3 extends EditorCellKeyMapAction {
    public MacrosSwitch_KeyMap_Action3() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "add reference macro";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (ListSequence.fromList(selectedNodes).count() != 1) {
        return false;
      }
      return QueriesUtil.isReferenceMacroApplicable(node, editorContext.getSelectedCell());
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode referenceMacro = QueriesUtil.addReferenceMacro(node, editorContext.getSelectedCell());
      // set caret 
      editorContext.selectAndSetCaret(referenceMacro, 2);
      InspectorTool inspector = editorContext.getOperationContext().getComponent(InspectorTool.class);
      assert inspector != null;
      inspector.openTool(true);
    }

    public String getKeyStroke() {
      return "ctrl shift M";
    }
  }

  public static class MacrosSwitch_KeyMap_Action4 extends EditorCellKeyMapAction {
    public MacrosSwitch_KeyMap_Action4() {
      this.setShownInPopupMenu(true);
    }

    public String getDescriptionText() {
      return "Navigate to generated query method";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      return this.canExecute_internal(keyEvent, editorContext, contextNode, this.getSelectedNodes(editorContext));
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private boolean canExecute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      return SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ConceptFunction", true, false) != null;
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode fun = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ConceptFunction", true, false);
      GeneratedQueriesOpener.openQueryMethod(editorContext.getOperationContext(), fun);
    }

    public String getKeyStroke() {
      return "ctrl alt shift Q";
    }
  }
}
