package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.util.NameUtil;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.ArrayList;

public class ReplaceWithConcreteSubconcept_Intention extends BaseIntention implements Intention {
  private SNode myParameter;

  public ReplaceWithConcreteSubconcept_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public boolean isParameterized() {
    return true;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Replace with instance of  " + BaseConcept_Behavior.call_getPresentation_1213877396640(this.myParameter) + " concept";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    SModelDescriptor sm = SNodeOperations.getModel(node).getModelDescriptor();
    if (sm == null || !(sm.getModule() instanceof Generator)) {
      return false;
    }
    SNode selectedNodeConcept = SNodeOperations.getConceptDeclaration(node);
    return SConceptPropertyOperations.getBoolean(selectedNodeConcept, "abstract");
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode concreteConceptInstance = SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(this.myParameter), null);
    SNodeOperations.replaceWithAnother(node, concreteConceptInstance);
    SNodeOperations.deleteNode(node);
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.generator.intentions";
  }

  private static List<SNode> parameter(final SNode node, final EditorContext editorContext) {
    SNode selectedNodeConcept = SNodeOperations.getConceptDeclaration(node);
    return ListSequence.fromList(SConceptOperations.getAllSubConcepts(selectedNodeConcept, SNodeOperations.getModel(node), GlobalScope.getInstance())).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SConceptPropertyOperations.getBoolean(it, "abstract"));
      }
    }).toListSequence();
  }

  public static List<Intention> instances(final SNode node, final EditorContext editorContext) {
    List<Intention> list = ListSequence.fromList(new ArrayList<Intention>());
    List<SNode> paramList = parameter(node, editorContext);
    if (paramList != null) {
      for (SNode param : paramList) {
        ReplaceWithConcreteSubconcept_Intention intention = new ReplaceWithConcreteSubconcept_Intention();
        intention.myParameter = param;
        ListSequence.fromList(list).addElement(intention);
      }
    }
    return list;
  }
}
