package jetbrains.mps.lang.generator.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MapSrcListMacro extends SourceSubstituteMacro {
  public static final String concept = "jetbrains.mps.lang.generator.structure.MapSrcListMacro";
  public static final String SOURCE_NODES_QUERY = "sourceNodesQuery";
  public static final String MAPPER_FUNCTION = "mapperFunction";
  public static final String POST_MAPPER_FUNCTION = "postMapperFunction";

  public MapSrcListMacro(SNode node) {
    super(node);
  }

  public SourceSubstituteMacro_SourceNodesQuery getSourceNodesQuery() {
    return (SourceSubstituteMacro_SourceNodesQuery) this.getChild(SourceSubstituteMacro_SourceNodesQuery.class, MapSrcListMacro.SOURCE_NODES_QUERY);
  }

  public void setSourceNodesQuery(SourceSubstituteMacro_SourceNodesQuery node) {
    super.setChild(MapSrcListMacro.SOURCE_NODES_QUERY, node);
  }

  public MapSrcMacro_MapperFunction getMapperFunction() {
    return (MapSrcMacro_MapperFunction) this.getChild(MapSrcMacro_MapperFunction.class, MapSrcListMacro.MAPPER_FUNCTION);
  }

  public void setMapperFunction(MapSrcMacro_MapperFunction node) {
    super.setChild(MapSrcListMacro.MAPPER_FUNCTION, node);
  }

  public MapSrcMacro_PostMapperFunction getPostMapperFunction() {
    return (MapSrcMacro_PostMapperFunction) this.getChild(MapSrcMacro_PostMapperFunction.class, MapSrcListMacro.POST_MAPPER_FUNCTION);
  }

  public void setPostMapperFunction(MapSrcMacro_PostMapperFunction node) {
    super.setChild(MapSrcListMacro.POST_MAPPER_FUNCTION, node);
  }

  public static MapSrcListMacro newInstance(SModel sm, boolean init) {
    return (MapSrcListMacro) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.generator.structure.MapSrcListMacro", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MapSrcListMacro newInstance(SModel sm) {
    return MapSrcListMacro.newInstance(sm, false);
  }
}
