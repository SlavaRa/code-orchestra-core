package jetbrains.mps.baseLanguage.builders.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SimpleBuilderParameter extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameter";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TYPE = "type";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public SimpleBuilderParameter(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(SimpleBuilderParameter.NAME);
  }

  public void setName(String value) {
    this.setProperty(SimpleBuilderParameter.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(SimpleBuilderParameter.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(SimpleBuilderParameter.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(SimpleBuilderParameter.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(SimpleBuilderParameter.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(SimpleBuilderParameter.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(SimpleBuilderParameter.VIRTUAL_PACKAGE, value);
  }

  public Type getType() {
    return (Type) this.getChild(Type.class, SimpleBuilderParameter.TYPE);
  }

  public void setType(Type node) {
    super.setChild(SimpleBuilderParameter.TYPE, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(SimpleBuilderParameter.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, SimpleBuilderParameter.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, SimpleBuilderParameter.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(SimpleBuilderParameter.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, SimpleBuilderParameter.SMODEL_ATTRIBUTE, node);
  }

  public static SimpleBuilderParameter newInstance(SModel sm, boolean init) {
    return (SimpleBuilderParameter) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameter", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SimpleBuilderParameter newInstance(SModel sm) {
    return SimpleBuilderParameter.newInstance(sm, false);
  }
}
