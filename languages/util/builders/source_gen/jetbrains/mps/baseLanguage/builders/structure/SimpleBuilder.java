package jetbrains.mps.baseLanguage.builders.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SimpleBuilder extends Builder {
  public static final String concept = "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder";
  public static final String DECLARATION = "declaration";
  public static final String ARGUMENT = "argument";

  public SimpleBuilder(SNode node) {
    super(node);
  }

  public SimpleBuilderDeclaration getDeclaration() {
    return (SimpleBuilderDeclaration) this.getReferent(SimpleBuilderDeclaration.class, SimpleBuilder.DECLARATION);
  }

  public void setDeclaration(SimpleBuilderDeclaration node) {
    super.setReferent(SimpleBuilder.DECLARATION, node);
  }

  public int getArgumentsCount() {
    return this.getChildCount(SimpleBuilder.ARGUMENT);
  }

  public Iterator<Expression> arguments() {
    return this.children(Expression.class, SimpleBuilder.ARGUMENT);
  }

  public List<Expression> getArguments() {
    return this.getChildren(Expression.class, SimpleBuilder.ARGUMENT);
  }

  public void addArgument(Expression node) {
    this.addChild(SimpleBuilder.ARGUMENT, node);
  }

  public void insertArgument(Expression prev, Expression node) {
    this.insertChild(prev, SimpleBuilder.ARGUMENT, node);
  }

  public static SimpleBuilder newInstance(SModel sm, boolean init) {
    return (SimpleBuilder) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SimpleBuilder newInstance(SModel sm) {
    return SimpleBuilder.newInstance(sm, false);
  }
}
