package jetbrains.mps.baseLanguage.builders.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IScope;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.structure.BehaviorDescriptor;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class SimpleBuilder_Behavior {
  private static Class[] PARAMETERS_7288041816793071817 = {SNode.class};
  private static Class[] PARAMETERS_7288041816793416227 = {SNode.class};
  private static Class[] PARAMETERS_7288041816793071813 = {SNode.class, SNode.class};
  private static Class[] PARAMETERS_7288041816793075493 = {SNode.class, SNode.class, SNode.class, SNode.class};

  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getResultType_7057666463730718251(SNode thisNode) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "declaration", false), "type", true);
  }

  public static boolean virtual_isLeaf_7057666463730595159(SNode thisNode) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(thisNode, "declaration", false), "leaf");
  }

  public static List<SNode> call_getPossibleChildren_8969040284892300232(SNode thisNode, SModel model, IScope scope) {
    List<SNode> builders = new ArrayList<SNode>();
    for (SNode child : SimpleBuilderDeclaration_Behavior.call_getChildren_3816167865390856298(SLinkOperations.getTarget(thisNode, "declaration", false), model, scope)) {
      ListSequence.fromList(builders).addSequence(ListSequence.fromList(SimpleBuilderDeclaration_Behavior.call_getDescendants_3816167865390609214(SLinkOperations.getTarget(child, "child", false), model, scope)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SPropertyOperations.getBoolean(it, "isAbstract"));
        }
      }));
    }
    return builders;
  }

  public static SNode virtual_getCreatorExpression_7057666463730727863(SNode thisNode, SNode parentRef) {
    SNode result = SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "declaration", false), "creator", true));

    List<SNode> params = SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "declaration", false), "parameter", true);
    List<SNode> args = SLinkOperations.getTargets(thisNode, "argument", true);
    if (ListSequence.fromList(params).count() != ListSequence.fromList(args).count()) {
      throw new RuntimeException();
    }

    for (SNode ref : SNodeOperations.getDescendants(result, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameterReference", false, new String[]{})) {
      int index = ListSequence.fromList(params).indexOf(SLinkOperations.getTarget(ref, "parameter", false));
      SNodeOperations.replaceWithAnother(ref, SNodeOperations.copyNode(ListSequence.fromList(args).getElement(index)));
    }

    return result;
  }

  public static SNode virtual_getAttachStatement_7288041816792215495(SNode thisNode, SNode childBuilder, SNode parentRef, SNode childRef) {

    if (SNodeOperations.isInstanceOf(childBuilder, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder")) {
      SNode simpleBuilder = SNodeOperations.cast(childBuilder, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder");
      for (SNode child : SimpleBuilderDeclaration_Behavior.call_getChildren_3816167865390856298(SLinkOperations.getTarget(thisNode, "declaration", false), SNodeOperations.getModel(thisNode), GlobalScope.getInstance())) {
        if (SimpleBuilderDeclaration_Behavior.call_isDescendant_3816167865390595157(SLinkOperations.getTarget(simpleBuilder, "declaration", false), SLinkOperations.getTarget(child, "child", false))) {
          SNode result = SNodeOperations.copyNode(SLinkOperations.getTarget(child, "attachStatement", true));
          for (SNode parent : SNodeOperations.getDescendants(result, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParentExpression", false, new String[]{})) {
            SNodeOperations.replaceWithAnother(parent, SNodeOperations.copyNode(parentRef));
          }
          for (SNode parent : SNodeOperations.getDescendants(result, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChildExpression", false, new String[]{})) {
            SNodeOperations.replaceWithAnother(parent, SNodeOperations.copyNode(childRef));
          }
          return result;
        }
      }
    }

    return Builder_Behavior.callSuper_getAttachStatement_7288041816792215495(thisNode, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder", childBuilder, parentRef, childRef);
  }

  public static SNode call_getResultType_7288041816793071817(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (SNode) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder"), "virtual_getResultType_7057666463730718251", PARAMETERS_7288041816793071817);
  }

  public static boolean call_isLeaf_7288041816793416227(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Boolean) descriptor.invoke(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder"), "virtual_isLeaf_7057666463730595159", PARAMETERS_7288041816793416227);
  }

  public static SNode call_getCreatorExpression_7288041816793071813(SNode thisNode, SNode parentRef) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (SNode) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder"), "virtual_getCreatorExpression_7057666463730727863", PARAMETERS_7288041816793071813, parentRef);
  }

  public static SNode call_getAttachStatement_7288041816793075493(SNode thisNode, SNode childBuilder, SNode parentRef, SNode childRef) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (SNode) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder"), "virtual_getAttachStatement_7288041816792215495", PARAMETERS_7288041816793075493, childBuilder, parentRef, childRef);
  }

  public static SNode callSuper_getResultType_7288041816793071817(SNode thisNode, String callerConceptFqName) {
    return (SNode) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder"), callerConceptFqName, "virtual_getResultType_7057666463730718251", PARAMETERS_7288041816793071817);
  }

  public static boolean callSuper_isLeaf_7288041816793416227(SNode thisNode, String callerConceptFqName) {
    return (Boolean) BehaviorManager.getInstance().invokeSuper(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder"), callerConceptFqName, "virtual_isLeaf_7057666463730595159", PARAMETERS_7288041816793416227);
  }

  public static SNode callSuper_getCreatorExpression_7288041816793071813(SNode thisNode, String callerConceptFqName, SNode parentRef) {
    return (SNode) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder"), callerConceptFqName, "virtual_getCreatorExpression_7057666463730727863", PARAMETERS_7288041816793071813, parentRef);
  }

  public static SNode callSuper_getAttachStatement_7288041816793075493(SNode thisNode, String callerConceptFqName, SNode childBuilder, SNode parentRef, SNode childRef) {
    return (SNode) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder"), callerConceptFqName, "virtual_getAttachStatement_7288041816792215495", PARAMETERS_7288041816793075493, childBuilder, parentRef, childRef);
  }
}
