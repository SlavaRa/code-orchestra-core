package jetbrains.mps.baseLanguage.builders.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.builders.behavior.Builder_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class SimpleBuilderPropertyBuilder_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_60c3dm_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:971d5c35-6139-4f76-9019-ac96d9713d41(jetbrains.mps.baseLanguage.builders.constraints)", "5389689214217448672");

  public SimpleBuilderPropertyBuilder_Constraints() {
    super("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyBuilder");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("declaration", new BaseReferenceConstraintsDescriptor("declaration", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            List<SNode> result = new ArrayList<SNode>();
            SNode contextBuilder = SNodeOperations.as(Builder_Behavior.getContextBuilder_7057666463730366732(_context.getEnclosingNode()), "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder");
            for (SNode dcl = SLinkOperations.getTarget(contextBuilder, "declaration", false); (dcl != null); dcl = SLinkOperations.getTarget(dcl, "extends", false)) {
              ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(dcl, "property", true)));
              for (SNode builders : ListSequence.fromList(SModelOperations.getRootsIncludingImported(_context.getModel(), operationContext.getScope(), "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilders"))) {
                for (SNode basedecl : ListSequence.fromList(SLinkOperations.getTargets(builders, "builder", true))) {
                  SNode extdecl = SNodeOperations.as(basedecl, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExtensionDeclaration");
                  if (dcl == SLinkOperations.getTarget(extdecl, "extended", false)) {
                    ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(extdecl, "property", true)));
                  }
                }
              }
            }
            return result;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_60c3dm_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
