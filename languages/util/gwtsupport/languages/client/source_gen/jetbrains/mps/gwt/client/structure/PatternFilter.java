package jetbrains.mps.gwt.client.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class PatternFilter extends Element {
  public static final String concept = "jetbrains.mps.gwt.client.structure.PatternFilter";
  public static final String PATH = "path";
  public static final String ATTR = "attr";
  public static final String PATTERN = "pattern";

  public PatternFilter(SNode node) {
    super(node);
  }

  public Path getPath() {
    return (Path) this.getChild(Path.class, PatternFilter.PATH);
  }

  public void setPath(Path node) {
    super.setChild(PatternFilter.PATH, node);
  }

  public int getAttrsCount() {
    return this.getChildCount(PatternFilter.ATTR);
  }

  public Iterator<Attr> attrs() {
    return this.children(Attr.class, PatternFilter.ATTR);
  }

  public List<Attr> getAttrs() {
    return this.getChildren(Attr.class, PatternFilter.ATTR);
  }

  public void addAttr(Attr node) {
    this.addChild(PatternFilter.ATTR, node);
  }

  public void insertAttr(Attr prev, Attr node) {
    this.insertChild(prev, PatternFilter.ATTR, node);
  }

  public int getPatternsCount() {
    return this.getChildCount(PatternFilter.PATTERN);
  }

  public Iterator<Element> patterns() {
    return this.children(Element.class, PatternFilter.PATTERN);
  }

  public List<Element> getPatterns() {
    return this.getChildren(Element.class, PatternFilter.PATTERN);
  }

  public void addPattern(Element node) {
    this.addChild(PatternFilter.PATTERN, node);
  }

  public void insertPattern(Element prev, Element node) {
    this.insertChild(prev, PatternFilter.PATTERN, node);
  }

  public static PatternFilter newInstance(SModel sm, boolean init) {
    return (PatternFilter) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.gwt.client.structure.PatternFilter", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static PatternFilter newInstance(SModel sm) {
    return PatternFilter.newInstance(sm, false);
  }
}
