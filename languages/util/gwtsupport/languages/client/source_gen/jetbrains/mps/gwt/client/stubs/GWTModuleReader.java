package jetbrains.mps.gwt.client.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jdom.Document;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jdom.Element;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jdom.filter.AbstractFilter;
import org.jdom.filter.ElementFilter;
import java.util.List;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.smodel.SNodeId;

public class GWTModuleReader {
  private GWTModuleReader.Resolver gwtstubResolver;
  private GWTModuleReader.Resolver javastubResolver;
  private SNode module;
  private SNode patternFilter;

  public GWTModuleReader(GWTModuleReader.Resolver javaResolver, GWTModuleReader.Resolver gwtResolver) {
    this.javastubResolver = javaResolver;
    this.gwtstubResolver = gwtResolver;
  }

  public void read(SNode gwtmod, Document doc) throws GWTModuleFormatException {
    this.module = gwtmod;
    SLinkOperations.setTarget(this.module, "renameTo", null, true);
    ListSequence.fromList(SLinkOperations.getTargets(this.module, "element", true)).clear();
    Element root = doc.getRootElement();
    if ("module".equals(root.getName())) {
      this.readModule(root);
    } else {
      throw new GWTModuleFormatException("Illegal root element: " + root.getName());
    }
  }

  private void readModule(Element moduleElm) throws GWTModuleFormatException {
    String renameTo = moduleElm.getAttributeValue("rename-to");
    if (renameTo != null) {
      SLinkOperations.setTarget(this.module, "renameTo", SConceptOperations.createNewNode("jetbrains.mps.gwt.client.structure.RenameTo", null), true);
      SPropertyOperations.set(SLinkOperations.getTarget(this.module, "renameTo", true), "value", renameTo);
    }
    for (Element elm : Sequence.fromIterable(this.elements(moduleElm, "inherits", "entry-point", "source", "super-source", "public"))) {
      if ("inherits".equals(elm.getName())) {
        this.readInherits(elm);
      } else if ("entry-point".equals(elm.getName())) {
        this.readEntryPoint(elm);
      } else {
        this.readPatternFilter(elm);
      }
    }
  }

  private void readPatternFilter(Element filterElm) throws GWTModuleFormatException {
    if ("source".equals(filterElm.getName())) {
      this.patternFilter = SConceptOperations.createNewNode("jetbrains.mps.gwt.client.structure.Source", null);
    } else if ("super-source".equals(filterElm.getName())) {
      this.patternFilter = SConceptOperations.createNewNode("jetbrains.mps.gwt.client.structure.SuperSource", null);
    } else if ("public".equals(filterElm.getName())) {
      this.patternFilter = SConceptOperations.createNewNode("jetbrains.mps.gwt.client.structure.Public", null);
    } else {
      throw new GWTModuleFormatException("Unexpected element: " + filterElm.getName());
    }
    String includes = filterElm.getAttributeValue("includes");
    if (includes != null) {
      SNode attr = SLinkOperations.addNewChild(this.patternFilter, "attr", "jetbrains.mps.gwt.client.structure.Includes");
      SNode patt = SLinkOperations.setNewChild(attr, "pattern", "jetbrains.mps.gwt.client.structure.Pattern");
      SPropertyOperations.set(patt, "value", includes);
    }
    String excludes = filterElm.getAttributeValue("excludes");
    if (excludes != null) {
      SNode attr = SLinkOperations.addNewChild(this.patternFilter, "attr", "jetbrains.mps.gwt.client.structure.Excludes");
      SNode patt = SLinkOperations.setNewChild(attr, "pattern", "jetbrains.mps.gwt.client.structure.Pattern");
      SPropertyOperations.set(patt, "value", excludes);
    }
    String defaultExcludes = filterElm.getAttributeValue("defaultexcludes");
    if (defaultExcludes != null) {
      SNode de = SLinkOperations.addNewChild(this.patternFilter, "attr", "jetbrains.mps.gwt.client.structure.DefaultExcludes");
      SPropertyOperations.set(de, "value", "" + ("yes".equals(defaultExcludes) ?
        true :
        false
      ));
    }
    String caseSensitive = filterElm.getAttributeValue("casesensitive");
    if (caseSensitive != null) {
      SNode cs = SLinkOperations.addNewChild(this.patternFilter, "attr", "jetbrains.mps.gwt.client.structure.CaseSensitive");
      SPropertyOperations.set(cs, "value", "" + ("true".equals(caseSensitive) ?
        true :
        false
      ));
    }
    for (Element elm : Sequence.fromIterable(this.elements(filterElm, "include", "exclude"))) {
      this.readPatternHolder(elm);
    }
  }

  private void readPatternHolder(Element patternElm) throws GWTModuleFormatException {
    SNode ph;
    if ("include".equals(patternElm.getName())) {
      ph = SLinkOperations.addNewChild(this.patternFilter, "pattern", "jetbrains.mps.gwt.client.structure.Include");
    } else if ("exclude".equals(patternElm.getName())) {
      ph = SLinkOperations.addNewChild(this.patternFilter, "pattern", "jetbrains.mps.gwt.client.structure.Exclude");
    } else {
      throw new GWTModuleFormatException("Unexpected element: " + patternElm.getName());
    }
    SNode pt = SLinkOperations.setNewChild(ph, "pattern", "jetbrains.mps.gwt.client.structure.Pattern");
    String name = patternElm.getAttributeValue("name");
    if (name != null) {
      SPropertyOperations.set(pt, "value", name);
    }
  }

  private void readInherits(Element inheritsElm) {
    String name = inheritsElm.getAttributeValue("name");
    if (name != null) {
      SNode inherits = SLinkOperations.addNewChild(this.module, "element", "jetbrains.mps.gwt.client.structure.Inherits");
      this.addGWTModuleReference(SLinkOperations.findLinkDeclaration("jetbrains.mps.gwt.client.structure.Inherits", "module"), inherits, name);
    }
  }

  private void readEntryPoint(Element epElm) {
    String cls = epElm.getAttributeValue("class");
    if (cls != null) {
      SNode ep = SLinkOperations.addNewChild(this.module, "element", "jetbrains.mps.gwt.client.structure.EntryPoint");
      this.addClassifierReference(SLinkOperations.findLinkDeclaration("jetbrains.mps.gwt.client.structure.EntryPoint", "entryPoint"), ep, cls);
    }
  }

  private Iterable<Element> elements(Element parent, String name, String... orName) {
    AbstractFilter flt = new ElementFilter(name);
    if (orName != null) {
      for (String or : orName) {
        flt = (AbstractFilter) flt.or(new ElementFilter(or));
      }
    }
    return (List<Element>) parent.getContent(flt);
  }

  private void addGWTModuleReference(SNode link, SNode src, final String fqName) {
    SModelReference trgsmref = this.gwtstubResolver.stubModelReference(namespace(fqName));
    if (SNodeOperations.getModel(src).getSModelReference().equals(trgsmref)) {
      SNode trg = ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(src), "jetbrains.mps.gwt.client.structure.GWTModule")).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode gwtmod) {
          return SPropertyOperations.getString(gwtmod, "name").equals(shortName(fqName));
        }
      });
      src.addReference(SReference.create(SPropertyOperations.getString(link, "role"), src, trg));
    } else {
      // <node> 
      // <node> 
      src.addReference(new DynamicReference(SPropertyOperations.getString(link, "role"), src, trgsmref, shortName(fqName)));
    }
  }

  private void addClassifierReference(SNode link, SNode src, String fqClassName) {
    SModelReference trgsmref = this.javastubResolver.stubModelReference(namespace(fqClassName));
    SNodeOperations.getModel(src).addModelImport(trgsmref, false);
    src.addReference(SReference.create(SPropertyOperations.getString(link, "role"), src, trgsmref, createId(fqClassName)));
  }

  private static String namespace(String fqName) {
    if (fqName == null) {
      return null;
    }
    int idx = fqName.lastIndexOf(".");
    if (idx < 0) {
      return "";
    }
    return fqName.substring(0, idx);
  }

  private static String shortName(String fqName) {
    if (fqName == null) {
      return null;
    }
    int idx = fqName.lastIndexOf(".");
    if (idx < 0) {
      return fqName;
    }
    return fqName.substring(idx + 1);
  }

  public static SNodeId createId(String fqName) {
    return new SNodeId.Foreign(SNodeId.Foreign.ID_PREFIX + shortName(fqName));
  }

  public static interface Resolver {
    public SModelReference stubModelReference(String pkg);
  }
}
