package jetbrains.mps.platform.conf.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.IResolveInfo;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AbstractAction extends ConfigurationXmlNode implements IConfigurationElement, IResolveInfo {
  public static final String concept = "jetbrains.mps.platform.conf.structure.AbstractAction";
  public static final String ID = "id";
  public static final String TEXT = "text";
  public static final String DESCRIPTION = "description";
  public static final String ICON = "icon";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String RESOLVE_INFO = "resolveInfo";
  public static final String POPUP = "popup";
  public static final String ADD_TO_GROUP = "addToGroup";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public AbstractAction(SNode node) {
    super(node);
  }

  public String getId() {
    return this.getProperty(AbstractAction.ID);
  }

  public void setId(String value) {
    this.setProperty(AbstractAction.ID, value);
  }

  public String getText() {
    return this.getProperty(AbstractAction.TEXT);
  }

  public void setText(String value) {
    this.setProperty(AbstractAction.TEXT, value);
  }

  public String getDescription() {
    return this.getProperty(AbstractAction.DESCRIPTION);
  }

  public void setDescription(String value) {
    this.setProperty(AbstractAction.DESCRIPTION, value);
  }

  public String getIcon() {
    return this.getProperty(AbstractAction.ICON);
  }

  public void setIcon(String value) {
    this.setProperty(AbstractAction.ICON, value);
  }

  public String getShortDescription() {
    return this.getProperty(AbstractAction.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(AbstractAction.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(AbstractAction.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(AbstractAction.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(AbstractAction.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(AbstractAction.VIRTUAL_PACKAGE, value);
  }

  public String getResolveInfo() {
    return this.getProperty(AbstractAction.RESOLVE_INFO);
  }

  public void setResolveInfo(String value) {
    this.setProperty(AbstractAction.RESOLVE_INFO, value);
  }

  public boolean getPopup() {
    return this.getBooleanProperty(AbstractAction.POPUP);
  }

  public void setPopup(boolean value) {
    this.setBooleanProperty(AbstractAction.POPUP, value);
  }

  public int getAddToGroupsCount() {
    return this.getChildCount(AbstractAction.ADD_TO_GROUP);
  }

  public Iterator<GroupReference> addToGroups() {
    return this.children(GroupReference.class, AbstractAction.ADD_TO_GROUP);
  }

  public List<GroupReference> getAddToGroups() {
    return this.getChildren(GroupReference.class, AbstractAction.ADD_TO_GROUP);
  }

  public void addAddToGroup(GroupReference node) {
    this.addChild(AbstractAction.ADD_TO_GROUP, node);
  }

  public void insertAddToGroup(GroupReference prev, GroupReference node) {
    this.insertChild(prev, AbstractAction.ADD_TO_GROUP, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(AbstractAction.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, AbstractAction.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, AbstractAction.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(AbstractAction.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, AbstractAction.SMODEL_ATTRIBUTE, node);
  }

  public static AbstractAction newInstance(SModel sm, boolean init) {
    return (AbstractAction) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.platform.conf.structure.AbstractAction", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AbstractAction newInstance(SModel sm) {
    return AbstractAction.newInstance(sm, false);
  }
}
