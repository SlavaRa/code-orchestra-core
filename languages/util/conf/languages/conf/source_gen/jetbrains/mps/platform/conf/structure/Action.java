package jetbrains.mps.platform.conf.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.ClassConcept;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Action extends AbstractAction implements IActionItem {
  public static final String concept = "jetbrains.mps.platform.conf.structure.Action";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String ACTION_CLASS = "actionClass";
  public static final String SHORTCUT = "shortcut";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Action(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(Action.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Action.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Action.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Action.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Action.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Action.VIRTUAL_PACKAGE, value);
  }

  public ClassConcept getActionClass() {
    return (ClassConcept) this.getReferent(ClassConcept.class, Action.ACTION_CLASS);
  }

  public void setActionClass(ClassConcept node) {
    super.setReferent(Action.ACTION_CLASS, node);
  }

  public int getShortcutsCount() {
    return this.getChildCount(Action.SHORTCUT);
  }

  public Iterator<Shortcut> shortcuts() {
    return this.children(Shortcut.class, Action.SHORTCUT);
  }

  public List<Shortcut> getShortcuts() {
    return this.getChildren(Shortcut.class, Action.SHORTCUT);
  }

  public void addShortcut(Shortcut node) {
    this.addChild(Action.SHORTCUT, node);
  }

  public void insertShortcut(Shortcut prev, Shortcut node) {
    this.insertChild(prev, Action.SHORTCUT, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Action.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Action.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Action.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Action.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Action.SMODEL_ATTRIBUTE, node);
  }

  public static Action newInstance(SModel sm, boolean init) {
    return (Action) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.platform.conf.structure.Action", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Action newInstance(SModel sm) {
    return Action.newInstance(sm, false);
  }
}
