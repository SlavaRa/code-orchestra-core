package jetbrains.mps.platform.conf.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class GroupReference extends BaseConcept {
  public static final String concept = "jetbrains.mps.platform.conf.structure.GroupReference";
  public static final String POSITION = "position";
  public static final String GROUP = "group";
  public static final String ANCHOR = "anchor";

  public GroupReference(SNode node) {
    super(node);
  }

  public GroupPosition getPosition() {
    String value = super.getProperty(GroupReference.POSITION);
    return GroupPosition.parseValue(value);
  }

  public void setPosition(GroupPosition value) {
    super.setProperty(GroupReference.POSITION, value.getValueAsString());
  }

  public Group getGroup() {
    return (Group) this.getReferent(Group.class, GroupReference.GROUP);
  }

  public void setGroup(Group node) {
    super.setReferent(GroupReference.GROUP, node);
  }

  public AbstractAction getAnchor() {
    return (AbstractAction) this.getReferent(AbstractAction.class, GroupReference.ANCHOR);
  }

  public void setAnchor(AbstractAction node) {
    super.setReferent(GroupReference.ANCHOR, node);
  }

  public static GroupReference newInstance(SModel sm, boolean init) {
    return (GroupReference) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.platform.conf.structure.GroupReference", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static GroupReference newInstance(SModel sm) {
    return GroupReference.newInstance(sm, false);
  }
}
