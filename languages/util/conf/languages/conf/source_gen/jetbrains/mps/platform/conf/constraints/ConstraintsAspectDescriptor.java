package jetbrains.mps.platform.conf.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;

public class ConstraintsAspectDescriptor implements jetbrains.mps.smodel.runtime.ConstraintsAspectDescriptor {
  private static String[] stringSwitchCases_2qnle6_a0a0a = new String[]{"jetbrains.mps.platform.conf.structure.AbstractAction", "jetbrains.mps.platform.conf.structure.ActionReference", "jetbrains.mps.platform.conf.structure.Actions", "jetbrains.mps.platform.conf.structure.BeanExtension", "jetbrains.mps.platform.conf.structure.BeanExtensionPoint", "jetbrains.mps.platform.conf.structure.ComponentRoot", "jetbrains.mps.platform.conf.structure.Components", "jetbrains.mps.platform.conf.structure.ComponentsRoot", "jetbrains.mps.platform.conf.structure.ConfigurationXmlDocument", "jetbrains.mps.platform.conf.structure.ConfigurationXmlRootNode", "jetbrains.mps.platform.conf.structure.Extension", "jetbrains.mps.platform.conf.structure.ExtensionPoint", "jetbrains.mps.platform.conf.structure.ExtensionPoints", "jetbrains.mps.platform.conf.structure.Extensions", "jetbrains.mps.platform.conf.structure.GroupReference", "jetbrains.mps.platform.conf.structure.InterfaceExtension", "jetbrains.mps.platform.conf.structure.Plugin", "jetbrains.mps.platform.conf.structure.PluginDependency", "jetbrains.mps.platform.conf.structure.RootRoot"};

  public ConstraintsAspectDescriptor() {
  }

  public ConstraintsDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_2qnle6_a0a0a, fqName)) {
      case 4:
        return new BeanExtensionPoint_Constraints();
      case 3:
        return new BeanExtension_Constraints();
      case 6:
        return new Components_Constraints();
      case 12:
        return new ExtensionPoints_Constraints();
      case 13:
        return new Extensions_Constraints();
      case 15:
        return new InterfaceExtension_Constraints();
      case 11:
        return new ExtensionPoint_Constraints();
      case 16:
        return new Plugin_Constraints();
      case 8:
        return new ConfigurationXmlDocument_Constraints();
      case 10:
        return new Extension_Constraints();
      case 17:
        return new PluginDependency_Constraints();
      case 2:
        return new Actions_Constraints();
      case 1:
        return new ActionReference_Constraints();
      case 14:
        return new GroupReference_Constraints();
      case 0:
        return new AbstractAction_Constraints();
      case 9:
        return new ConfigurationXmlRootNode_Constraints();
      case 5:
        return new ComponentRoot_Constraints();
      case 7:
        return new ComponentsRoot_Constraints();
      case 18:
        return new RootRoot_Constraints();
      default:
        // todo: illegal in some cases? 
        return new BaseConstraintsDescriptor(fqName);
    }
  }
}
