package jetbrains.mps.platform.conf.stubs;

/*Generated by MPS */

import jetbrains.mps.stubs.BaseStubModelRootManager;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.stubs.StubLocation;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.stubs.StubSource;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.stubs.util.PathItem;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.stubs.util.StubModelDescriptors;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModelReference;
import java.io.InputStream;
import org.jdom.input.SAXBuilder;
import java.io.IOException;
import org.jdom.JDOMException;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.stubs.BaseStubModelDescriptor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class ConfStubs extends BaseStubModelRootManager {
  public ConfStubs() {
  }

  protected Set<Language> getLanguagesToImport() {
    Set<String> moduleIds = SetSequence.fromSet(new HashSet<String>());

    moduleIds.add("32d0a39c-772f-4490-8142-e50f9a9f19d4");

    Iterable<Language> languages = SetSequence.fromSet(moduleIds).select(new ISelector<String, Language>() {
      public Language select(String it) {
        return (Language) MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString(it));
      }
    });

    Set<Language> result = new HashSet<Language>();
    result.addAll(Sequence.fromIterable(languages).toListSequence());
    return result;
  }

  protected void updateModel(final StubLocation location, final SModel model, final StubSource source) {
    String pkg = model.getSModelFqName().getLongName();
    List<Tuples._3<String, String, SNode>> doclst = ListSequence.fromList(new ArrayList<Tuples._3<String, String, SNode>>());
    SNode sample = SConceptOperations.createNewNode("jetbrains.mps.platform.conf.structure.ConfigurationXmlDocument", null);
    PathItem pi = ConfPathItem.getPathItem(location.getPath());
    for (String docres : ListSequence.fromList(pi.resources(pkg))) {
      SNodeId id = ConfReader.createForeignId(pi.baseName(docres));
      SNode doc = (SNode) model.getNodeById(id);
      if ((doc == null)) {
        doc = SConceptOperations.createNewNode(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.platform.conf.structure.ConfigurationXmlDocument")), sample);
        doc.setId(id);
        SPropertyOperations.set(doc, "name", pi.baseName(docres));
        SModelOperations.addRootNode(model, doc);
      }
      ListSequence.fromList(doclst).addElement(MultiTuple.<String,String,SNode>from(pkg, docres, doc));
    }
    final StubModelDescriptors descs = new StubModelDescriptors(SModelStereotype.getStubStereotypeForId("conf"), ConfStubs.this, location);
    ConfReader reader = new ConfReader(new ConfReader.Resolver() {
      public SModelReference stubModelReference(String pk) {
        return descs.javaStubRef(pk);
      }
    }, new ConfReader.Resolver() {
      public SModelReference stubModelReference(String pk) {
        return descs.smodelRefWithId(pk);
      }
    });
    for (Tuples._3<String, String, SNode> doctuple : ListSequence.fromList(doclst)) {
      InputStream is = null;
      try {
        is = pi.openResource(doctuple._0(), doctuple._1());
        reader.read(doctuple._2(), new SAXBuilder().build(is));
      } catch (IOException e) {
        e.printStackTrace();
      } catch (JDOMException e) {
        e.printStackTrace();
      }
      if (is != null) {
        try {
          is.close();
        } catch (IOException e) {
        }
      }
    }
    SNodeOperations.deleteNode(sample);
  }

  protected Set<BaseStubModelDescriptor> getModelDescriptors(final StubLocation location) {
    return new StubModelDescriptors(SModelStereotype.getStubStereotypeForId("conf"), ConfStubs.this, location).getDescriptors(new _FunctionTypes._return_P1_E0<PathItem, String>() {
      public PathItem invoke(String path) {
        return ConfPathItem.getPathItem(path);
      }
    });
  }

  protected String getSelfModuleId() {
    return "32d0a39c-772f-4490-8142-e50f9a9f19d4";
  }
}
