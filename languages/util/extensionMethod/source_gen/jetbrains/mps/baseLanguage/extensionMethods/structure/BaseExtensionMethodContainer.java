package jetbrains.mps.baseLanguage.extensionMethods.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.GenericDeclaration;
import jetbrains.mps.baseLanguage.structure.IVisible;
import jetbrains.mps.baseLanguage.structure.IMemberContainer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Visibility;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BaseExtensionMethodContainer extends GenericDeclaration implements IVisible, IMemberContainer {
  public static final String concept = "jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String VISIBILITY = "visibility";
  public static final String METHODS = "methods";
  public static final String STATIC_FIELDS = "staticFields";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public BaseExtensionMethodContainer(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(BaseExtensionMethodContainer.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BaseExtensionMethodContainer.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BaseExtensionMethodContainer.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BaseExtensionMethodContainer.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BaseExtensionMethodContainer.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BaseExtensionMethodContainer.VIRTUAL_PACKAGE, value);
  }

  public Visibility getVisibility() {
    return (Visibility) this.getChild(Visibility.class, BaseExtensionMethodContainer.VISIBILITY);
  }

  public void setVisibility(Visibility node) {
    super.setChild(BaseExtensionMethodContainer.VISIBILITY, node);
  }

  public int getMethodsesCount() {
    return this.getChildCount(BaseExtensionMethodContainer.METHODS);
  }

  public Iterator<ExtensionMethodDeclaration> methodses() {
    return this.children(ExtensionMethodDeclaration.class, BaseExtensionMethodContainer.METHODS);
  }

  public List<ExtensionMethodDeclaration> getMethodses() {
    return this.getChildren(ExtensionMethodDeclaration.class, BaseExtensionMethodContainer.METHODS);
  }

  public void addMethods(ExtensionMethodDeclaration node) {
    this.addChild(BaseExtensionMethodContainer.METHODS, node);
  }

  public void insertMethods(ExtensionMethodDeclaration prev, ExtensionMethodDeclaration node) {
    this.insertChild(prev, BaseExtensionMethodContainer.METHODS, node);
  }

  public int getStaticFieldsesCount() {
    return this.getChildCount(BaseExtensionMethodContainer.STATIC_FIELDS);
  }

  public Iterator<ExtensionStaticFieldDeclaration> staticFieldses() {
    return this.children(ExtensionStaticFieldDeclaration.class, BaseExtensionMethodContainer.STATIC_FIELDS);
  }

  public List<ExtensionStaticFieldDeclaration> getStaticFieldses() {
    return this.getChildren(ExtensionStaticFieldDeclaration.class, BaseExtensionMethodContainer.STATIC_FIELDS);
  }

  public void addStaticFields(ExtensionStaticFieldDeclaration node) {
    this.addChild(BaseExtensionMethodContainer.STATIC_FIELDS, node);
  }

  public void insertStaticFields(ExtensionStaticFieldDeclaration prev, ExtensionStaticFieldDeclaration node) {
    this.insertChild(prev, BaseExtensionMethodContainer.STATIC_FIELDS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(BaseExtensionMethodContainer.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, BaseExtensionMethodContainer.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, BaseExtensionMethodContainer.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(BaseExtensionMethodContainer.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, BaseExtensionMethodContainer.SMODEL_ATTRIBUTE, node);
  }

  public static BaseExtensionMethodContainer newInstance(SModel sm, boolean init) {
    return (BaseExtensionMethodContainer) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BaseExtensionMethodContainer newInstance(SModel sm) {
    return BaseExtensionMethodContainer.newInstance(sm, false);
  }
}
