package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class IfCommand extends AbstractCommand implements ICompoundCommand {
  public static final String concept = "jetbrains.mps.bash.structure.IfCommand";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TEST_COMMAND = "testCommand";
  public static final String IF_TRUE = "ifTrue";
  public static final String IF_FALSE = "ifFalse";
  public static final String ELSE_IF = "elseIf";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public IfCommand(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(IfCommand.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(IfCommand.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(IfCommand.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(IfCommand.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(IfCommand.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(IfCommand.VIRTUAL_PACKAGE, value);
  }

  public AbstractCommand getTestCommand() {
    return (AbstractCommand) this.getChild(AbstractCommand.class, IfCommand.TEST_COMMAND);
  }

  public void setTestCommand(AbstractCommand node) {
    super.setChild(IfCommand.TEST_COMMAND, node);
  }

  public InputLines getIfTrue() {
    return (InputLines) this.getChild(InputLines.class, IfCommand.IF_TRUE);
  }

  public void setIfTrue(InputLines node) {
    super.setChild(IfCommand.IF_TRUE, node);
  }

  public InputLines getIfFalse() {
    return (InputLines) this.getChild(InputLines.class, IfCommand.IF_FALSE);
  }

  public void setIfFalse(InputLines node) {
    super.setChild(IfCommand.IF_FALSE, node);
  }

  public int getElseIfsCount() {
    return this.getChildCount(IfCommand.ELSE_IF);
  }

  public Iterator<ElifCommand> elseIfs() {
    return this.children(ElifCommand.class, IfCommand.ELSE_IF);
  }

  public List<ElifCommand> getElseIfs() {
    return this.getChildren(ElifCommand.class, IfCommand.ELSE_IF);
  }

  public void addElseIf(ElifCommand node) {
    this.addChild(IfCommand.ELSE_IF, node);
  }

  public void insertElseIf(ElifCommand prev, ElifCommand node) {
    this.insertChild(prev, IfCommand.ELSE_IF, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(IfCommand.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, IfCommand.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, IfCommand.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(IfCommand.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, IfCommand.SMODEL_ATTRIBUTE, node);
  }

  public static IfCommand newInstance(SModel sm, boolean init) {
    return (IfCommand) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.IfCommand", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static IfCommand newInstance(SModel sm) {
    return IfCommand.newInstance(sm, false);
  }
}
