package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RedirectedCommand extends AbstractCommand {
  public static final String concept = "jetbrains.mps.bash.structure.RedirectedCommand";
  public static final String COMMAND = "command";
  public static final String REDIRECTION = "redirection";

  public RedirectedCommand(SNode node) {
    super(node);
  }

  public AbstractCommand getCommand() {
    return (AbstractCommand) this.getChild(AbstractCommand.class, RedirectedCommand.COMMAND);
  }

  public void setCommand(AbstractCommand node) {
    super.setChild(RedirectedCommand.COMMAND, node);
  }

  public int getRedirectionsCount() {
    return this.getChildCount(RedirectedCommand.REDIRECTION);
  }

  public Iterator<Redirection> redirections() {
    return this.children(Redirection.class, RedirectedCommand.REDIRECTION);
  }

  public List<Redirection> getRedirections() {
    return this.getChildren(Redirection.class, RedirectedCommand.REDIRECTION);
  }

  public void addRedirection(Redirection node) {
    this.addChild(RedirectedCommand.REDIRECTION, node);
  }

  public void insertRedirection(Redirection prev, Redirection node) {
    this.insertChild(prev, RedirectedCommand.REDIRECTION, node);
  }

  public static RedirectedCommand newInstance(SModel sm, boolean init) {
    return (RedirectedCommand) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.RedirectedCommand", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RedirectedCommand newInstance(SModel sm) {
    return RedirectedCommand.newInstance(sm, false);
  }
}
