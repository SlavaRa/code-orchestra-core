package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CombiningConditionalExpression extends ConditionalExpression {
  public static final String concept = "jetbrains.mps.bash.structure.CombiningConditionalExpression";
  public static final String CPR_Sign = "sign";
  public static final String LEFT = "left";
  public static final String RIGHT = "right";

  public CombiningConditionalExpression(SNode node) {
    super(node);
  }

  public ConditionalExpression getLeft() {
    return (ConditionalExpression) this.getChild(ConditionalExpression.class, CombiningConditionalExpression.LEFT);
  }

  public void setLeft(ConditionalExpression node) {
    super.setChild(CombiningConditionalExpression.LEFT, node);
  }

  public ConditionalExpression getRight() {
    return (ConditionalExpression) this.getChild(ConditionalExpression.class, CombiningConditionalExpression.RIGHT);
  }

  public void setRight(ConditionalExpression node) {
    super.setChild(CombiningConditionalExpression.RIGHT, node);
  }

  public static CombiningConditionalExpression newInstance(SModel sm, boolean init) {
    return (CombiningConditionalExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.CombiningConditionalExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CombiningConditionalExpression newInstance(SModel sm) {
    return CombiningConditionalExpression.newInstance(sm, false);
  }
}
