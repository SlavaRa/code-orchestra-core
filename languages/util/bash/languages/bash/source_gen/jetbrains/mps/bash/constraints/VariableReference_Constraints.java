package jetbrains.mps.bash.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.bash.behavior.VariableNameDeclaration_Behavior;

public class VariableReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_3k454j_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:32c4fb44-9e66-4976-aa43-e37da5fe27dd(jetbrains.mps.bash.constraints)", "9034131902193373921");

  public VariableReference_Constraints() {
    super("jetbrains.mps.bash.structure.VariableReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("variable", new BaseReferenceConstraintsDescriptor("variable", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return VariableNameDeclaration_Behavior.getDefinedBeforeNode_9034131902193864152(_context.getEnclosingNode());
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_3k454j_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
