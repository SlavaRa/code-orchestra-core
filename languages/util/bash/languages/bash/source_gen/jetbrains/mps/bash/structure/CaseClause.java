package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CaseClause extends BaseConcept {
  public static final String concept = "jetbrains.mps.bash.structure.CaseClause";
  public static final String COMMAND = "command";
  public static final String TERMINATOR = "terminator";
  public static final String PATTERNS = "patterns";

  public CaseClause(SNode node) {
    super(node);
  }

  public InputLines getCommand() {
    return (InputLines) this.getChild(InputLines.class, CaseClause.COMMAND);
  }

  public void setCommand(InputLines node) {
    super.setChild(CaseClause.COMMAND, node);
  }

  public CaseTerminator getTerminator() {
    return (CaseTerminator) this.getChild(CaseTerminator.class, CaseClause.TERMINATOR);
  }

  public void setTerminator(CaseTerminator node) {
    super.setChild(CaseClause.TERMINATOR, node);
  }

  public int getPatternsesCount() {
    return this.getChildCount(CaseClause.PATTERNS);
  }

  public Iterator<GeneralizedWord> patternses() {
    return this.children(GeneralizedWord.class, CaseClause.PATTERNS);
  }

  public List<GeneralizedWord> getPatternses() {
    return this.getChildren(GeneralizedWord.class, CaseClause.PATTERNS);
  }

  public void addPatterns(GeneralizedWord node) {
    this.addChild(CaseClause.PATTERNS, node);
  }

  public void insertPatterns(GeneralizedWord prev, GeneralizedWord node) {
    this.insertChild(prev, CaseClause.PATTERNS, node);
  }

  public static CaseClause newInstance(SModel sm, boolean init) {
    return (CaseClause) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.CaseClause", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CaseClause newInstance(SModel sm) {
    return CaseClause.newInstance(sm, false);
  }
}
