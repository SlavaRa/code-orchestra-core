package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ForCommand extends AbstractLoopCommand {
  public static final String concept = "jetbrains.mps.bash.structure.ForCommand";
  public static final String ACCORD = "accord";
  public static final String CONDITION = "condition";
  public static final String ITERATION = "iteration";

  public ForCommand(SNode node) {
    super(node);
  }

  public ArithmeticExpression getAccord() {
    return (ArithmeticExpression) this.getChild(ArithmeticExpression.class, ForCommand.ACCORD);
  }

  public void setAccord(ArithmeticExpression node) {
    super.setChild(ForCommand.ACCORD, node);
  }

  public ArithmeticExpression getCondition() {
    return (ArithmeticExpression) this.getChild(ArithmeticExpression.class, ForCommand.CONDITION);
  }

  public void setCondition(ArithmeticExpression node) {
    super.setChild(ForCommand.CONDITION, node);
  }

  public ArithmeticExpression getIteration() {
    return (ArithmeticExpression) this.getChild(ArithmeticExpression.class, ForCommand.ITERATION);
  }

  public void setIteration(ArithmeticExpression node) {
    super.setChild(ForCommand.ITERATION, node);
  }

  public static ForCommand newInstance(SModel sm, boolean init) {
    return (ForCommand) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.ForCommand", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ForCommand newInstance(SModel sm) {
    return ForCommand.newInstance(sm, false);
  }
}
