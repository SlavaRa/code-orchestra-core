package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ArgumentReference extends ExternalOptionReference {
  public static final String concept = "jetbrains.mps.bash.structure.ArgumentReference";
  public static final String ARG = "arg";
  public static final String VALUE = "value";

  public ArgumentReference(SNode node) {
    super(node);
  }

  public Argument getArg() {
    return (Argument) this.getReferent(Argument.class, ArgumentReference.ARG);
  }

  public void setArg(Argument node) {
    super.setReferent(ArgumentReference.ARG, node);
  }

  public GeneralizedWord getValue() {
    return (GeneralizedWord) this.getChild(GeneralizedWord.class, ArgumentReference.VALUE);
  }

  public void setValue(GeneralizedWord node) {
    super.setChild(ArgumentReference.VALUE, node);
  }

  public static ArgumentReference newInstance(SModel sm, boolean init) {
    return (ArgumentReference) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.ArgumentReference", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ArgumentReference newInstance(SModel sm) {
    return ArgumentReference.newInstance(sm, false);
  }
}
