package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ForeachCommand extends AbstractLoopCommand {
  public static final String concept = "jetbrains.mps.bash.structure.ForeachCommand";
  public static final String VARIABLE = "variable";
  public static final String WORD_LIST = "wordList";

  public ForeachCommand(SNode node) {
    super(node);
  }

  public VariableNameDeclaration getVariable() {
    return (VariableNameDeclaration) this.getChild(VariableNameDeclaration.class, ForeachCommand.VARIABLE);
  }

  public void setVariable(VariableNameDeclaration node) {
    super.setChild(ForeachCommand.VARIABLE, node);
  }

  public int getWordListsCount() {
    return this.getChildCount(ForeachCommand.WORD_LIST);
  }

  public Iterator<WordList> wordLists() {
    return this.children(WordList.class, ForeachCommand.WORD_LIST);
  }

  public List<WordList> getWordLists() {
    return this.getChildren(WordList.class, ForeachCommand.WORD_LIST);
  }

  public void addWordList(WordList node) {
    this.addChild(ForeachCommand.WORD_LIST, node);
  }

  public void insertWordList(WordList prev, WordList node) {
    this.insertChild(prev, ForeachCommand.WORD_LIST, node);
  }

  public static ForeachCommand newInstance(SModel sm, boolean init) {
    return (ForeachCommand) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.ForeachCommand", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ForeachCommand newInstance(SModel sm) {
    return ForeachCommand.newInstance(sm, false);
  }
}
