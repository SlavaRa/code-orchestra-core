package jetbrains.mps.bash.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.bash.behavior.SimpleWord_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class SimpleWord_Constraints extends BaseConstraintsDescriptor {
  public SimpleWord_Constraints() {
    super("jetbrains.mps.bash.structure.SimpleWord");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("word", new BasePropertyConstraintsDescriptor("word", this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }

      @Override
      public void setValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "word";
        if (!(SimpleWord_Behavior.call_splitValue_3147078024759753598(node, (SPropertyOperations.getString(propertyValue)), scope))) {
          SPropertyOperations.set(node, "word", (SPropertyOperations.getString(propertyValue)));
        }
      }

      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "word";
        if ((SPropertyOperations.getString(propertyValue)).contains("#")) {
          return false;
        }
        if ((SPropertyOperations.getString(propertyValue)).contains(";")) {
          return false;
        }
        return true;
      }
    });
    return properties;
  }
}
