package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BinaryConditionalExpression extends ConditionalExpression {
  public static final String concept = "jetbrains.mps.bash.structure.BinaryConditionalExpression";
  public static final String CPR_Op = "op";
  public static final String LEFT = "left";
  public static final String RIGHT = "right";

  public BinaryConditionalExpression(SNode node) {
    super(node);
  }

  public GeneralizedWord getLeft() {
    return (GeneralizedWord) this.getChild(GeneralizedWord.class, BinaryConditionalExpression.LEFT);
  }

  public void setLeft(GeneralizedWord node) {
    super.setChild(BinaryConditionalExpression.LEFT, node);
  }

  public GeneralizedWord getRight() {
    return (GeneralizedWord) this.getChild(GeneralizedWord.class, BinaryConditionalExpression.RIGHT);
  }

  public void setRight(GeneralizedWord node) {
    super.setChild(BinaryConditionalExpression.RIGHT, node);
  }

  public static BinaryConditionalExpression newInstance(SModel sm, boolean init) {
    return (BinaryConditionalExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.BinaryConditionalExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BinaryConditionalExpression newInstance(SModel sm) {
    return BinaryConditionalExpression.newInstance(sm, false);
  }
}
