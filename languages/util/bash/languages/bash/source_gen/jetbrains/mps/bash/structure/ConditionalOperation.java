package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ConditionalOperation extends ArithmeticExpression {
  public static final String concept = "jetbrains.mps.bash.structure.ConditionalOperation";
  public static final String TEST_EXPRESSION = "testExpression";
  public static final String IF_TRUE = "ifTrue";
  public static final String IF_FALSE = "ifFalse";

  public ConditionalOperation(SNode node) {
    super(node);
  }

  public ArithmeticExpression getTestExpression() {
    return (ArithmeticExpression) this.getChild(ArithmeticExpression.class, ConditionalOperation.TEST_EXPRESSION);
  }

  public void setTestExpression(ArithmeticExpression node) {
    super.setChild(ConditionalOperation.TEST_EXPRESSION, node);
  }

  public ArithmeticExpression getIfTrue() {
    return (ArithmeticExpression) this.getChild(ArithmeticExpression.class, ConditionalOperation.IF_TRUE);
  }

  public void setIfTrue(ArithmeticExpression node) {
    super.setChild(ConditionalOperation.IF_TRUE, node);
  }

  public ArithmeticExpression getIfFalse() {
    return (ArithmeticExpression) this.getChild(ArithmeticExpression.class, ConditionalOperation.IF_FALSE);
  }

  public void setIfFalse(ArithmeticExpression node) {
    super.setChild(ConditionalOperation.IF_FALSE, node);
  }

  public static ConditionalOperation newInstance(SModel sm, boolean init) {
    return (ConditionalOperation) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.ConditionalOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ConditionalOperation newInstance(SModel sm) {
    return ConditionalOperation.newInstance(sm, false);
  }
}
