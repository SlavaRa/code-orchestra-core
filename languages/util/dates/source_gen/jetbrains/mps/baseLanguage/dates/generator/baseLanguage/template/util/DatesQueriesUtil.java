package jetbrains.mps.baseLanguage.dates.generator.baseLanguage.template.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;

public class DatesQueriesUtil {
  public static final String FORMAL_TABLES_CONTAINER = "_FormatTables";

  public static String getFQName(SNode table) {
    return NameUtil.nodeFQName(table);
  }

  public static SNode findEnclosingTableClass(SNode node, TemplateQueryContext genctx) {
    return findEnclosingTableClass2(node, genctx);
  }

  public static SNode findEnclosingTableClass2(SNode node, TemplateQueryContext genctx) {
    SNode table = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.dates.structure.DateFormatsTable", true, false);
    return genctx.getOutputNodeByInputNodeAndMappingLabel(table, "FormatTableClass");
  }

  public static SNode findFormattersFieldDeclaration(SNode node, TemplateQueryContext genctx) {
    SNode clazz = findEnclosingTableClass2(node, genctx);
    SNode result = null;
    for (SNode sfd : SLinkOperations.getTargets(clazz, "staticField", true)) {
      if (SPropertyOperations.hasValue(sfd, "name", "formatters")) {
        result = sfd;
        break;
      }
    }
    if (result == null) {
      genctx.showErrorMessage(node, "Can't find formatters field declaration");
    }
    return result;
  }

  public static String getCompareType(SNode operation) {
    String result = null;
    if (SConceptPropertyOperations.getString(operation, "alias").equals("==")) {
      result = "EQ";
    }
    if (SConceptPropertyOperations.getString(operation, "alias").equals("!=")) {
      result = "NE";
    }
    if (SConceptPropertyOperations.getString(operation, "alias").equals(">")) {
      result = "GT";
    }
    if (SConceptPropertyOperations.getString(operation, "alias").equals("<")) {
      result = "LT";
    }
    if (SConceptPropertyOperations.getString(operation, "alias").equals(">=")) {
      result = "GE";
    }
    if (SConceptPropertyOperations.getString(operation, "alias").equals("<=")) {
      result = "LE";
    }
    return result;
  }
}
