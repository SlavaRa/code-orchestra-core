package jetbrains.mps.baseLanguage.dates.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DateTimeOffsetFormatToken extends FormatToken {
  public static final String concept = "jetbrains.mps.baseLanguage.dates.structure.DateTimeOffsetFormatToken";
  public static final String REFERENCE_TIME = "referenceTime";
  public static final String DURATION_TYPE_REFERENCE = "durationTypeReference";

  public DateTimeOffsetFormatToken(SNode node) {
    super(node);
  }

  public Expression getReferenceTime() {
    return (Expression) this.getChild(Expression.class, DateTimeOffsetFormatToken.REFERENCE_TIME);
  }

  public void setReferenceTime(Expression node) {
    super.setChild(DateTimeOffsetFormatToken.REFERENCE_TIME, node);
  }

  public int getDurationTypeReferencesCount() {
    return this.getChildCount(DateTimeOffsetFormatToken.DURATION_TYPE_REFERENCE);
  }

  public Iterator<DurationTypeReference> durationTypeReferences() {
    return this.children(DurationTypeReference.class, DateTimeOffsetFormatToken.DURATION_TYPE_REFERENCE);
  }

  public List<DurationTypeReference> getDurationTypeReferences() {
    return this.getChildren(DurationTypeReference.class, DateTimeOffsetFormatToken.DURATION_TYPE_REFERENCE);
  }

  public void addDurationTypeReference(DurationTypeReference node) {
    this.addChild(DateTimeOffsetFormatToken.DURATION_TYPE_REFERENCE, node);
  }

  public void insertDurationTypeReference(DurationTypeReference prev, DurationTypeReference node) {
    this.insertChild(prev, DateTimeOffsetFormatToken.DURATION_TYPE_REFERENCE, node);
  }

  public static DateTimeOffsetFormatToken newInstance(SModel sm, boolean init) {
    return (DateTimeOffsetFormatToken) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.dates.structure.DateTimeOffsetFormatToken", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DateTimeOffsetFormatToken newInstance(SModel sm) {
    return DateTimeOffsetFormatToken.newInstance(sm, false);
  }
}
