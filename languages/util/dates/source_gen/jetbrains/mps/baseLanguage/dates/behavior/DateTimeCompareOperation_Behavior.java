package jetbrains.mps.baseLanguage.dates.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class DateTimeCompareOperation_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean call_hasMillisPrecision_1213877526386(SNode thisNode) {
    return DateTimeCompareOperation_Behavior.call_getDatetimeProperty_1213877526399(thisNode) == ListSequence.fromList(SLinkOperations.getConceptLinkTargets(thisNode, "defaultDatetimeProperty")).first();
  }

  public static SNode call_getDatetimeProperty_1213877526399(SNode thisNode) {
    SNode property = SLinkOperations.getTarget(thisNode, "datetimeProperty", false);
    if ((property == null)) {
      property = ListSequence.fromList(SLinkOperations.getConceptLinkTargets(thisNode, "defaultDatetimeProperty")).first();
    }
    return property;
  }

  public static boolean call_isEQ_1213877526423(SNode thisNode) {
    return SPropertyOperations.hasValue(thisNode, "compareType", "datetime equals", "datetime equals");
  }

  public static boolean call_isNE_1213877526433(SNode thisNode) {
    return SPropertyOperations.hasValue(thisNode, "compareType", "datetime not equals", "datetime equals");
  }

  public static boolean call_isLT_1213877526443(SNode thisNode) {
    return SPropertyOperations.hasValue(thisNode, "compareType", "datetime less", "datetime equals");
  }

  public static boolean call_isGT_1213877526453(SNode thisNode) {
    return SPropertyOperations.hasValue(thisNode, "compareType", "datetime greater", "datetime equals");
  }

  public static boolean call_isLE_1213877526463(SNode thisNode) {
    return SPropertyOperations.hasValue(thisNode, "compareType", "datetime less or equals", "datetime equals");
  }

  public static boolean call_isGE_1213877526473(SNode thisNode) {
    return SPropertyOperations.hasValue(thisNode, "compareType", "datetime greater or equals", "datetime equals");
  }
}
