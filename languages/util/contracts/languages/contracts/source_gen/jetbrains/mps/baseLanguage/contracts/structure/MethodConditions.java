package jetbrains.mps.baseLanguage.contracts.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.NodeAttribute;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MethodConditions extends NodeAttribute {
  public static final String concept = "jetbrains.mps.baseLanguage.contracts.structure.MethodConditions";
  public static final String CONDITION = "condition";

  public MethodConditions(SNode node) {
    super(node);
  }

  public int getConditionsCount() {
    return this.getChildCount(MethodConditions.CONDITION);
  }

  public Iterator<Condition> conditions() {
    return this.children(Condition.class, MethodConditions.CONDITION);
  }

  public List<Condition> getConditions() {
    return this.getChildren(Condition.class, MethodConditions.CONDITION);
  }

  public void addCondition(Condition node) {
    this.addChild(MethodConditions.CONDITION, node);
  }

  public void insertCondition(Condition prev, Condition node) {
    this.insertChild(prev, MethodConditions.CONDITION, node);
  }

  public static MethodConditions newInstance(SModel sm, boolean init) {
    return (MethodConditions) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.contracts.structure.MethodConditions", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MethodConditions newInstance(SModel sm) {
    return MethodConditions.newInstance(sm, false);
  }
}
