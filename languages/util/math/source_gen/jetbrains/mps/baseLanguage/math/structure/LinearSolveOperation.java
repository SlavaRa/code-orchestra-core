package jetbrains.mps.baseLanguage.math.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.baseLanguage.structure.Type;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class LinearSolveOperation extends LocalVariableDeclaration {
  public static final String concept = "jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation";
  public static final String MATRIX = "matrix";
  public static final String VECTOR = "vector";
  public static final String CONTEXT = "context";

  public LinearSolveOperation(SNode node) {
    super(node);
  }

  public Expression getMatrix() {
    return (Expression) this.getChild(Expression.class, LinearSolveOperation.MATRIX);
  }

  public void setMatrix(Expression node) {
    super.setChild(LinearSolveOperation.MATRIX, node);
  }

  public Expression getVector() {
    return (Expression) this.getChild(Expression.class, LinearSolveOperation.VECTOR);
  }

  public void setVector(Expression node) {
    super.setChild(LinearSolveOperation.VECTOR, node);
  }

  public MathContext getContext() {
    return (MathContext) this.getChild(MathContext.class, LinearSolveOperation.CONTEXT);
  }

  public void setContext(MathContext node) {
    super.setChild(LinearSolveOperation.CONTEXT, node);
  }

  public Type getType_M() {
    return this.ensureAdapter(Type.class, "type", this.getType());
  }

  public void setType_M(Type node) {
    this.setType(node);
  }

  public static LinearSolveOperation newInstance(SModel sm, boolean init) {
    return (LinearSolveOperation) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static LinearSolveOperation newInstance(SModel sm) {
    return LinearSolveOperation.newInstance(sm, false);
  }
}
