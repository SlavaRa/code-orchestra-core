package jetbrains.mps.baseLanguage.math.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public enum CastTargetDescriptor {
  unknown("unknown", 0),
  primitive__biginteger("primitive->biginteger", 1),
  primitive__complex("primitive->complex", 2),
  double__bigdecimal("double->bigdecimal", 3),
  biginteger__bigdecimal("biginteger->bigdecimal", 4),
  double__bigcomplex("double->bigcomplex", 5),
  biginteger__bigcomplex("biginteger->bigcomplex", 6),
  bigdecimal__bigcomplex("bigdecimal->bigcomplex", 7),
  complex__bigcomplex("complex->bigcomplex", 8),
  _____matrix_integer_("...->matrix<integer>", 9),
  _____matrix_long_("...->matrix<long>", 10),
  _____matrix_float_("...->matrix<float>", 11),
  _____matrix_double_("...->matrix<double>", 12),
  _____matrix_biginteger_("...->matrix<biginteger>", 13),
  _____matrix_bigdecimal_("...->matrix<bigdecimal>", 14),
  _____matrix_complex_("...->matrix<complex>", 15),
  _____matrix_bigcomplex_("...->matrix<bigcomplex>", 16);

  private String myName;
  private int myValue;

  CastTargetDescriptor(String name, int value) {
    this.myName = name;
    this.myValue = value;
  }

  public String getName() {
    return this.myName;
  }

  public String getValueAsString() {
    return "" + this.myValue;
  }

  public int getValue() {
    return this.myValue;
  }

  public static List<CastTargetDescriptor> getConstants() {
    List<CastTargetDescriptor> list = ListSequence.fromList(new LinkedList<CastTargetDescriptor>());
    ListSequence.fromList(list).addElement(CastTargetDescriptor.unknown);
    ListSequence.fromList(list).addElement(CastTargetDescriptor.primitive__biginteger);
    ListSequence.fromList(list).addElement(CastTargetDescriptor.primitive__complex);
    ListSequence.fromList(list).addElement(CastTargetDescriptor.double__bigdecimal);
    ListSequence.fromList(list).addElement(CastTargetDescriptor.biginteger__bigdecimal);
    ListSequence.fromList(list).addElement(CastTargetDescriptor.double__bigcomplex);
    ListSequence.fromList(list).addElement(CastTargetDescriptor.biginteger__bigcomplex);
    ListSequence.fromList(list).addElement(CastTargetDescriptor.bigdecimal__bigcomplex);
    ListSequence.fromList(list).addElement(CastTargetDescriptor.complex__bigcomplex);
    ListSequence.fromList(list).addElement(CastTargetDescriptor._____matrix_integer_);
    ListSequence.fromList(list).addElement(CastTargetDescriptor._____matrix_long_);
    ListSequence.fromList(list).addElement(CastTargetDescriptor._____matrix_float_);
    ListSequence.fromList(list).addElement(CastTargetDescriptor._____matrix_double_);
    ListSequence.fromList(list).addElement(CastTargetDescriptor._____matrix_biginteger_);
    ListSequence.fromList(list).addElement(CastTargetDescriptor._____matrix_bigdecimal_);
    ListSequence.fromList(list).addElement(CastTargetDescriptor._____matrix_complex_);
    ListSequence.fromList(list).addElement(CastTargetDescriptor._____matrix_bigcomplex_);
    return list;
  }

  public static CastTargetDescriptor getDefault() {
    return CastTargetDescriptor.primitive__biginteger;
  }

  public static CastTargetDescriptor parseValue(String value) {
    if (value == null) {
      return CastTargetDescriptor.getDefault();
    }
    if (value.equals(CastTargetDescriptor.unknown.getValueAsString())) {
      return CastTargetDescriptor.unknown;
    }
    if (value.equals(CastTargetDescriptor.primitive__biginteger.getValueAsString())) {
      return CastTargetDescriptor.primitive__biginteger;
    }
    if (value.equals(CastTargetDescriptor.primitive__complex.getValueAsString())) {
      return CastTargetDescriptor.primitive__complex;
    }
    if (value.equals(CastTargetDescriptor.double__bigdecimal.getValueAsString())) {
      return CastTargetDescriptor.double__bigdecimal;
    }
    if (value.equals(CastTargetDescriptor.biginteger__bigdecimal.getValueAsString())) {
      return CastTargetDescriptor.biginteger__bigdecimal;
    }
    if (value.equals(CastTargetDescriptor.double__bigcomplex.getValueAsString())) {
      return CastTargetDescriptor.double__bigcomplex;
    }
    if (value.equals(CastTargetDescriptor.biginteger__bigcomplex.getValueAsString())) {
      return CastTargetDescriptor.biginteger__bigcomplex;
    }
    if (value.equals(CastTargetDescriptor.bigdecimal__bigcomplex.getValueAsString())) {
      return CastTargetDescriptor.bigdecimal__bigcomplex;
    }
    if (value.equals(CastTargetDescriptor.complex__bigcomplex.getValueAsString())) {
      return CastTargetDescriptor.complex__bigcomplex;
    }
    if (value.equals(CastTargetDescriptor._____matrix_integer_.getValueAsString())) {
      return CastTargetDescriptor._____matrix_integer_;
    }
    if (value.equals(CastTargetDescriptor._____matrix_long_.getValueAsString())) {
      return CastTargetDescriptor._____matrix_long_;
    }
    if (value.equals(CastTargetDescriptor._____matrix_float_.getValueAsString())) {
      return CastTargetDescriptor._____matrix_float_;
    }
    if (value.equals(CastTargetDescriptor._____matrix_double_.getValueAsString())) {
      return CastTargetDescriptor._____matrix_double_;
    }
    if (value.equals(CastTargetDescriptor._____matrix_biginteger_.getValueAsString())) {
      return CastTargetDescriptor._____matrix_biginteger_;
    }
    if (value.equals(CastTargetDescriptor._____matrix_bigdecimal_.getValueAsString())) {
      return CastTargetDescriptor._____matrix_bigdecimal_;
    }
    if (value.equals(CastTargetDescriptor._____matrix_complex_.getValueAsString())) {
      return CastTargetDescriptor._____matrix_complex_;
    }
    if (value.equals(CastTargetDescriptor._____matrix_bigcomplex_.getValueAsString())) {
      return CastTargetDescriptor._____matrix_bigcomplex_;
    }
    return CastTargetDescriptor.getDefault();
  }
}
