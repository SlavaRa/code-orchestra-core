package jetbrains.mps.baseLanguage.math.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DivExpressionFraction extends Expression {
  public static final String concept = "jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction";
  public static final String NUMERATOR = "numerator";
  public static final String DENOMINATOR = "denominator";

  public DivExpressionFraction(SNode node) {
    super(node);
  }

  public Expression getNumerator() {
    return (Expression) this.getChild(Expression.class, DivExpressionFraction.NUMERATOR);
  }

  public void setNumerator(Expression node) {
    super.setChild(DivExpressionFraction.NUMERATOR, node);
  }

  public Expression getDenominator() {
    return (Expression) this.getChild(Expression.class, DivExpressionFraction.DENOMINATOR);
  }

  public void setDenominator(Expression node) {
    super.setChild(DivExpressionFraction.DENOMINATOR, node);
  }

  public static DivExpressionFraction newInstance(SModel sm, boolean init) {
    return (DivExpressionFraction) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DivExpressionFraction newInstance(SModel sm) {
    return DivExpressionFraction.newInstance(sm, false);
  }
}
