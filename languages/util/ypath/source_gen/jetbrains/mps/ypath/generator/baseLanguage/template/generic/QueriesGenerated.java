package jetbrains.mps.ypath.generator.baseLanguage.template.generic;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.ypath.behavior.TreePathOperationExpression_Behavior;
import jetbrains.mps.ypath.behavior.TreePathAdapterExpression_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ypath.runtime.TraversalAxis;
import jetbrains.mps.ypath.behavior.IGenericFeature_Behavior;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.ypath.actions.TraversalAxisUtil;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.ypath.behavior.ITreePathExpression_Behavior;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.ypath.behavior.IFeature_Behavior;
import jetbrains.mps.ypath.generator.baseLanguage.template.helper.OperationsUtil;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.generator.template.MapSrcMacroContext;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.template.TemplateQueryContext;

public class QueriesGenerated {
  public static boolean baseMappingRule_Condition_9219030551129101523(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return TreePathOperationExpression_Behavior.call_isGeneric_1213877409257(_context.getNode());
  }

  public static boolean baseMappingRule_Condition_1196100060391(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return TreePathAdapterExpression_Behavior.call_isGeneric_1213877411663(_context.getNode());
  }

  public static boolean baseMappingRule_Condition_1199882955496(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "statement", true)).count() == 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "statement", true)).first(), "jetbrains.mps.baseLanguage.structure.WhileStatement") && "void".equals(SPropertyOperations.getString(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "statement", true)).first(), "jetbrains.mps.baseLanguage.structure.WhileStatement"), "label"));
  }

  public static boolean baseMappingRule_Condition_1196091747822(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "operand", true), "jetbrains.mps.ypath.structure.TreePathOperationExpression"));
  }

  public static boolean baseMappingRule_Condition_1196092164894(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "operand", true), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
  }

  public static boolean baseMappingRule_Condition_1196092584522(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "operation", true), "jetbrains.mps.ypath.structure.IterateOperation") && TreePathOperationExpression_Behavior.call_isGeneric_1213877409257(_context.getNode());
  }

  public static boolean baseMappingRule_Condition_1200060681348(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "operation", true), "jetbrains.mps.ypath.structure.IterateOperation") && TreePathOperationExpression_Behavior.call_isGeneric_1213877409257(_context.getNode());
  }

  public static boolean baseMappingRule_Condition_1199729133010(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    // children 
    return TraversalAxis.CHILDREN == TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
  }

  public static boolean baseMappingRule_Condition_1199798796256(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    // descendants 
    TraversalAxis axis = TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
    switch (axis) {
      case DESCENDANTS:
      case SELF_DESCENDANTS:
      case ANCESTORS:
      case SELF_ANCESTORS:
        return true;
      default:
        return false;
    }
  }

  public static boolean baseMappingRule_Condition_1199813378575(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    // siblings 
    TraversalAxis axis = TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
    switch (axis) {
      case FOLLOWING_SIBLINGS:
      case SELF_FOLLOWING_SIBLINGS:
      case PRECEDING_SIBLINGS:
      case PRECEDING_SIBLINGS_SELF:
        return true;
      default:
        return false;
    }
  }

  public static boolean baseMappingRule_Condition_1199997838698(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    // children 
    TraversalAxis axis = TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
    switch (axis) {
      case CHILDREN:
        return (SLinkOperations.getTarget(_context.getNode(), "usedFeature", false) != null) && IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true));
      default:
        return false;
    }
  }

  public static boolean baseMappingRule_Condition_1200052661742(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    // children 
    TraversalAxis axis = TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
    switch (axis) {
      case CHILDREN:
        return (SLinkOperations.getTarget(_context.getNode(), "usedFeature", false) == null) || !(IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true)));
      default:
        return false;
    }
  }

  public static boolean baseMappingRule_Condition_1199997838710(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    // descendants 
    TraversalAxis axis = TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
    switch (axis) {
      case DESCENDANTS:
      case SELF_DESCENDANTS:
      case ANCESTORS:
      case SELF_ANCESTORS:
        return true;
      default:
        return false;
    }
  }

  public static boolean baseMappingRule_Condition_1199997838743(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    // siblings 
    TraversalAxis axis = TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
    switch (axis) {
      case FOLLOWING_SIBLINGS:
      case SELF_FOLLOWING_SIBLINGS:
      case PRECEDING_SIBLINGS:
      case PRECEDING_SIBLINGS_SELF:
        return true;
      default:
        return false;
    }
  }

  public static Object propertyMacro_GetPropertyValue_1225096838244(final IOperationContext operationContext, final PropertyMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return (TraversalAxisUtil.isSelfFirst(axis) ?
      "closure" :
      "parents"
    );
  }

  public static Object propertyMacro_GetPropertyValue_1225096838430(final IOperationContext operationContext, final PropertyMacroContext _context) {
    TraversalAxis axis = TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
    return (TraversalAxisUtil.isSelfFirst(axis) ?
      "closure" :
      "void"
    );
  }

  public static Object propertyMacro_GetPropertyValue_1225096837241(final IOperationContext operationContext, final PropertyMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return (TraversalAxisUtil.isSelfFirst(axis) ?
      "closure" :
      "parents"
    );
  }

  public static Object propertyMacro_GetPropertyValue_1225096837453(final IOperationContext operationContext, final PropertyMacroContext _context) {
    TraversalAxis axis = TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
    return (TraversalAxisUtil.isSelfFirst(axis) ?
      "closure" :
      "void"
    );
  }

  public static boolean ifMacro_Condition_1225096843189(final IOperationContext operationContext, final IfMacroContext _context) {
    return TraversalAxisUtil.isIncludingSelf(TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS")));
  }

  public static boolean ifMacro_Condition_1225096837623(final IOperationContext operationContext, final IfMacroContext _context) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true));
  }

  public static boolean ifMacro_Condition_1225096837710(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true)));
  }

  public static boolean ifMacro_Condition_1225096843567(final IOperationContext operationContext, final IfMacroContext _context) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true));
  }

  public static boolean ifMacro_Condition_1225096837822(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true)));
  }

  public static boolean ifMacro_Condition_1225096838019(final IOperationContext operationContext, final IfMacroContext _context) {
    return TraversalAxisUtil.isSelfFirst(TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS")));
  }

  public static boolean ifMacro_Condition_1225096843364(final IOperationContext operationContext, final IfMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return TraversalAxisUtil.isIncludingSelf(axis);
  }

  public static boolean ifMacro_Condition_1225096838212(final IOperationContext operationContext, final IfMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return TraversalAxisUtil.isSelfFirst(axis);
  }

  public static boolean ifMacro_Condition_1225096838228(final IOperationContext operationContext, final IfMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return !(TraversalAxisUtil.isSelfFirst(axis));
  }

  public static boolean ifMacro_Condition_1225096838267(final IOperationContext operationContext, final IfMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return TraversalAxisUtil.isSelfFirst(axis);
  }

  public static boolean ifMacro_Condition_1225096843293(final IOperationContext operationContext, final IfMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return !(TraversalAxisUtil.isSelfFirst(axis));
  }

  public static boolean ifMacro_Condition_1225096843486(final IOperationContext operationContext, final IfMacroContext _context) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true));
  }

  public static boolean ifMacro_Condition_1465573729715750577(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true)));
  }

  public static boolean ifMacro_Condition_1225096836921(final IOperationContext operationContext, final IfMacroContext _context) {
    return false && !(IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true)));
  }

  public static boolean ifMacro_Condition_1225096837067(final IOperationContext operationContext, final IfMacroContext _context) {
    return TraversalAxisUtil.isSelfFirst(TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS")));
  }

  public static boolean ifMacro_Condition_1225096843245(final IOperationContext operationContext, final IfMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return TraversalAxisUtil.isIncludingSelf(axis);
  }

  public static boolean ifMacro_Condition_1225096837209(final IOperationContext operationContext, final IfMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return TraversalAxisUtil.isSelfFirst(axis);
  }

  public static boolean ifMacro_Condition_1225096837225(final IOperationContext operationContext, final IfMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return !(TraversalAxisUtil.isSelfFirst(axis));
  }

  public static boolean ifMacro_Condition_1225096837264(final IOperationContext operationContext, final IfMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return TraversalAxisUtil.isSelfFirst(axis);
  }

  public static boolean ifMacro_Condition_1225096843390(final IOperationContext operationContext, final IfMacroContext _context) {
    TraversalAxis axis = (TraversalAxis) _context.getTransientObject("traversal_axis");
    return !(TraversalAxisUtil.isSelfFirst(axis));
  }

  public static boolean ifMacro_Condition_1225096843272(final IOperationContext operationContext, final IfMacroContext _context) {
    return TraversalAxisUtil.isIncludingSelf(TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS")));
  }

  public static boolean ifMacro_Condition_1225096836550(final IOperationContext operationContext, final IfMacroContext _context) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true));
  }

  public static boolean ifMacro_Condition_1225096836758(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1213877249147(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SLinkOperations.getTarget(_context.getNode(), "paramObject", true)));
  }

  public static SNode sourceNodeQuery_1196100177621(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1199883266471(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "statement", true)).first(), "jetbrains.mps.baseLanguage.structure.WhileStatement"), "body", true);
  }

  public static SNode sourceNodeQuery_1195737098123(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_1196092774624(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "operand", true);
  }

  public static SNode sourceNodeQuery_1225096837899(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "operation", true);
  }

  public static SNode sourceNodeQuery_1200090439933(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "operation", true);
  }

  public static SNode sourceNodeQuery_1225096837516(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(ITreePathExpression_Behavior.call_getTreePath_1213877496973(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression", false, false)), "treePathType", true), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1225096837598(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false)), "jetbrains.mps.ypath.structure.TreePath"), "treePathType", true), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1225096838341(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode op = (SNode) _context.getTransientObject("siblings_operation");
    return SLinkOperations.getTarget(SLinkOperations.getTarget(ITreePathExpression_Behavior.call_getTreePath_1213877496973(SNodeOperations.getAncestor(op, "jetbrains.mps.ypath.structure.TreePathOperationExpression", false, false)), "treePathType", true), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1225096838406(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode op = (SNode) _context.getTransientObject("siblings_operation");
    return SLinkOperations.getTarget(SLinkOperations.getTarget(ITreePathExpression_Behavior.call_getTreePath_1213877496973(SNodeOperations.getAncestor(op, "jetbrains.mps.ypath.structure.TreePathOperationExpression", false, false)), "treePathType", true), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1200052439810(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode expression = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.ypath.structure.TreePathOperationExpression"), "operand", true);
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(expression), "jetbrains.mps.ypath.structure.TreePathType"), "nodeType", true);
  }

  public static SNode sourceNodeQuery_696966808743886516(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return IFeature_Behavior.call_getTargetType_1213877499617(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false));
  }

  public static SNode sourceNodeQuery_1225096836804(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return TypeChecker.getInstance().getTypeOf(OperationsUtil.unwrapExpression(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.ypath.structure.TreePathOperationExpression"), "operand", true)));
  }

  public static SNode sourceNodeQuery_1225096836818(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return OperationsUtil.unwrapExpression(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.ypath.structure.TreePathOperationExpression"), "operand", true));
  }

  public static SNode sourceNodeQuery_696966808743920694(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return IFeature_Behavior.call_getTargetType_1213877499617(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false));
  }

  public static SNode sourceNodeQuery_1225096837038(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return TypeChecker.getInstance().getTypeOf(OperationsUtil.unwrapExpression(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.ypath.structure.TreePathOperationExpression"), "operand", true)));
  }

  public static SNode sourceNodeQuery_1225096837052(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return OperationsUtil.unwrapExpression(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.ypath.structure.TreePathOperationExpression"), "operand", true));
  }

  public static SNode sourceNodeQuery_696966808743920714(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return IFeature_Behavior.call_getTargetType_1213877499617(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false));
  }

  public static SNode sourceNodeQuery_1225096836323(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return TypeChecker.getInstance().getTypeOf(OperationsUtil.unwrapExpression(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.ypath.structure.TreePathOperationExpression"), "operand", true)));
  }

  public static SNode sourceNodeQuery_1225096836337(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return OperationsUtil.unwrapExpression(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.ypath.structure.TreePathOperationExpression"), "operand", true));
  }

  public static SNode sourceNodeQuery_1225096836365(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false)), "jetbrains.mps.ypath.structure.TreePath"), "treePathType", true), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1225096836438(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false)), "jetbrains.mps.ypath.structure.TreePath"), "treePathType", true), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1225096836460(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false)), "jetbrains.mps.ypath.structure.TreePath"), "treePathType", true), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1225096836569(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false)), "jetbrains.mps.ypath.structure.TreePath"), "treePathType", true), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1225096836586(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false)), "jetbrains.mps.ypath.structure.TreePath"), "treePathType", true), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1225096836668(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false)), "jetbrains.mps.ypath.structure.TreePath"), "treePathType", true), "nodeType", true);
  }

  public static Iterable sourceNodesQuery_1225096837617(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return OperationsUtil.substituteApplicableOperations(_context.getNode());
  }

  public static Iterable sourceNodesQuery_1225096837704(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return OperationsUtil.substituteApplicableOperations(_context.getNode());
  }

  public static Iterable sourceNodesQuery_1225096843561(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return OperationsUtil.substituteApplicableOperations(_context.getNode());
  }

  public static Iterable sourceNodesQuery_1225096837816(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return OperationsUtil.substituteApplicableOperations(_context.getNode());
  }

  public static Iterable sourceNodesQuery_1225096838029(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    TraversalAxis axis = TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
    _context.putTransientObject("traversal_axis", axis);
    _context.putTransientObject("siblings_operation", _context.getNode());
    final List<SNode> oppFeats = ListSequence.fromList(new ArrayList<SNode>());
    return ListSequence.fromList(OperationsUtil.substituteApplicableOperations(_context.getNode())).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(final SNode it) {
        return new Iterable<SNode>() {
          public Iterator<SNode> iterator() {
            return new YieldingIterator<SNode>() {
              private int __CP__ = 0;
              private SNode _3_opp;
              private SNode _7_io;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 4:
                      if (!(ListSequence.fromList(oppFeats).contains(_3_opp))) {
                        this.__CP__ = 5;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 8:
                      this.__CP__ = 1;
                      this.yield(_7_io);
                      return true;
                    case 0:
                      this._3_opp = SLinkOperations.getTarget(SLinkOperations.getTarget(it, "usedFeature", false), "opposite", false);
                      this.__CP__ = 4;
                      break;
                    case 5:
                      ListSequence.fromList(oppFeats).addElement(_3_opp);
                      this._7_io = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IterateOperation", null);
                      SLinkOperations.setTarget(_7_io, "usedFeature", _3_opp, false);
                      SPropertyOperations.set(_7_io, "axis", TraversalAxis.CHILDREN.getValue());
                      this.__CP__ = 8;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    }).toListSequence();
  }

  public static Iterable sourceNodesQuery_1225096838117(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode origOp = (SNode) _context.getTransientObject("siblings_operation");
    final SNode currOpp = SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.ypath.structure.IterateOperation"), "usedFeature", false);
    return ListSequence.fromList(OperationsUtil.substituteApplicableOperations(origOp)).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(final SNode it) {
        return new Iterable<SNode>() {
          public Iterator<SNode> iterator() {
            return new YieldingIterator<SNode>() {
              private int __CP__ = 0;
              private SNode _3_opp;
              private SNode _7_io;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 4:
                      if (_3_opp == currOpp) {
                        this.__CP__ = 5;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 8:
                      this.__CP__ = 1;
                      this.yield(_7_io);
                      return true;
                    case 0:
                      this._3_opp = SLinkOperations.getTarget(SLinkOperations.getTarget(it, "usedFeature", false), "opposite", false);
                      this.__CP__ = 4;
                      break;
                    case 5:
                      this._7_io = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IterateOperation", null);
                      SLinkOperations.setTarget(_7_io, "usedFeature", SLinkOperations.getTarget(it, "usedFeature", false), false);
                      SPropertyOperations.set(_7_io, "axis", TraversalAxis.CHILDREN.getValue());
                      this.__CP__ = 8;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    }).toListSequence();
  }

  public static Iterable sourceNodesQuery_1225096843480(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return OperationsUtil.substituteApplicableOperations(_context.getNode());
  }

  public static Iterable sourceNodesQuery_1465573729715750595(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return OperationsUtil.substituteApplicableOperations(_context.getNode());
  }

  public static Iterable sourceNodesQuery_1225096836915(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return OperationsUtil.substituteApplicableOperations(_context.getNode());
  }

  public static Iterable sourceNodesQuery_1225096837297(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    SNode origOp = (SNode) _context.getTransientObject("siblings_operation");
    final SNode currOpp = SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.ypath.structure.IterateOperation"), "usedFeature", false);
    return ListSequence.fromList(OperationsUtil.substituteApplicableOperations(origOp)).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(final SNode it) {
        return new Iterable<SNode>() {
          public Iterator<SNode> iterator() {
            return new YieldingIterator<SNode>() {
              private int __CP__ = 0;
              private SNode _3_opp;
              private SNode _7_io;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 4:
                      if (_3_opp == currOpp) {
                        this.__CP__ = 5;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 8:
                      this.__CP__ = 1;
                      this.yield(_7_io);
                      return true;
                    case 0:
                      this._3_opp = SLinkOperations.getTarget(SLinkOperations.getTarget(it, "usedFeature", false), "opposite", false);
                      this.__CP__ = 4;
                      break;
                    case 5:
                      this._7_io = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IterateOperation", null);
                      SLinkOperations.setTarget(_7_io, "usedFeature", SLinkOperations.getTarget(it, "usedFeature", false), false);
                      SPropertyOperations.set(_7_io, "axis", TraversalAxis.CHILDREN.getValue());
                      this.__CP__ = 8;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    }).toListSequence();
  }

  public static Iterable sourceNodesQuery_1225096837366(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    TraversalAxis axis = TraversalAxis.parseValue(SPropertyOperations.getString_def(_context.getNode(), "axis", "DESCENDANTS"));
    _context.putTransientObject("traversal_axis", axis);
    _context.putTransientObject("siblings_operation", _context.getNode());
    final List<SNode> oppFeats = ListSequence.fromList(new ArrayList<SNode>());
    return ListSequence.fromList(OperationsUtil.substituteApplicableOperations(_context.getNode())).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(final SNode it) {
        return new Iterable<SNode>() {
          public Iterator<SNode> iterator() {
            return new YieldingIterator<SNode>() {
              private int __CP__ = 0;
              private SNode _3_opp;
              private SNode _7_io;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 4:
                      if (!(ListSequence.fromList(oppFeats).contains(_3_opp))) {
                        this.__CP__ = 5;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 8:
                      this.__CP__ = 1;
                      this.yield(_7_io);
                      return true;
                    case 0:
                      this._3_opp = SLinkOperations.getTarget(SLinkOperations.getTarget(it, "usedFeature", false), "opposite", false);
                      this.__CP__ = 4;
                      break;
                    case 5:
                      ListSequence.fromList(oppFeats).addElement(_3_opp);
                      this._7_io = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IterateOperation", null);
                      SLinkOperations.setTarget(_7_io, "usedFeature", _3_opp, false);
                      SPropertyOperations.set(_7_io, "axis", TraversalAxis.CHILDREN.getValue());
                      this.__CP__ = 8;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    }).toListSequence();
  }

  public static Iterable sourceNodesQuery_1225096836544(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return OperationsUtil.substituteApplicableOperations(_context.getNode());
  }

  public static Iterable sourceNodesQuery_1225096836752(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return OperationsUtil.substituteApplicableOperations(_context.getNode());
  }

  public static SNode mapSrcMacro_mapper_1225096837537(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode zzz = ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", true, false), null, false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration") && "_zzz_".equals(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"), "name"));
      }
    }).first();
    SNode ref_zzz = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterReference", null);
    SLinkOperations.setTarget(ref_zzz, "variableDeclaration", zzz, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), ref_zzz, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096837639(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode zzz = ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", true, false), null, false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration") && "_zzz_".equals(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"), "name"));
      }
    }).first();
    SNode ref_zzz = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterReference", null);
    SLinkOperations.setTarget(ref_zzz, "variableDeclaration", zzz, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), ref_zzz, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096843523(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode cp = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "parameter", true)).first();
    SNode cpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterReference", null);
    SLinkOperations.setTarget(cpr, "variableDeclaration", cp, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), cpr, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096837837(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode cp = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "parameter", true)).first();
    SNode cpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterReference", null);
    SLinkOperations.setTarget(cpr, "variableDeclaration", cp, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), cpr, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096838301(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode zzz = SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.structure.ForeachStatement", false, false), "variable", true);
    SNode ref_zzz = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(ref_zzz, "variableDeclaration", zzz, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), ref_zzz, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096838366(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode cp = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", false, false), "parameter", true)).first();
    SNode cpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterReference", null);
    SLinkOperations.setTarget(cpr, "variableDeclaration", cp, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), cpr, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1200052339756(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode expression = OperationsUtil.unwrapExpression(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.ypath.structure.TreePathOperationExpression"), "operand", true));
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), SNodeOperations.copyNode(expression), SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096843420(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode zzz = ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.collections.structure.SequenceCreator", true, false), null, false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration") && "_zzz_".equals(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"), "name"));
      }
    }).first();
    SNode ref_zzz = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(ref_zzz, "variableDeclaration", zzz, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), ref_zzz, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1465573729715750639(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode zzz = ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.collections.structure.SequenceCreator", true, false), null, false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration") && "_zzz_".equals(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"), "name"));
      }
    }).first();
    SNode ref_zzz = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(ref_zzz, "variableDeclaration", zzz, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), ref_zzz, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096836936(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode zzz = ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.collections.structure.SequenceCreator", true, false), null, false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration") && "_zzz_".equals(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"), "name"));
      }
    }).first();
    SNode ref_zzz = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(ref_zzz, "variableDeclaration", zzz, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), ref_zzz, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096837079(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode zzz = ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.structure.WhileStatement", true, false), null, false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration") && "_zzz_".equals(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"), "name"));
      }
    }).first();
    SNode ref_zzz = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(ref_zzz, "variableDeclaration", zzz, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), ref_zzz, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096837143(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode yyy = SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement", true, false), "variable", true);
    SNode ref_yyy = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference", null);
    SLinkOperations.setTarget(ref_yyy, "variable", yyy, false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), ref_yyy, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096836382(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode lvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(lvr, "variableDeclaration", ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.structure.StatementList", false, false), "jetbrains.mps.baseLanguage.structure.StatementList", false, false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return "_zzz_".equals(SPropertyOperations.getString(it, "name"));
      }
    }).first(), false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), lvr, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096836489(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode lvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(lvr, "variableDeclaration", ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.structure.StatementList", false, false), "jetbrains.mps.baseLanguage.structure.StatementList", false, false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return "_xxx_".equals(SPropertyOperations.getString(it, "name"));
      }
    }).first(), false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), lvr, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096836605(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode lvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(lvr, "variableDeclaration", ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.structure.StatementList", false, false), "jetbrains.mps.baseLanguage.structure.StatementList", false, false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return "_zzz_".equals(SPropertyOperations.getString(it, "name"));
      }
    }).first(), false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), lvr, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }

  public static SNode mapSrcMacro_mapper_1225096836697(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode lvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(lvr, "variableDeclaration", ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(SNodeOperations.getAncestor(_context.getParentOutputNode(), "jetbrains.mps.baseLanguage.structure.StatementList", false, false), "jetbrains.mps.baseLanguage.structure.StatementList", false, false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return "_xxx_".equals(SPropertyOperations.getString(it, "name"));
      }
    }).first(), false);
    return IGenericFeature_Behavior.call_getterExpression_1213877249152(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature"), lvr, SLinkOperations.getTarget(_context.getNode(), "paramObject", true), ((TemplateQueryContext) _context).getGenerator());
  }
}
