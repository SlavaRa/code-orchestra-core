package jetbrains.mps.ypath.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstitutePreconditionContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.ChildSubstituteActionsHelper;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.ypath.behavior.FeatureUtil;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.ypath.behavior.ITreePathExpression_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.util.Pair;
import jetbrains.mps.ypath.behavior.IFeature_Behavior;
import jetbrains.mps.util.Triplet;
import jetbrains.mps.ypath.runtime.TraversalAxis;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ypath.behavior.TreePath_Behavior;
import jetbrains.mps.ypath.behavior.IParamFeature_Behavior;
import jetbrains.mps.nodeEditor.CellSide;
import jetbrains.mps.util.Quadruplet;
import jetbrains.mps.smodel.action.RemoveSubstituteActionByConditionContext;
import java.util.Iterator;
import jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.action.RemoveSideTransformActionByConditionContext;

public class QueriesGenerated {
  public static boolean nodeSubstituteActionsBuilder_Precondition_TreePathOperation_1169038348122(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    if (SNodeOperations.isInstanceOf(_context.getParentNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression")) {
      SNode exp = SNodeOperations.cast(_context.getParentNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
      return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(exp, "operand", true), "jetbrains.mps.ypath.structure.TreePathOperationExpression")) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(exp, "operand", true), "jetbrains.mps.ypath.structure.TreePathAdapterExpression"));
    }
    return false;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_TreePathOperation_1169038722084(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    if (SNodeOperations.isInstanceOf(_context.getParentNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression")) {
      SNode exp = SNodeOperations.cast(_context.getParentNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(exp, "operand", true), "jetbrains.mps.ypath.structure.TreePathAdapterExpression")) {
        return true;
      }
    }
    return false;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_TreePathOperation_1169039090800(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    if (SNodeOperations.isInstanceOf(_context.getParentNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression")) {
      SNode exp = SNodeOperations.cast(_context.getParentNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(exp, "operand", true), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
    }
    return false;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_Expression_1180011271328(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return (SNodeOperations.getAncestor(_context.getParentNode(), "jetbrains.mps.ypath.structure.VisitNodesStatement", true, false) != null);
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_Statement_1180026445925(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return (SNodeOperations.getAncestor(_context.getParentNode(), "jetbrains.mps.ypath.structure.VisitNodesStatement", true, false) != null);
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_ParameterWrapper_1197462321701(final IOperationContext operationContext, final NodeSubstitutePreconditionContext _context) {
    return false;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_Expression_1168893690367(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    SNode nono = SNodeOperations.getAncestorWhereConceptInList(_context.getSourceNode(), new String[]{"jetbrains.mps.ypath.structure.ParentBlock", "jetbrains.mps.ypath.structure.ChildrenBlock", "jetbrains.mps.ypath.structure.WhereBlock", "jetbrains.mps.ypath.structure.TreePathAdapterExpression", "jetbrains.mps.ypath.structure.TreePathOperationExpression"}, true, false);
    if (nono != null) {
      return false;
    }
    List<SNode> aspects = TreePathAspectUtil.getTreePathAspects(_context.getSourceNode(), operationContext.getScope());
    return ListSequence.fromList(aspects).count() > 0;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_TreeNodeKindOccurrence_1175170178382(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getSourceNode()), "jetbrains.mps.ypath.structure.MatchKindOperation");
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_Expression_1198013650814(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "jetbrains.mps.ypath.structure.TreePathType");
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_Expression_1198013650824(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getSourceNode()), "jetbrains.mps.ypath.structure.TreePathAdapterExpression");
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_Expression_1198013853577(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    SNode nono = SNodeOperations.getAncestorWhereConceptInList(_context.getSourceNode(), new String[]{"jetbrains.mps.ypath.structure.ParentBlock", "jetbrains.mps.ypath.structure.ChildrenBlock", "jetbrains.mps.ypath.structure.WhereBlock", "jetbrains.mps.ypath.structure.TreePathAdapterExpression", "jetbrains.mps.ypath.structure.TreePathOperationExpression"}, true, false);
    if (nono != null) {
      return false;
    }
    List<SNode> aspects = TreePathAspectUtil.getTreePathAspects(_context.getSourceNode(), operationContext.getScope());
    return ListSequence.fromList(aspects).count() > 0;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_TreePathOperation_1169037620751(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_TreePathOperation_1169038110957(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_TreePathOperation_1169038203232(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1180011230210(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode conceptToAdd = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.VisitChildrenExpression");
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext);
      ListSequence.fromList(result).addSequence(ListSequence.fromList(defaultActions));
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Statement_1180026401346(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode conceptToAdd = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.SwitchNodeKindStatement");
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext);
      ListSequence.fromList(result).addSequence(ListSequence.fromList(defaultActions));
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_VisitParameterDeclaration_1180018851746(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode wrappedConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type");
      IChildNodeSetter setter = new AbstractChildNodeSetter() {
        public SNode wrapNode(SNode nodeToWrap, SModel model) {
          SNode vpd = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.ypath.structure.VisitParameterDeclaration", null);
          SLinkOperations.setTarget(vpd, "type", nodeToWrap, true);
          return vpd;
        }

        public boolean returnSmallPart(SNode nodeToWrap) {
          return false;
        }

        public SNode doExecute(SNode pn, SNode oc, SNode nc, IScope sc) {
          SNode wrappedNode = this.wrapNode(nc, nc.getModel());
          _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedNode, operationContext.getScope());
          if (this.returnSmallPart(nc)) {
            return nc;
          } else {
            return wrappedNode;
          }
        }
      };
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildSubstituteActions(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedConcept, setter, operationContext)));
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_IFeature_1184067774388(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode conceptToAdd = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.ListFeature");
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext);
      ListSequence.fromList(result).addSequence(ListSequence.fromList(defaultActions));
    }
    {
      SNode conceptToAdd = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.SequenceFeature");
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext);
      ListSequence.fromList(result).addSequence(ListSequence.fromList(defaultActions));
    }
    {
      SNode conceptToAdd = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.ParamListFeature");
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext);
      ListSequence.fromList(result).addSequence(ListSequence.fromList(defaultActions));
    }
    {
      SNode conceptToAdd = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.ParamSequenceFeature");
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext);
      ListSequence.fromList(result).addSequence(ListSequence.fromList(defaultActions));
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ParameterWrapper_1184768393149(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.ParameterWrapper");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Calculable calc = new Calculable() {
          public Object calculate() {
            SNode op = SNodeOperations.cast(_context.getParentNode(), "jetbrains.mps.ypath.structure.IterateOperation");
            SNode tpoe = SNodeOperations.cast(SNodeOperations.getParent(_context.getParentNode()), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
            return FeatureUtil.getParameterObjects(SLinkOperations.getTarget(op, "usedFeature", false), SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(tpoe, "operand", true)), "jetbrains.mps.ypath.structure.TreePathType"), "nodeType", true));
          }
        };
        Iterable<SNode> queryResult = (Iterable) calc.calculate();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                return (item);
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString((item), "name");
              }

              public String getVisibleMatchingText(String pattern) {
                return this.getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_Expression_1168893677147(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathAdapterExpression");
      Calculable calculable = new Calculable() {
        public Object calculate() {
          return TreePathAspectUtil.getTreePathAspects(_context.getSourceNode(), operationContext.getScope());
        }
      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>) calculable.calculate();
      assert parameterObjects != null;
      for (final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode tpaExp = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreePathAdapterExpression");
            SLinkOperations.setTarget(tpaExp, "expression", _context.getSourceNode(), true);
            SLinkOperations.setTarget(tpaExp, "treepathAspect", (item), false);
            return tpaExp;
          }

          public String getMatchingText(String text) {
            return ":" + SPropertyOperations.getString((item), "name");
          }

          public String getVisibleMatchingText(String text) {
            return this.getMatchingText(text);
          }

          public String getDescriptionText(String text) {
            return "[OBSOLETE] cast to treepath expression";
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_TreeNodeKindOccurrence_1175164446140(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.MatchPropertyOperation");
      Calculable calculable = new Calculable() {
        public Object calculate() {
          SNode tpoe = SNodeOperations.getAncestor(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression", true, false);
          return ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.cast(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe), "jetbrains.mps.ypath.structure.TreePathAspect"), null, false, new String[]{})).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.isInstanceOf(it, "jetbrains.mps.ypath.structure.TreeNodeKindProperty");
            }
          }).toListSequence();
        }
      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>) calculable.calculate();
      assert parameterObjects != null;
      for (final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode tnko = SNodeOperations.cast(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreeNodeKindOccurrence");
            SNode mko = SNodeOperations.cast(SNodeOperations.getParent(tnko), "jetbrains.mps.ypath.structure.MatchKindOperation");
            SNode mpo = SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.ypath.structure.MatchPropertyOperation", null);
            SNodeOperations.replaceWithAnother(mko, mpo);
            SLinkOperations.setTarget(SLinkOperations.getTarget(mpo, "nodeKindOccurrence", true), "nodeKind", SLinkOperations.getTarget(tnko, "nodeKind", false), false);
            SLinkOperations.setTarget(mpo, "property", (item), false);
            return mpo;
          }

          public String getMatchingText(String text) {
            return "." + SPropertyOperations.getString((item), "name");
          }

          public String getVisibleMatchingText(String text) {
            return this.getMatchingText(text);
          }

          public String getDescriptionText(String text) {
            return "match property value";
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_IFeature_1197904809758(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.IFeature");
      Calculable calculable = new Calculable() {
        public Object calculate() {
          List<Pair> res = ListSequence.fromList(new ArrayList<Pair>());
          final SNode srcNode = _context.getSourceNode();
          final boolean isGeneric = SNodeOperations.isInstanceOf(srcNode, "jetbrains.mps.ypath.structure.IGenericFeature");
          for (SNode fe : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(srcNode), "jetbrains.mps.ypath.structure.TreePathAspect"), "features", true)).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return it != srcNode && ((isGeneric ?
                SNodeOperations.isInstanceOf(it, "jetbrains.mps.ypath.structure.IGenericFeature") :
                !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.ypath.structure.IGenericFeature"))
              ));
            }
          })) {
            ListSequence.fromList(res).addElement(new Pair<SNode, Boolean>(fe, Boolean.TRUE));
            ListSequence.fromList(res).addElement(new Pair<SNode, Boolean>(fe, Boolean.FALSE));
          }
          return res;
        }
      };
      Iterable<Pair> parameterObjects = (Iterable<Pair>) calculable.calculate();
      assert parameterObjects != null;
      for (final Pair item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode fe = (SNode) (item).o1;
            Boolean mu = (Boolean) (item).o2;
            IFeature_Behavior.call_setOpposite_1213877499629(_context.getSourceNode(), fe, mu);
            return _context.getSourceNode();
          }

          public String getMatchingText(String text) {
            SNode fe = (SNode) (item).o1;
            Boolean mu = (Boolean) (item).o2;
            return (mu ?
              "<-> " + SPropertyOperations.getString(fe, "name") :
              "<-  " + SPropertyOperations.getString(fe, "name")
            );
          }

          public String getVisibleMatchingText(String text) {
            return this.getMatchingText(text);
          }

          public String getDescriptionText(String text) {
            SNode fe = (SNode) (item).o1;
            Boolean mu = (Boolean) (item).o2;
            return (mu ?
              "set mutual opposite feature" :
              "set opposite feature"
            );
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_Expression_1198013650231(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression");
      Calculable calculable = new Calculable() {
        public Object calculate() {
          List<Triplet> res = ListSequence.fromList(new ArrayList<Triplet>());
          SNode tpoe = SNodeOperations.getAncestor(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression", true, false);
          if ((tpoe == null)) {
            return res;
          }
          SNode nodeType = SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "jetbrains.mps.ypath.structure.TreePathType"), "nodeType", true);
          for (TraversalAxis axis : ListSequence.fromList(TraversalAxis.getConstants())) {
            ListSequence.fromList(res).addElement(new Triplet(axis, null, null));
            for (SNode feat : Sequence.fromIterable(TreePath_Behavior.call_getFeature_1213877481312(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe), nodeType))) {
              if (TraversalAxisUtil.isAcceptableFeatureForAxis(feat, axis)) {
                if (SPropertyOperations.getBoolean(feat, "default")) {
                  ListSequence.fromList(res).addElement(new Triplet<TraversalAxis, SNode, SNode>(axis, feat, null));
                } else
                if (SNodeOperations.isInstanceOf(feat, "jetbrains.mps.ypath.structure.IParamFeature")) {
                  for (SNode pw : ListSequence.fromList(IParamFeature_Behavior.call_getParameterObjects_1213877340242(SNodeOperations.cast(feat, "jetbrains.mps.ypath.structure.IParamFeature"), nodeType))) {
                    ListSequence.fromList(res).addElement(new Triplet<TraversalAxis, SNode, SNode>(axis, feat, pw));
                  }
                } else {
                  ListSequence.fromList(res).addElement(new Triplet<TraversalAxis, SNode, SNode>(axis, feat, null));
                }
              }
            }
          }
          return res;
        }
      };
      Iterable<Triplet> parameterObjects = (Iterable<Triplet>) calculable.calculate();
      assert parameterObjects != null;
      for (final Triplet item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            TraversalAxis axis = (TraversalAxis) (item).first();
            SNode feat = (SNode) (item).second();
            SNode pw = (SNode) (item).third();
            SNode tpoExp = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SLinkOperations.setTarget(tpoExp, "operand", _context.getSourceNode(), true);
            SNode op = SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.ypath.structure.IterateOperation", null);
            SPropertyOperations.set(SNodeFactoryOperations.setNewChild(tpoExp, "operation", "jetbrains.mps.ypath.structure.IterateOperation"), "axis", axis.getValue());
            if ((feat != null)) {
              SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(tpoExp, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation"), "usedFeature", feat, false);
              if (SPropertyOperations.getBoolean(feat, "default")) {
                /*
                  SPropertyOperations.set(SNodeOperations.cast(SLinkOperations.getTarget(tpoExp, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation"), "useDefault", "" + (true));
                */
              } else
              if ((pw != null)) {
                SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(tpoExp, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation"), "paramObject", pw, true);
              }
            }
            return tpoExp;
          }

          public String getMatchingText(String text) {
            TraversalAxis axis = (TraversalAxis) (item).first();
            SNode feat = (SNode) (item).second();
            SNode pw = (SNode) (item).third();
            String suffix = "";
            if ((feat == null)) {
              suffix = " *";
            } else {
              if (SPropertyOperations.getBoolean(feat, "default")) {
                suffix = "";
              } else
              if ((pw != null)) {
                suffix = SPropertyOperations.getString(pw, "name");
              } else {
                suffix = SPropertyOperations.getString(feat, "name");
              }
            }
            return TraversalAxisUtil.getOperationSign(axis) + suffix;
          }

          public String getVisibleMatchingText(String text) {
            return this.getMatchingText(text);
          }

          public String getDescriptionText(String text) {
            TraversalAxis axis = (TraversalAxis) (item).first();
            SNode feat = (SNode) (item).second();
            SNode pw = (SNode) (item).third();
            String suffix = "";
            if ((feat == null)) {
              suffix = "all";
            } else {
              if (SPropertyOperations.getBoolean(feat, "default")) {
                suffix = "default";
              } else
              if ((pw != null)) {
                suffix = SPropertyOperations.getString(pw, "name") + " " + SPropertyOperations.getString(feat, "name");
              } else {
                suffix = SPropertyOperations.getString(feat, "name");
              }
            }
            return "iterate " + axis.getName() + " @" + suffix;
          }
        });
      }
    }
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SNode tpoExp = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
          SLinkOperations.setTarget(tpoExp, "operand", _context.getSourceNode(), true);
          SNodeFactoryOperations.setNewChild(tpoExp, "operation", "jetbrains.mps.ypath.structure.WhereOperation");
          return tpoExp;
        }

        public String getMatchingText(String pattern) {
          return "[";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "where condition";
        }
      });
    }
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression");
      Calculable calculable = new Calculable() {
        public Object calculate() {
          SNode tpoe = SNodeOperations.getAncestor(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression", true, false);
          return ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.cast(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe), "jetbrains.mps.ypath.structure.TreePathAspect"), null, false, new String[]{})).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.isInstanceOf(it, "jetbrains.mps.ypath.structure.TreeNodeKind");
            }
          }).toListSequence();
        }
      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>) calculable.calculate();
      assert parameterObjects != null;
      for (final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode tpoExp = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SLinkOperations.setTarget(tpoExp, "operand", _context.getSourceNode(), true);
            SNode mnko = SNodeFactoryOperations.setNewChild(tpoExp, "operation", "jetbrains.mps.ypath.structure.MatchKindOperation");
            SLinkOperations.setTarget(SLinkOperations.getTarget(mnko, "nodeKindOccurrence", true), "nodeKind", (item), false);
            return tpoExp;
          }

          public String getMatchingText(String text) {
            return "[ " + SPropertyOperations.getString((item), "name");
          }

          public String getVisibleMatchingText(String text) {
            return this.getMatchingText(text);
          }

          public String getDescriptionText(String text) {
            return "match node type";
          }
        });
      }
    }
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression");
      Calculable calculable = new Calculable() {
        public Object calculate() {
          SNode tpoe = SNodeOperations.getAncestor(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression", true, false);
          return ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.cast(ITreePathExpression_Behavior.call_getTreePath_1213877496973(tpoe), "jetbrains.mps.ypath.structure.TreePathAspect"), null, false, new String[]{})).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.isInstanceOf(it, "jetbrains.mps.ypath.structure.TreeNodeKindProperty") && SPropertyOperations.getBoolean(SNodeOperations.cast(it, "jetbrains.mps.ypath.structure.TreeNodeKindProperty"), "default");
            }
          }).toListSequence();
        }
      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>) calculable.calculate();
      assert parameterObjects != null;
      for (final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode tpoExp = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SLinkOperations.setTarget(tpoExp, "operand", _context.getSourceNode(), true);
            SNode mdpo = SNodeFactoryOperations.setNewChild(tpoExp, "operation", "jetbrains.mps.ypath.structure.MatchDefaultPropertyOperation");
            return tpoExp;
          }

          public String getMatchingText(String text) {
            return "[[ " + SPropertyOperations.getString(SNodeOperations.cast(SNodeOperations.getParent((item)), "jetbrains.mps.lang.core.structure.INamedConcept"), "name") + "." + SPropertyOperations.getString((item), "name");
          }

          public String getVisibleMatchingText(String text) {
            return this.getMatchingText(text);
          }

          public String getDescriptionText(String text) {
            return "match default property";
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_Expression_1198013650823(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      Calculable calc = new Calculable() {
        public Object calculate() {
          return SNodeOperations.getParent(_context.getSourceNode());
        }
      };
      SNode node = (SNode) calc.calculate();
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createRightTransformHintSubstituteActions(node, CellSide.RIGHT, _context.getTransformationTag(), operationContext)));
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_TreePathOperation_1198013650840(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      Calculable calc = new Calculable() {
        public Object calculate() {
          return SNodeOperations.getParent(_context.getSourceNode());
        }
      };
      SNode node = (SNode) calc.calculate();
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createRightTransformHintSubstituteActions(node, CellSide.RIGHT, _context.getTransformationTag(), operationContext)));
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_ParameterWrapper_1198013650848(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      Calculable calc = new Calculable() {
        public Object calculate() {
          return SNodeOperations.getParent(_context.getSourceNode());
        }
      };
      SNode node = (SNode) calc.calculate();
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createRightTransformHintSubstituteActions(node, CellSide.RIGHT, _context.getTransformationTag(), operationContext)));
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_Expression_1198013853576(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression");
      Calculable calculable = new Calculable() {
        public Object calculate() {
          List<Quadruplet> res = ListSequence.fromList(new ArrayList<Quadruplet>());
          SNode nodeType = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), "jetbrains.mps.baseLanguage.structure.Type");
          for (SNode aspect : ListSequence.fromList(TreePathAspectUtil.getTreePathAspects(_context.getSourceNode(), operationContext.getScope()))) {
            for (TraversalAxis axis : ListSequence.fromList(TraversalAxis.getConstants())) {
              ListSequence.fromList(res).addElement(new Quadruplet<SNode, TraversalAxis, SNode, SNode>(aspect, axis, null, null));
              for (SNode feat : Sequence.fromIterable(TreePath_Behavior.call_getFeature_1213877481312(aspect, nodeType))) {
                if (TraversalAxisUtil.isAcceptableFeatureForAxis(feat, axis)) {
                  if (SPropertyOperations.getBoolean(feat, "default")) {
                    ListSequence.fromList(res).addElement(new Quadruplet<SNode, TraversalAxis, SNode, SNode>(aspect, axis, feat, null));
                  } else
                  if (SNodeOperations.isInstanceOf(feat, "jetbrains.mps.ypath.structure.IParamFeature")) {
                    for (SNode pw : ListSequence.fromList(IParamFeature_Behavior.call_getParameterObjects_1213877340242(SNodeOperations.cast(feat, "jetbrains.mps.ypath.structure.IParamFeature"), nodeType))) {
                      ListSequence.fromList(res).addElement(new Quadruplet<SNode, TraversalAxis, SNode, SNode>(aspect, axis, feat, pw));
                    }
                  } else {
                    ListSequence.fromList(res).addElement(new Quadruplet<SNode, TraversalAxis, SNode, SNode>(aspect, axis, feat, null));
                  }
                }
              }
            }
          }
          return res;
        }
      };
      Iterable<Quadruplet> parameterObjects = (Iterable<Quadruplet>) calculable.calculate();
      assert parameterObjects != null;
      for (final Quadruplet item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode aspect = (SNode) (item).first();
            TraversalAxis axis = (TraversalAxis) (item).second();
            SNode feat = (SNode) (item).third();
            SNode pw = (SNode) (item).fourth();
            SNode tpoExp = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SNodeFactoryOperations.setNewChild(tpoExp, "operand", "jetbrains.mps.ypath.structure.TreePathAdapterExpression");
            SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(tpoExp, "operand", true), "jetbrains.mps.ypath.structure.TreePathAdapterExpression"), "expression", _context.getSourceNode(), true);
            SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(tpoExp, "operand", true), "jetbrains.mps.ypath.structure.TreePathAdapterExpression"), "treepathAspect", aspect, false);
            SPropertyOperations.set(SNodeFactoryOperations.setNewChild(tpoExp, "operation", "jetbrains.mps.ypath.structure.IterateOperation"), "axis", axis.getValue());
            if ((feat != null)) {
              SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(tpoExp, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation"), "usedFeature", feat, false);
              if (SPropertyOperations.getBoolean(feat, "default")) {
                /*
                  SPropertyOperations.set(SNodeOperations.cast(SLinkOperations.getTarget(tpoExp, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation"), "useDefault", "" + (true));
                */
              } else
              if ((pw != null)) {
                SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(tpoExp, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation"), "paramObject", pw, true);
              }
            }
            return tpoExp;
          }

          public String getMatchingText(String text) {
            SNode aspect = (SNode) (item).first();
            TraversalAxis axis = (TraversalAxis) (item).second();
            SNode feat = (SNode) (item).third();
            SNode pw = (SNode) (item).fourth();
            String suffix = "";
            if ((feat == null)) {
              suffix = " *";
            } else {
              if (SPropertyOperations.getBoolean(feat, "default")) {
                suffix = "";
              } else
              if ((pw != null)) {
                suffix = SPropertyOperations.getString(pw, "name");
              } else {
                suffix = SPropertyOperations.getString(feat, "name");
              }
            }
            return TraversalAxisUtil.getOperationSign(axis) + suffix;
          }

          public String getVisibleMatchingText(String text) {
            return this.getMatchingText(text);
          }

          public String getDescriptionText(String text) {
            SNode aspect = (SNode) (item).first();
            TraversalAxis axis = (TraversalAxis) (item).second();
            SNode feat = (SNode) (item).third();
            SNode pw = (SNode) (item).fourth();
            String suffix = "";
            if ((feat == null)) {
              suffix = "all";
            } else {
              if (SPropertyOperations.getBoolean(feat, "default")) {
                suffix = "default";
              } else
              if ((pw != null)) {
                suffix = SPropertyOperations.getString(pw, "name") + " " + SPropertyOperations.getString(feat, "name");
              } else {
                suffix = SPropertyOperations.getString(feat, "name");
              }
            }
            return "iterate " + axis.getName() + " @" + suffix + " using " + SPropertyOperations.getString(aspect, "name");
          }
        });
      }
    }
    return result;
  }

  public static void removeActionsByCondition_1178108596882(final IOperationContext operationContext, final RemoveSubstituteActionByConditionContext _context) {
    Iterator<INodeSubstituteAction> actions = _context.getActions();
    while (actions.hasNext()) {
      INodeSubstituteAction current = actions.next();
      final SNode concept = current.getOutputConcept();
      SNode applicableConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperation");
      Condition cond = new Condition() {
        public boolean met(Object object) {
          return !(SConceptOperations.isExactly(_context.getChildConcept(), "jetbrains.mps.ypath.structure.FromOperation"));
        }
      };
      if (SConceptOperations.isSuperConceptOf(applicableConcept, NameUtil.nodeFQName(concept)) && cond.met(concept)) {
        actions.remove();
      }
    }
  }

  public static void removeActionsByCondition_1178108370239(final IOperationContext operationContext, final RemoveSubstituteActionByConditionContext _context) {
    Iterator<INodeSubstituteAction> actions = _context.getActions();
    while (actions.hasNext()) {
      INodeSubstituteAction current = actions.next();
      final SNode concept = current.getOutputConcept();
      SNode applicableConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperation");
      Condition cond = new Condition() {
        public boolean met(Object object) {
          return !(SConceptOperations.isExactly(_context.getChildConcept(), "jetbrains.mps.ypath.structure.IterateOperation"));
        }
      };
      if (SConceptOperations.isSuperConceptOf(applicableConcept, NameUtil.nodeFQName(concept)) && cond.met(concept)) {
        actions.remove();
      }
    }
  }

  public static void removeSideTransformActionsByCondition_1198013650232(final IOperationContext operationContext, final RemoveSideTransformActionByConditionContext _context) {
    Iterator<INodeSubstituteAction> actions = _context.getActions();
    while (actions.hasNext()) {
      INodeSubstituteAction current = actions.next();
      if (!(SNodeOperations.isInstanceOf(((SNode) current.getOutputConcept()), "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
        continue;
      }
      final SNode concept = current.getOutputConcept();
      Condition condition = new Condition() {
        public boolean met(Object p0) {
          return !(SConceptOperations.isSubConceptOf(concept, "jetbrains.mps.baseLanguage.collections.structure.SequenceOperation") || SConceptOperations.isSubConceptOf(concept, "jetbrains.mps.ypath.structure.TreePathOperationExpression"));
        }
      };
      if (condition.met(null)) {
        actions.remove();
      }
    }
  }
}
