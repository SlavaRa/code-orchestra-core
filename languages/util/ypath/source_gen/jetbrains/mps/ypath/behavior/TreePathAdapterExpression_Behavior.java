package jetbrains.mps.ypath.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class TreePathAdapterExpression_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean call_isGeneric_1213877411663(SNode thisNode) {
    SNode tpoe = SNodeOperations.getAncestor(thisNode, "jetbrains.mps.ypath.structure.TreePathOperationExpression", false, false);
    if ((tpoe != null)) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(tpoe, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation")) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(tpoe, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation"), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature");
      }
    }
    List<SNode> features = SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "treepathAspect", false), "features", true);
    return ListSequence.fromList(features).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.ypath.structure.IGenericFeature"));
      }
    }).isEmpty() && ListSequence.fromList(features).isNotEmpty();
  }
}
