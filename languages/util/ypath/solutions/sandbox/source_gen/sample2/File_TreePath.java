package sample2;

/*Generated by MPS */

import jetbrains.mps.ypath.runtime.TreePath;
import java.io.File;
import jetbrains.mps.ypath.runtime.IFilter;

public class File_TreePath extends TreePath<File> {
  public File_TreePath() {
  }

  public File parent(File node) {
    return File_TreePath.Parent.parent(node);
  }

  public File[] childrenArray(File n) {
    return File_TreePath.Children.childrenArray(n);
  }

  private static class Parent {
    public static File parent(File n) {
      return n;
    }
  }

  private static class Children {
    public static File[] childrenArray(File n) {
      return n.listFiles();
    }
  }

  public static class FILE_NodeKindTrigger implements IFilter<File> {
    private static File_TreePath.FILE_NodeKindTrigger instance;

    private FILE_NodeKindTrigger() {
    }

    public boolean accept(File f) {
      return f.isFile();
    }

    public static IFilter<File> getInstance() {
      if (instance == null) {
        instance = new File_TreePath.FILE_NodeKindTrigger();
      }
      return instance;
    }
  }

  public static class DIR_NodeKindTrigger implements IFilter<File> {
    private static File_TreePath.DIR_NodeKindTrigger instance;

    private DIR_NodeKindTrigger() {
    }

    public boolean accept(File f) {
      return f.isDirectory();
    }

    public static IFilter<File> getInstance() {
      if (instance == null) {
        instance = new File_TreePath.DIR_NodeKindTrigger();
      }
      return instance;
    }
  }

  public static class FILE_name_Property {
    public static IFilter<File> getMatcher(final String matchValue) {
      IFilter filter;
      if (matchValue != null) {
        filter = new IFilter() {
          public boolean accept(Object n) {
            File node = (File) n;
            String actualValue = File_TreePath.FILE_name_Property.Getter.getValue(node);
            return matchValue.equals(actualValue);
          }
        };
      } else {
        filter = new IFilter() {
          public boolean accept(Object n) {
            File node = (File) n;
            String actualValue = File_TreePath.FILE_name_Property.Getter.getValue(node);
            return actualValue == null;
          }
        };
      }
      return (IFilter<File>) filter;
    }

    private static class Getter {
      public static String getValue(File f) {
        return f.getName();
      }
    }
  }
}
