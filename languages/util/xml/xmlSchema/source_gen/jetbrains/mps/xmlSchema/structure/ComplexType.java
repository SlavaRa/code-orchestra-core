package jetbrains.mps.xmlSchema.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ComplexType extends Declaration {
  public static final String concept = "jetbrains.mps.xmlSchema.structure.ComplexType";
  public static final String TYPE_NAME = "typeName";
  public static final String TYPE_EXPRESSION_LIST = "typeExpressionList";
  public static final String MIXED_ATTRIBUTE = "mixedAttribute";

  public ComplexType(SNode node) {
    super(node);
  }

  public String getTypeName() {
    return this.getProperty(ComplexType.TYPE_NAME);
  }

  public void setTypeName(String value) {
    this.setProperty(ComplexType.TYPE_NAME, value);
  }

  public TypeExpressionList getTypeExpressionList() {
    return (TypeExpressionList) this.getChild(TypeExpressionList.class, ComplexType.TYPE_EXPRESSION_LIST);
  }

  public void setTypeExpressionList(TypeExpressionList node) {
    super.setChild(ComplexType.TYPE_EXPRESSION_LIST, node);
  }

  public MixedAttribute getMixedAttribute() {
    return (MixedAttribute) this.getChild(MixedAttribute.class, ComplexType.MIXED_ATTRIBUTE);
  }

  public void setMixedAttribute(MixedAttribute node) {
    super.setChild(ComplexType.MIXED_ATTRIBUTE, node);
  }

  public static ComplexType newInstance(SModel sm, boolean init) {
    return (ComplexType) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.xmlSchema.structure.ComplexType", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ComplexType newInstance(SModel sm) {
    return ComplexType.newInstance(sm, false);
  }
}
