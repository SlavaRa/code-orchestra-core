package jetbrains.mps.xmlQuery.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class XMLSAXChildRule extends BaseConcept {
  public static final String concept = "jetbrains.mps.xmlQuery.structure.XMLSAXChildRule";
  public static final String TAG_NAME = "tagName";
  public static final String OVERRIDE_TAG = "overrideTag";
  public static final String RULE = "rule";
  public static final String HANDLER = "handler";

  public XMLSAXChildRule(SNode node) {
    super(node);
  }

  public String getTagName() {
    return this.getProperty(XMLSAXChildRule.TAG_NAME);
  }

  public void setTagName(String value) {
    this.setProperty(XMLSAXChildRule.TAG_NAME, value);
  }

  public boolean getOverrideTag() {
    return this.getBooleanProperty(XMLSAXChildRule.OVERRIDE_TAG);
  }

  public void setOverrideTag(boolean value) {
    this.setBooleanProperty(XMLSAXChildRule.OVERRIDE_TAG, value);
  }

  public XMLSAXNodeRule getRule() {
    return (XMLSAXNodeRule) this.getReferent(XMLSAXNodeRule.class, XMLSAXChildRule.RULE);
  }

  public void setRule(XMLSAXNodeRule node) {
    super.setReferent(XMLSAXChildRule.RULE, node);
  }

  public XMLSAXChildHandler getHandler() {
    return (XMLSAXChildHandler) this.getChild(XMLSAXChildHandler.class, XMLSAXChildRule.HANDLER);
  }

  public void setHandler(XMLSAXChildHandler node) {
    super.setChild(XMLSAXChildRule.HANDLER, node);
  }

  public static XMLSAXChildRule newInstance(SModel sm, boolean init) {
    return (XMLSAXChildRule) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.xmlQuery.structure.XMLSAXChildRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static XMLSAXChildRule newInstance(SModel sm) {
    return XMLSAXChildRule.newInstance(sm, false);
  }
}
