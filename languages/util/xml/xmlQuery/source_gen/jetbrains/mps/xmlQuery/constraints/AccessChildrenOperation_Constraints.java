package jetbrains.mps.xmlQuery.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.List;
import jetbrains.mps.xml.actions.ElementUtil;

public class AccessChildrenOperation_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_iuzmb1_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:e79b58b4-ea58-4c9d-b43b-c3a260addf6a(jetbrains.mps.xmlQuery.constraints)", "4991903842868413103");

  public AccessChildrenOperation_Constraints() {
    super("jetbrains.mps.xmlQuery.structure.AccessChildrenOperation");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("elementDeclaration", new BaseReferenceConstraintsDescriptor("elementDeclaration", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            final SNode complexType = SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true)), "jetbrains.mps.xmlQuery.structure.XMLElementType"), "complexType", false);
            if (complexType == null) {
              return new ArrayList<SNode>();
            }
            SNode elementDeclaration = SNodeOperations.getAncestor(complexType, "jetbrains.mps.xmlSchema.structure.ElementDeclaration", false, false);
            if (elementDeclaration == null) {
              elementDeclaration = ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(complexType, "jetbrains.mps.xmlSchema.structure.Schema", false, false), "jetbrains.mps.xmlSchema.structure.ElementWithType", false, new String[]{})).findFirst(new IWhereFilter<SNode>() {
                public boolean accept(SNode ewt) {
                  return SLinkOperations.getTarget(SLinkOperations.getTarget(ewt, "complexTypeReference", true), "complexType", false) == complexType;
                }
              });
            }
            List<SNode> elementDeclarations = ElementUtil.getElementDeclarations(elementDeclaration, _context.getEnclosingNode(), operationContext.getScope());
            return elementDeclarations;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_iuzmb1_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
