package jetbrains.mps.execution.configurations.lib;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import jetbrains.mps.baseLanguage.runConfigurations.runtime.MainNodeChooser;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.openapi.util.Factory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.options.ConfigurationException;

public class Node_Configuration_Editor extends SettingsEditorEx<Node_Configuration> {
  private MainNodeChooser myChooser;
  private SNode myConcept;
  private _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> myIsValid;

  public Node_Configuration_Editor(final SNode concept, final _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> isValid) {
    super(new Factory<Node_Configuration>() {
      public Node_Configuration create() {
        return new Node_Configuration(concept, isValid);
      }
    });
    myConcept = concept;
    myIsValid = isValid;
  }

  public void disposeEditor() {
  }

  @NotNull
  public MainNodeChooser createEditor() {
    myChooser = new MainNodeChooser();
    myChooser.setTargetConcept(myConcept);
    myChooser.setAcceptor(myIsValid);
    return myChooser;
  }

  public void applyEditorTo(final Node_Configuration configuration) throws ConfigurationException {
    configuration.setNode(myChooser.getNode());
  }

  public void resetEditorFrom(final Node_Configuration configuration) {
    myChooser.setNode(configuration.getNode());
  }
}
