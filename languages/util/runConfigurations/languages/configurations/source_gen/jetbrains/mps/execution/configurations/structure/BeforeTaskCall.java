package jetbrains.mps.execution.configurations.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BeforeTaskCall extends BaseConcept {
  public static final String concept = "jetbrains.mps.execution.configurations.structure.BeforeTaskCall";
  public static final String BEFORE_TASK = "beforeTask";
  public static final String PARAMETER = "parameter";

  public BeforeTaskCall(SNode node) {
    super(node);
  }

  public BeforeTask getBeforeTask() {
    return (BeforeTask) this.getReferent(BeforeTask.class, BeforeTaskCall.BEFORE_TASK);
  }

  public void setBeforeTask(BeforeTask node) {
    super.setReferent(BeforeTaskCall.BEFORE_TASK, node);
  }

  public int getParametersCount() {
    return this.getChildCount(BeforeTaskCall.PARAMETER);
  }

  public Iterator<Expression> parameters() {
    return this.children(Expression.class, BeforeTaskCall.PARAMETER);
  }

  public List<Expression> getParameters() {
    return this.getChildren(Expression.class, BeforeTaskCall.PARAMETER);
  }

  public void addParameter(Expression node) {
    this.addChild(BeforeTaskCall.PARAMETER, node);
  }

  public void insertParameter(Expression prev, Expression node) {
    this.insertChild(prev, BeforeTaskCall.PARAMETER, node);
  }

  public static BeforeTaskCall newInstance(SModel sm, boolean init) {
    return (BeforeTaskCall) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.execution.configurations.structure.BeforeTaskCall", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BeforeTaskCall newInstance(SModel sm) {
    return BeforeTaskCall.newInstance(sm, false);
  }
}
