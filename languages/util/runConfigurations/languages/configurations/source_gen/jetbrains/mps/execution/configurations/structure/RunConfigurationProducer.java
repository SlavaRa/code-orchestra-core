package jetbrains.mps.execution.configurations.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.execution.common.structure.IGeneratedToClass;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.execution.settings.structure.PersistentConfigurationType;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RunConfigurationProducer extends BaseConcept implements INamedConcept, IGeneratedToClass {
  public static final String concept = "jetbrains.mps.execution.configurations.structure.RunConfigurationProducer";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String CONFIGURATION = "configuration";
  public static final String PRODUCE = "produce";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public RunConfigurationProducer(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(RunConfigurationProducer.NAME);
  }

  public void setName(String value) {
    this.setProperty(RunConfigurationProducer.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(RunConfigurationProducer.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(RunConfigurationProducer.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(RunConfigurationProducer.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(RunConfigurationProducer.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(RunConfigurationProducer.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(RunConfigurationProducer.VIRTUAL_PACKAGE, value);
  }

  public PersistentConfigurationType getConfiguration() {
    return (PersistentConfigurationType) this.getChild(PersistentConfigurationType.class, RunConfigurationProducer.CONFIGURATION);
  }

  public void setConfiguration(PersistentConfigurationType node) {
    super.setChild(RunConfigurationProducer.CONFIGURATION, node);
  }

  public int getProducesCount() {
    return this.getChildCount(RunConfigurationProducer.PRODUCE);
  }

  public Iterator<RunConfigurationProducerPart> produces() {
    return this.children(RunConfigurationProducerPart.class, RunConfigurationProducer.PRODUCE);
  }

  public List<RunConfigurationProducerPart> getProduces() {
    return this.getChildren(RunConfigurationProducerPart.class, RunConfigurationProducer.PRODUCE);
  }

  public void addProduce(RunConfigurationProducerPart node) {
    this.addChild(RunConfigurationProducer.PRODUCE, node);
  }

  public void insertProduce(RunConfigurationProducerPart prev, RunConfigurationProducerPart node) {
    this.insertChild(prev, RunConfigurationProducer.PRODUCE, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(RunConfigurationProducer.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, RunConfigurationProducer.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, RunConfigurationProducer.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(RunConfigurationProducer.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, RunConfigurationProducer.SMODEL_ATTRIBUTE, node);
  }

  public static RunConfigurationProducer newInstance(SModel sm, boolean init) {
    return (RunConfigurationProducer) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.execution.configurations.structure.RunConfigurationProducer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RunConfigurationProducer newInstance(SModel sm) {
    return RunConfigurationProducer.newInstance(sm, false);
  }
}
