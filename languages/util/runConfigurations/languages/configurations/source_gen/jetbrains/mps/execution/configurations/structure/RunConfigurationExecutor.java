package jetbrains.mps.execution.configurations.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.debug.apiLang.structure.DebuggerConfiguration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RunConfigurationExecutor extends AbstractRunConfigurationExecutor {
  public static final String concept = "jetbrains.mps.execution.configurations.structure.RunConfigurationExecutor";
  public static final String CAN_DEBUG = "canDebug";
  public static final String DEBUGGER_CONFIGURATION = "debuggerConfiguration";

  public RunConfigurationExecutor(SNode node) {
    super(node);
  }

  public boolean getCanDebug() {
    return this.getBooleanProperty(RunConfigurationExecutor.CAN_DEBUG);
  }

  public void setCanDebug(boolean value) {
    this.setBooleanProperty(RunConfigurationExecutor.CAN_DEBUG, value);
  }

  public DebuggerConfiguration getDebuggerConfiguration() {
    return (DebuggerConfiguration) this.getChild(DebuggerConfiguration.class, RunConfigurationExecutor.DEBUGGER_CONFIGURATION);
  }

  public void setDebuggerConfiguration(DebuggerConfiguration node) {
    super.setChild(RunConfigurationExecutor.DEBUGGER_CONFIGURATION, node);
  }

  public static RunConfigurationExecutor newInstance(SModel sm, boolean init) {
    return (RunConfigurationExecutor) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.execution.configurations.structure.RunConfigurationExecutor", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RunConfigurationExecutor newInstance(SModel sm) {
    return RunConfigurationExecutor.newInstance(sm, false);
  }
}
