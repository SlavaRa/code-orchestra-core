package jetbrains.mps.execution.configurations.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_BeforeTaskCall_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_BeforeTaskCall_InferenceRule() {
  }

  public void applyRule(final SNode beforeTaskCall, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<SNode> declaredParameters = SLinkOperations.getTargets(SLinkOperations.getTarget(beforeTaskCall, "beforeTask", false), "parameter", true);
    if (ListSequence.fromList(SLinkOperations.getTargets(beforeTaskCall, "parameter", true)).count() != ListSequence.fromList(declaredParameters).count()) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(beforeTaskCall, "Incompatible number of parameters", "r:8b43a830-217d-43d8-a0f8-6460c443f22d(jetbrains.mps.execution.configurations.typesystem)", "5475888311765613831", null, errorTarget);
      }
    }
    for (int i = 0; i < ListSequence.fromList(SLinkOperations.getTargets(beforeTaskCall, "parameter", true)).count(); i++) {
      {
        SNode _nodeToCheck_1029348928467 = ListSequence.fromList(SLinkOperations.getTargets(beforeTaskCall, "parameter", true)).getElement(i);
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:8b43a830-217d-43d8-a0f8-6460c443f22d(jetbrains.mps.execution.configurations.typesystem)", "5475888311765613814", 0, null);
        typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:8b43a830-217d-43d8-a0f8-6460c443f22d(jetbrains.mps.execution.configurations.typesystem)", "5475888311765613798", true), (SNode) typeCheckingContext.typeOf(ListSequence.fromList(declaredParameters).getElement(i), "r:8b43a830-217d-43d8-a0f8-6460c443f22d(jetbrains.mps.execution.configurations.typesystem)", "5475888311765656730", true), false, false, _info_12389875345);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.execution.configurations.structure.BeforeTaskCall";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
