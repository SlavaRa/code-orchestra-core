package jetbrains.mps.execution.commands.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CommandParameterAssignment extends BaseConcept {
  public static final String concept = "jetbrains.mps.execution.commands.structure.CommandParameterAssignment";
  public static final String PARAMETER_DECLARATION = "parameterDeclaration";
  public static final String VALUE = "value";

  public CommandParameterAssignment(SNode node) {
    super(node);
  }

  public CommandParameterDeclaration getParameterDeclaration() {
    return (CommandParameterDeclaration) this.getReferent(CommandParameterDeclaration.class, CommandParameterAssignment.PARAMETER_DECLARATION);
  }

  public void setParameterDeclaration(CommandParameterDeclaration node) {
    super.setReferent(CommandParameterAssignment.PARAMETER_DECLARATION, node);
  }

  public Expression getValue() {
    return (Expression) this.getChild(Expression.class, CommandParameterAssignment.VALUE);
  }

  public void setValue(Expression node) {
    super.setChild(CommandParameterAssignment.VALUE, node);
  }

  public static CommandParameterAssignment newInstance(SModel sm, boolean init) {
    return (CommandParameterAssignment) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.execution.commands.structure.CommandParameterAssignment", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CommandParameterAssignment newInstance(SModel sm) {
    return CommandParameterAssignment.newInstance(sm, false);
  }
}
