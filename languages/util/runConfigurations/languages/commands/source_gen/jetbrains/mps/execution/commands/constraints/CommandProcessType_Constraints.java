package jetbrains.mps.execution.commands.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class CommandProcessType_Constraints extends BaseConstraintsDescriptor {
  public CommandProcessType_Constraints() {
    super("jetbrains.mps.execution.commands.structure.CommandProcessType");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("alias", new BasePropertyConstraintsDescriptor("alias", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "alias";
        {
          String string = "process";
          if ((SLinkOperations.getTarget(node, "commandDeclaration", false) == null)) {
            return string;
          }
          return string + "<" + SPropertyOperations.getString(SLinkOperations.getTarget(node, "commandDeclaration", false), "name") + ">";
        }
      }
    });
    return properties;
  }
}
