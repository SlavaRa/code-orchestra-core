package jetbrains.mps.execution.commands.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.baseLanguage.classifiers.structure.IClassifier;
import jetbrains.mps.execution.common.structure.IGeneratedToClass;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.debug.apiLang.structure.DebuggerConfiguration;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CommandDeclaration extends BaseConcept implements INamedConcept, IClassifier, IGeneratedToClass {
  public static final String concept = "jetbrains.mps.execution.commands.structure.CommandDeclaration";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String DEBUGGER_CONFIGURATION = "debuggerConfiguration";
  public static final String DEBUGGER_PARAMETER = "debuggerParameter";
  public static final String METHOD = "method";
  public static final String EXECUTE_PART = "executePart";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public CommandDeclaration(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(CommandDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(CommandDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(CommandDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(CommandDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(CommandDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(CommandDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(CommandDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(CommandDeclaration.VIRTUAL_PACKAGE, value);
  }

  public DebuggerConfiguration getDebuggerConfiguration() {
    return (DebuggerConfiguration) this.getChild(DebuggerConfiguration.class, CommandDeclaration.DEBUGGER_CONFIGURATION);
  }

  public void setDebuggerConfiguration(DebuggerConfiguration node) {
    super.setChild(CommandDeclaration.DEBUGGER_CONFIGURATION, node);
  }

  public DebuggerSettingsCommandParameterDeclaration getDebuggerParameter() {
    return (DebuggerSettingsCommandParameterDeclaration) this.getChild(DebuggerSettingsCommandParameterDeclaration.class, CommandDeclaration.DEBUGGER_PARAMETER);
  }

  public void setDebuggerParameter(DebuggerSettingsCommandParameterDeclaration node) {
    super.setChild(CommandDeclaration.DEBUGGER_PARAMETER, node);
  }

  public int getMethodsCount() {
    return this.getChildCount(CommandDeclaration.METHOD);
  }

  public Iterator<CommandMethod> methods() {
    return this.children(CommandMethod.class, CommandDeclaration.METHOD);
  }

  public List<CommandMethod> getMethods() {
    return this.getChildren(CommandMethod.class, CommandDeclaration.METHOD);
  }

  public void addMethod(CommandMethod node) {
    this.addChild(CommandDeclaration.METHOD, node);
  }

  public void insertMethod(CommandMethod prev, CommandMethod node) {
    this.insertChild(prev, CommandDeclaration.METHOD, node);
  }

  public int getExecutePartsCount() {
    return this.getChildCount(CommandDeclaration.EXECUTE_PART);
  }

  public Iterator<ExecuteCommandPart> executeParts() {
    return this.children(ExecuteCommandPart.class, CommandDeclaration.EXECUTE_PART);
  }

  public List<ExecuteCommandPart> getExecuteParts() {
    return this.getChildren(ExecuteCommandPart.class, CommandDeclaration.EXECUTE_PART);
  }

  public void addExecutePart(ExecuteCommandPart node) {
    this.addChild(CommandDeclaration.EXECUTE_PART, node);
  }

  public void insertExecutePart(ExecuteCommandPart prev, ExecuteCommandPart node) {
    this.insertChild(prev, CommandDeclaration.EXECUTE_PART, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(CommandDeclaration.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, CommandDeclaration.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, CommandDeclaration.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(CommandDeclaration.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, CommandDeclaration.SMODEL_ATTRIBUTE, node);
  }

  public static CommandDeclaration newInstance(SModel sm, boolean init) {
    return (CommandDeclaration) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.execution.commands.structure.CommandDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CommandDeclaration newInstance(SModel sm) {
    return CommandDeclaration.newInstance(sm, false);
  }
}
