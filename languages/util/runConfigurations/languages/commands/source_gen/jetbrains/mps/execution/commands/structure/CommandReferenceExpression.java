package jetbrains.mps.execution.commands.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CommandReferenceExpression extends Expression {
  public static final String concept = "jetbrains.mps.execution.commands.structure.CommandReferenceExpression";
  public static final String COMMAND = "command";

  public CommandReferenceExpression(SNode node) {
    super(node);
  }

  public CommandDeclaration getCommand() {
    return (CommandDeclaration) this.getReferent(CommandDeclaration.class, CommandReferenceExpression.COMMAND);
  }

  public void setCommand(CommandDeclaration node) {
    super.setReferent(CommandReferenceExpression.COMMAND, node);
  }

  public static CommandReferenceExpression newInstance(SModel sm, boolean init) {
    return (CommandReferenceExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.execution.commands.structure.CommandReferenceExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CommandReferenceExpression newInstance(SModel sm) {
    return CommandReferenceExpression.newInstance(sm, false);
  }
}
