package jetbrains.mps.execution.settings.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.AbstractCreator;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class PersistentConfigurationTemplateInitializer extends AbstractCreator {
  public static final String concept = "jetbrains.mps.execution.settings.structure.PersistentConfigurationTemplateInitializer";
  public static final String TEMPLATE = "template";
  public static final String PARAMETER = "parameter";

  public PersistentConfigurationTemplateInitializer(SNode node) {
    super(node);
  }

  public PersistentConfigurationTemplate getTemplate() {
    return (PersistentConfigurationTemplate) this.getReferent(PersistentConfigurationTemplate.class, PersistentConfigurationTemplateInitializer.TEMPLATE);
  }

  public void setTemplate(PersistentConfigurationTemplate node) {
    super.setReferent(PersistentConfigurationTemplateInitializer.TEMPLATE, node);
  }

  public int getParametersCount() {
    return this.getChildCount(PersistentConfigurationTemplateInitializer.PARAMETER);
  }

  public Iterator<Expression> parameters() {
    return this.children(Expression.class, PersistentConfigurationTemplateInitializer.PARAMETER);
  }

  public List<Expression> getParameters() {
    return this.getChildren(Expression.class, PersistentConfigurationTemplateInitializer.PARAMETER);
  }

  public void addParameter(Expression node) {
    this.addChild(PersistentConfigurationTemplateInitializer.PARAMETER, node);
  }

  public void insertParameter(Expression prev, Expression node) {
    this.insertChild(prev, PersistentConfigurationTemplateInitializer.PARAMETER, node);
  }

  public static PersistentConfigurationTemplateInitializer newInstance(SModel sm, boolean init) {
    return (PersistentConfigurationTemplateInitializer) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.execution.settings.structure.PersistentConfigurationTemplateInitializer", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static PersistentConfigurationTemplateInitializer newInstance(SModel sm) {
    return PersistentConfigurationTemplateInitializer.newInstance(sm, false);
  }
}
