package jetbrains.mps.execution.demo.plugin;

/*Generated by MPS */

import java.util.List;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class DemoApplication_Producer {
  private static String CONFIGURATION_FACTORY_CLASS_NAME = "jetbrains.mps.execution.demo.plugin.DemoApplication_Configuration_Factory";

  public DemoApplication_Producer() {
  }

  public static List<RuntimeConfigurationProducer> getProducers(ConfigurationType configurationType) {
    List<RuntimeConfigurationProducer> creators = ListSequence.fromList(new ArrayList<RuntimeConfigurationProducer>());
    ListSequence.fromList(creators).addElement(new DemoApplication_Producer.ProducerPart_NodeSomeConcept_rh22bz_a(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    return creators;
  }

  public static class ProducerPart_NodeSomeConcept_rh22bz_a extends BaseConfigCreator<SNode> {
    public ProducerPart_NodeSomeConcept_rh22bz_a(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), "jetbrains.mps.execution.demo.structure.SomeConcept");
    }

    protected DemoApplication_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(new MPSPsiElement(source));
      if (!(SPropertyOperations.getBoolean(source, "valid"))) {
        return null;
      }
      DemoApplication_Configuration configuration = new DemoApplication_Configuration(getContext().getProject(), (DemoApplication_Configuration_Factory) getConfigurationFactory(), "SomeNode " + SPropertyOperations.getString(source, "name"));
      configuration.getNode().setNode(source);
      return configuration;
    }

    @Override
    public DemoApplication_Producer.ProducerPart_NodeSomeConcept_rh22bz_a clone() {
      return (DemoApplication_Producer.ProducerPart_NodeSomeConcept_rh22bz_a) super.clone();
    }
  }
}
