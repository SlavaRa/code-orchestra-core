package jetbrains.mps.execution.api.commands;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.annotations.Nullable;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.process.ProcessHandler;
import com.intellij.execution.ExecutionException;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import java.io.IOException;
import com.intellij.execution.process.ProcessNotCreatedException;
import com.intellij.execution.configurations.GeneralCommandLine;

public class ProcessHandlerBuilder {
  private final List<String> myCommandLine = ListSequence.fromList(new ArrayList<String>());

  public ProcessHandlerBuilder() {
  }

  public List<String> getCommandLine() {
    return myCommandLine;
  }

  public ProcessHandlerBuilder append(@Nullable String command) {
    if (!(StringUtils.isEmpty(command))) {
      ListSequence.fromList(myCommandLine).addSequence(Sequence.fromIterable(splitCommandInParts(command)));
    }
    return this;
  }

  public ProcessHandlerBuilder append(String... command) {
    for (String commandPart : Sequence.fromIterable(Sequence.fromArray(command))) {
      append(commandPart);
    }
    return this;
  }

  public ProcessHandlerBuilder append(@NotNull List<String> command) {
    for (String commandPart : ListSequence.fromList(command)) {
      append(commandPart);
    }
    return this;
  }

  public ProcessHandlerBuilder appendKey(@Nullable String key, @Nullable String parameter) {
    if (StringUtils.isNotEmpty(key) && StringUtils.isNotEmpty(parameter)) {
      return append("-" + key).append(parameter);
    }
    return this;
  }

  public ProcessHandlerBuilder appendKey(@Nullable String key, String... parameter) {
    if (StringUtils.isNotEmpty(key) && parameter.length > 0) {
      return append("-" + key).append(parameter);
    }
    return this;
  }

  public ProcessHandlerBuilder appendKey(@Nullable String key, @NotNull List<String> parameters) {
    if (StringUtils.isNotEmpty(key) && ListSequence.fromList(parameters).isNotEmpty()) {
      return append("-" + key).append(parameters);
    }
    return this;
  }

  public ProcessHandler build() throws ExecutionException {
    return build(new File(System.getProperty("user.dir")));
  }

  public ProcessHandler build(@NotNull File workingDirectory) throws ExecutionException {
    if (!(workingDirectory.exists())) {
      throw new ExecutionException("Working directory " + workingDirectory + " does not exist.");
    }
    ProcessBuilder builder = new ProcessBuilder(ListSequence.fromList(myCommandLine).toGenericArray(String.class));
    builder.directory(workingDirectory);
    try {
      Process process = builder.start();
      DefaultProcessHandler processHandler = new DefaultProcessHandler(process, ListSequence.fromList(myCommandLine).foldLeft("", new ILeftCombinator<String, String>() {
        public String combine(String s, String it) {
          return (StringUtils.isEmpty(s) ?
            it :
            s + " " + it
          );
        }
      }));
      return processHandler;
    } catch (IOException e) {
      throw new ProcessNotCreatedException("Start process failed", e, getCommandLine(workingDirectory.getAbsolutePath()));
    } catch (NullPointerException e) {
      throw new ProcessNotCreatedException("Start process failed: one of the command line arguments is null", e, getCommandLine(workingDirectory.getAbsolutePath()));
    } catch (Throwable t) {
      throw new ProcessNotCreatedException("Start process failed", t, getCommandLine(workingDirectory.getAbsolutePath()));
    }
  }

  private GeneralCommandLine getCommandLine(String workingDirectory) {
    GeneralCommandLine commandLine = new GeneralCommandLine();
    commandLine.setExePath(ListSequence.fromList(myCommandLine).getElement(0));
    commandLine.setWorkDirectory(workingDirectory);
    commandLine.addParameters(ListSequence.fromList(myCommandLine).tailListSequence(1));
    return commandLine;
  }

  public static Iterable<String> splitCommandInParts(@NotNull String command) {
    List<String> result = ListSequence.fromList(new ArrayList<String>());
    boolean insideQuotes = false;
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < command.length(); i++) {
      char currentChar = command.charAt(i);
      if (currentChar == '"' && (i == 0 || command.charAt(i - 1) != '\\')) {
        insideQuotes = !(insideQuotes);
        continue;
      }
      if (currentChar == ' ' && !(insideQuotes)) {
        // word ended 
        if (sb.length() > 0) {
          ListSequence.fromList(result).addElement(sb.toString());
          sb = new StringBuilder();
        }
      } else if (currentChar == '\\' && (i < command.length() - 1 && command.charAt(i + 1) == '"')) {
        continue;
      } else {
        // inside word 
        sb.append(currentChar);
      }
    }
    if (sb.length() > 0) {
      ListSequence.fromList(result).addElement(sb.toString());
    }
    return result;
  }
}
