package jetbrains.mps.baseLanguage.regexp.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Regexps extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.baseLanguage.regexp.structure.Regexps";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String REGEXP = "regexp";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Regexps(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Regexps.NAME);
  }

  public void setName(String value) {
    this.setProperty(Regexps.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Regexps.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Regexps.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Regexps.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Regexps.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Regexps.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Regexps.VIRTUAL_PACKAGE, value);
  }

  public int getRegexpsCount() {
    return this.getChildCount(Regexps.REGEXP);
  }

  public Iterator<RegexpDeclaration> regexps() {
    return this.children(RegexpDeclaration.class, Regexps.REGEXP);
  }

  public List<RegexpDeclaration> getRegexps() {
    return this.getChildren(RegexpDeclaration.class, Regexps.REGEXP);
  }

  public void addRegexp(RegexpDeclaration node) {
    this.addChild(Regexps.REGEXP, node);
  }

  public void insertRegexp(RegexpDeclaration prev, RegexpDeclaration node) {
    this.insertChild(prev, Regexps.REGEXP, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Regexps.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Regexps.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Regexps.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Regexps.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Regexps.SMODEL_ATTRIBUTE, node);
  }

  public static Regexps newInstance(SModel sm, boolean init) {
    return (Regexps) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.Regexps", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Regexps newInstance(SModel sm) {
    return Regexps.newInstance(sm, false);
  }
}
