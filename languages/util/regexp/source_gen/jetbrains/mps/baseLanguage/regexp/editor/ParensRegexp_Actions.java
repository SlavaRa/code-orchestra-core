package jetbrains.mps.baseLanguage.regexp.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.EditorCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.CellConditions;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;

public class ParensRegexp_Actions {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new ParensRegexp_Actions.ParensRegexp_Actions_DELETE(node));
  }

  public static class ParensRegexp_Actions_DELETE extends EditorCellAction {
    /*package*/ SNode myNode;

    public ParensRegexp_Actions_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode nn = SLinkOperations.getTarget(node, "expr", true);
      SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, "expr", true));

      editorContext.flushEvents();
      EditorComponent editor = editorContext.getNodeEditorComponent();
      EditorCell cell = editor.findNodeCell(nn);
      if (cell != null) {
        EditorCell lastLeaf = cell.getLastLeaf(CellConditions.SELECTABLE);
        editor.changeSelection(lastLeaf);
        if (lastLeaf instanceof EditorCell_Label) {
          ((EditorCell_Label) lastLeaf).end();
        }
      }
    }
  }
}
