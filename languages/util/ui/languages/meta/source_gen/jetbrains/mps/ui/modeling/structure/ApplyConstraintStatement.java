package jetbrains.mps.ui.modeling.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ApplyConstraintStatement extends Statement {
  public static final String concept = "jetbrains.mps.ui.modeling.structure.ApplyConstraintStatement";
  public static final String WIDGET = "widget";
  public static final String CONTAINER = "container";
  public static final String CONSTRAINT = "constraint";

  public ApplyConstraintStatement(SNode node) {
    super(node);
  }

  public Expression getWidget() {
    return (Expression) this.getChild(Expression.class, ApplyConstraintStatement.WIDGET);
  }

  public void setWidget(Expression node) {
    super.setChild(ApplyConstraintStatement.WIDGET, node);
  }

  public Expression getContainer() {
    return (Expression) this.getChild(Expression.class, ApplyConstraintStatement.CONTAINER);
  }

  public void setContainer(Expression node) {
    super.setChild(ApplyConstraintStatement.CONTAINER, node);
  }

  public int getConstraintsCount() {
    return this.getChildCount(ApplyConstraintStatement.CONSTRAINT);
  }

  public Iterator<Expression> constraints() {
    return this.children(Expression.class, ApplyConstraintStatement.CONSTRAINT);
  }

  public List<Expression> getConstraints() {
    return this.getChildren(Expression.class, ApplyConstraintStatement.CONSTRAINT);
  }

  public void addConstraint(Expression node) {
    this.addChild(ApplyConstraintStatement.CONSTRAINT, node);
  }

  public void insertConstraint(Expression prev, Expression node) {
    this.insertChild(prev, ApplyConstraintStatement.CONSTRAINT, node);
  }

  public static ApplyConstraintStatement newInstance(SModel sm, boolean init) {
    return (ApplyConstraintStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.modeling.structure.ApplyConstraintStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ApplyConstraintStatement newInstance(SModel sm) {
    return ApplyConstraintStatement.newInstance(sm, false);
  }
}
