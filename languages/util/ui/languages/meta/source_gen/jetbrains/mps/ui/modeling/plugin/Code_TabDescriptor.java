package jetbrains.mps.ui.modeling.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.editorTabs.EditorTabDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.awt.Frame;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.ide.DataManager;
import javax.swing.JOptionPane;

public class Code_TabDescriptor extends EditorTabDescriptor {
  public Code_TabDescriptor() {
  }

  public String getTitle() {
    return "Code";
  }

  public void startListening() {
    throw new RuntimeException("NOT IMPLEMENTED");
  }

  public SNode getBaseNode(SNode node) {
    return Event_editor_Helper.getBaseNode(node);
  }

  public boolean isApplicable(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.ui.modeling.structure.Event");
  }

  public List<SNode> getNodes(SNode node) {
    if (!(EditorExtensions.isInitialized())) {
      return new ArrayList<SNode>();
    }
    final SNode event = node;
    return Sequence.fromIterable(EditorExtensions.getInstance().findAllEventHandlerTemplates()).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode eht) {
        return SLinkOperations.getTarget(eht, "event", false) == event;
      }
    }).toListSequence();
  }

  public boolean isSingle() {
    return false;
  }

  public List<SNode> getConcepts(final SNode node) {
    return ListSequence.fromListAndArray(new ArrayList<SNode>(), SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.modeling.structure.EventHandlerTemplate"));
  }

  public SNode createNode(final SNode node, final SNode concept) {
    String defVal = "<default>";
    Object[] msg = new Object[]{"Choose destination model for the new template:"};
    Object[] selVals = Sequence.fromIterable(Sequence.<Object>singleton(defVal)).concat(Sequence.fromIterable(EditorExtensions.getInstance().findEventHandlerTemplateCreatorsInfo())).toGenericArray(Object.class);
    Frame frame = MPSDataKeys.FRAME.getData(DataManager.getInstance().getDataContext());
    Object creatorInfo = JOptionPane.showInputDialog(frame, msg, "Choose destination model", JOptionPane.QUESTION_MESSAGE, null, selVals, defVal);
    if (defVal.equals(creatorInfo)) {
      JOptionPane.showMessageDialog(frame, "Cannot create template", "Error", JOptionPane.ERROR_MESSAGE);
      return null;
    }
    return (creatorInfo != null ?
      EditorExtensions.getInstance().createEventHandlerTemplate(node, creatorInfo) :
      null
    );
  }
}
