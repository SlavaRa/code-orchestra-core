package jetbrains.mps.ui.modeling.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AlignmentLayoutConstraint extends LayoutConstraint {
  public static final String concept = "jetbrains.mps.ui.modeling.structure.AlignmentLayoutConstraint";
  public static final String H_ALIGNMENT = "hAlignment";
  public static final String V_ALIGNMENT = "vAlignment";

  public AlignmentLayoutConstraint(SNode node) {
    super(node);
  }

  public HorizontalAlignment getHAlignment() {
    return (HorizontalAlignment) this.getChild(HorizontalAlignment.class, AlignmentLayoutConstraint.H_ALIGNMENT);
  }

  public void setHAlignment(HorizontalAlignment node) {
    super.setChild(AlignmentLayoutConstraint.H_ALIGNMENT, node);
  }

  public VerticalAlignment getVAlignment() {
    return (VerticalAlignment) this.getChild(VerticalAlignment.class, AlignmentLayoutConstraint.V_ALIGNMENT);
  }

  public void setVAlignment(VerticalAlignment node) {
    super.setChild(AlignmentLayoutConstraint.V_ALIGNMENT, node);
  }

  public static AlignmentLayoutConstraint newInstance(SModel sm, boolean init) {
    return (AlignmentLayoutConstraint) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.modeling.structure.AlignmentLayoutConstraint", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AlignmentLayoutConstraint newInstance(SModel sm) {
    return AlignmentLayoutConstraint.newInstance(sm, false);
  }
}
