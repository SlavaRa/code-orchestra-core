package jetbrains.mps.ui.modeling.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class EditorExtensions {
  private static Logger LOG = Logger.getLogger(EditorExtensions.class);
  private static List<_FunctionTypes._void_P1_E0<? super EditorExtensions>> InitDelayedBlocks = ListSequence.fromList(new LinkedList<_FunctionTypes._void_P1_E0<? super EditorExtensions>>());
  private static List<_FunctionTypes._void_P1_E0<? super EditorExtensions>> DisposeDelayedBlocks = ListSequence.fromList(new LinkedList<_FunctionTypes._void_P1_E0<? super EditorExtensions>>());
  private static EditorExtensions INSTANCE = null;
  private static boolean DISPOSED = false;

  private List<IObjectsProvider<SNode, SNode>> uiObjectTemplateProviders = ListSequence.fromList(new ArrayList<IObjectsProvider<SNode, SNode>>());
  private List<IObjectsProvider<SNode, SNode>> eventHandlerTemplateProviders = ListSequence.fromList(new ArrayList<IObjectsProvider<SNode, SNode>>());

  /*package*/ EditorExtensions() {
    synchronized (EditorExtensions.class) {
      INSTANCE = this;
    }
  }

  public void addUIObjectTemplateProvider(IObjectsProvider<SNode, SNode> prov) {
    ListSequence.fromList(this.uiObjectTemplateProviders).addElement(prov);
  }

  public void removeUIObjectTemplateProvider(IObjectsProvider<SNode, SNode> prov) {
    ListSequence.fromList(this.uiObjectTemplateProviders).removeElement(prov);
  }

  public void addEventHandlerTemplateProvider(IObjectsProvider<SNode, SNode> prov) {
    ListSequence.fromList(this.eventHandlerTemplateProviders).addElement(prov);
  }

  public void removeEventHandlerTemplateProvider(IObjectsProvider<SNode, SNode> prov) {
    ListSequence.fromList(this.eventHandlerTemplateProviders).removeElement(prov);
  }

  public Iterable<SNode> findAllUIObjectTemplates() {
    return ListSequence.fromList(this.uiObjectTemplateProviders).translate(new ITranslator2<IObjectsProvider<SNode, SNode>, SNode>() {
      public Iterable<SNode> translate(IObjectsProvider<SNode, SNode> prov) {
        return prov.getObjects();
      }
    });
  }

  public Iterable<SNode> findAllEventHandlerTemplates() {
    return ListSequence.fromList(this.eventHandlerTemplateProviders).translate(new ITranslator2<IObjectsProvider<SNode, SNode>, SNode>() {
      public Iterable<SNode> translate(IObjectsProvider<SNode, SNode> prov) {
        return prov.getObjects();
      }
    });
  }

  public Iterable<Object> findTemplateCreatorsInfo() {
    return ListSequence.fromList(this.uiObjectTemplateProviders).select(new ISelector<IObjectsProvider<SNode, SNode>, Object>() {
      public Object select(IObjectsProvider<SNode, SNode> tc) {
        return tc.info();
      }
    });
  }

  public Iterable<Object> findEventHandlerTemplateCreatorsInfo() {
    return ListSequence.fromList(this.eventHandlerTemplateProviders).select(new ISelector<IObjectsProvider<SNode, SNode>, Object>() {
      public Object select(IObjectsProvider<SNode, SNode> tc) {
        return tc.info();
      }
    });
  }

  public SNode createTemplate(SNode uiObject, final Object creatorInfo) {
    if (creatorInfo == null) {
      throw new NullPointerException();
    }
    IObjectsProvider<SNode, SNode> tc = ListSequence.fromList(this.uiObjectTemplateProviders).findFirst(new IWhereFilter<IObjectsProvider<SNode, SNode>>() {
      public boolean accept(IObjectsProvider<SNode, SNode> tc) {
        return creatorInfo.equals(tc.info());
      }
    });
    if (tc == null) {
      throw new IllegalArgumentException("No such creator: " + creatorInfo);
    }
    return tc.create(uiObject);
  }

  public SNode createEventHandlerTemplate(SNode event, final Object creatorInfo) {
    if (creatorInfo == null) {
      throw new NullPointerException();
    }
    IObjectsProvider<SNode, SNode> tc = ListSequence.fromList(this.eventHandlerTemplateProviders).findFirst(new IWhereFilter<IObjectsProvider<SNode, SNode>>() {
      public boolean accept(IObjectsProvider<SNode, SNode> tc) {
        return creatorInfo.equals(tc.info());
      }
    });
    if (tc == null) {
      throw new IllegalArgumentException("No such creator: " + creatorInfo);
    }
    return tc.create(event);
  }

  /*package*/ void init() {
    this.runAllDelayed();
  }

  /*package*/ void dispose() {
    synchronized (EditorExtensions.class) {
      this.runAllOnDispose();
      ListSequence.fromList(this.uiObjectTemplateProviders).clear();
      ListSequence.fromList(this.eventHandlerTemplateProviders).clear();
      INSTANCE = null;
      DISPOSED = true;
    }
  }

  private void runAllDelayed() {
    synchronized (EditorExtensions.class) {
      while (ListSequence.fromList(InitDelayedBlocks).isNotEmpty()) {
        ListSequence.fromList(InitDelayedBlocks).removeElementAt(0).invoke(this);
      }
    }
  }

  private void runAllOnDispose() {
    synchronized (EditorExtensions.class) {
      while (ListSequence.fromList(DisposeDelayedBlocks).isNotEmpty()) {
        ListSequence.fromList(DisposeDelayedBlocks).removeElementAt(0).invoke(this);
      }
    }
  }

  public static void runDelayed(_FunctionTypes._void_P1_E0<? super EditorExtensions> block) {
    synchronized (EditorExtensions.class) {
      if (INSTANCE == null && DISPOSED) {
        LOG.info("EditorExtensions.runDelayed called after dispose");
      } else {
        ListSequence.fromList(InitDelayedBlocks).addElement(block);
      }
      if (INSTANCE != null) {
        INSTANCE.runAllDelayed();
      }
    }
  }

  public static void runOnDispose(_FunctionTypes._void_P1_E0<? super EditorExtensions> block) {
    synchronized (EditorExtensions.class) {
      if (INSTANCE == null && DISPOSED) {
        LOG.info("EditorExtensions.runOnDispose called after dispose");
      } else {
        ListSequence.fromList(DisposeDelayedBlocks).addElement(block);
      }
    }
  }

  /*package*/ static EditorExtensions getInstance() {
    if (INSTANCE == null) {
      throw new IllegalStateException("Not initialized");
    }
    return INSTANCE;
  }

  /*package*/ static boolean isInitialized() {
    return INSTANCE != null;
  }
}
