package jetbrains.mps.ui.modeling.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Container extends BaseConcept implements INamedConcept, HasTemplate {
  public static final String concept = "jetbrains.mps.ui.modeling.structure.Container";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String SPECIALIZES = "specializes";
  public static final String ALLOWS = "allows";
  public static final String REQUIRED_ASPECT = "requiredAspect";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Container(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Container.NAME);
  }

  public void setName(String value) {
    this.setProperty(Container.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Container.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Container.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Container.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Container.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Container.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Container.VIRTUAL_PACKAGE, value);
  }

  public Container getSpecializes() {
    return (Container) this.getReferent(Container.class, Container.SPECIALIZES);
  }

  public void setSpecializes(Container node) {
    super.setReferent(Container.SPECIALIZES, node);
  }

  public UIObject getAllows() {
    return (UIObject) this.getReferent(UIObject.class, Container.ALLOWS);
  }

  public void setAllows(UIObject node) {
    super.setReferent(Container.ALLOWS, node);
  }

  public int getRequiredAspectsCount() {
    return this.getChildCount(Container.REQUIRED_ASPECT);
  }

  public Iterator<ChildAspectDefinition> requiredAspects() {
    return this.children(ChildAspectDefinition.class, Container.REQUIRED_ASPECT);
  }

  public List<ChildAspectDefinition> getRequiredAspects() {
    return this.getChildren(ChildAspectDefinition.class, Container.REQUIRED_ASPECT);
  }

  public void addRequiredAspect(ChildAspectDefinition node) {
    this.addChild(Container.REQUIRED_ASPECT, node);
  }

  public void insertRequiredAspect(ChildAspectDefinition prev, ChildAspectDefinition node) {
    this.insertChild(prev, Container.REQUIRED_ASPECT, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Container.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Container.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Container.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Container.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Container.SMODEL_ATTRIBUTE, node);
  }

  public static Container newInstance(SModel sm, boolean init) {
    return (Container) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.modeling.structure.Container", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Container newInstance(SModel sm) {
    return Container.newInstance(sm, false);
  }
}
