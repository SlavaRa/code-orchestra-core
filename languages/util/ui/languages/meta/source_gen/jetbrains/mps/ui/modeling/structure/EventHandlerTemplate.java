package jetbrains.mps.ui.modeling.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class EventHandlerTemplate extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.ui.modeling.structure.EventHandlerTemplate";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EVENT = "event";
  public static final String EVENT_TYPE = "eventType";
  public static final String PRODUCER_TYPE = "producerType";
  public static final String SETUP = "setup";
  public static final String PROPERTY_GETTER = "propertyGetter";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public EventHandlerTemplate(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(EventHandlerTemplate.NAME);
  }

  public void setName(String value) {
    this.setProperty(EventHandlerTemplate.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(EventHandlerTemplate.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(EventHandlerTemplate.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(EventHandlerTemplate.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(EventHandlerTemplate.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(EventHandlerTemplate.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(EventHandlerTemplate.VIRTUAL_PACKAGE, value);
  }

  public Event getEvent() {
    return (Event) this.getReferent(Event.class, EventHandlerTemplate.EVENT);
  }

  public void setEvent(Event node) {
    super.setReferent(EventHandlerTemplate.EVENT, node);
  }

  public Type getEventType() {
    return (Type) this.getChild(Type.class, EventHandlerTemplate.EVENT_TYPE);
  }

  public void setEventType(Type node) {
    super.setChild(EventHandlerTemplate.EVENT_TYPE, node);
  }

  public Type getProducerType() {
    return (Type) this.getChild(Type.class, EventHandlerTemplate.PRODUCER_TYPE);
  }

  public void setProducerType(Type node) {
    super.setChild(EventHandlerTemplate.PRODUCER_TYPE, node);
  }

  public EventHandlerSetup getSetup() {
    return (EventHandlerSetup) this.getChild(EventHandlerSetup.class, EventHandlerTemplate.SETUP);
  }

  public void setSetup(EventHandlerSetup node) {
    super.setChild(EventHandlerTemplate.SETUP, node);
  }

  public int getPropertyGettersCount() {
    return this.getChildCount(EventHandlerTemplate.PROPERTY_GETTER);
  }

  public Iterator<EventPropertyGetter> propertyGetters() {
    return this.children(EventPropertyGetter.class, EventHandlerTemplate.PROPERTY_GETTER);
  }

  public List<EventPropertyGetter> getPropertyGetters() {
    return this.getChildren(EventPropertyGetter.class, EventHandlerTemplate.PROPERTY_GETTER);
  }

  public void addPropertyGetter(EventPropertyGetter node) {
    this.addChild(EventHandlerTemplate.PROPERTY_GETTER, node);
  }

  public void insertPropertyGetter(EventPropertyGetter prev, EventPropertyGetter node) {
    this.insertChild(prev, EventHandlerTemplate.PROPERTY_GETTER, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(EventHandlerTemplate.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, EventHandlerTemplate.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, EventHandlerTemplate.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(EventHandlerTemplate.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, EventHandlerTemplate.SMODEL_ATTRIBUTE, node);
  }

  public static EventHandlerTemplate newInstance(SModel sm, boolean init) {
    return (EventHandlerTemplate) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.modeling.structure.EventHandlerTemplate", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static EventHandlerTemplate newInstance(SModel sm) {
    return EventHandlerTemplate.newInstance(sm, false);
  }
}
