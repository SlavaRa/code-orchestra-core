package jetbrains.mps.ui.modeling.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class Event_Behavior {
  public static void init(SNode thisNode) {
    SPropertyOperations.set(thisNode, "handleable", "" + true);
  }

  public static Iterable<SNode> call_allExtends_5224413709454845737(final SNode thisNode) {
    return Sequence.fromClosure(new ISequenceClosure<SNode>() {
      public Iterable<SNode> iterable() {
        return new Iterable<SNode>() {
          public Iterator<SNode> iterator() {
            return new YieldingIterator<SNode>() {
              private int __CP__ = 0;
              private SNode _2_ev;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_ev = thisNode;
                    case 3:
                      if (!((_2_ev != null))) {
                        this.__CP__ = 1;
                        break;
                      }
                      this.__CP__ = 4;
                      break;
                    case 5:
                      _2_ev = SLinkOperations.getTarget(_2_ev, "extends", false);
                      this.__CP__ = 3;
                      break;
                    case 6:
                      this.__CP__ = 5;
                      this.yield(_2_ev);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this.__CP__ = 6;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
            };
          }
        };
      }
    });
  }

  public static SNode virtual_findTemplate_3939571372331676060(final SNode thisNode, SModel model, IScope scope) {
    return ListSequence.fromList(SModelOperations.getNodesIncludingImported(model, scope, "jetbrains.mps.ui.modeling.structure.EventHandlerTemplate")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode eht) {
        return SLinkOperations.getTarget(eht, "event", false) == thisNode;
      }
    });
  }
}
