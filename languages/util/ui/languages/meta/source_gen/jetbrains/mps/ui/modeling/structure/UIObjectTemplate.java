package jetbrains.mps.ui.modeling.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class UIObjectTemplate extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.ui.modeling.structure.UIObjectTemplate";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String UI_OBJECT = "uiObject";
  public static final String RUNTIME_TYPE = "runtimeType";
  public static final String AUXILLARY = "auxillary";
  public static final String GEOMETRY = "geometry";
  public static final String FACTORY = "factory";
  public static final String PROPERTY_ACCESSOR = "propertyAccessor";
  public static final String ACTION_HANDLER = "actionHandler";
  public static final String CONTAINER_TEMPLATE = "containerTemplate";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public UIObjectTemplate(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(UIObjectTemplate.NAME);
  }

  public void setName(String value) {
    this.setProperty(UIObjectTemplate.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(UIObjectTemplate.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(UIObjectTemplate.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(UIObjectTemplate.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(UIObjectTemplate.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(UIObjectTemplate.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(UIObjectTemplate.VIRTUAL_PACKAGE, value);
  }

  public UIObject getUiObject() {
    return (UIObject) this.getReferent(UIObject.class, UIObjectTemplate.UI_OBJECT);
  }

  public void setUiObject(UIObject node) {
    super.setReferent(UIObjectTemplate.UI_OBJECT, node);
  }

  public Type getRuntimeType() {
    return (Type) this.getChild(Type.class, UIObjectTemplate.RUNTIME_TYPE);
  }

  public void setRuntimeType(Type node) {
    super.setChild(UIObjectTemplate.RUNTIME_TYPE, node);
  }

  public Auxillary getAuxillary() {
    return (Auxillary) this.getChild(Auxillary.class, UIObjectTemplate.AUXILLARY);
  }

  public void setAuxillary(Auxillary node) {
    super.setChild(UIObjectTemplate.AUXILLARY, node);
  }

  public Geometry getGeometry() {
    return (Geometry) this.getChild(Geometry.class, UIObjectTemplate.GEOMETRY);
  }

  public void setGeometry(Geometry node) {
    super.setChild(UIObjectTemplate.GEOMETRY, node);
  }

  public int getFactoriesCount() {
    return this.getChildCount(UIObjectTemplate.FACTORY);
  }

  public Iterator<UIObjectFactory> factories() {
    return this.children(UIObjectFactory.class, UIObjectTemplate.FACTORY);
  }

  public List<UIObjectFactory> getFactories() {
    return this.getChildren(UIObjectFactory.class, UIObjectTemplate.FACTORY);
  }

  public void addFactory(UIObjectFactory node) {
    this.addChild(UIObjectTemplate.FACTORY, node);
  }

  public void insertFactory(UIObjectFactory prev, UIObjectFactory node) {
    this.insertChild(prev, UIObjectTemplate.FACTORY, node);
  }

  public int getPropertyAccessorsCount() {
    return this.getChildCount(UIObjectTemplate.PROPERTY_ACCESSOR);
  }

  public Iterator<UIPropertyAccessCode> propertyAccessors() {
    return this.children(UIPropertyAccessCode.class, UIObjectTemplate.PROPERTY_ACCESSOR);
  }

  public List<UIPropertyAccessCode> getPropertyAccessors() {
    return this.getChildren(UIPropertyAccessCode.class, UIObjectTemplate.PROPERTY_ACCESSOR);
  }

  public void addPropertyAccessor(UIPropertyAccessCode node) {
    this.addChild(UIObjectTemplate.PROPERTY_ACCESSOR, node);
  }

  public void insertPropertyAccessor(UIPropertyAccessCode prev, UIPropertyAccessCode node) {
    this.insertChild(prev, UIObjectTemplate.PROPERTY_ACCESSOR, node);
  }

  public int getActionHandlersCount() {
    return this.getChildCount(UIObjectTemplate.ACTION_HANDLER);
  }

  public Iterator<UIActionCode> actionHandlers() {
    return this.children(UIActionCode.class, UIObjectTemplate.ACTION_HANDLER);
  }

  public List<UIActionCode> getActionHandlers() {
    return this.getChildren(UIActionCode.class, UIObjectTemplate.ACTION_HANDLER);
  }

  public void addActionHandler(UIActionCode node) {
    this.addChild(UIObjectTemplate.ACTION_HANDLER, node);
  }

  public void insertActionHandler(UIActionCode prev, UIActionCode node) {
    this.insertChild(prev, UIObjectTemplate.ACTION_HANDLER, node);
  }

  public int getContainerTemplatesCount() {
    return this.getChildCount(UIObjectTemplate.CONTAINER_TEMPLATE);
  }

  public Iterator<ContainerTemplate> containerTemplates() {
    return this.children(ContainerTemplate.class, UIObjectTemplate.CONTAINER_TEMPLATE);
  }

  public List<ContainerTemplate> getContainerTemplates() {
    return this.getChildren(ContainerTemplate.class, UIObjectTemplate.CONTAINER_TEMPLATE);
  }

  public void addContainerTemplate(ContainerTemplate node) {
    this.addChild(UIObjectTemplate.CONTAINER_TEMPLATE, node);
  }

  public void insertContainerTemplate(ContainerTemplate prev, ContainerTemplate node) {
    this.insertChild(prev, UIObjectTemplate.CONTAINER_TEMPLATE, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(UIObjectTemplate.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, UIObjectTemplate.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, UIObjectTemplate.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(UIObjectTemplate.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, UIObjectTemplate.SMODEL_ATTRIBUTE, node);
  }

  public static UIObjectTemplate newInstance(SModel sm, boolean init) {
    return (UIObjectTemplate) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.modeling.structure.UIObjectTemplate", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static UIObjectTemplate newInstance(SModel sm) {
    return UIObjectTemplate.newInstance(sm, false);
  }
}
