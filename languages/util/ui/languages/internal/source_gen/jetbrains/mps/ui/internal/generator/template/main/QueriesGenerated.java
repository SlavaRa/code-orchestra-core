package jetbrains.mps.ui.internal.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ui.generator.template.helper.SessionObjects;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;

public class QueriesGenerated {
  public static boolean baseMappingRule_Condition_3494699385497198330(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "operation", true), "jetbrains.mps.ui.modeling.structure.AuxObjectAccessOp");
  }

  public static Object propertyMacro_GetPropertyValue_3494699385497198297(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode ctx = SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.ui.internal.structure.IContextWrapper", false, false), "context", true);
    String key = SPropertyOperations.getString(SNodeOperations.as(ctx, "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference"), "name");
    return (String) SessionObjects.VARIABLE_NAME.find(_context, SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "operation", true), "jetbrains.mps.ui.modeling.structure.AuxObjectAccessOp"), "template", false), key);
  }

  public static SNode sourceNodeQuery_6410919744913527716(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static Iterable sourceNodesQuery_8175837806589435431(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "body", true), "statement", true);
  }
}
