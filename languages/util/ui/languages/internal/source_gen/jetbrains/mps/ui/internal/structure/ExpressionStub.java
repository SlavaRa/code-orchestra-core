package jetbrains.mps.ui.internal.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.ui.modeling.structure.IPartiallyDefinedStub;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ui.modeling.structure.HasTemplate;
import jetbrains.mps.lang.structure.structure.LinkDeclaration;
import jetbrains.mps.lang.core.structure.BaseConcept;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ExpressionStub extends Expression implements IPartiallyDefinedStub {
  public static final String concept = "jetbrains.mps.ui.internal.structure.ExpressionStub";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String HAS_TEMPLATE = "hasTemplate";
  public static final String SELECTOR = "selector";
  public static final String ROLE = "role";
  public static final String TEMPLATE = "template";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public ExpressionStub(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(ExpressionStub.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ExpressionStub.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ExpressionStub.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ExpressionStub.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ExpressionStub.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ExpressionStub.VIRTUAL_PACKAGE, value);
  }

  public HasTemplate getHasTemplate() {
    return (HasTemplate) this.getReferent(HasTemplate.class, ExpressionStub.HAS_TEMPLATE);
  }

  public void setHasTemplate(HasTemplate node) {
    super.setReferent(ExpressionStub.HAS_TEMPLATE, node);
  }

  public LinkDeclaration getSelector() {
    return (LinkDeclaration) this.getReferent(LinkDeclaration.class, ExpressionStub.SELECTOR);
  }

  public void setSelector(LinkDeclaration node) {
    super.setReferent(ExpressionStub.SELECTOR, node);
  }

  public LinkDeclaration getRole() {
    return (LinkDeclaration) this.getReferent(LinkDeclaration.class, ExpressionStub.ROLE);
  }

  public void setRole(LinkDeclaration node) {
    super.setReferent(ExpressionStub.ROLE, node);
  }

  public BaseConcept getTemplate() {
    return (BaseConcept) this.getReferent(BaseConcept.class, ExpressionStub.TEMPLATE);
  }

  public void setTemplate(BaseConcept node) {
    super.setReferent(ExpressionStub.TEMPLATE, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(ExpressionStub.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, ExpressionStub.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, ExpressionStub.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(ExpressionStub.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, ExpressionStub.SMODEL_ATTRIBUTE, node);
  }

  public static ExpressionStub newInstance(SModel sm, boolean init) {
    return (ExpressionStub) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.internal.structure.ExpressionStub", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ExpressionStub newInstance(SModel sm) {
    return ExpressionStub.newInstance(sm, false);
  }
}
