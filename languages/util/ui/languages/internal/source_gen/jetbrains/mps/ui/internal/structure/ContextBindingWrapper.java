package jetbrains.mps.ui.internal.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ui.modeling.structure.Container;
import jetbrains.mps.baseLanguage.structure.Expression;
import java.util.Iterator;
import jetbrains.mps.ui.structure.ChildAspect;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ContextBindingWrapper extends ContextCompartmentWrapper {
  public static final String concept = "jetbrains.mps.ui.internal.structure.ContextBindingWrapper";
  public static final String UI_OBJECT = "uiObject";
  public static final String BEFORE = "before";
  public static final String CHILD_ASPECT = "childAspect";

  public ContextBindingWrapper(SNode node) {
    super(node);
  }

  public Container getContainer() {
    return this.ensureAdapter(Container.class, "container", this.getContainer());
  }

  public void setContainer(Container node) {
    this.setContainer(node);
  }

  public Expression getUiObject() {
    return (Expression) this.getChild(Expression.class, ContextBindingWrapper.UI_OBJECT);
  }

  public void setUiObject(Expression node) {
    super.setChild(ContextBindingWrapper.UI_OBJECT, node);
  }

  public Expression getBefore() {
    return (Expression) this.getChild(Expression.class, ContextBindingWrapper.BEFORE);
  }

  public void setBefore(Expression node) {
    super.setChild(ContextBindingWrapper.BEFORE, node);
  }

  public int getChildAspectsCount() {
    return this.getChildCount(ContextBindingWrapper.CHILD_ASPECT);
  }

  public Iterator<ChildAspect> childAspects() {
    return this.children(ChildAspect.class, ContextBindingWrapper.CHILD_ASPECT);
  }

  public List<ChildAspect> getChildAspects() {
    return this.getChildren(ChildAspect.class, ContextBindingWrapper.CHILD_ASPECT);
  }

  public void addChildAspect(ChildAspect node) {
    this.addChild(ContextBindingWrapper.CHILD_ASPECT, node);
  }

  public void insertChildAspect(ChildAspect prev, ChildAspect node) {
    this.insertChild(prev, ContextBindingWrapper.CHILD_ASPECT, node);
  }

  public static ContextBindingWrapper newInstance(SModel sm, boolean init) {
    return (ContextBindingWrapper) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.internal.structure.ContextBindingWrapper", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ContextBindingWrapper newInstance(SModel sm) {
    return ContextBindingWrapper.newInstance(sm, false);
  }
}
