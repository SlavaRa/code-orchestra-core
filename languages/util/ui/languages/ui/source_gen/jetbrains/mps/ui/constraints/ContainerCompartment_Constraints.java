package jetbrains.mps.ui.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.smodel.constraints.CanBeAChildContext;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ui.modeling.behavior.UIObject_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ContainerCompartment_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:383ba4d2-f4ec-41a6-8e7f-108e84a7c9f9(jetbrains.mps.ui.constraints)", "4391079257750083528");
  private static SNodePointer breakingNode_l7cikk_a0a3a0a0a1a0b0a1a2 = new SNodePointer("r:383ba4d2-f4ec-41a6-8e7f-108e84a7c9f9(jetbrains.mps.ui.constraints)", "4391079257750083009");

  public ContainerCompartment_Constraints() {
    super("jetbrains.mps.ui.structure.ContainerCompartment");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(final IOperationContext operationContext, SNode node, SNode node1, SNode node2, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(operationContext, new CanBeAChildContext(node, node1, node2));

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("container", new BaseReferenceConstraintsDescriptor("container", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            return SPropertyOperations.getString(_context.getParameterNode(), "name");
          }

          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            Iterable<SNode> allConts = Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "uiObject", false))).translate(new ITranslator2<SNode, SNode>() {
              public Iterable<SNode> translate(SNode uio) {
                return SLinkOperations.getTargets(uio, "compartment", true);
              }
            });
            Iterable<SNode> specializedConts = Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "uiObject", false))).translate(new ITranslator2<SNode, SNode>() {
              public Iterable<SNode> translate(SNode uio) {
                return SLinkOperations.getTargets(uio, "compartment", true);
              }
            }).select(new ISelector<SNode, SNode>() {
              public SNode select(SNode comp) {
                return SLinkOperations.getTarget(comp, "specializes", false);
              }
            }).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode comp) {
                return comp != null;
              }
            });
            Iterable<SNode> existingConts = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getEnclosingNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "compartment", true)).select(new ISelector<SNode, SNode>() {
              public SNode select(SNode comp) {
                return SLinkOperations.getTarget(comp, "container", false);
              }
            });
            return Sequence.fromIterable(allConts).subtract(Sequence.fromIterable(specializedConts)).subtract(Sequence.fromIterable(existingConts));
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_l7cikk_a0a3a0a0a1a0b0a1a2;
          }
        };
      }
    });
    return references;
  }

  public static boolean static_canBeAChild(final IOperationContext operationContext, final CanBeAChildContext _context) {
    return SNodeOperations.isInstanceOf(_context.getParentNode(), "jetbrains.mps.ui.structure.UIObjectStatement");
  }
}
