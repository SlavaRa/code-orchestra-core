package jetbrains.mps.ui.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ui.behavior.BeanPropertyView_Behavior;
import java.beans.Introspector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class BeanPropertyView_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_h502i8_a0a3a0a0a1a0b0a1a1 = new SNodePointer("r:383ba4d2-f4ec-41a6-8e7f-108e84a7c9f9(jetbrains.mps.ui.constraints)", "8381258131358762999");

  public BeanPropertyView_Constraints() {
    super("jetbrains.mps.ui.structure.BeanPropertyView");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("propertyName", new BasePropertyConstraintsDescriptor("propertyName", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "propertyName";
        {
          String gn = BeanPropertyView_Behavior.call_getterName_8381258131358759705(node);
          if (gn == null) {
            return null;
          }
          if (gn.startsWith("is")) {
            return Introspector.decapitalize(gn.substring(2));
          }
          if (gn.startsWith("get")) {
            return Introspector.decapitalize(gn.substring(3));
          }
          return null;
        }
      }
    });
    properties.put("canRead", new BasePropertyConstraintsDescriptor("canRead", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "canRead";
        return (SLinkOperations.getTarget(node, "getter", false) != null);
      }
    });
    properties.put("canWrite", new BasePropertyConstraintsDescriptor("canWrite", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "canWrite";
        {
          String gn = BeanPropertyView_Behavior.call_setterName_8381258131358762400(node);
          for (SNode imd : SLinkOperations.getTargets(SNodeOperations.as(SNodeOperations.getParent(SLinkOperations.getTarget(node, "getter", false)), "jetbrains.mps.baseLanguage.structure.Classifier"), "method", true)) {
            if (SPropertyOperations.getString(imd, "name").equals(gn) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(imd, "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility") && ListSequence.fromList(SLinkOperations.getTargets(imd, "parameter", true)).count() == 1) {
              return MatchingUtil.matchNodes(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(imd, "parameter", true)).first(), "type", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "getter", false), "returnType", true));
            }
          }
          return false;
        }
      }
    });
    return properties;
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("getter", new BaseReferenceConstraintsDescriptor("getter", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            String gn = SPropertyOperations.getString(_context.getParameterNode(), "name");
            if (gn == null) {
              return null;
            }
            if (gn.startsWith("is")) {
              return Introspector.decapitalize(gn.substring(2));
            }
            if (gn.startsWith("get")) {
              return Introspector.decapitalize(gn.substring(3));
            }
            return null;
          }

          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            SNode bt = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.as(_context.getReferenceNode(), "jetbrains.mps.ui.structure.BeanPropertyView"), "bean", true));
            try {
              throw new NullPointerException();
            } catch (NullPointerException e) {
            }
            return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.as(bt, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false), "method", true)).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode m) {
                if (ListSequence.fromList(SLinkOperations.getTargets(m, "parameter", true)).isNotEmpty()) {
                  return false;
                }
                if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(m, "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility"))) {
                  return false;
                }
                String gn = SPropertyOperations.getString(m, "name");
                if (gn != null) {
                  if (gn.startsWith("is")) {
                    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(m, "returnType", true), "jetbrains.mps.baseLanguage.structure.BooleanType");
                  } else if (gn.startsWith("get")) {
                    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(m, "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType"));
                  }
                }
                return false;
              }
            });
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_h502i8_a0a3a0a0a1a0b0a1a1;
          }
        };
      }
    });
    return references;
  }
}
