package jetbrains.mps.ui.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ui.modeling.structure.UIObject;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class UIObjectStatement extends Statement {
  public static final String concept = "jetbrains.mps.ui.structure.UIObjectStatement";
  public static final String UI_OBJECT = "uiObject";
  public static final String VIEW_BINDING = "viewBinding";
  public static final String CONTROLLER_BINDING = "controllerBinding";
  public static final String COMPARTMENT = "compartment";
  public static final String ASPECT = "aspect";

  public UIObjectStatement(SNode node) {
    super(node);
  }

  public UIObject getUiObject() {
    return (UIObject) this.getReferent(UIObject.class, UIObjectStatement.UI_OBJECT);
  }

  public void setUiObject(UIObject node) {
    super.setReferent(UIObjectStatement.UI_OBJECT, node);
  }

  public int getViewBindingsCount() {
    return this.getChildCount(UIObjectStatement.VIEW_BINDING);
  }

  public Iterator<ViewBinding> viewBindings() {
    return this.children(ViewBinding.class, UIObjectStatement.VIEW_BINDING);
  }

  public List<ViewBinding> getViewBindings() {
    return this.getChildren(ViewBinding.class, UIObjectStatement.VIEW_BINDING);
  }

  public void addViewBinding(ViewBinding node) {
    this.addChild(UIObjectStatement.VIEW_BINDING, node);
  }

  public void insertViewBinding(ViewBinding prev, ViewBinding node) {
    this.insertChild(prev, UIObjectStatement.VIEW_BINDING, node);
  }

  public int getControllerBindingsCount() {
    return this.getChildCount(UIObjectStatement.CONTROLLER_BINDING);
  }

  public Iterator<ControllerBinding> controllerBindings() {
    return this.children(ControllerBinding.class, UIObjectStatement.CONTROLLER_BINDING);
  }

  public List<ControllerBinding> getControllerBindings() {
    return this.getChildren(ControllerBinding.class, UIObjectStatement.CONTROLLER_BINDING);
  }

  public void addControllerBinding(ControllerBinding node) {
    this.addChild(UIObjectStatement.CONTROLLER_BINDING, node);
  }

  public void insertControllerBinding(ControllerBinding prev, ControllerBinding node) {
    this.insertChild(prev, UIObjectStatement.CONTROLLER_BINDING, node);
  }

  public int getCompartmentsCount() {
    return this.getChildCount(UIObjectStatement.COMPARTMENT);
  }

  public Iterator<ContainerCompartment> compartments() {
    return this.children(ContainerCompartment.class, UIObjectStatement.COMPARTMENT);
  }

  public List<ContainerCompartment> getCompartments() {
    return this.getChildren(ContainerCompartment.class, UIObjectStatement.COMPARTMENT);
  }

  public void addCompartment(ContainerCompartment node) {
    this.addChild(UIObjectStatement.COMPARTMENT, node);
  }

  public void insertCompartment(ContainerCompartment prev, ContainerCompartment node) {
    this.insertChild(prev, UIObjectStatement.COMPARTMENT, node);
  }

  public int getAspectsCount() {
    return this.getChildCount(UIObjectStatement.ASPECT);
  }

  public Iterator<ChildAspect> aspects() {
    return this.children(ChildAspect.class, UIObjectStatement.ASPECT);
  }

  public List<ChildAspect> getAspects() {
    return this.getChildren(ChildAspect.class, UIObjectStatement.ASPECT);
  }

  public void addAspect(ChildAspect node) {
    this.addChild(UIObjectStatement.ASPECT, node);
  }

  public void insertAspect(ChildAspect prev, ChildAspect node) {
    this.insertChild(prev, UIObjectStatement.ASPECT, node);
  }

  public static UIObjectStatement newInstance(SModel sm, boolean init) {
    return (UIObjectStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.structure.UIObjectStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static UIObjectStatement newInstance(SModel sm) {
    return UIObjectStatement.newInstance(sm, false);
  }
}
