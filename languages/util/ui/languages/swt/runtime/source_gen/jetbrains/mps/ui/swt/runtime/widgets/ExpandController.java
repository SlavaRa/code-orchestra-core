package jetbrains.mps.ui.swt.runtime.widgets;

/*Generated by MPS */

import java.util.List;
import org.eclipse.swt.widgets.ExpandItem;
import java.util.ArrayList;
import org.eclipse.swt.widgets.ExpandBar;
import org.eclipse.swt.events.ExpandListener;
import org.eclipse.swt.events.ExpandEvent;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.events.ControlListener;
import org.eclipse.swt.events.ControlEvent;
import java.util.Iterator;

public class ExpandController {
  private List<ExpandItem> items_trans = new ArrayList<ExpandItem>();

  public ExpandController(final ExpandBar eb) {
    eb.addExpandListener(new ExpandListener() {
      public void itemCollapsed(ExpandEvent event) {
        ExpandItem ei = ((ExpandItem) event.item);
        if (ExpandController.this.vetoCollapse(ei)) {
          event.doit = false;
          // ExpandBar impl only flips "expanded" after the listeners have been notified 
          // so, false will be replaced with true, which is what we need 
          ei.setExpanded(false);
        }
      }

      public void itemExpanded(ExpandEvent event) {
        if (ExpandController.this.items_trans.isEmpty()) {
          final ExpandItem expanded = ((ExpandItem) event.item);
          Rectangle carea = eb.getClientArea();
          int height = carea.height - carea.y - eb.getSpacing();
          for (ExpandItem ei : eb.getItems()) {
            if (ei != expanded) {
              height -= ei.getHeaderHeight() + eb.getSpacing();
              ExpandController.this.items_trans.add(ei);
            }
          }
          final int expHeight = height - expanded.getHeaderHeight() - eb.getSpacing();
          Display.getCurrent().asyncExec(new Runnable() {
            public void run() {
              ExpandController.this.doCollapse();
              expanded.setHeight(expHeight);
            }
          });
        }
      }
    });
    eb.addControlListener(new ControlListener() {
      public void controlMoved(ControlEvent e) {
      }

      public void controlResized(ControlEvent e) {
        Rectangle carea = eb.getClientArea();
        int height = carea.height - carea.y - eb.getSpacing();
        ExpandItem exp = null;
        for (ExpandItem ei : eb.getItems()) {
          if (ei.getExpanded()) {
            exp = ei;
          } else {
            height -= ei.getHeaderHeight() + eb.getSpacing();
          }
        }
        if (exp != null) {
          final ExpandItem expande = exp;
          final int expHeight = height - exp.getHeaderHeight() - eb.getSpacing();
          Display.getCurrent().asyncExec(new Runnable() {
            public void run() {
              expande.setHeight(expHeight);
            }
          });
        }
      }
    });
  }

  public boolean vetoCollapse(ExpandItem ei) {
    return !(this.items_trans.contains(ei));
  }

  private void doCollapse() {
    for (Iterator<ExpandItem> it = this.items_trans.iterator(); it.hasNext();) {
      it.next().setExpanded(false);
      it.remove();
    }
  }
}
