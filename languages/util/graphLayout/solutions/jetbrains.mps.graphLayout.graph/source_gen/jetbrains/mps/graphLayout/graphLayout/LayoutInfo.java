package jetbrains.mps.graphLayout.graphLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.intGeom2D.Dimension;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import jetbrains.mps.graphLayout.graph.INode;
import jetbrains.mps.graphLayout.graph.IEdge;
import java.util.Set;

public class LayoutInfo implements ILayoutInfo {
  private Graph myGraph;
  private Map<Node, Dimension> myNodeSizes;
  private Map<Edge, Dimension> myLabelSizes;

  public LayoutInfo(Graph graph) {
    myGraph = graph;
    myNodeSizes = MapSequence.fromMap(new LinkedHashMap<Node, Dimension>(16, (float) 0.75, false));
    myLabelSizes = MapSequence.fromMap(new LinkedHashMap<Edge, Dimension>(16, (float) 0.75, false));
  }

  public void setNodeSize(INode node, Dimension size) {
    Node myNode = ((Node) node);
    MapSequence.fromMap(myNodeSizes).put(myNode, size);
  }

  public void setLabelSize(IEdge labeledEdge, Dimension size) {
    Edge myLabeledEdge = ((Edge) labeledEdge);
    MapSequence.fromMap(myLabelSizes).put(myLabeledEdge, size);
  }

  public Dimension getNodeSize(INode node) {
    Node myNode = ((Node) node);
    return MapSequence.fromMap(myNodeSizes).get(myNode);
  }

  public Dimension getLabelSize(IEdge edge) {
    Edge myEdge = ((Edge) edge);
    return MapSequence.fromMap(myLabelSizes).get(myEdge);
  }

  public Graph getGraph() {
    return myGraph;
  }

  public Set<Edge> getLabeledEdges() {
    return MapSequence.fromMap(myLabelSizes).keySet();
  }

  public Set<Node> getNodesWithSize() {
    return MapSequence.fromMap(myNodeSizes).keySet();
  }
}
