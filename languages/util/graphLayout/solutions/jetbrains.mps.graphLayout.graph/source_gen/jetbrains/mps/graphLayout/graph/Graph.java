package jetbrains.mps.graphLayout.graph;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class Graph implements IGraph {
  private static int showInfo = 0;

  private GraphModificationProcessor myProcessor;
  private List<Node> myNodes;
  private int myNextNum;

  public Graph() {
    myProcessor = new GraphModificationProcessor();
    myNodes = ListSequence.fromList(new ArrayList<Node>());
    myNextNum = 0;
  }

  public List<Node> getNodes() {
    return myNodes;
  }

  public List<Edge> getEdges() {
    List<Edge> allEdges = ListSequence.fromList(new ArrayList<Edge>());
    for (Node node : ListSequence.fromList(getNodes())) {
      ListSequence.fromList(allEdges).addSequence(ListSequence.fromList(node.getOutEdges()));
    }
    return allEdges;
  }

  protected Node createNode(boolean isDummy) {
    Node node = new Node(this, myNextNum++, isDummy);
    ListSequence.fromList(myNodes).addElement(node);
    myProcessor.fire(new GraphModificationEvent(GraphModificationEvent.Type.NODE_CREATED, node));
    return node;
  }

  public Node createNode() {
    return createNode(false);
  }

  public Node createDummyNode() {
    return createNode(true);
  }

  public Edge connect(INode source, INode target) {
    Node sourceNode = (Node) source;
    Node targetNode = (Node) target;
    if (sourceNode.getGraph() != this || targetNode.getGraph() != this) {
      throw new RuntimeException("try to connect nodes of other graph");
    }
    Edge edge = sourceNode.addEdgeTo(targetNode);
    if (showInfo > 0) {
      System.out.println("graph: " + this.hashCode() + "added edge: " + edge);
    }
    myProcessor.fire(new GraphModificationEvent(GraphModificationEvent.Type.EDGE_ADDED, edge));
    return edge;
  }

  public void addEdge(Edge edge) {
    edge.addToGraph();
    if (showInfo > 0) {
      System.out.println("graph: " + this.hashCode() + "restore edge: " + edge);
    }
    myProcessor.fire(new GraphModificationEvent(GraphModificationEvent.Type.EDGE_ADDED, edge));
  }

  public Node getNode(int index) {
    return ListSequence.fromList(myNodes).getElement(index);
  }

  public int getNumNodes() {
    return ListSequence.fromList(myNodes).count();
  }

  public Edge addEdgeByIndex(int sourceIndex, int targetIndex) {
    return connect(getNode(sourceIndex), getNode(targetIndex));
  }

  public void deleteNode(Node node) {
    for (Edge edge : ListSequence.fromList(node.getEdges())) {
      edge.removeFromGraph();
      myProcessor.fire(new GraphModificationEvent(GraphModificationEvent.Type.EDGE_REMOVED, edge));
    }
    ListSequence.fromList(myNodes).removeElement(node);
    myProcessor.fire(new GraphModificationEvent(GraphModificationEvent.Type.NODE_DETETED, node));
  }

  public void removeEdge(Edge edge) {
    edge.removeFromGraph();
    myProcessor.fire(new GraphModificationEvent(GraphModificationEvent.Type.EDGE_REMOVED, edge));
  }

  public void revertEdge(Edge edge) {
    edge.revert();
    myProcessor.fire(new GraphModificationEvent(GraphModificationEvent.Type.EDGE_REVERTED, edge));
  }

  public List<Edge> splitEdge(Edge edge) {
    removeEdge(edge);
    List<Edge> newEdges = ListSequence.fromList(new ArrayList<Edge>(2));
    Node middleNode = createDummyNode();
    ListSequence.fromList(newEdges).addElement(connect(edge.getSource(), middleNode));
    ListSequence.fromList(newEdges).addElement(connect(middleNode, edge.getTarget()));
    myProcessor.fire(new GraphModificationEvent(GraphModificationEvent.Type.EDGE_SPLITTED, edge, newEdges));
    return newEdges;
  }

  @Override
  public String toString() {
    StringBuilder result = new StringBuilder();
    result.append("Graph " + super.toString() + " with " + this.getNumNodes() + " nodes:\n");
    for (Node node : ListSequence.fromList(this.getNodes())) {
      result.append("node " + node + ": \n");
      result.append("  out edges:\n");
      for (Edge edge : ListSequence.fromList(node.getOutEdges())) {
        result.append(edge + ", ");
      }
      result.append("\n");
      result.append("  in edges:\n");
      for (Edge edge : ListSequence.fromList(node.getInEdges())) {
        result.append(edge + ", ");
      }
      result.append("\n");
    }
    result.append("end " + super.toString());
    return result.toString();
  }

  public void addListener(IGraphModificationListener listener) {
    myProcessor.addListener(listener);
  }

  public void removeListener(IGraphModificationListener listener) {
    myProcessor.removeListener(listener);
  }

  public GraphModificationProcessor getModificationProcessor() {
    return myProcessor;
  }

  public Graph createNew() {
    return new Graph();
  }
}
