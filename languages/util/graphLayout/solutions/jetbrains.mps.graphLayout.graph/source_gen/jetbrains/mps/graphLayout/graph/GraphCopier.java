package jetbrains.mps.graphLayout.graph;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.graphLayout.util.DefaultFilter;
import jetbrains.mps.graphLayout.util.Filter;
import java.util.Set;
import jetbrains.mps.graphLayout.graphLayout.GraphLayout;
import jetbrains.mps.graphLayout.graphLayout.GraphLayoutFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.graphLayout.intGeom2D.Rectangle;
import java.util.List;
import jetbrains.mps.graphLayout.intGeom2D.Point;

public class GraphCopier {
  private IGraph myGraph;
  private Graph myCopy;
  private Map<INode, Node> myNodeMap;
  private Map<IEdge, Edge> myEdgeMap;

  public GraphCopier(IGraph graph) {
    myGraph = graph;
    if (graph instanceof Graph) {
      myCopy = ((Graph) graph).createNew();
    } else {
      myCopy = new Graph();
    }
    myNodeMap = MapSequence.fromMap(new HashMap<INode, Node>());
    myEdgeMap = MapSequence.fromMap(new HashMap<IEdge, Edge>());
  }

  public Node copyNode(INode node) {
    Node copyNode = myCopy.createNode();
    MapSequence.fromMap(myNodeMap).put(node, copyNode);
    return copyNode;
  }

  public Edge copyEdge(IEdge edge) {
    Node copySource = MapSequence.fromMap(myNodeMap).get(edge.getSource());
    Node copyTarget = MapSequence.fromMap(myNodeMap).get(edge.getTarget());
    Edge copyEdge = myCopy.connect(copySource, copyTarget);
    MapSequence.fromMap(myEdgeMap).put(edge, copyEdge);
    return copyEdge;
  }

  public Graph copy() {
    return copySubgraph(new DefaultFilter<INode>());
  }

  public Graph copySubgraph(Filter<INode> nodeFilter) {
    for (INode node : myGraph.getNodes()) {
      if (nodeFilter.accept(node)) {
        copyNode(node);
      }
    }
    for (IEdge edge : myGraph.getEdges()) {
      if (acceptEdge(nodeFilter, edge)) {
        copyEdge(edge);
      }
    }
    return myCopy;
  }

  private boolean acceptEdge(Filter<INode> nodeFilter, IEdge edge) {
    return nodeFilter.accept(edge.getSource()) && nodeFilter.accept(edge.getTarget());
  }

  public Graph getCopy() {
    return myCopy;
  }

  public Node getNodeCopy(INode node) {
    return MapSequence.fromMap(myNodeMap).get(node);
  }

  public Edge getEdgeCopy(IEdge edge) {
    return MapSequence.fromMap(myEdgeMap).get(edge);
  }

  public Set<INode> getCopiedNodes() {
    return MapSequence.fromMap(myNodeMap).keySet();
  }

  public Set<IEdge> getCopiedEdges() {
    return MapSequence.fromMap(myEdgeMap).keySet();
  }

  public IGraph getCopiedGraph() {
    return myGraph;
  }

  public GraphLayout restoreLayout(GraphLayout copyLayout) {
    GraphLayout layout = GraphLayoutFactory.createGraphLayout(myGraph);
    for (INode node : Sequence.fromIterable(myGraph.getNodes())) {
      Rectangle rectangle = copyLayout.getNodeLayout(getNodeCopy(node));
      if (rectangle != null) {
        layout.setLayoutFor(node, rectangle);
      }
    }
    for (IEdge edge : Sequence.fromIterable(myGraph.getEdges())) {
      Edge edgeCopy = getEdgeCopy(edge);
      List<Point> route = copyLayout.getEdgeLayout(edgeCopy);
      if (route != null) {
        layout.setLayoutFor(edge, route);
      }
      Rectangle rect = copyLayout.getLabelLayout(edgeCopy);
      if (rect != null) {
        layout.setLabelLayout(edge, rect);
      }
    }
    return layout;
  }
}
