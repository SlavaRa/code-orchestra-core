package jetbrains.mps.graphLayout.stOrthogonalLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graphLayout.IPointLayouter;
import jetbrains.mps.graphLayout.graphLayout.GraphPointLayout;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import jetbrains.mps.graphLayout.planarization.ShortestPathEmbeddingFinder;
import jetbrains.mps.graphLayout.planarization.BiconnectedInitialEmbeddingFinder;
import jetbrains.mps.graphLayout.planarization.TreeEmbeddingFinder;
import java.util.List;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.graphLayout.planarGraph.Dart;
import jetbrains.mps.graphLayout.algorithms.GraphOrientation;
import jetbrains.mps.graphLayout.planarGraph.STPlanarGraph;
import java.util.Map;
import jetbrains.mps.graphLayout.intGeom2D.Rectangle;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.graphLayout.intGeom2D.Point;

public class OrthogonalFromVisibility implements IPointLayouter {
  public OrthogonalFromVisibility() {
  }

  public GraphPointLayout doLayout(Graph graph) {
    /*
      EmbeddedGraph embeddedGraph = new ShortestPathEmbeddingFinder(new BiconnectedInitialEmbeddingFinder()).find(graph);
    */
    EmbeddedGraph embeddedGraph = new TreeEmbeddingFinder().find(graph);
    List<Node> outerNodes = ListSequence.fromList(new ArrayList<Node>());
    for (Dart dart : ListSequence.fromList(embeddedGraph.getOuterFace().getDarts())) {
      ListSequence.fromList(outerNodes).addElement(dart.getTarget());
    }
    Node s = ListSequence.fromList(outerNodes).getElement(0);
    Node t = ListSequence.fromList(outerNodes).getElement((ListSequence.fromList(outerNodes).count()) / 2);
    GraphOrientation.orientST(graph, s, t);
    STPlanarGraph stPlanarGraph = new STPlanarGraph(embeddedGraph, s, t);
    return doLayout(stPlanarGraph);
  }

  public GraphPointLayout doLayout(STPlanarGraph stPlanarGraph) {
    Graph graph = stPlanarGraph.getGraph();
    Map<Object, Rectangle> visibility = VisibilityRepresentation.getVisibilityRepresentation(stPlanarGraph);
    GraphPointLayout layout = new GraphPointLayout(graph);
    for (Node node : ListSequence.fromList(graph.getNodes())) {
      Rectangle rect = MapSequence.fromMap(visibility).get(node);
      List<Integer> edgesX = ListSequence.fromList(new ArrayList<Integer>());
      for (Edge edge : ListSequence.fromList(node.getEdges())) {
        ListSequence.fromList(edgesX).addElement(MapSequence.fromMap(visibility).get(edge).x);
      }
      edgesX = ListSequence.fromList(edgesX).sort(new ISelector<Integer, Comparable<?>>() {
        public Comparable<?> select(Integer it) {
          return it;
        }
      }, true).toListSequence();
      int mid = ListSequence.fromList(edgesX).count() / 2;
      layout.setLayoutFor(node, new Point(ListSequence.fromList(edgesX).getElement(mid), rect.y));
      /*
        layout.setLayoutFor(node, new Point(rect.x + rect.width / 2, rect.y));
      */
    }
    for (Edge edge : ListSequence.fromList(graph.getEdges())) {
      Rectangle rect = MapSequence.fromMap(visibility).get(edge);
      List<Point> points = ListSequence.fromList(new ArrayList<Point>());
      ListSequence.fromList(points).addElement(layout.getLayoutFor(edge.getSource()));
      ListSequence.fromList(points).addElement(new Point(rect.x, rect.y));
      ListSequence.fromList(points).addElement(new Point(rect.x, rect.y + rect.height));
      ListSequence.fromList(points).addElement(layout.getLayoutFor(edge.getTarget()));
      layout.setLayoutFor(edge, points);
    }
    return layout;
  }
}
