package visualization;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Scanner;
import jetbrains.mps.graphLayout.graph.HyperGraph;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.graphLayout.HyperGraphLayouter;
import jetbrains.mps.graphLayout.flowOrthogonalLayout.ClusterOrthogonalFlowLayouter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import javax.swing.SwingUtilities;

public class HyperGraphLayoutPanel extends OrthogonalLayoutTestPanel {
  public HyperGraphLayoutPanel() {
  }

  @Override
  protected Graph readGraph(Scanner scanner) {
    return GraphIO.scanHyperGraph(scanner);
  }

  @Override
  protected void writeGraph(Graph graph) {
    super.writeGraph(graph);
    HyperGraph hyperGraph = ((HyperGraph) graph);
    Node root = hyperGraph.getRoot();
    myTextArea.append("\n");
    writeTree(root, hyperGraph);
    myTextArea.append("\n");
  }

  @Override
  protected void initLayout() {
    super.initLayout();
    myLayouter = new HyperGraphLayouter(new ClusterOrthogonalFlowLayouter());
  }

  private void writeTree(Node node, HyperGraph graph) {
    for (Node child : ListSequence.fromList(graph.getChildren(node))) {
      myTextArea.append(node.getIndex() + " " + child.getIndex());
      writeTree(child, graph);
    }
  }

  public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new HyperGraphLayoutPanel().create();
      }
    });
  }
}
