package graphTest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.graphLayout.graph.Graph;
import visualization.GraphIO;
import java.util.Scanner;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.graphLayout.algorithms.Dijkstra;
import junit.framework.Assert;

public class Dijkstra_Test extends TestCase {
  public void test_triangle() throws Exception {
    String graphString = "4 5  0 1  0 2  1 2  1 3  2 3";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    Node source = ListSequence.fromList(graph.getNodes()).getElement(0);
    Node target = ListSequence.fromList(graph.getNodes()).getElement(3);
    Map<Edge, Integer> weights = MapSequence.fromMap(new HashMap<Edge, Integer>());
    List<Edge> edges = graph.getEdges();
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(0), 1);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(1), 3);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(2), 1);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(3), 3);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(4), 1);
    test(graph, weights, source, target, 3);
  }

  public void test_test2() throws Exception {
    String graphString = "3 3  0 1  0 2  1 2";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    Node source = ListSequence.fromList(graph.getNodes()).getElement(0);
    Node target = ListSequence.fromList(graph.getNodes()).getElement(2);
    Map<Edge, Integer> weights = MapSequence.fromMap(new HashMap<Edge, Integer>());
    List<Edge> edges = graph.getEdges();
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(0), 1);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(1), 4);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(2), 2);
    test(graph, weights, source, target, 3);
  }

  public void test_test3() throws Exception {
    String graphString = "4 4  0 1  1 2  1 3  2 3";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    Node source = ListSequence.fromList(graph.getNodes()).getElement(0);
    Node target = ListSequence.fromList(graph.getNodes()).getElement(3);
    Map<Edge, Integer> weights = MapSequence.fromMap(new HashMap<Edge, Integer>());
    List<Edge> edges = graph.getEdges();
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(0), 1);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(1), 1);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(2), 2);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(3), 4);
    test(graph, weights, source, target, 3);
  }

  public void test_test4() throws Exception {
    String graphString = "5 5  0 1  1 2  1 3  2 3  2 4";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    Node source = ListSequence.fromList(graph.getNodes()).getElement(0);
    Node target = ListSequence.fromList(graph.getNodes()).getElement(3);
    Map<Edge, Integer> weights = MapSequence.fromMap(new HashMap<Edge, Integer>());
    List<Edge> edges = graph.getEdges();
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(0), 1);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(1), 1);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(2), 2);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(3), 4);
    MapSequence.fromMap(weights).put(ListSequence.fromList(edges).getElement(4), 1);
    test(graph, weights, source, target, 3);
  }

  public void test(Graph graph, Map<Edge, Integer> weights, Node source, Node target, int expectedLength) {
    Dijkstra finder = new Dijkstra(graph, source, weights);
    finder.doAlgorithm();
    List<Edge> path = finder.getShortestPath(target);
    int length = 0;
    for (Edge edge : ListSequence.fromList(path)) {
      length += MapSequence.fromMap(weights).get(edge);
    }
    Assert.assertTrue(length == expectedLength);
  }
}
