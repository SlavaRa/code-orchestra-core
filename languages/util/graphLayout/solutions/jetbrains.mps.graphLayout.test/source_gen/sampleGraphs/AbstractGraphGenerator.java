package sampleGraphs;

/*Generated by MPS */

import java.util.Random;
import jetbrains.mps.graphLayout.graph.Graph;

public abstract class AbstractGraphGenerator {
  private static final int MAX_ITERATIONS = 100;

  private int myNumNodes;
  private int myMinEdges;
  private int myMaxEdges;
  private int myNumEdges;
  private Random myRandom;

  public AbstractGraphGenerator(int numNodes, int minEdges, int maxEdges) {
    myNumNodes = numNodes;
    myMinEdges = minEdges;
    myMaxEdges = maxEdges;
    myRandom = new Random();
  }

  public Graph generate() throws IllegalArgumentException {
    myNumEdges = RandomUtil.nextInRange(myRandom, myMinEdges, myMaxEdges);
    for (int i = 0; i < MAX_ITERATIONS; i++) {
      Graph graph = generateGraph();
      if (this.checkGraph(graph)) {
        return graph;
      }
    }
    throw new IllegalArgumentException("failed to generate graph");
  }

  protected boolean checkGraph(Graph graph) {
    return graph != null;
  }

  protected abstract Graph generateGraph();

  public int getNumNodes() {
    return myNumNodes;
  }

  public int getNumEdges() {
    return myNumEdges;
  }

  protected Random random() {
    return myRandom;
  }
}
