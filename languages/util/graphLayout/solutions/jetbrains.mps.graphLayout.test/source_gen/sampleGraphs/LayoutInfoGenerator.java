package sampleGraphs;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.intGeom2D.Dimension;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.graphLayout.graphLayout.LayoutInfo;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Random;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class LayoutInfoGenerator {
  private double myLabelThreshold;
  private int myMinNodeWidth;
  private int myMaxNodeWidth;
  private int myMinNodeHeight;
  private int myMaxNodeHeight;
  private int myMinLabelWidth;
  private int myMaxLabelWidth;
  private int myMinLabelHeight;
  private int myMaxLabelHeight;
  private AbstractGraphGenerator myGenerator;
  private Graph myGraph;
  private Map<Node, Dimension> myNodeSizes;
  private Map<Edge, Dimension> myEdgeLabelSizes;
  private LayoutInfo myLayoutInfo;

  public LayoutInfoGenerator(AbstractGraphGenerator generator) {
    myGenerator = generator;
    myLabelThreshold = 0;
  }

  public void setNodeSizeConstraints(int minWidth, int maxWidth, int minHeight, int maxHeight) {
    myMinNodeWidth = minWidth;
    myMaxNodeWidth = maxWidth;
    myMinNodeHeight = minHeight;
    myMaxNodeHeight = maxHeight;
  }

  public void setLabelSizeConstraints(int minWidth, int maxWidth, int minHeight, int maxHeight) {
    myMinLabelWidth = minWidth;
    myMaxLabelWidth = maxWidth;
    myMinLabelHeight = minHeight;
    myMaxLabelHeight = maxHeight;
  }

  public double getLabelSeed() {
    return myLabelThreshold;
  }

  public void setLabelSeed(double labelSeed) {
    myLabelThreshold = labelSeed;
  }

  public void generate() {
    myGraph = myGenerator.generate();
    myLayoutInfo = new LayoutInfo(myGraph);
    myNodeSizes = MapSequence.fromMap(new HashMap<Node, Dimension>());
    myEdgeLabelSizes = MapSequence.fromMap(new HashMap<Edge, Dimension>());
    Random rand = myGenerator.random();
    for (Node node : ListSequence.fromList(myGraph.getNodes())) {
      int width = RandomUtil.nextInRange(rand, myMinNodeWidth, myMaxNodeWidth);
      int height = RandomUtil.nextInRange(rand, myMinNodeHeight, myMaxNodeHeight);
      MapSequence.fromMap(myNodeSizes).put(node, new Dimension(width, height));
      myLayoutInfo.setNodeSize(node, new Dimension(width, height));
    }
    for (Edge edge : ListSequence.fromList(myGraph.getEdges())) {
      double d = rand.nextDouble();
      if (d < myLabelThreshold) {
        int width = RandomUtil.nextInRange(rand, myMinLabelWidth, myMaxLabelWidth);
        int height = RandomUtil.nextInRange(rand, myMinLabelHeight, myMaxLabelHeight);
        MapSequence.fromMap(myEdgeLabelSizes).put(edge, new Dimension(width, height));
        myLayoutInfo.setLabelSize(edge, new Dimension(width, height));
      }
    }
  }

  public Graph getGraph() {
    return myGraph;
  }

  public Map<Node, Dimension> getNodeSizes() {
    return myNodeSizes;
  }

  public Map<Edge, Dimension> getEdgeLabelSizes() {
    return myEdgeLabelSizes;
  }

  public LayoutInfo getLayoutInfo() {
    return myLayoutInfo;
  }
}
