package orthogonalLayoutTest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.graphLayout.graph.Graph;
import visualization.GraphIO;
import java.util.Scanner;
import jetbrains.mps.graphLayout.flowOrthogonalLayout.EmbeddedGraphModifier;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import jetbrains.mps.graphLayout.planarization.ShortestPathEmbeddingFinder;
import jetbrains.mps.graphLayout.planarization.PQPlanarizationFinder;
import java.util.Set;
import jetbrains.mps.graphLayout.graph.Edge;
import java.util.HashMap;
import jetbrains.mps.graphLayout.planarGraph.Dart;
import jetbrains.mps.graphLayout.flowOrthogonalLayout.OrthogonalRepresentation;
import jetbrains.mps.graphLayout.intGeom2D.Direction2D;
import java.util.LinkedHashMap;
import jetbrains.mps.graphLayout.planarGraph.CheckEmbeddedGraph;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class EmbeddedGraphModifier_Test extends TestCase {
  public void test_test1() throws Exception {
    String graphString = "4 4  0 1  1 2  2 3  3 0";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    test(graph);
  }

  public void test_test2() throws Exception {
    String graphString = "6 10  0 1  0 2  0 3  0 4  0 5  1 2  2 3  3 4  4 5  5 1";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    test(graph);
  }

  public EmbeddedGraphModifier prepare(Graph graph, Map<Node, List<Node>> nodeMap) {
    List<Node> nodes = ListSequence.fromList(new ArrayList<Node>());
    ListSequence.fromList(nodes).addSequence(ListSequence.fromList(graph.getNodes()));
    for (Node node : ListSequence.fromList(nodes)) {
      MapSequence.fromMap(nodeMap).put(node, ListSequence.fromList(new ArrayList<Node>()));
    }
    EmbeddedGraph embeddedGraph = new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(graph);
    EmbeddedGraphModifier modifier = new EmbeddedGraphModifier(embeddedGraph);
    Set<Edge> edges = modifier.reduceNodesDegree(nodeMap, MapSequence.fromMap(new HashMap<Edge, Edge>()));
    Map<Dart, Integer> bends = MapSequence.fromMap(new HashMap<Dart, Integer>());
    Map<Dart, Integer> angles = MapSequence.fromMap(new HashMap<Dart, Integer>());
    OrthogonalRepresentation.getRepresentation(embeddedGraph, edges, bends, angles);
    OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph, bends, angles);
    Map<Dart, Direction2D> directions = OrthogonalRepresentation.getDirections(embeddedGraph, angles);
    modifier.setDartDirections(directions);
    return modifier;
  }

  public void test(Graph graph) {
    Map<Node, List<Node>> nodeMap = MapSequence.fromMap(new LinkedHashMap<Node, List<Node>>(16, (float) 0.75, false));
    EmbeddedGraphModifier modifier = prepare(graph, nodeMap);
    modifier.makeRectanglesForNodes(nodeMap);
    EmbeddedGraph embeddedGraph = modifier.getEmbeddedGraph();
    CheckEmbeddedGraph.checkEmbeddedGraph(embeddedGraph, false);
    Map<Dart, Direction2D> dartDirections = modifier.getDartDirections();
    for (Edge edge : ListSequence.fromList(graph.getEdges())) {
      List<Dart> darts = embeddedGraph.getDarts(edge);
      Assert.assertTrue(ListSequence.fromList(darts).count() == 2);
      for (Dart dart : ListSequence.fromList(darts)) {
        Assert.assertTrue(MapSequence.fromMap(dartDirections).containsKey(dart));
      }
    }
    Assert.assertTrue(SetSequence.fromSet(MapSequence.fromMap(dartDirections).keySet()).count() == ListSequence.fromList(graph.getEdges()).count() * 2);
  }
}
