package orthogonalLayoutTest;

/*Generated by MPS */

import jetbrains.mps.graphLayout.internal.flowOrthogonalLayout.OrthogonalFlowLayouterConstraints;
import jetbrains.mps.graphLayout.graph.Graph;
import sampleGraphs.RandomGraphGenerator;
import java.io.PrintWriter;
import visualization.GraphIO;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.intGeom2D.Dimension;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.graphLayout.graphLayout.GraphLayout;

public class OrthogonalFlowLayouterConstraintsStressTest {
  public OrthogonalFlowLayouterConstraintsStressTest() {
  }

  public static void main(String[] args) throws Exception {
    String fileName = "C:\\work\\stressConstraintsFlow.txt";
    OrthogonalFlowLayouterConstraints layouter = new OrthogonalFlowLayouterConstraints();
    int numNodes = Integer.parseInt(args[0]);
    int numEdges = Integer.parseInt(args[1]);
    int numIter = Integer.parseInt(args[2]);
    for (int iter = 0; iter < numIter; iter++) {
      long time = System.currentTimeMillis();
      System.out.println("ITERATION: " + iter);
      Graph graph = RandomGraphGenerator.generateSimpleConnectedGraph(numNodes, numEdges);
      PrintWriter out = new PrintWriter(fileName);
      GraphIO.writeGraph(graph, out);
      out.close();
      Map<Node, Dimension> nodeSizes = MapSequence.fromMap(new HashMap<Node, Dimension>());
      for (Node node : ListSequence.fromList(graph.getNodes())) {
        MapSequence.fromMap(nodeSizes).put(node, new Dimension(70, 70));
      }
      GraphLayout layout = layouter.doLayout(graph, nodeSizes);
      OrthogonalLayoutChecker.checkLayout(layout);
      double passedTime = (1.0 * System.currentTimeMillis() - time) / 1000;
      System.out.println("iteration " + iter + " has been working " + passedTime + " seconds");
    }
    System.out.println("END!");
  }
}
