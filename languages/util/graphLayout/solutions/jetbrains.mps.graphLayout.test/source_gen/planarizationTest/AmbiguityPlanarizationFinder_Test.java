package planarizationTest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.graphLayout.graph.Graph;
import visualization.GraphIO;
import java.util.Scanner;
import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.graphLayout.algorithms.BiconnectAugmentation;
import jetbrains.mps.graphLayout.planarization.ShortestPathEmbeddingFinder;
import jetbrains.mps.graphLayout.planarization.PQPlanarizationFinder;
import junit.framework.Assert;
import jetbrains.mps.graphLayout.planarGraph.Face;
import jetbrains.mps.graphLayout.planarGraph.Dart;

public class AmbiguityPlanarizationFinder_Test extends TestCase {
  public void test_test1() throws Exception {
    String graphString = "7 15\n  0 5\n  0 4  \n1 3  \n1 0  \n1 2  \n1 5  \n2 4  \n3 5  \n3 6  \n4 5  \n4 6  \n4 3  \n6 0  \n6 5  \n6 1\n";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    test(graph);
  }

  public void test_test2() throws Exception {
    String graphString = "10 15\n  0 9  \n1 6  \n2 7  \n2 0  \n3 0  \n4 2\n  5 0  \n5 6  \n5 2  \n6 2  \n7 9  \n7 5  \n8 2  \n9 5  \n9 1";
    Graph graph = GraphIO.scanGraph(new Scanner(graphString));
    test(graph);
  }

  public void test(Graph graph) {
    EmbeddedGraph mainEmbeddedGraph = null;
    for (int testNum = 0; testNum < 100; testNum++) {
      Graph copy = new Graph();
      Map<Node, Node> nodeMap = MapSequence.fromMap(new HashMap<Node, Node>());
      Map<Edge, Edge> edgeMap = MapSequence.fromMap(new HashMap<Edge, Edge>());
      for (Node node : ListSequence.fromList(graph.getNodes())) {
        MapSequence.fromMap(nodeMap).put(node, copy.createNode());
      }
      for (Edge edge : ListSequence.fromList(graph.getEdges())) {
        MapSequence.fromMap(edgeMap).put(edge, copy.connect(MapSequence.fromMap(nodeMap).get(edge.getSource()), MapSequence.fromMap(nodeMap).get(edge.getTarget())));
      }
      BiconnectAugmentation.makeBiconnected(copy);
      EmbeddedGraph embeddedGraph;
      embeddedGraph = new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(copy);
      if (mainEmbeddedGraph == null) {
        mainEmbeddedGraph = embeddedGraph;
      } else {
        Graph main = mainEmbeddedGraph.getGraph();
        Assert.assertTrue(ListSequence.fromList(main.getNodes()).count() == ListSequence.fromList(copy.getNodes()).count());
        for (int i = 0; i < ListSequence.fromList(main.getNodes()).count(); i++) {
          Node n1 = ListSequence.fromList(main.getNodes()).getElement(i);
          Node n2 = ListSequence.fromList(copy.getNodes()).getElement(i);
          Assert.assertTrue(ListSequence.fromList(n1.getEdges()).count() == ListSequence.fromList(n2.getEdges()).count());
          for (int j = 0; j < ListSequence.fromList(n1.getEdges()).count(); j++) {
            Edge e1 = ListSequence.fromList(n1.getEdges()).getElement(j);
            Edge e2 = ListSequence.fromList(n2.getEdges()).getElement(j);
            Assert.assertTrue(e1.getSource().getIndex() == e2.getSource().getIndex());
            Assert.assertTrue(e1.getTarget().getIndex() == e2.getTarget().getIndex());
          }
        }
        Assert.assertTrue(ListSequence.fromList(embeddedGraph.getFaces()).count() == ListSequence.fromList(mainEmbeddedGraph.getFaces()).count());
        for (int i = 0; i < ListSequence.fromList(embeddedGraph.getFaces()).count(); i++) {
          Face f1 = ListSequence.fromList(embeddedGraph.getFaces()).getElement(i);
          Face f2 = ListSequence.fromList(mainEmbeddedGraph.getFaces()).getElement(i);
          Assert.assertTrue(ListSequence.fromList(f1.getDarts()).count() == ListSequence.fromList(f2.getDarts()).count());
          for (int j = 0; j < ListSequence.fromList(f1.getDarts()).count(); j++) {
            Dart d1 = ListSequence.fromList(f1.getDarts()).getElement(j);
            Dart d2 = ListSequence.fromList(f2.getDarts()).getElement(j);
            Assert.assertTrue(d1.getSource().getIndex() == d2.getSource().getIndex());
            Assert.assertTrue(d1.getTarget().getIndex() == d2.getTarget().getIndex());
          }
        }
      }
    }
  }
}
