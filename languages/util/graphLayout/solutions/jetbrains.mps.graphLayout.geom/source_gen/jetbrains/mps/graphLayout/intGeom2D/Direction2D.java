package jetbrains.mps.graphLayout.intGeom2D;

/*Generated by MPS */


public enum Direction2D {
  RIGHT(1, 0),
  DOWN(0, -1),
  LEFT(-1, 0),
  UP(0, 1);

  private int myDx;
  private int myDy;

  Direction2D(int dx, int dy) {
    myDx = dx;
    myDy = dy;
  }

  public Direction2D turnClockwise(int angle) {
    int dir = ordinal() + angle;
    if (dir > 3) {
      dir -= 4;
    }
    return get(dir);
  }

  public Direction2D opposite() {
    return turnClockwise(2);
  }

  public int getTurn(Direction2D dir) {
    int turn = dir.ordinal() - ordinal();
    if (turn == 2) {
      return -2;
    }
    if (turn == 3) {
      return -1;
    }
    if (turn == -3) {
      return 1;
    }
    return turn;
  }

  public int getClockwiseTurn(Direction2D dir) {
    int turn = dir.ordinal() - ordinal();
    if (turn < 0) {
      turn += 4;
    }
    return turn;
  }

  public boolean isHorizontal() {
    return myDx != 0;
  }

  public boolean isVertical() {
    return myDy != 0;
  }

  public int dx() {
    return myDx;
  }

  public int dy() {
    return myDy;
  }

  public static Direction2D get(int intDirection) {
    return Direction2D.values()[intDirection];
  }

  public static Direction2D getByShifts(int dx, int dy) {
    for (Direction2D dir : Direction2D.values()) {
      if (dir.dx() == dx && dir.dy() == dy) {
        return dir;
      }
    }
    return null;
  }

  static {
  }
}
