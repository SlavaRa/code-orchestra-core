package jetbrains.mps.graphLayout.planarization;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.graph.Edge;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.ArrayList;
import java.util.Iterator;


/**
 * Implements p-node from pq-tree for graph planarization. Usually there are
 * six patterns for reduction of p-node. In this case we perform a special
 * procedure with the pertinent root, so patterns for the pertinent root are
 * omitted here. 
 */
public class PNode extends PQNode {
  private Node myGraphNode;
  private Edge myGraphEdge;
  private int myHValue;
  private PQNode myHChild;
  private int myAValue;
  private PQNode myFirstAChild;
  private PQNode mySecondAChild;
  private boolean myMakeAFromH;

  public PNode(Node graphNode, Edge graphEdge) {
    super();
    myGraphNode = graphNode;
    myGraphEdge = graphEdge;
  }

  public PQNode processAsPertinentRoot(List<PQNode> children, Node nextGraphNode) {
    ListSequence.fromList(this.getChildren()).removeWhere(new IWhereFilter<PQNode>() {
      public boolean accept(PQNode it) {
        return it.getState() != PQNode.State.EMPTY;
      }
    });
    children = ListSequence.fromList(children).removeWhere(new IWhereFilter<PQNode>() {
      public boolean accept(PQNode it) {
        return it.getState() == PQNode.State.EMPTY;
      }
    });
    List<PQNode> partialChildren = ListSequence.fromList(children).where(new IWhereFilter<PQNode>() {
      public boolean accept(PQNode it) {
        return it.getState() == PQNode.State.PARTIAL;
      }
    }).toListSequence();
    int numPartialChildren = ListSequence.fromList(partialChildren).count();
    QNode newComponent = new QNode();
    PNode nextNode = new PNode(nextGraphNode, null);
    newComponent.addLastChild(nextNode);
    EdgesOrder edgesOrder = newComponent.getEdgesOrder();
    this.addLastChild(newComponent);
    if (numPartialChildren > 2) {
      throw new RuntimeException("can not make reduction: pertinent root has more than two partial children");
    }
    if (numPartialChildren == 0) {
      for (PQNode child : ListSequence.fromList(children).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.FULL;
        }
      })) {
        child.collectEdgesOrderInSubtree(edgesOrder);
      }
    }
    if (numPartialChildren == 1) {
      PQNode partialChild = ListSequence.fromList(partialChildren).first();
      List<PQNode> firstEmptySegment = ListSequence.fromList(new ArrayList<PQNode>());
      boolean endFirstSegment = false;
      for (PQNode child : ListSequence.fromList(partialChild.getChildren())) {
        if (child.getState() == PQNode.State.FULL) {
          endFirstSegment = true;
        } else {
          if (endFirstSegment) {
            newComponent.addLastChild(child);
          } else {
            ListSequence.fromList(firstEmptySegment).addElement(child);
          }
        }
      }
      for (PQNode child : ListSequence.fromList(firstEmptySegment).reversedList()) {
        newComponent.addFirstChild(child);
      }
      ListSequence.fromList(partialChild.getChildren()).removeWhere(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() != PQNode.State.FULL;
        }
      });
      partialChild.collectEdgesOrderInSubtree(edgesOrder);
      for (PQNode child : ListSequence.fromList(children).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.FULL;
        }
      })) {
        child.collectEdgesOrderInSubtree(edgesOrder);
      }
    }
    if (numPartialChildren == 2) {
      PQNode partialChild0 = ListSequence.fromList(partialChildren).getElement(0);
      List<PQNode> emptyNodes = ListSequence.fromList(partialChild0.getChildren()).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.EMPTY;
        }
      }).toListSequence();
      emptyNodes = ListSequence.fromList(emptyNodes).reversedList();
      for (PQNode child : ListSequence.fromList(emptyNodes)) {
        newComponent.addFirstChild(child);
      }
      PQNode partialChild1 = ListSequence.fromList(partialChildren).getElement(1);
      ((QNode) partialChild1).reverse();
      emptyNodes = ListSequence.fromList(partialChild1.getChildren()).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.EMPTY;
        }
      }).toListSequence();
      for (PQNode child : ListSequence.fromList(emptyNodes)) {
        newComponent.addLastChild(child);
      }
      /*
        newComponent.getEdgesOrder().merge(partialChild0.getEdgesOrder());
        for (PQNode child : ListSequence.fromList(partialChild0.getChildren()).where(new IWhereFilter<PQNode>() {
          public boolean accept(PQNode it) {
            return it.getState() == PQNode.State.FULL;
          }
        })) {
          child.collectEdgesOrderInSubtree(edgesOrder);
        }
      */
      ListSequence.fromList(partialChild0.getChildren()).removeWhere(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() != PQNode.State.FULL;
        }
      });
      partialChild0.collectEdgesOrderInSubtree(edgesOrder);
      for (PQNode child : ListSequence.fromList(children).where(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() == PQNode.State.FULL;
        }
      })) {
        child.collectEdgesOrderInSubtree(edgesOrder);
      }
      ListSequence.fromList(partialChild1.getChildren()).removeWhere(new IWhereFilter<PQNode>() {
        public boolean accept(PQNode it) {
          return it.getState() != PQNode.State.FULL;
        }
      });
      partialChild1.collectEdgesOrderInSubtree(edgesOrder);
      /*
        newComponent.getEdgesOrder().merge(partialChild1.getEdgesOrder());
        for (PQNode child : ListSequence.fromList(partialChild1.getChildren()).where(new IWhereFilter<PQNode>() {
          public boolean accept(PQNode it) {
            return it.getState() == PQNode.State.FULL;
          }
        })) {
          child.collectEdgesOrderInSubtree(edgesOrder);
        }
      */
    }
    return nextNode;
  }

  @Override
  public void collectEdgesOrderInSubtree(EdgesOrder order) {
    order.addEdge(myGraphNode, myGraphEdge);
    for (PQNode child : ListSequence.fromList(getChildren())) {
      child.collectEdgesOrderInSubtree(order);
    }
  }

  public PQNode makeReduction(boolean isRealPertinentRoot) {
    int numFull = 0;
    int numPartial = 0;
    int numChildren = ListSequence.fromList(getChildren()).count();
    QNode replacement = null;
    for (PQNode node : ListSequence.fromList(getChildren())) {
      if (node.getState() == PQNode.State.FULL) {
        numFull++;
      }
      if (node.getState() == PQNode.State.PARTIAL) {
        replacement = ((QNode) node);
        numPartial++;
      }
    }
    if (numPartial > 1) {
      throw new RuntimeException("can not make reduction: P-node has more than one partial child");
    }
    if (numFull == numChildren) {
      setState(PQNode.State.FULL);
      return this;
    } else {
      if (replacement == null) {
        replacement = new QNode();
        replacement.setState(PQNode.State.PARTIAL);
      }
      splitNodes(replacement);
      return replacement;
    }
  }

  public void splitNodes(PQNode replacement) {
    PQNode newFullNode = new PNode(myGraphNode, null);
    newFullNode.setState(PQNode.State.FULL);
    PQNode newEmptyNode = new PNode(myGraphNode, null);
    newEmptyNode.setState(PQNode.State.EMPTY);
    for (PQNode child : ListSequence.fromList(getChildren())) {
      if (child.getState() == PQNode.State.FULL) {
        newFullNode.addLastChild(child);
      }
      if (child.getState() == PQNode.State.EMPTY) {
        newEmptyNode.addLastChild(child);
      }
    }
    if (ListSequence.fromList(newFullNode.getChildren()).count() > 0) {
      replacement.addLastChild(newFullNode);
    }
    if (ListSequence.fromList(newEmptyNode.getChildren()).count() > 0) {
      replacement.addFirstChild(newEmptyNode);
    }
    replacement.getEdgesOrder().addEdge(myGraphNode, myGraphEdge);
    replacement.setParent(getParent());
  }

  @Override
  public void addGraphNode(Node node) {
    myGraphNode = node;
  }

  public Node getGraphNode() {
    return myGraphNode;
  }

  public Edge getEdge() {
    return myGraphEdge;
  }

  public String getType() {
    return "P";
  }

  public int getAValue() {
    return myAValue;
  }

  public void computeAValue() {
    super.computeAValue();
    if (getState() != PQNode.State.PARTIAL) {
      myAValue = 0;
      return;
    }
    List<PQNode> partialChildren = ListSequence.fromList(getChildren()).where(new IWhereFilter<PQNode>() {
      public boolean accept(PQNode it) {
        return it.getState() == PQNode.State.PARTIAL;
      }
    }).toListSequence();
    int valueFromA = 0;
    PQNode aChild = null;
    for (PQNode child : ListSequence.fromList(partialChildren)) {
      int curValue = child.getNumFullLeaves() - child.getAValue();
      if (valueFromA < curValue) {
        valueFromA = curValue;
        aChild = child;
      }
    }
    valueFromA = getNumFullLeaves() - valueFromA;
    int firstHMax = 0;
    int secondHMax = 0;
    PQNode firstHChild = null;
    PQNode secondHChild = null;
    int numPartialFullLeaves = 0;
    for (PQNode child : ListSequence.fromList(partialChildren)) {
      numPartialFullLeaves += child.getNumFullLeaves();
      int curValue = child.getNumFullLeaves() - child.getHValue();
      if (curValue > firstHMax) {
        secondHMax = firstHMax;
        secondHChild = firstHChild;
        firstHMax = curValue;
        firstHChild = child;
      } else {
        if (curValue > secondHMax) {
          secondHMax = curValue;
          secondHChild = child;
        }
      }
    }
    int valueFromH = numPartialFullLeaves - firstHMax - secondHMax;
    if (valueFromA <= valueFromH) {
      myMakeAFromH = false;
      myAValue = valueFromA;
      myFirstAChild = aChild;
      mySecondAChild = null;
    } else {
      myMakeAFromH = true;
      myAValue = valueFromH;
      myFirstAChild = firstHChild;
      mySecondAChild = secondHChild;
    }
    if (myAValue > INF) {
      myAValue = INF;
    }
  }

  public void makeADeletion() {
    if (getState() == PQNode.State.FULL || getState() == PQNode.State.EMPTY) {
      return;
    } else {
      if (myMakeAFromH) {
        for (PQNode child : ListSequence.fromList(getChildren())) {
          if (child.getState() == PQNode.State.PARTIAL) {
            if (child == myFirstAChild || child == mySecondAChild) {
              child.makeHDeletion();
            } else {
              child.makeEmpty();
            }
          }
        }
      } else {
        Iterator<PQNode> childItr = ListSequence.fromList(getChildren()).iterator();
        while (childItr.hasNext()) {
          PQNode child = childItr.next();
          if (child == myFirstAChild) {
            child.makeADeletion();
          } else {
            if (child.makeEmpty() == null) {
              childItr.remove();
            }
          }

        }
        for (PQNode child : ListSequence.fromList(getChildren())) {
          if (child == myFirstAChild) {
            child.makeADeletion();
          } else {
            child.makeEmpty();
          }
        }
      }
    }
  }

  public int getHValue() {
    return myHValue;
  }

  public void computeHValue() {
    super.computeHValue();
    if (getState() != PQNode.State.PARTIAL) {
      myHValue = 0;
      return;
    }
    if (getState() == PQNode.State.FULL || getState() == PQNode.State.EMPTY) {
      myHValue = 0;
      myHChild = null;
    } else {
      myHChild = null;
      myHValue = 0;
      int numPartialFullLeaves = 0;
      for (PQNode child : ListSequence.fromList(getChildren())) {
        if (child.getState() == PQNode.State.PARTIAL) {
          numPartialFullLeaves += child.getNumFullLeaves();
          int childHValue = child.getHValue();
          if (myHValue < child.getNumFullLeaves() - childHValue) {
            myHValue = child.getNumFullLeaves() - childHValue;
            myHChild = child;
          }
        }
      }
      myHValue = numPartialFullLeaves - myHValue;
    }
    if (myHValue > INF) {
      myHValue = INF;
    }
  }

  public void makeHDeletion() {
    if (getState() == PQNode.State.FULL || getState() == PQNode.State.EMPTY) {
      return;
    } else {
      for (PQNode child : ListSequence.fromList(getChildren())) {
        if (child.getState() == PQNode.State.PARTIAL) {
          if (child == myHChild) {
            child.makeHDeletion();
          } else {
            child.makeEmpty();
          }
        }
      }
    }
  }

  @Override
  public String getGraphInfo(String prefix) {
    return prefix + " node: " + myGraphNode + " edge: " + myGraphEdge;
  }
}
