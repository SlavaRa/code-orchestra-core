package jetbrains.mps.nanoj.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class VarDeclReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_6gh6zs_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:00000000-0000-4000-0000-011c895905dc(jetbrains.mps.nanoj.constraints)", "689680155165915394");

  public VarDeclReference_Constraints() {
    super("jetbrains.mps.nanoj.structure.VarDeclReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("declaration", new BaseReferenceConstraintsDescriptor("declaration", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
            SNode currentStatement = SNodeOperations.getAncestor(_context.getEnclosingNode(), "jetbrains.mps.nanoj.structure.NanoStatement", true, false);
            while (currentStatement != null) {
              SNode currentBlock = SNodeOperations.getAncestorWhereConceptInList(currentStatement, new String[]{"jetbrains.mps.nanoj.structure.NanoStatementList"}, false, false);
              if ((currentBlock == null)) {
                break;
              }
              for (SNode statement : ListSequence.fromList(SNodeOperations.getChildren(currentBlock)).where(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SNodeOperations.isInstanceOf(it, "jetbrains.mps.nanoj.structure.NanoStatement");
                }
              })) {
                if (statement == currentStatement) {
                  break;
                }
                ListSequence.fromList(result).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(statement, null, false, new String[]{})));
              }
              currentStatement = SNodeOperations.getAncestor(currentBlock, "jetbrains.mps.nanoj.structure.NanoStatement", true, false);
            }
            return result;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_6gh6zs_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
