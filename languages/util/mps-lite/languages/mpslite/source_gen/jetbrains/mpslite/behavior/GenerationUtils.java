package jetbrains.mpslite.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Map;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class GenerationUtils {
  public GenerationUtils() {
  }

  public static SNode generateEditorCellModel(SNode lineList, SNode concept, Map<SNode, SNode> partsToLinks) {
    List<SNode> lines = SLinkOperations.getTargets(lineList, "line", true);
    if (ListSequence.fromList(lines).count() == 0) {
      if (SPropertyOperations.getBoolean(concept, "abstract")) {
        SNode errorCell = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Error", null);
        SPropertyOperations.set(errorCell, "text", "abstract " + SPropertyOperations.getString(concept, "name"));
        return errorCell;
      } else {
        return null;
      }
    } else if (ListSequence.fromList(lines).count() == 1) {
      List<SNode> lineParts = SLinkOperations.getTargets(ListSequence.fromList(lines).first(), "linePart", true);
      if (ListSequence.fromList(lineParts).count() == 1) {
        return LinePart_Behavior.call_createCellModel_1238614099938(ListSequence.fromList(lineParts).first(), partsToLinks);
      } else {
        SNode hCollection = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Collection", null);
        SLinkOperations.setTarget(hCollection, "cellLayout", SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal", null), true);
        for (SNode linePart : lineParts) {
          ListSequence.fromList(SLinkOperations.getTargets(hCollection, "childCellModel", true)).addElement(LinePart_Behavior.call_createCellModel_1238614099938(linePart, partsToLinks));
        }
        return hCollection;
      }
    } else {
      SNode vCollection = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Collection", null);
      SLinkOperations.setTarget(vCollection, "cellLayout", SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Vertical", null), true);
      for (SNode line : lines) {
        SNode hCollection = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Collection", null);
        SLinkOperations.setTarget(hCollection, "cellLayout", SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal", null), true);
        ListSequence.fromList(SLinkOperations.getTargets(vCollection, "childCellModel", true)).addElement(hCollection);
        for (SNode linePart : SLinkOperations.getTargets(line, "linePart", true)) {
          ListSequence.fromList(SLinkOperations.getTargets(hCollection, "childCellModel", true)).addElement(LinePart_Behavior.call_createCellModel_1238614099938(linePart, partsToLinks));
        }
      }
      return vCollection;
    }
  }

  public static void fillBinarySideTransformActions(SNode binaryOperationConcept, SNode actions, Map<SNode, SNode> conceptsToTargets, Map<SNode, SNode> linePartsToLinks) {
    SNode expressionConcept = (SNode) MapSequence.fromMap(conceptsToTargets).get(SLinkOperations.getTarget(SNodeOperations.getAncestor(binaryOperationConcept, "jetbrains.mpslite.structure.ConceptContainer", false, false), "expressionConcept", true));
    if ((expressionConcept != null)) {
      SNode rtBuilder = new GenerationUtils.QuotationClass_vxpwrw_a0a0a1a1().createNode(SNodeOperations.cast(MapSequence.fromMap(linePartsToLinks).get(SLinkOperations.getTarget(binaryOperationConcept, "leftTarget", true)), "jetbrains.mps.lang.structure.structure.LinkDeclaration"), MapSequence.fromMap(conceptsToTargets).get(binaryOperationConcept), expressionConcept);
      SNode ltBuilder = new GenerationUtils.QuotationClass_vxpwrw_a0a1a1a1().createNode(SNodeOperations.cast(MapSequence.fromMap(linePartsToLinks).get(SLinkOperations.getTarget(binaryOperationConcept, "rightTarget", true)), "jetbrains.mps.lang.structure.structure.LinkDeclaration"), MapSequence.fromMap(conceptsToTargets).get(binaryOperationConcept), expressionConcept);
      ListSequence.fromList(SLinkOperations.getTargets(actions, "actionsBuilder", true)).addElement(rtBuilder);
      ListSequence.fromList(SLinkOperations.getTargets(actions, "actionsBuilder", true)).addElement(ltBuilder);
    }
  }

  public static class QuotationClass_vxpwrw_a0a0a1a1 {
    public QuotationClass_vxpwrw_a0a0a1a1() {
    }

    public SNode createNode(Object parameter_37, Object parameter_38, Object parameter_39) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      SNode quotedNode_8 = null;
      SNode quotedNode_9 = null;
      SNode quotedNode_10 = null;
      SNode quotedNode_11 = null;
      SNode quotedNode_12 = null;
      SNode quotedNode_13 = null;
      SNode quotedNode_14 = null;
      SNode quotedNode_15 = null;
      SNode quotedNode_16 = null;
      SNode quotedNode_17 = null;
      SNode quotedNode_18 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_19 = quotedNode_1;
        quotedNode1_19.setReferent("applicableConcept", (SNode) parameter_39);
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptRightTransformPart", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_20 = quotedNode_2;
          quotedNode1_20.setReferent("concept", (SNode) parameter_38);
          {
            quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_ConceptHandler", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_21 = quotedNode_3;
            {
              quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_22 = quotedNode_4;
              {
                quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_23 = quotedNode_5;
                {
                  quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_24 = quotedNode_8;
                  {
                    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_25 = quotedNode_11;
                    quotedNode_8.addChild("operand", quotedNode1_25);
                  }
                  {
                    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_26 = quotedNode_12;
                    {
                      quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, GlobalScope.getInstance(), false);
                      SNode quotedNode1_27 = quotedNode_15;
                      quotedNode_12.addChild("replacementNode", quotedNode1_27);
                    }
                    quotedNode_8.addChild("operation", quotedNode1_26);
                  }
                  quotedNode_5.addChild("expression", quotedNode1_24);
                }
                quotedNode_4.addChild("statement", quotedNode1_23);
              }
              {
                quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_28 = quotedNode_6;
                {
                  quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_29 = quotedNode_9;
                  {
                    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_30 = quotedNode_13;
                    {
                      quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, GlobalScope.getInstance(), false);
                      SNode quotedNode1_31 = quotedNode_16;
                      quotedNode_13.addChild("operand", quotedNode1_31);
                    }
                    {
                      quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess", null, GlobalScope.getInstance(), false);
                      SNode quotedNode1_32 = quotedNode_17;
                      quotedNode1_32.setReferent("link", (SNode) parameter_37);
                      quotedNode_13.addChild("operation", quotedNode1_32);
                    }
                    quotedNode_9.addChild("operand", quotedNode1_30);
                  }
                  {
                    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_33 = quotedNode_14;
                    {
                      quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode", null, GlobalScope.getInstance(), false);
                      SNode quotedNode1_34 = quotedNode_18;
                      quotedNode_14.addChild("linkTarget", quotedNode1_34);
                    }
                    quotedNode_9.addChild("operation", quotedNode1_33);
                  }
                  quotedNode_6.addChild("expression", quotedNode1_29);
                }
                quotedNode_4.addChild("statement", quotedNode1_28);
              }
              {
                quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_35 = quotedNode_7;
                {
                  quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_36 = quotedNode_10;
                  quotedNode_7.addChild("expression", quotedNode1_36);
                }
                quotedNode_4.addChild("statement", quotedNode1_35);
              }
              quotedNode_3.addChild("body", quotedNode1_22);
            }
            quotedNode_2.addChild("handler", quotedNode1_21);
          }
          quotedNode_1.addChild("part", quotedNode1_20);
        }
        result = quotedNode1_19;
      }
      return result;
    }
  }

  public static class QuotationClass_vxpwrw_a0a1a1a1 {
    public QuotationClass_vxpwrw_a0a1a1a1() {
    }

    public SNode createNode(Object parameter_37, Object parameter_38, Object parameter_39) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      SNode quotedNode_8 = null;
      SNode quotedNode_9 = null;
      SNode quotedNode_10 = null;
      SNode quotedNode_11 = null;
      SNode quotedNode_12 = null;
      SNode quotedNode_13 = null;
      SNode quotedNode_14 = null;
      SNode quotedNode_15 = null;
      SNode quotedNode_16 = null;
      SNode quotedNode_17 = null;
      SNode quotedNode_18 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_19 = quotedNode_1;
        quotedNode1_19.setProperty("side", "left");
        quotedNode1_19.setReferent("applicableConcept", (SNode) parameter_39);
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptRightTransformPart", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_20 = quotedNode_2;
          quotedNode1_20.setReferent("concept", (SNode) parameter_38);
          {
            quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_ConceptHandler", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_21 = quotedNode_3;
            {
              quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_22 = quotedNode_4;
              {
                quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_23 = quotedNode_5;
                {
                  quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_24 = quotedNode_8;
                  {
                    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_25 = quotedNode_11;
                    quotedNode_8.addChild("operand", quotedNode1_25);
                  }
                  {
                    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_26 = quotedNode_12;
                    {
                      quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, GlobalScope.getInstance(), false);
                      SNode quotedNode1_27 = quotedNode_15;
                      quotedNode_12.addChild("replacementNode", quotedNode1_27);
                    }
                    quotedNode_8.addChild("operation", quotedNode1_26);
                  }
                  quotedNode_5.addChild("expression", quotedNode1_24);
                }
                quotedNode_4.addChild("statement", quotedNode1_23);
              }
              {
                quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_28 = quotedNode_6;
                {
                  quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_29 = quotedNode_9;
                  {
                    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_30 = quotedNode_13;
                    {
                      quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, GlobalScope.getInstance(), false);
                      SNode quotedNode1_31 = quotedNode_16;
                      quotedNode_13.addChild("operand", quotedNode1_31);
                    }
                    {
                      quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess", null, GlobalScope.getInstance(), false);
                      SNode quotedNode1_32 = quotedNode_17;
                      quotedNode1_32.setReferent("link", (SNode) parameter_37);
                      quotedNode_13.addChild("operation", quotedNode1_32);
                    }
                    quotedNode_9.addChild("operand", quotedNode1_30);
                  }
                  {
                    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_33 = quotedNode_14;
                    {
                      quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode", null, GlobalScope.getInstance(), false);
                      SNode quotedNode1_34 = quotedNode_18;
                      quotedNode_14.addChild("linkTarget", quotedNode1_34);
                    }
                    quotedNode_9.addChild("operation", quotedNode1_33);
                  }
                  quotedNode_6.addChild("expression", quotedNode1_29);
                }
                quotedNode_4.addChild("statement", quotedNode1_28);
              }
              {
                quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_35 = quotedNode_7;
                {
                  quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_36 = quotedNode_10;
                  quotedNode_7.addChild("expression", quotedNode1_36);
                }
                quotedNode_4.addChild("statement", quotedNode1_35);
              }
              quotedNode_3.addChild("body", quotedNode1_22);
            }
            quotedNode_2.addChild("handler", quotedNode1_21);
          }
          quotedNode_1.addChild("part", quotedNode1_20);
        }
        result = quotedNode1_19;
      }
      return result;
    }
  }
}
