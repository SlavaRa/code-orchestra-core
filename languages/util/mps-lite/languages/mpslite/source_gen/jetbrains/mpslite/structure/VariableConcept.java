package jetbrains.mpslite.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class VariableConcept extends BaseConcept implements IMPSLiteConcept {
  public static final String concept = "jetbrains.mpslite.structure.VariableConcept";
  public static final String NAME_PROPERTY_NAME = "namePropertyName";
  public static final String TYPE_ROLE = "typeRole";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String ROOT = "root";
  public static final String ABSTRACT = "abstract";
  public static final String TYPE_CONCEPT = "typeConcept";
  public static final String REFERENCE = "reference";
  public static final String CONCRETE_SYNTAX = "concreteSyntax";
  public static final String EXTENDS = "extends";
  public static final String SCOPE_BLOCK = "scopeBlock";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public VariableConcept(SNode node) {
    super(node);
  }

  public String getNamePropertyName() {
    return this.getProperty(VariableConcept.NAME_PROPERTY_NAME);
  }

  public void setNamePropertyName(String value) {
    this.setProperty(VariableConcept.NAME_PROPERTY_NAME, value);
  }

  public String getTypeRole() {
    return this.getProperty(VariableConcept.TYPE_ROLE);
  }

  public void setTypeRole(String value) {
    this.setProperty(VariableConcept.TYPE_ROLE, value);
  }

  public String getName() {
    return this.getProperty(VariableConcept.NAME);
  }

  public void setName(String value) {
    this.setProperty(VariableConcept.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(VariableConcept.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(VariableConcept.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(VariableConcept.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(VariableConcept.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(VariableConcept.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(VariableConcept.VIRTUAL_PACKAGE, value);
  }

  public boolean getRoot() {
    return this.getBooleanProperty(VariableConcept.ROOT);
  }

  public void setRoot(boolean value) {
    this.setBooleanProperty(VariableConcept.ROOT, value);
  }

  public boolean getAbstract() {
    return this.getBooleanProperty(VariableConcept.ABSTRACT);
  }

  public void setAbstract(boolean value) {
    this.setBooleanProperty(VariableConcept.ABSTRACT, value);
  }

  public AbstractConceptReference getTypeConcept() {
    return (AbstractConceptReference) this.getChild(AbstractConceptReference.class, VariableConcept.TYPE_CONCEPT);
  }

  public void setTypeConcept(AbstractConceptReference node) {
    super.setChild(VariableConcept.TYPE_CONCEPT, node);
  }

  public BaseConcept getReference() {
    return (BaseConcept) this.getChild(BaseConcept.class, VariableConcept.REFERENCE);
  }

  public void setReference(BaseConcept node) {
    super.setChild(VariableConcept.REFERENCE, node);
  }

  public LineList getConcreteSyntax() {
    return (LineList) this.getChild(LineList.class, VariableConcept.CONCRETE_SYNTAX);
  }

  public void setConcreteSyntax(LineList node) {
    super.setChild(VariableConcept.CONCRETE_SYNTAX, node);
  }

  public AbstractConceptReference getExtends() {
    return (AbstractConceptReference) this.getChild(AbstractConceptReference.class, VariableConcept.EXTENDS);
  }

  public void setExtends(AbstractConceptReference node) {
    super.setChild(VariableConcept.EXTENDS, node);
  }

  public int getScopeBlocksCount() {
    return this.getChildCount(VariableConcept.SCOPE_BLOCK);
  }

  public Iterator<BlockReference> scopeBlocks() {
    return this.children(BlockReference.class, VariableConcept.SCOPE_BLOCK);
  }

  public List<BlockReference> getScopeBlocks() {
    return this.getChildren(BlockReference.class, VariableConcept.SCOPE_BLOCK);
  }

  public void addScopeBlock(BlockReference node) {
    this.addChild(VariableConcept.SCOPE_BLOCK, node);
  }

  public void insertScopeBlock(BlockReference prev, BlockReference node) {
    this.insertChild(prev, VariableConcept.SCOPE_BLOCK, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(VariableConcept.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, VariableConcept.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, VariableConcept.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(VariableConcept.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, VariableConcept.SMODEL_ATTRIBUTE, node);
  }

  public static VariableConcept newInstance(SModel sm, boolean init) {
    return (VariableConcept) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mpslite.structure.VariableConcept", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static VariableConcept newInstance(SModel sm) {
    return VariableConcept.newInstance(sm, false);
  }
}
