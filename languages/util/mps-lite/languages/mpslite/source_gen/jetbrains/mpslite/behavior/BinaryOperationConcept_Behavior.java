package jetbrains.mpslite.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class BinaryOperationConcept_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_fillConcept_1239891562930(SNode thisNode, SNode concept, Map<SNode, SNode> conceptsToTargets, Map<SNode, SNode> partsToLinks) {
    SNode conceptDeclaration = ((SNode) concept);
    SNode leftLink = SLinkOperations.addNewChild(conceptDeclaration, "linkDeclaration", "jetbrains.mps.lang.structure.structure.LinkDeclaration");
    SNode rightLink = SLinkOperations.addNewChild(conceptDeclaration, "linkDeclaration", "jetbrains.mps.lang.structure.structure.LinkDeclaration");
    SLinkOperations.setTarget(leftLink, "target", AbstractConceptReference_Behavior.call_getConcept_1238594571574(SLinkOperations.getTarget(thisNode, "leftTarget", true), conceptsToTargets), false);
    SLinkOperations.setTarget(rightLink, "target", AbstractConceptReference_Behavior.call_getConcept_1238594571574(SLinkOperations.getTarget(thisNode, "rightTarget", true), conceptsToTargets), false);
    SPropertyOperations.set(leftLink, "role", SPropertyOperations.getString(thisNode, "leftTargetRole"));
    SPropertyOperations.set(rightLink, "role", SPropertyOperations.getString(thisNode, "rightTargetRole"));
    SPropertyOperations.set(leftLink, "metaClass", "aggregation");
    SPropertyOperations.set(rightLink, "metaClass", "aggregation");
    SPropertyOperations.set(leftLink, "sourceCardinality", "1");
    SPropertyOperations.set(rightLink, "sourceCardinality", "1");
    SNode conceptProperty = SLinkOperations.addNewChild(conceptDeclaration, "conceptProperty", "jetbrains.mps.lang.structure.structure.StringConceptProperty");
    SLinkOperations.setTarget(conceptProperty, "conceptPropertyDeclaration", SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "1133920641626"), "conceptPropertyDeclaration", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals("alias");
      }
    }).first(), "jetbrains.mps.lang.structure.structure.StringConceptPropertyDeclaration"), false);
    SPropertyOperations.set(conceptProperty, "value", SPropertyOperations.getString(thisNode, "sign"));
    MapSequence.fromMap(partsToLinks).put(SLinkOperations.getTarget(thisNode, "leftTarget", true), leftLink);
    MapSequence.fromMap(partsToLinks).put(SLinkOperations.getTarget(thisNode, "rightTarget", true), rightLink);
  }

  public static SNode virtual_createEditor_1239890004879(SNode thisNode, Map<SNode, SNode> conceptsToTargets, Map<SNode, SNode> partsToLinks) {
    SNode contentCell = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Collection", null);
    SLinkOperations.setNewChild(contentCell, "cellLayout", "jetbrains.mps.lang.editor.structure.CellLayout_Indent");
    SNode leftCell = SLinkOperations.addNewChild(contentCell, "childCellModel", "jetbrains.mps.lang.editor.structure.CellModel_RefNode");
    SLinkOperations.setTarget(leftCell, "relationDeclaration", SNodeOperations.cast(MapSequence.fromMap(partsToLinks).get(SLinkOperations.getTarget(thisNode, "leftTarget", true)), "jetbrains.mps.lang.structure.structure.LinkDeclaration"), false);
    SNode signCell = SLinkOperations.addNewChild(contentCell, "childCellModel", "jetbrains.mps.lang.editor.structure.CellModel_Constant");
    SPropertyOperations.set(signCell, "text", SPropertyOperations.getString(thisNode, "sign"));
    SNode rightCell = SLinkOperations.addNewChild(contentCell, "childCellModel", "jetbrains.mps.lang.editor.structure.CellModel_RefNode");
    SLinkOperations.setTarget(rightCell, "relationDeclaration", SNodeOperations.cast(MapSequence.fromMap(partsToLinks).get(SLinkOperations.getTarget(thisNode, "rightTarget", true)), "jetbrains.mps.lang.structure.structure.LinkDeclaration"), false);
    SNode result = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration", null);
    SLinkOperations.setTarget(result, "cellModel", contentCell, true);
    return result;
  }
}
