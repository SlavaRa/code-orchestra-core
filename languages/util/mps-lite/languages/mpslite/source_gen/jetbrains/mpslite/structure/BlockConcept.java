package jetbrains.mpslite.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BlockConcept extends BaseConcept implements IMPSLiteConcept {
  public static final String concept = "jetbrains.mpslite.structure.BlockConcept";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String ROOT = "root";
  public static final String ABSTRACT = "abstract";
  public static final String CONCRETE_SYNTAX = "concreteSyntax";
  public static final String EXTENDS = "extends";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public BlockConcept(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(BlockConcept.NAME);
  }

  public void setName(String value) {
    this.setProperty(BlockConcept.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(BlockConcept.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BlockConcept.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BlockConcept.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BlockConcept.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BlockConcept.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BlockConcept.VIRTUAL_PACKAGE, value);
  }

  public boolean getRoot() {
    return this.getBooleanProperty(BlockConcept.ROOT);
  }

  public void setRoot(boolean value) {
    this.setBooleanProperty(BlockConcept.ROOT, value);
  }

  public boolean getAbstract() {
    return this.getBooleanProperty(BlockConcept.ABSTRACT);
  }

  public void setAbstract(boolean value) {
    this.setBooleanProperty(BlockConcept.ABSTRACT, value);
  }

  public LineList getConcreteSyntax() {
    return (LineList) this.getChild(LineList.class, BlockConcept.CONCRETE_SYNTAX);
  }

  public void setConcreteSyntax(LineList node) {
    super.setChild(BlockConcept.CONCRETE_SYNTAX, node);
  }

  public AbstractConceptReference getExtends() {
    return (AbstractConceptReference) this.getChild(AbstractConceptReference.class, BlockConcept.EXTENDS);
  }

  public void setExtends(AbstractConceptReference node) {
    super.setChild(BlockConcept.EXTENDS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(BlockConcept.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, BlockConcept.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, BlockConcept.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(BlockConcept.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, BlockConcept.SMODEL_ATTRIBUTE, node);
  }

  public static BlockConcept newInstance(SModel sm, boolean init) {
    return (BlockConcept) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mpslite.structure.BlockConcept", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BlockConcept newInstance(SModel sm) {
    return BlockConcept.newInstance(sm, false);
  }
}
