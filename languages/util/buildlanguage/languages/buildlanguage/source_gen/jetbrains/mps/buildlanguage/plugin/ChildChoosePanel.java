package jetbrains.mps.buildlanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import javax.swing.JPanel;
import org.jetbrains.annotations.Nullable;
import java.awt.GridBagLayout;
import javax.swing.JLabel;
import jetbrains.mps.ide.common.LayoutUtil;
import javax.swing.JComboBox;
import jetbrains.mps.ide.common.ReadComboBoxRenderrer;
import jetbrains.mps.ide.common.ReadComboBoxEditor;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import org.jetbrains.annotations.NotNull;
import java.util.ArrayList;

public abstract class ChildChoosePanel<N extends SNode, C extends SNode> extends JPanel {
  @Nullable
  private N myNode;
  @Nullable
  private C myChild;
  private final ChildChoosePanel.MyComboBoxModel myComboBoxModel = new ChildChoosePanel.MyComboBoxModel();

  public ChildChoosePanel(String title) {
    super(new GridBagLayout());

    this.add(new JLabel(title), LayoutUtil.createLabelConstraints(0));
    JComboBox comboBox = new JComboBox(this.myComboBoxModel);
    comboBox.setRenderer(new ReadComboBoxRenderrer());
    comboBox.setEditor(new ReadComboBoxEditor());
    this.add(comboBox, LayoutUtil.createFieldConstraints(1));
  }

  public abstract List<C> getChildrenNodes(N node);

  public void nodeChanged(@Nullable N node) {
    if (node == null) {
      this.reset(null, null);
    } else {
      this.reset(node, this.selectFromChangedNode(node));
    }
  }

  protected String selectFromChangedNode(final N node) {
    final Wrappers._T<String> child = new Wrappers._T<String>(null);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        List<C> childrenNodes = getChildrenNodes(node);
        if (childrenNodes != null && ListSequence.fromList(childrenNodes).isNotEmpty()) {
          child.value = ((SNode) ListSequence.fromList(childrenNodes).first()).getId();
        }
      }
    });
    return child.value;
  }

  public void reset(@Nullable N node, @Nullable final String childId) {
    this.myNode = node;
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ChildChoosePanel.this.selectChild(childId);
      }
    });
    this.myComboBoxModel.nodeChanged();
  }

  private void selectChild(@Nullable String childId) {
    if (StringUtils.isEmpty(childId) || (this.myNode == null)) {
      this.myChild = null;
      return;
    }
    this.myChild = (C) SNodeOperations.getModel(this.myNode).getNodeById(childId);
  }

  @Nullable
  public String getChildId() {
    if ((this.myChild == null)) {
      return null;
    }
    final Wrappers._T<String> id = new Wrappers._T<String>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        id.value = ((SNode) ChildChoosePanel.this.myChild).getId();
      }
    });
    return id.value;
  }

  public class MyComboBoxModel extends AbstractListModel implements ComboBoxModel {
    public MyComboBoxModel() {
    }

    public void setSelectedItem(Object object) {
      ChildChoosePanel.this.myChild = (C) object;
    }

    public int getSize() {
      return ListSequence.fromList(this.getConfigurations()).count();
    }

    public Object getSelectedItem() {
      return ChildChoosePanel.this.myChild;
    }

    public Object getElementAt(int i) {
      return ListSequence.fromList(this.getConfigurations()).getElement(i);
    }

    @NotNull
    public List<Object> getConfigurations() {
      final Wrappers._T<List<Object>> children = new Wrappers._T<List<Object>>();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          if ((ChildChoosePanel.this.myNode != null)) {
            children.value = ListSequence.fromListWithValues(new ArrayList<Object>(), getChildrenNodes(ChildChoosePanel.this.myNode));
          } else {
            children.value = ListSequence.fromList(new ArrayList<Object>());
          }
        }
      });
      return children.value;
    }

    public void nodeChanged() {
      this.fireContentsChanged(this, -1, this.getSize());
    }
  }
}
