package jetbrains.mps.buildlanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Project extends BaseConcept implements INamedConcept, IPropertyHolder, IAntScript {
  public static final String concept = "jetbrains.mps.buildlanguage.structure.Project";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String DEFAULT = "default";
  public static final String BASEDIR = "basedir";
  public static final String TARGET = "target";
  public static final String IMPORT_PROJECT = "importProject";
  public static final String PATHS = "paths";
  public static final String IMPORT_PROPERTIES = "importProperties";
  public static final String PROPERTY = "property";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Project(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Project.NAME);
  }

  public void setName(String value) {
    this.setProperty(Project.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Project.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Project.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Project.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Project.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Project.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Project.VIRTUAL_PACKAGE, value);
  }

  public TargetReference getDefault() {
    return (TargetReference) this.getChild(TargetReference.class, Project.DEFAULT);
  }

  public void setDefault(TargetReference node) {
    super.setChild(Project.DEFAULT, node);
  }

  public FileName getBasedir() {
    return (FileName) this.getChild(FileName.class, Project.BASEDIR);
  }

  public void setBasedir(FileName node) {
    super.setChild(Project.BASEDIR, node);
  }

  public int getTargetsCount() {
    return this.getChildCount(Project.TARGET);
  }

  public Iterator<TargetDeclaration> targets() {
    return this.children(TargetDeclaration.class, Project.TARGET);
  }

  public List<TargetDeclaration> getTargets() {
    return this.getChildren(TargetDeclaration.class, Project.TARGET);
  }

  public void addTarget(TargetDeclaration node) {
    this.addChild(Project.TARGET, node);
  }

  public void insertTarget(TargetDeclaration prev, TargetDeclaration node) {
    this.insertChild(prev, Project.TARGET, node);
  }

  public int getImportProjectsCount() {
    return this.getChildCount(Project.IMPORT_PROJECT);
  }

  public Iterator<AbstractImportProject> importProjects() {
    return this.children(AbstractImportProject.class, Project.IMPORT_PROJECT);
  }

  public List<AbstractImportProject> getImportProjects() {
    return this.getChildren(AbstractImportProject.class, Project.IMPORT_PROJECT);
  }

  public void addImportProject(AbstractImportProject node) {
    this.addChild(Project.IMPORT_PROJECT, node);
  }

  public void insertImportProject(AbstractImportProject prev, AbstractImportProject node) {
    this.insertChild(prev, Project.IMPORT_PROJECT, node);
  }

  public int getPathsesCount() {
    return this.getChildCount(Project.PATHS);
  }

  public Iterator<AbstractCall> pathses() {
    return this.children(AbstractCall.class, Project.PATHS);
  }

  public List<AbstractCall> getPathses() {
    return this.getChildren(AbstractCall.class, Project.PATHS);
  }

  public void addPaths(AbstractCall node) {
    this.addChild(Project.PATHS, node);
  }

  public void insertPaths(AbstractCall prev, AbstractCall node) {
    this.insertChild(prev, Project.PATHS, node);
  }

  public int getImportPropertiesesCount() {
    return this.getChildCount(Project.IMPORT_PROPERTIES);
  }

  public Iterator<AbstractImportProperties> importPropertieses() {
    return this.children(AbstractImportProperties.class, Project.IMPORT_PROPERTIES);
  }

  public List<AbstractImportProperties> getImportPropertieses() {
    return this.getChildren(AbstractImportProperties.class, Project.IMPORT_PROPERTIES);
  }

  public void addImportProperties(AbstractImportProperties node) {
    this.addChild(Project.IMPORT_PROPERTIES, node);
  }

  public void insertImportProperties(AbstractImportProperties prev, AbstractImportProperties node) {
    this.insertChild(prev, Project.IMPORT_PROPERTIES, node);
  }

  public int getPropertiesCount() {
    return this.getChildCount(Project.PROPERTY);
  }

  public Iterator<AbstractPropertyDeclaration> properties() {
    return this.children(AbstractPropertyDeclaration.class, Project.PROPERTY);
  }

  public List<AbstractPropertyDeclaration> getProperties() {
    return this.getChildren(AbstractPropertyDeclaration.class, Project.PROPERTY);
  }

  public void addProperty(AbstractPropertyDeclaration node) {
    this.addChild(Project.PROPERTY, node);
  }

  public void insertProperty(AbstractPropertyDeclaration prev, AbstractPropertyDeclaration node) {
    this.insertChild(prev, Project.PROPERTY, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Project.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Project.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Project.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Project.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Project.SMODEL_ATTRIBUTE, node);
  }

  public static Project newInstance(SModel sm, boolean init) {
    return (Project) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildlanguage.structure.Project", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Project newInstance(SModel sm) {
    return Project.newInstance(sm, false);
  }
}
