package jetbrains.mps.buildlanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class TargetDeclaration extends BaseConcept implements IProjectComponent, IPropertyHolder, ICommented {
  public static final String concept = "jetbrains.mps.buildlanguage.structure.TargetDeclaration";
  public static final String IF = "if";
  public static final String UNLESS = "unless";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TASK_CALL = "taskCall";
  public static final String DEPENDS = "depends";
  public static final String PROPERTY_LIST = "propertyList";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public TargetDeclaration(SNode node) {
    super(node);
  }

  public String getIf() {
    return this.getProperty(TargetDeclaration.IF);
  }

  public void setIf(String value) {
    this.setProperty(TargetDeclaration.IF, value);
  }

  public String getUnless() {
    return this.getProperty(TargetDeclaration.UNLESS);
  }

  public void setUnless(String value) {
    this.setProperty(TargetDeclaration.UNLESS, value);
  }

  public String getName() {
    return this.getProperty(TargetDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(TargetDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(TargetDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(TargetDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(TargetDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(TargetDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(TargetDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(TargetDeclaration.VIRTUAL_PACKAGE, value);
  }

  public int getTaskCallsCount() {
    return this.getChildCount(TargetDeclaration.TASK_CALL);
  }

  public Iterator<AbstractCall> taskCalls() {
    return this.children(AbstractCall.class, TargetDeclaration.TASK_CALL);
  }

  public List<AbstractCall> getTaskCalls() {
    return this.getChildren(AbstractCall.class, TargetDeclaration.TASK_CALL);
  }

  public void addTaskCall(AbstractCall node) {
    this.addChild(TargetDeclaration.TASK_CALL, node);
  }

  public void insertTaskCall(AbstractCall prev, AbstractCall node) {
    this.insertChild(prev, TargetDeclaration.TASK_CALL, node);
  }

  public int getDependsesCount() {
    return this.getChildCount(TargetDeclaration.DEPENDS);
  }

  public Iterator<TargetReference> dependses() {
    return this.children(TargetReference.class, TargetDeclaration.DEPENDS);
  }

  public List<TargetReference> getDependses() {
    return this.getChildren(TargetReference.class, TargetDeclaration.DEPENDS);
  }

  public void addDepends(TargetReference node) {
    this.addChild(TargetDeclaration.DEPENDS, node);
  }

  public void insertDepends(TargetReference prev, TargetReference node) {
    this.insertChild(prev, TargetDeclaration.DEPENDS, node);
  }

  public int getPropertyListsCount() {
    return this.getChildCount(TargetDeclaration.PROPERTY_LIST);
  }

  public Iterator<AbstractPropertyDeclaration> propertyLists() {
    return this.children(AbstractPropertyDeclaration.class, TargetDeclaration.PROPERTY_LIST);
  }

  public List<AbstractPropertyDeclaration> getPropertyLists() {
    return this.getChildren(AbstractPropertyDeclaration.class, TargetDeclaration.PROPERTY_LIST);
  }

  public void addPropertyList(AbstractPropertyDeclaration node) {
    this.addChild(TargetDeclaration.PROPERTY_LIST, node);
  }

  public void insertPropertyList(AbstractPropertyDeclaration prev, AbstractPropertyDeclaration node) {
    this.insertChild(prev, TargetDeclaration.PROPERTY_LIST, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(TargetDeclaration.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, TargetDeclaration.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, TargetDeclaration.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(TargetDeclaration.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, TargetDeclaration.SMODEL_ATTRIBUTE, node);
  }

  public static TargetDeclaration newInstance(SModel sm, boolean init) {
    return (TargetDeclaration) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildlanguage.structure.TargetDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static TargetDeclaration newInstance(SModel sm) {
    return TargetDeclaration.newInstance(sm, false);
  }
}
