package jetbrains.mps.build.generictasks.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.search.AbstractSearchScope;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.util.Condition;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class SequenceSearchScope extends AbstractSearchScope {
  private final Iterable<SNode> myNodes;

  public SequenceSearchScope(Iterable<SNode> nodes) {
    myNodes = nodes;
  }

  @NotNull
  public List<SNode> getNodes(final Condition<SNode> condition) {
    return Sequence.fromIterable(myNodes).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return condition.met(it);
      }
    }).toListSequence();
  }
}
