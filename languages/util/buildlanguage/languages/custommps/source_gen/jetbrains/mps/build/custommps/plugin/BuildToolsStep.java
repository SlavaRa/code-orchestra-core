package jetbrains.mps.build.custommps.plugin;

/*Generated by MPS */

import jetbrains.mps.build.packaging.plugin.AbstractStep;
import jetbrains.mps.ide.common.PathField;
import jetbrains.mps.build.packaging.plugin.IErrorHandler;
import javax.swing.JComponent;
import jetbrains.mps.ide.ui.filechoosers.treefilechooser.TreeFileChooser;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import javax.swing.JLabel;
import jetbrains.mps.build.custommps.behavior.MPSBuild_Behavior;
import org.apache.commons.lang.StringUtils;
import java.io.File;

public class BuildToolsStep extends AbstractStep {
  private PathField myPathField;
  private IErrorHandler myErrorHandler;
  private CustomMPSBuildGenerator myBuildGenerator;

  public BuildToolsStep(CustomMPSBuildGenerator buildGenerator, IErrorHandler handler) {
    this.myErrorHandler = handler;
    this.myBuildGenerator = buildGenerator;
  }

  public JComponent createMainComponent() {
    this.myPathField = new PathField();
    this.myPathField.setMode(TreeFileChooser.MODE_FILES);
    this.myPathField.addPropertyChangeListener("path", new PropertyChangeListener() {
      public void propertyChange(PropertyChangeEvent p0) {
        BuildToolsStep.this.myBuildGenerator.setPathToBuildTools(BuildToolsStep.this.myPathField.getPath());
        BuildToolsStep.this.updateErrorMessage();
      }
    });
    this.myPathField.setPath(this.myBuildGenerator.getPathToBuildTools());
    JPanel panel = new JPanel(new GridBagLayout());
    panel.add(new JLabel("Path to " + MPSBuild_Behavior.getMPSBuildToolsZipName_1234294616845()), this.createConstraint(0, 0));
    panel.add(this.myPathField, this.createConstraint(1, 0));
    return panel;
  }

  public String getDescription() {
    return "<html>To create a custom build of MPS you will need a package " + MPSBuild_Behavior.getMPSBuildToolsZipName_1234294616845() + ".<br>" + "It can be obtained from http://www.jetbrains.com/mps.<br></html>";
  }

  public void _init() {
    this.myPathField.setPath(this.myBuildGenerator.getPathToBuildTools());
    this.updateErrorMessage();
  }

  public void _commit() {
    this.myBuildGenerator.setPathToBuildTools(this.myPathField.getPath());
    this.updateErrorMessage();
  }

  private void updateErrorMessage() {
    String path = this.myPathField.getPath();
    if (StringUtils.isEmpty(path)) {
      this.myErrorHandler.setErrorText("Empty path to " + MPSBuild_Behavior.getMPSBuildToolsZipName_1234294616845() + ".");
    } else if (!(new File(path).exists())) {
      this.myErrorHandler.setErrorText("Illegal path to " + MPSBuild_Behavior.getMPSBuildToolsZipName_1234294616845() + ".");
    } else {
      this.myErrorHandler.setErrorText(null);
    }
  }
}
