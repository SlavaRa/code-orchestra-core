package jetbrains.mps.build.custommps.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.build.packaging.behavior.AbstractProjectComponent_Behavior;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.packaging.behavior.Layout_Behavior;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import java.util.ArrayList;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.util.PathManager;
import java.io.File;
import jetbrains.mps.project.IModule;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.build.packaging.behavior.Module_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.project.StubPath;

public class MPSBuild_Behavior {
  public static void init(SNode thisNode) {
    SLinkOperations.setTarget(thisNode, "pathToBuildToolsZip", null, true);
  }

  public static String virtual_getChildrenTargetDir_1237389224202(SNode thisNode) {
    return AbstractProjectComponent_Behavior.call_getPath_1213877333777(thisNode).getPath();
  }

  public static List<SNode> call_getPathToLibrary_1233680013340(SNode thisNode, SNode folder) {
    List<SNode> path = ListSequence.fromList(new LinkedList<SNode>());
    for (SNode currentComponent = folder; !(SNodeOperations.isInstanceOf(currentComponent, "jetbrains.mps.build.custommps.structure.MPSBuild")); currentComponent = SNodeOperations.cast(SNodeOperations.getParent(currentComponent), "jetbrains.mps.build.packaging.structure.AbstractProjectComponent")) {
      ListSequence.fromList(path).insertElement(0, SLinkOperations.getTarget(folder, "title", true));
    }
    return path;
  }

  public static String getMPSBuildToolsZipName_1234294616845() {
    return "MPS-buildTools.zip";
  }

  public static String getUnpackBuildToolsPropertyName_4738159245302641872() {
    if (MPSBuild_Behavior.isInMPSBuild_1239995424995()) {
      return "build_tools";
    }
    return Layout_Behavior.getScriptsDirName_462257719548547202();
  }

  public static boolean isInCustomMPSLanguage_1238403397946(IOperationContext operationContext) {
    Language language = MPSModuleRepository.getInstance().getLanguage("jetbrains.mps.build.custommps");
    ModuleId moduleId = operationContext.getModule().getModuleReference().getModuleId();
    if (moduleId == null) {
      return false;
    }
    return moduleId.equals(language.getModuleReference().getModuleId());
  }

  public static Iterable<SNode> getClassPathModules_1238502072959(String prefix) {
    List<SNode> paths = new ArrayList<SNode>();
    IFile dir = FileSystem.getInstance().getFileByPath(PathManager.getHomePath() + File.separator + prefix.replace("/", File.separator));
    List<IModule> modulesList = MPSModuleRepository.getInstance().getAllModulesInDirectory(dir);
    Set<IModule> modulesInClasspath = SetSequence.fromSet(new HashSet<IModule>());
    for (IModule module : ListSequence.fromList(modulesList)) {
      if (module instanceof Language) {
        Language language = (Language) module;
        SetSequence.fromSet(modulesInClasspath).addElement(language);
        List<ModuleReference> list = language.getRuntimeModulesReferences();
        SetSequence.fromSet(modulesInClasspath).addSequence(ListSequence.fromList(list).select(new ISelector<ModuleReference, IModule>() {
          public IModule select(ModuleReference it) {
            return MPSModuleRepository.getInstance().getModule(it);
          }
        }));
      }
    }
    for (IModule module : SetSequence.fromSet(modulesInClasspath)) {
      String moduleProperName = Module_Behavior.extractModuleProperName_1235487584035(module);
      SNode path = SConceptOperations.createNewNode("jetbrains.mps.build.distrib.structure.SimplePath", null);
      SPropertyOperations.set(path, "path", prefix + "/" + moduleProperName + "." + MPSExtentions.MPS_ARCH);
      ListSequence.fromList(paths).addElement(path);
      if (module instanceof Language) {
        Language language = (Language) module;
        List<StubPath> runtimeCP = language.getRuntimeStubPaths();
        ListSequence.fromList(runtimeCP).removeSequence(ListSequence.fromList(language.getAllStubPaths()));
        if (!(ListSequence.fromList(runtimeCP).isEmpty())) {
          path = SConceptOperations.createNewNode("jetbrains.mps.build.distrib.structure.SimplePath", null);
          SPropertyOperations.set(path, "path", prefix + "/" + moduleProperName + "." + MPSExtentions.RUNTIME_ARCH);
          ListSequence.fromList(paths).addElement(path);
        }
      }
    }
    return ListSequence.fromList(paths).sort(new ISelector<SNode, Comparable<?>>() {
      public Comparable<?> select(SNode it) {
        return SPropertyOperations.getString(it, "path");
      }
    }, true);
  }

  public static boolean isInMPSBuild_1239995424995() {
    return new File(PathManager.getHomePath() + File.separator + "lib" + File.separator + "mps.jar").exists();
  }
}
