package jetbrains.mps.build.packaging.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;

public class ConstraintsAspectDescriptor implements jetbrains.mps.smodel.runtime.ConstraintsAspectDescriptor {
  private static String[] stringSwitchCases_2qnle6_a0a0a = new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent", "jetbrains.mps.build.packaging.structure.Antcall", "jetbrains.mps.build.packaging.structure.BaseDirPath", "jetbrains.mps.build.packaging.structure.Branding", "jetbrains.mps.build.packaging.structure.Configuration", "jetbrains.mps.build.packaging.structure.Delete", "jetbrains.mps.build.packaging.structure.Echo", "jetbrains.mps.build.packaging.structure.File", "jetbrains.mps.build.packaging.structure.Folder", "jetbrains.mps.build.packaging.structure.Jar", "jetbrains.mps.build.packaging.structure.MacroReference", "jetbrains.mps.build.packaging.structure.Module", "jetbrains.mps.build.packaging.structure.Plugin", "jetbrains.mps.build.packaging.structure.Variable"};

  public ConstraintsAspectDescriptor() {
  }

  public ConstraintsDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_2qnle6_a0a0a, fqName)) {
      case 8:
        return new Folder_Constraints();
      case 9:
        return new Jar_Constraints();
      case 11:
        return new Module_Constraints();
      case 6:
        return new Echo_Constraints();
      case 7:
        return new File_Constraints();
      case 13:
        return new Variable_Constraints();
      case 5:
        return new Delete_Constraints();
      case 4:
        return new Configuration_Constraints();
      case 10:
        return new MacroReference_Constraints();
      case 1:
        return new Antcall_Constraints();
      case 2:
        return new BaseDirPath_Constraints();
      case 0:
        return new AbstractProjectComponent_Constraints();
      case 12:
        return new Plugin_Constraints();
      case 3:
        return new Branding_Constraints();
      default:
        // todo: illegal in some cases? 
        return new BaseConstraintsDescriptor(fqName);
    }
  }
}
