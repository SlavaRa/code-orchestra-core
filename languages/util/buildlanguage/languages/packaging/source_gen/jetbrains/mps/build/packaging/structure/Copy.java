package jetbrains.mps.build.packaging.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Copy extends AbstractProjectComponent {
  public static final String concept = "jetbrains.mps.build.packaging.structure.Copy";
  public static final String EXCLUDES = "excludes";
  public static final String INCLUDES = "includes";
  public static final String SOURCE_PATH = "sourcePath";

  public Copy(SNode node) {
    super(node);
  }

  public String getExcludes() {
    return this.getProperty(Copy.EXCLUDES);
  }

  public void setExcludes(String value) {
    this.setProperty(Copy.EXCLUDES, value);
  }

  public String getIncludes() {
    return this.getProperty(Copy.INCLUDES);
  }

  public void setIncludes(String value) {
    this.setProperty(Copy.INCLUDES, value);
  }

  public Path getSourcePath() {
    return (Path) this.getChild(Path.class, Copy.SOURCE_PATH);
  }

  public void setSourcePath(Path node) {
    super.setChild(Copy.SOURCE_PATH, node);
  }

  public static Copy newInstance(SModel sm, boolean init) {
    return (Copy) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.Copy", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Copy newInstance(SModel sm) {
    return Copy.newInstance(sm, false);
  }
}
