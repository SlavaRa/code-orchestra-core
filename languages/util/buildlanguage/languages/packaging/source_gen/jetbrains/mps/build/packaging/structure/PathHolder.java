package jetbrains.mps.build.packaging.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class PathHolder extends BaseConcept {
  public static final String concept = "jetbrains.mps.build.packaging.structure.PathHolder";
  public static final String FULL_PATH = "fullPath";
  public static final String MODULE_RELATIVE_PATH = "moduleRelativePath";
  public static final String MACRO = "macro";
  public static final String MODULE = "module";

  public PathHolder(SNode node) {
    super(node);
  }

  public String getFullPath() {
    return this.getProperty(PathHolder.FULL_PATH);
  }

  public void setFullPath(String value) {
    this.setProperty(PathHolder.FULL_PATH, value);
  }

  public String getModuleRelativePath() {
    return this.getProperty(PathHolder.MODULE_RELATIVE_PATH);
  }

  public void setModuleRelativePath(String value) {
    this.setProperty(PathHolder.MODULE_RELATIVE_PATH, value);
  }

  public Macro getMacro() {
    return (Macro) this.getReferent(Macro.class, PathHolder.MACRO);
  }

  public void setMacro(Macro node) {
    super.setReferent(PathHolder.MACRO, node);
  }

  public Module getModule() {
    return (Module) this.getReferent(Module.class, PathHolder.MODULE);
  }

  public void setModule(Module node) {
    super.setReferent(PathHolder.MODULE, node);
  }

  public static PathHolder newInstance(SModel sm, boolean init) {
    return (PathHolder) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.PathHolder", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static PathHolder newInstance(SModel sm) {
    return PathHolder.newInstance(sm, false);
  }
}
