package jetbrains.mps.build.packaging.plugin;

/*Generated by MPS */

import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import javax.swing.Icon;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.vfs.IFile;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import jetbrains.mps.ide.projectPane.Icons;

public class ModuleData implements NodeData {
  private final IModule myModule;
  private NodeData myParent;

  public ModuleData(IModule module) {
    this.myModule = module;
  }

  public String getText() {
    return this.myModule.getModuleFqName();
  }

  public List<NodeData> getChildren() {
    return ListSequence.fromList(new ArrayList<NodeData>());
  }

  public Icon getIcon(boolean expanded) {
    if (this.myModule instanceof AbstractModule) {
      IFile file = this.myModule.getDescriptorFile();
      if (file != null) {
        VirtualFile virtualFile = VirtualFileUtils.getVirtualFile(file);
        if (virtualFile != null) {
          return virtualFile.getFileType().getIcon();
        }
      }
    }
    return Icons.LANGUAGE_ICON;
  }

  public IModule getModule() {
    return this.myModule;
  }

  public boolean canHaveChildren() {
    return false;
  }

  public void addChildren(NodeData nodeData) {
  }

  public NodeData getParent() {
    return this.myParent;
  }

  public void setParent(NodeData parent) {
    this.myParent = parent;
  }
}
