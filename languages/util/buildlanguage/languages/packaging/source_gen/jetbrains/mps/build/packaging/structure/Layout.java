package jetbrains.mps.build.packaging.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.buildlanguage.structure.IAntScript;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Layout extends BaseConcept implements ILayoutComponent, INamedConcept, IVariableHolder, IMacroHolder, IAntScript {
  public static final String concept = "jetbrains.mps.build.packaging.structure.Layout";
  public static final String SCRIPTS_FOLDER = "scriptsFolder";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAME = "name";
  public static final String COMPILE = "compile";
  public static final String USE_TMP_DIR = "useTmpDir";
  public static final String BASE_DIRECTORY = "baseDirectory";
  public static final String DEPLOY_DIRECTORY = "deployDirectory";
  public static final String SCRIPTS_DIRECTORY = "scriptsDirectory";
  public static final String PROPERTY_FILE = "propertyFile";
  public static final String CONFIGURATION = "configuration";
  public static final String COMPONENT = "component";
  public static final String VARIABLE = "variable";
  public static final String BUILT_IN_VARIABLE = "builtInVariable";
  public static final String CYCLE = "cycle";
  public static final String MACRO = "macro";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Layout(SNode node) {
    super(node);
  }

  public String getScriptsFolder() {
    return this.getProperty(Layout.SCRIPTS_FOLDER);
  }

  public void setScriptsFolder(String value) {
    this.setProperty(Layout.SCRIPTS_FOLDER, value);
  }

  public String getShortDescription() {
    return this.getProperty(Layout.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Layout.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Layout.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Layout.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Layout.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Layout.VIRTUAL_PACKAGE, value);
  }

  public String getName() {
    return this.getProperty(Layout.NAME);
  }

  public void setName(String value) {
    this.setProperty(Layout.NAME, value);
  }

  public boolean getCompile() {
    return this.getBooleanProperty(Layout.COMPILE);
  }

  public void setCompile(boolean value) {
    this.setBooleanProperty(Layout.COMPILE, value);
  }

  public boolean getUseTmpDir() {
    return this.getBooleanProperty(Layout.USE_TMP_DIR);
  }

  public void setUseTmpDir(boolean value) {
    this.setBooleanProperty(Layout.USE_TMP_DIR, value);
  }

  public BaseDirPath getBaseDirectory() {
    return (BaseDirPath) this.getChild(BaseDirPath.class, Layout.BASE_DIRECTORY);
  }

  public void setBaseDirectory(BaseDirPath node) {
    super.setChild(Layout.BASE_DIRECTORY, node);
  }

  public Path getDeployDirectory() {
    return (Path) this.getChild(Path.class, Layout.DEPLOY_DIRECTORY);
  }

  public void setDeployDirectory(Path node) {
    super.setChild(Layout.DEPLOY_DIRECTORY, node);
  }

  public Path getScriptsDirectory() {
    return (Path) this.getChild(Path.class, Layout.SCRIPTS_DIRECTORY);
  }

  public void setScriptsDirectory(Path node) {
    super.setChild(Layout.SCRIPTS_DIRECTORY, node);
  }

  public PropertiesImport getPropertyFile() {
    return (PropertiesImport) this.getChild(PropertiesImport.class, Layout.PROPERTY_FILE);
  }

  public void setPropertyFile(PropertiesImport node) {
    super.setChild(Layout.PROPERTY_FILE, node);
  }

  public int getConfigurationsCount() {
    return this.getChildCount(Layout.CONFIGURATION);
  }

  public Iterator<Configuration> configurations() {
    return this.children(Configuration.class, Layout.CONFIGURATION);
  }

  public List<Configuration> getConfigurations() {
    return this.getChildren(Configuration.class, Layout.CONFIGURATION);
  }

  public void addConfiguration(Configuration node) {
    this.addChild(Layout.CONFIGURATION, node);
  }

  public void insertConfiguration(Configuration prev, Configuration node) {
    this.insertChild(prev, Layout.CONFIGURATION, node);
  }

  public int getComponentsCount() {
    return this.getChildCount(Layout.COMPONENT);
  }

  public Iterator<AbstractProjectComponent> components() {
    return this.children(AbstractProjectComponent.class, Layout.COMPONENT);
  }

  public List<AbstractProjectComponent> getComponents() {
    return this.getChildren(AbstractProjectComponent.class, Layout.COMPONENT);
  }

  public void addComponent(AbstractProjectComponent node) {
    this.addChild(Layout.COMPONENT, node);
  }

  public void insertComponent(AbstractProjectComponent prev, AbstractProjectComponent node) {
    this.insertChild(prev, Layout.COMPONENT, node);
  }

  public int getVariablesCount() {
    return this.getChildCount(Layout.VARIABLE);
  }

  public Iterator<Variable> variables() {
    return this.children(Variable.class, Layout.VARIABLE);
  }

  public List<Variable> getVariables() {
    return this.getChildren(Variable.class, Layout.VARIABLE);
  }

  public void addVariable(Variable node) {
    this.addChild(Layout.VARIABLE, node);
  }

  public void insertVariable(Variable prev, Variable node) {
    this.insertChild(prev, Layout.VARIABLE, node);
  }

  public int getBuiltInVariablesCount() {
    return this.getChildCount(Layout.BUILT_IN_VARIABLE);
  }

  public Iterator<Variable> builtInVariables() {
    return this.children(Variable.class, Layout.BUILT_IN_VARIABLE);
  }

  public List<Variable> getBuiltInVariables() {
    return this.getChildren(Variable.class, Layout.BUILT_IN_VARIABLE);
  }

  public void addBuiltInVariable(Variable node) {
    this.addChild(Layout.BUILT_IN_VARIABLE, node);
  }

  public void insertBuiltInVariable(Variable prev, Variable node) {
    this.insertChild(prev, Layout.BUILT_IN_VARIABLE, node);
  }

  public int getCyclesCount() {
    return this.getChildCount(Layout.CYCLE);
  }

  public Iterator<ModuleCycle> cycles() {
    return this.children(ModuleCycle.class, Layout.CYCLE);
  }

  public List<ModuleCycle> getCycles() {
    return this.getChildren(ModuleCycle.class, Layout.CYCLE);
  }

  public void addCycle(ModuleCycle node) {
    this.addChild(Layout.CYCLE, node);
  }

  public void insertCycle(ModuleCycle prev, ModuleCycle node) {
    this.insertChild(prev, Layout.CYCLE, node);
  }

  public int getMacrosCount() {
    return this.getChildCount(Layout.MACRO);
  }

  public Iterator<Macro> macros() {
    return this.children(Macro.class, Layout.MACRO);
  }

  public List<Macro> getMacros() {
    return this.getChildren(Macro.class, Layout.MACRO);
  }

  public void addMacro(Macro node) {
    this.addChild(Layout.MACRO, node);
  }

  public void insertMacro(Macro prev, Macro node) {
    this.insertChild(prev, Layout.MACRO, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Layout.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Layout.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Layout.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Layout.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Layout.SMODEL_ATTRIBUTE, node);
  }

  public static Layout newInstance(SModel sm, boolean init) {
    return (Layout) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.Layout", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Layout newInstance(SModel sm) {
    return Layout.newInstance(sm, false);
  }
}
