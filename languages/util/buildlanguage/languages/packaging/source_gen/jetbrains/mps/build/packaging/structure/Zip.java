package jetbrains.mps.build.packaging.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Zip extends AbstractProjectComponent implements ICompositeComponent {
  public static final String concept = "jetbrains.mps.build.packaging.structure.Zip";
  public static final String FILEMODE = "filemode";
  public static final String DIRMODE = "dirmode";
  public static final String EXCLUDES = "excludes";
  public static final String INCLUDES = "includes";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String DELETE = "delete";
  public static final String ENTRY = "entry";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Zip(SNode node) {
    super(node);
  }

  public String getFilemode() {
    return this.getProperty(Zip.FILEMODE);
  }

  public void setFilemode(String value) {
    this.setProperty(Zip.FILEMODE, value);
  }

  public String getDirmode() {
    return this.getProperty(Zip.DIRMODE);
  }

  public void setDirmode(String value) {
    this.setProperty(Zip.DIRMODE, value);
  }

  public String getExcludes() {
    return this.getProperty(Zip.EXCLUDES);
  }

  public void setExcludes(String value) {
    this.setProperty(Zip.EXCLUDES, value);
  }

  public String getIncludes() {
    return this.getProperty(Zip.INCLUDES);
  }

  public void setIncludes(String value) {
    this.setProperty(Zip.INCLUDES, value);
  }

  public String getName() {
    return this.getProperty(Zip.NAME);
  }

  public void setName(String value) {
    this.setProperty(Zip.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Zip.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Zip.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Zip.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Zip.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Zip.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Zip.VIRTUAL_PACKAGE, value);
  }

  public Delete getDelete() {
    return (Delete) this.getChild(Delete.class, Zip.DELETE);
  }

  public void setDelete(Delete node) {
    super.setChild(Zip.DELETE, node);
  }

  public int getEntriesCount() {
    return this.getChildCount(Zip.ENTRY);
  }

  public Iterator<AbstractProjectComponent> entries() {
    return this.children(AbstractProjectComponent.class, Zip.ENTRY);
  }

  public List<AbstractProjectComponent> getEntries() {
    return this.getChildren(AbstractProjectComponent.class, Zip.ENTRY);
  }

  public void addEntry(AbstractProjectComponent node) {
    this.addChild(Zip.ENTRY, node);
  }

  public void insertEntry(AbstractProjectComponent prev, AbstractProjectComponent node) {
    this.insertChild(prev, Zip.ENTRY, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Zip.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Zip.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Zip.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Zip.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Zip.SMODEL_ATTRIBUTE, node);
  }

  public static Zip newInstance(SModel sm, boolean init) {
    return (Zip) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.Zip", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Zip newInstance(SModel sm) {
    return Zip.newInstance(sm, false);
  }
}
