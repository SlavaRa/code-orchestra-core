package jetbrains.mps.build.packaging.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.buildlanguage.structure.Project;
import jetbrains.mps.buildlanguage.structure.TargetDeclaration;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Antcall extends AbstractProjectComponent implements ICompositeComponent {
  public static final String concept = "jetbrains.mps.build.packaging.structure.Antcall";
  public static final String EXCLUDES = "excludes";
  public static final String INCLUDES = "includes";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String PROJECT = "project";
  public static final String TARGET_DECLARATION = "targetDeclaration";
  public static final String DELETE = "delete";
  public static final String ENTRY = "entry";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public Antcall(SNode node) {
    super(node);
  }

  public String getExcludes() {
    return this.getProperty(Antcall.EXCLUDES);
  }

  public void setExcludes(String value) {
    this.setProperty(Antcall.EXCLUDES, value);
  }

  public String getIncludes() {
    return this.getProperty(Antcall.INCLUDES);
  }

  public void setIncludes(String value) {
    this.setProperty(Antcall.INCLUDES, value);
  }

  public String getName() {
    return this.getProperty(Antcall.NAME);
  }

  public void setName(String value) {
    this.setProperty(Antcall.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Antcall.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Antcall.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Antcall.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Antcall.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Antcall.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Antcall.VIRTUAL_PACKAGE, value);
  }

  public Project getProject() {
    return (Project) this.getReferent(Project.class, Antcall.PROJECT);
  }

  public void setProject(Project node) {
    super.setReferent(Antcall.PROJECT, node);
  }

  public TargetDeclaration getTargetDeclaration() {
    return (TargetDeclaration) this.getReferent(TargetDeclaration.class, Antcall.TARGET_DECLARATION);
  }

  public void setTargetDeclaration(TargetDeclaration node) {
    super.setReferent(Antcall.TARGET_DECLARATION, node);
  }

  public Delete getDelete() {
    return (Delete) this.getChild(Delete.class, Antcall.DELETE);
  }

  public void setDelete(Delete node) {
    super.setChild(Antcall.DELETE, node);
  }

  public int getEntriesCount() {
    return this.getChildCount(Antcall.ENTRY);
  }

  public Iterator<AbstractProjectComponent> entries() {
    return this.children(AbstractProjectComponent.class, Antcall.ENTRY);
  }

  public List<AbstractProjectComponent> getEntries() {
    return this.getChildren(AbstractProjectComponent.class, Antcall.ENTRY);
  }

  public void addEntry(AbstractProjectComponent node) {
    this.addChild(Antcall.ENTRY, node);
  }

  public void insertEntry(AbstractProjectComponent prev, AbstractProjectComponent node) {
    this.insertChild(prev, Antcall.ENTRY, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(Antcall.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, Antcall.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, Antcall.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(Antcall.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Antcall.SMODEL_ATTRIBUTE, node);
  }

  public static Antcall newInstance(SModel sm, boolean init) {
    return (Antcall) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.Antcall", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Antcall newInstance(SModel sm) {
    return Antcall.newInstance(sm, false);
  }
}
