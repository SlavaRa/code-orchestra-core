package jetbrains.mps.build.packaging.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.io.File;
import jetbrains.mps.build.packaging.behavior.Path_Behavior;
import jetbrains.mps.build.packaging.behavior.IStringExpression_Behavior;

public class File_Constraints extends BaseConstraintsDescriptor {
  public File_Constraints() {
    super("jetbrains.mps.build.packaging.structure.File");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("name", new BasePropertyConstraintsDescriptor("name", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "name";
        if ((SLinkOperations.getTarget(node, "sourcePath", true) != null) && ((SLinkOperations.getTarget(node, "title", true) == null))) {
          return new File(Path_Behavior.call_getName_1221141245424(SLinkOperations.getTarget(node, "sourcePath", true))).getName();
        }
        if ((SLinkOperations.getTarget(node, "title", true) == null)) {
          return "";
        }
        return IStringExpression_Behavior.call_getValue_1213877173054(SLinkOperations.getTarget(node, "title", true));
      }
    });
    return properties;
  }
}
