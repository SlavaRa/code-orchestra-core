package jetbrains.mps.lang.core.scripts;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseGeneratedRefactoring;
import jetbrains.mps.refactoring.framework.RefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.search.ConceptAndSuperConceptsScope;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.ModuleContext;
import java.util.ArrayList;
import jetbrains.mps.refactoring.framework.IChooseComponent;
import jetbrains.mps.refactoring.framework.ChooseNodeOrModelComponent;

public class MoveNodes extends BaseGeneratedRefactoring {
  public static final String target = "target";
  public static final String role = "role";
  public static final String nodeToOpen = "nodeToOpen";

  public MoveNodes() {
    this.addTransientParameter("target");
    this.addTransientParameter("role");
    this.addTransientParameter("nodeToOpen");
  }

  public String getUserFriendlyName() {
    return "Move Nodes";
  }

  public String getKeyStroke() {
    return getKeyStroke_static();
  }

  public RefactoringTarget getRefactoringTarget() {
    return RefactoringTarget.NODE;
  }

  public boolean isApplicable(RefactoringContext refactoringContext) {
    if (((Object) refactoringContext.getParameter("target")) instanceof SNode) {
      SNode targetNode = ((SNode) ((Object) refactoringContext.getParameter("target")));
      SNode concept = SNodeOperations.getConceptDeclaration(targetNode);
      ConceptAndSuperConceptsScope superConceptsScope = new ConceptAndSuperConceptsScope(concept);
      List<SNode> linkDeclarations = (List<SNode>) superConceptsScope.getLinkDeclarationsExcludingOverridden();
      Iterable<SNode> childLinkDeclarations = ListSequence.fromList(linkDeclarations).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.hasValue(it, "metaClass", "aggregation", "reference");
        }
      });
      Iterable<String> childLinksRoles = Sequence.fromIterable(childLinkDeclarations).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SModelUtil.getGenuineLinkRole(it);
        }
      });
      for (SNode node : refactoringContext.getSelectedNodes()) {
        String childRole = node.getRole_();
        if (!(Sequence.fromIterable(childLinksRoles).contains(childRole))) {
          return false;
        }
        for (SNode linkDeclaration : childLinkDeclarations) {
          if (SPropertyOperations.getString(linkDeclaration, "role").equals(childRole)) {
            if (!(SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(linkDeclaration, "target", false), NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(node))))) {
              return false;
            }
          }
        }
      }
      return true;
    }
    if (((Object) refactoringContext.getParameter("target")) instanceof SModelDescriptor) {
      for (SNode node : refactoringContext.getSelectedNodes()) {
        if (!(SNodeOperations.isInstanceOf(SNodeOperations.getConceptDeclaration(node), "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) || !(SPropertyOperations.getBoolean(SNodeOperations.castConcept(SNodeOperations.getConceptDeclaration(node), "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "rootable"))) {
          return false;
        }
      }
      return true;
    }
    return false;
  }

  public boolean isApplicableWRTConcept(SNode node) {
    return SModelUtil.isAssignableConcept(SNodeOperations.getConceptDeclaration(node), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept"));
  }

  public boolean showsAffectedNodes() {
    return true;
  }

  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    SearchResults searchResults = new SearchResults();
    for (SNode selNode : ListSequence.fromList(refactoringContext.getSelectedNodes())) {
      searchResults.addAll(FindUtils.getSearchResults(new EmptyProgressIndicator(), selNode, GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder"));
    }
    return searchResults;
  }

  public void doRefactor(final RefactoringContext refactoringContext) {
    List<SNode> nodes = refactoringContext.getSelectedNodes();
    SModel targetModel = null;
    List<SNode> movedNodes = null;
    if (((Object) refactoringContext.getParameter("target")) instanceof SModelDescriptor) {
      targetModel = ((SModelDescriptor) ((Object) refactoringContext.getParameter("target"))).getSModel();
      movedNodes = refactoringContext.moveNodesToModel(nodes, targetModel);
    }
    if (((Object) refactoringContext.getParameter("target")) instanceof SNode) {
      SNode targetNode = (SNode) ((Object) refactoringContext.getParameter("target"));
      movedNodes = refactoringContext.moveNodesToNode(nodes, ListSequence.fromList(nodes).first().getRole_(), targetNode);
      targetModel = SNodeOperations.getModel(targetNode);
    }
    if (targetModel != null) {
      IModule module = targetModel.getModelDescriptor().getModule();
      if (refactoringContext.getSelectedMPSProject() != null) {
        final IOperationContext operationContext = new ModuleContext(module, refactoringContext.getSelectedMPSProject());
        if (operationContext != null) {
          refactoringContext.setParameter("nodeToOpen", ListSequence.fromList(movedNodes).first());
        }
      }
    }
  }

  public void updateModel(SModel model, final RefactoringContext refactoringContext) {
    refactoringContext.updateByDefault(model);
  }

  public List<SNode> getNodesToOpen(final RefactoringContext refactoringContext) {
    return ListSequence.fromListAndArray(new ArrayList<SNode>(), ((SNode) refactoringContext.getParameter("nodeToOpen")));
  }

  public boolean doesUpdateModel() {
    return true;
  }

  public IChooseComponent<Object> target_componentCreator(final RefactoringContext refactoringContext) {
    return new ChooseNodeOrModelComponent(refactoringContext.getCurrentOperationContext(), null, true, true);
  }

  public List<IChooseComponent> getChooseComponents(final RefactoringContext refactoringContext) {
    List<IChooseComponent> components = ListSequence.fromList(new ArrayList<IChooseComponent>());
    {
      IChooseComponent<Object> chooseComponent;
      chooseComponent = MoveNodes.this.target_componentCreator(refactoringContext);
      chooseComponent.setPropertyName("target");
      chooseComponent.setCaption("choose target");
      chooseComponent.initComponent();
      ListSequence.fromList(components).addElement(chooseComponent);
    }
    return components;
  }

  public static String getKeyStroke_static() {
    return "";
  }
}
