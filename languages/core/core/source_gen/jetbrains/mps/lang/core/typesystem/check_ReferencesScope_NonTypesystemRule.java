package jetbrains.mps.lang.core.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.constraints.SearchScopeStatus;
import jetbrains.mps.smodel.constraints.ModelConstraintsUtil;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.messageTargets.ReferenceMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_ReferencesScope_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ReferencesScope_NonTypesystemRule() {
  }

  public void applyRule(final SNode node, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    /*
      IOperationContext context = typeCheckingContext.getOperationContext();
      if (context == null) {
        return;
      }
      SNode concept = SNodeOperations.getConceptDeclaration(node);
      for (SReference ref : SNodeOperations.getReferences(node)) {
        SNode target = SLinkOperations.getTargetNode(ref);
        SNode linkDeclaration = SLinkOperations.findLinkDeclaration(ref);
        // don't check unresolved and broken references, they should already have an error message 
        if ((target == null) || linkDeclaration == null) {
          continue;
        }
        SearchScopeStatus sss = ModelConstraintsUtil.getSearchScope(SNodeOperations.getParent(node), node, concept, linkDeclaration, context);
        if (sss.isError()) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget(SLinkOperations.getRole(ref));
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, sss.getMessage(), "r:cec599e3-51d2-48a7-af31-989e3cbd593c(jetbrains.mps.lang.core.typesystem)", "8536912951295757728", null, errorTarget);
          }
        } else if (!(sss.isDefault() || sss.getSearchScope().isInScope(target))) {
          String name = target.getName();
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            errorTarget = new ReferenceMessageTarget(SLinkOperations.getRole(ref));
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(node, "reference" + ((name == null ?
              "" :
              " " + name
            )) + " (" + SLinkOperations.getRole(ref) + ") is out of search scope", "r:cec599e3-51d2-48a7-af31-989e3cbd593c(jetbrains.mps.lang.core.typesystem)", "8536912951295757760", null, errorTarget);
            {
              SNode _foreign_34989546 = sss.getReferenceValidatorNode();
              if (_foreign_34989546 != null) {
                _reporter_2309309498.addAdditionalRuleId(_foreign_34989546.getModel().toString(), _foreign_34989546.getId());
              }
            }
          }
        }
      }
    */
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
