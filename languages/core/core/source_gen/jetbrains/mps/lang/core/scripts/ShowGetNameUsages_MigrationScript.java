package jetbrains.mps.lang.core.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ShowGetNameUsages_MigrationScript extends BaseMigrationScript {
  public ShowGetNameUsages_MigrationScript(IOperationContext operationContext) {
    super("Show getters for name property");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Show getters for name property";
      }

      public String getAdditionalInfo() {
        return "Show getters for name property";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.constraints.structure.NodePropertyConstraint";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return eq_th6w08_a0a0d0a0a0b0a(SPropertyOperations.getString(SLinkOperations.getTarget(node, "applicableProperty", false), "name"), "name");
      }

      public void doUpdateInstanceNode(SNode node) {
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  private static boolean eq_th6w08_a0a0d0a0a0b0a(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
