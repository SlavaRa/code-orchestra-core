package jetbrains.mps.lang.core.scripts;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.language.ConceptRegistry;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.awt.BorderLayout;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import javax.swing.JLabel;

public class RenameUtil {
  public static boolean canBeRenamed(SNode node) {
    // we won't rename nodes, for which there are registered name constrints 
    // if there are constrints, but they are not compiled, we can rename it 
    String nameProperty = SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getTargets(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.INamedConcept"), "propertyDeclaration", true)).first(), "name");
    return !(ConceptRegistry.getInstance().getConstraintsDescriptor(node.getConceptFqName()).getProperty(nameProperty).isReadOnly());
  }

  public static class NameComponent extends JPanel {
    private JTextField myTextField;

    public NameComponent(final SNode node) {
      this.setLayout(new BorderLayout());
      final Wrappers._T<String> result = new Wrappers._T<String>();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.structure.structure.LinkDeclaration")) {
            result.value = SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.structure.structure.LinkDeclaration"), "role");
          } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept")) {
            result.value = SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
          }
        }
      });
      this.add(new JLabel("new name:"));
      this.myTextField = new JTextField(result.value);
      this.add(this.myTextField, BorderLayout.CENTER);
    }

    public String getName() {
      return this.myTextField.getText();
    }
  }
}
