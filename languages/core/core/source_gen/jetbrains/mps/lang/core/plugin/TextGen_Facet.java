package jetbrains.mps.lang.core.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.smodel.resources.IGResource;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import jetbrains.mps.smodel.resources.GResource;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.generator.GeneratorManager;
import jetbrains.mps.internal.make.runtime.java.JavaStreamHandler;
import jetbrains.mps.generator.fileGenerator.FileGenerationUtil;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.generator.generationTypes.TextGenerator;
import jetbrains.mps.make.java.BLDependenciesCache;
import jetbrains.mps.generator.traceInfo.TraceInfoCache;
import jetbrains.mps.generator.impl.dependencies.GenerationDependenciesCache;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.generator.TransientModelsModule;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.cleanup.CleanupManager;
import jetbrains.mps.messages.IMessage;
import jetbrains.mps.smodel.resources.TResource;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.textGen.TextGenerationResult;
import jetbrains.mps.textGen.TextGenerationUtil;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.smodel.resources.FResource;
import jetbrains.mps.util.JavaNameUtil;
import jetbrains.mps.make.script.IPropertiesPool;

public class TextGen_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.lang.core.TextGen");

  public TextGen_Facet() {
    ListSequence.fromList(targets).addElement(new TextGen_Facet.Target_textGen());
    ListSequence.fromList(targets).addElement(new TextGen_Facet.Target_textGenToMemory());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.Make")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public IPropertiesPersistence propertiesPersistence() {
    return new TextGen_Facet.TargetProperties();
  }

  public static class Target_textGen implements ITarget {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{IGResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};

    private ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen");

    public Target_textGen() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IPropertiesAccessor pa) {
          Iterable<IResource> _output_21gswx_a0a = null;
          switch (0) {
            case 0:
              monitor.currentProgress().beginWork("Writing", Sequence.fromIterable(input).count() * 100, monitor.currentProgress().workLeft());
              for (IResource resource : Sequence.fromIterable(input)) {
                final GResource gres = (GResource) resource;
                monitor.currentProgress().advanceWork("Writing", 50, gres.status().getInputModel().getSModelReference().getSModelFqName().getLongName());
                if (!(gres.status().isOk())) {
                  monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Generation was not OK")));
                  return new IResult.FAILURE(_output_21gswx_a0a);
                }
                String output = gres.module().getOutputFor(gres.model());
                if (output == null) {
                  monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("no output location for " + gres.model().getLongName())));
                  continue;
                }
                _FunctionTypes._return_P1_E0<? extends IFile, ? super String> getFile = pa.global().properties(Target_textGen.this.getName(), TextGen_Facet.Target_textGen.Parameters.class).pathToFile();
                if (getFile == null) {
                  getFile = new _FunctionTypes._return_P1_E0<IFile, String>() {
                    public IFile invoke(String p) {
                      return FileSystem.getInstance().getFileByPath(p);
                    }
                  };
                }

                Iterable<IDelta> retainedFilesDelta = RetainedUtil.retainedFilesDelta(Sequence.fromIterable(gres.retainedModels()).where(new IWhereFilter<SModelDescriptor>() {
                  public boolean accept(SModelDescriptor smd) {
                    return !(GeneratorManager.isDoNotGenerate(smd));
                  }
                }), gres.module(), getFile);
                Iterable<IDelta> retainedCachesDelta = RetainedUtil.retainedCachesDelta(Sequence.fromIterable(gres.retainedModels()).where(new IWhereFilter<SModelDescriptor>() {
                  public boolean accept(SModelDescriptor smd) {
                    return !(GeneratorManager.isDoNotGenerate(smd));
                  }
                }), gres.module(), getFile);

                final JavaStreamHandler javaStreamHandler = new JavaStreamHandler(gres.model(), getFile.invoke(output), FileGenerationUtil.getCachesDir(getFile.invoke(output)));

                final Wrappers._boolean ok = new Wrappers._boolean();
                boolean generateDI = pa.global().properties(Target_textGen.this.getName(), TextGen_Facet.Target_textGen.Parameters.class).generateDebugInfo() == null || pa.global().properties(Target_textGen.this.getName(), TextGen_Facet.Target_textGen.Parameters.class).generateDebugInfo();
                final TextGenerator textgen = new TextGenerator(javaStreamHandler, BLDependenciesCache.getInstance().getGenerator(), (generateDI ?
                  TraceInfoCache.getInstance().getGenerator() :
                  null
                ), GenerationDependenciesCache.getInstance().getGenerator());
                textgen.setFailIfNoTextgen(pa.global().properties(Target_textGen.this.getName(), TextGen_Facet.Target_textGen.Parameters.class).failIfNoTextgen() != null && pa.global().properties(Target_textGen.this.getName(), TextGen_Facet.Target_textGen.Parameters.class).failIfNoTextgen());
                textgen.setGenerateDebugInfo(generateDI);
                try {
                  ModelAccess.instance().runReadAction(new Runnable() {
                    public void run() {
                      ok.value = textgen.handleOutput(pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"), Generate_Facet.Target_checkParameters.Variables.class).operationContext(), gres.status());
                    }
                  });
                } finally {
                  javaStreamHandler.dispose();
                }

                final SModelDescriptor outputMD = gres.status().getOutputModelDescriptor();
                if (outputMD instanceof TransientModelsModule.TransientSModelDescriptor) {
                  ThreadUtils.runInUIThreadAndWait(new Runnable() {
                    public void run() {
                      ModelAccess.instance().requireWrite(new Runnable() {
                        public void run() {
                          if (!(Boolean.TRUE.equals(pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.configure"), Generate_Facet.Target_configure.Variables.class).saveTransient()))) {
                            TransientModelsModule.TransientSModelDescriptor tmd = (TransientModelsModule.TransientSModelDescriptor) outputMD;
                            ((TransientModelsModule) tmd.getModule()).removeModel(tmd);
                          }
                          CleanupManager.getInstance().cleanup();
                        }
                      });
                    }
                  });
                }

                if (!(ok.value)) {
                  for (IMessage err : textgen.errors()) {
                    monitor.reportFeedback(new IFeedback.MESSAGE(err));
                  }
                  monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to generate text")));
                  return new IResult.FAILURE(_output_21gswx_a0a);
                }
                ThreadUtils.runInUIThreadAndWait(new Runnable() {
                  public void run() {
                    ModelAccess.instance().requireWrite(new Runnable() {
                      public void run() {
                        javaStreamHandler.flush();
                      }
                    });
                  }
                });
                monitor.currentProgress().advanceWork("Writing", 50);
                _output_21gswx_a0a = Sequence.fromIterable(_output_21gswx_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new TResource(gres.module(), Sequence.fromIterable(javaStreamHandler.delta()).concat(Sequence.fromIterable(retainedFilesDelta)).concat(Sequence.fromIterable(retainedCachesDelta))))));
              }
              monitor.currentProgress().finishWork("Writing");
            default:
              return new IResult.SUCCESS(_output_21gswx_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.generate")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Make.reconcile"), new ITarget.Name("jetbrains.mps.lang.core.Make.make")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._3) t).assign((Tuples._3) copyFrom);
      }
      return t;
    }

    public static class Parameters extends MultiTuple._3<_FunctionTypes._return_P1_E0<? extends IFile, ? super String>, Boolean, Boolean> {
      public Parameters() {
        super();
      }

      public Parameters(_FunctionTypes._return_P1_E0<? extends IFile, ? super String> pathToFile, Boolean failIfNoTextgen, Boolean generateDebugInfo) {
        super(pathToFile, failIfNoTextgen, generateDebugInfo);
      }

      public _FunctionTypes._return_P1_E0<? extends IFile, ? super String> pathToFile(_FunctionTypes._return_P1_E0<? extends IFile, ? super String> value) {
        return super._0(value);
      }

      public Boolean failIfNoTextgen(Boolean value) {
        return super._1(value);
      }

      public Boolean generateDebugInfo(Boolean value) {
        return super._2(value);
      }

      public _FunctionTypes._return_P1_E0<? extends IFile, ? super String> pathToFile() {
        return super._0();
      }

      public Boolean failIfNoTextgen() {
        return super._1();
      }

      public Boolean generateDebugInfo() {
        return super._2();
      }

      @SuppressWarnings(value = "unchecked")
      public TextGen_Facet.Target_textGen.Parameters assignFrom(Tuples._3<_FunctionTypes._return_P1_E0<? extends IFile, ? super String>, Boolean, Boolean> from) {
        return (TextGen_Facet.Target_textGen.Parameters) super.assign(from);
      }
    }
  }

  public static class Target_textGenToMemory implements ITarget {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{IGResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};

    private ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGenToMemory");

    public Target_textGenToMemory() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IPropertiesAccessor pa) {
          Iterable<IResource> _output_21gswx_a0b = null;
          switch (0) {
            case 0:
              for (IResource resource : Sequence.fromIterable(input)) {
                final GResource gres = (GResource) resource;
                final Map<String, Object> texts = MapSequence.fromMap(new HashMap<String, Object>());
                final Wrappers._T<SModel> sModel = new Wrappers._T<SModel>();
                final Wrappers._boolean errors = new Wrappers._boolean(false);
                ModelAccess.instance().runReadAction(new Runnable() {
                  public void run() {
                    sModel.value = gres.status().getOutputModel();
                    for (SNode root : Sequence.fromIterable(sModel.value.roots()).where(new IWhereFilter<SNode>() {
                      public boolean accept(SNode rt) {
                        return rt.getName() != null;
                      }
                    })) {
                      TextGenerationResult tgr = TextGenerationUtil.generateText(pa.global().properties(new ITarget.Name("jetbrains.mps.lang.core.Generate.checkParameters"), Generate_Facet.Target_checkParameters.Variables.class).operationContext(), root);
                      errors.value |= tgr.hasErrors();
                      if (errors.value) {
                        for (IMessage err : tgr.problems()) {
                          monitor.reportFeedback(new IFeedback.MESSAGE(err));
                        }
                        monitor.reportFeedback(new IFeedback.ERROR(String.valueOf("Failed to generate text")));
                        break;
                      }
                      String ext = TextGenManager.instance().getExtension(root);
                      String fname = ((ext != null ?
                        root.getName() + "." + ext :
                        root.getName()
                      ));
                      MapSequence.fromMap(texts).put(fname, tgr.getResult());
                    }
                  }
                });
                if (errors.value) {
                  return new IResult.FAILURE(_output_21gswx_a0b);
                }
                _output_21gswx_a0b = Sequence.fromIterable(_output_21gswx_a0b).concat(Sequence.fromIterable(Sequence.<IResource>singleton(new FResource(JavaNameUtil.packageName(sModel.value), texts, gres.module(), gres.model()))));
              }
            default:
              return new IResult.SUCCESS(_output_21gswx_a0b);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.generate")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return null;
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return null;
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
  }

  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }

    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen");
        if (properties.hasProperties(name)) {
          TextGen_Facet.Target_textGen.Parameters props = properties.properties(name, TextGen_Facet.Target_textGen.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.lang.core.TextGen.textGen.pathToFile", null);
          MapSequence.fromMap(store).put("jetbrains.mps.lang.core.TextGen.textGen.failIfNoTextgen", String.valueOf(props.failIfNoTextgen()));
          MapSequence.fromMap(store).put("jetbrains.mps.lang.core.TextGen.textGen.generateDebugInfo", String.valueOf(props.generateDebugInfo()));
        }
      }
    }

    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen");
          TextGen_Facet.Target_textGen.Parameters props = properties.properties(name, TextGen_Facet.Target_textGen.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.lang.core.TextGen.textGen.pathToFile")) {
            props.pathToFile(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.lang.core.TextGen.textGen.failIfNoTextgen")) {
            props.failIfNoTextgen(Boolean.valueOf(MapSequence.fromMap(store).get("jetbrains.mps.lang.core.TextGen.textGen.failIfNoTextgen")));
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.lang.core.TextGen.textGen.generateDebugInfo")) {
            props.generateDebugInfo(Boolean.valueOf(MapSequence.fromMap(store).get("jetbrains.mps.lang.core.TextGen.textGen.generateDebugInfo")));
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
