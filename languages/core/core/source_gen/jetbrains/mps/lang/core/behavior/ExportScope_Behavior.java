package jetbrains.mps.lang.core.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.structure.BehaviorDescriptor;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;

public class ExportScope_Behavior {
  private static Class[] PARAMETERS_2565736246230026584 = {SNode.class, String.class, SNode.class};

  public static void init(SNode thisNode) {
  }

  public static boolean call_checkExport_2565736246230026584(SNode thisNode, String sourceNamespace, SNode targetNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Boolean) descriptor.invoke(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.lang.core.structure.ExportScope"), "virtual_checkExport_2565736246230026584", PARAMETERS_2565736246230026584, sourceNamespace, targetNode);
  }

  public static boolean callSuper_checkExport_2565736246230026584(SNode thisNode, String callerConceptFqName, String sourceNamespace, SNode targetNode) {
    return (Boolean) BehaviorManager.getInstance().invokeSuper(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.lang.core.structure.ExportScope"), callerConceptFqName, "virtual_checkExport_2565736246230026584", PARAMETERS_2565736246230026584, sourceNamespace, targetNode);
  }

  public static String getNamespace_2565736246230026649(SNode node) {
    IModule module = check_ogf5a0_a0a0a(check_ogf5a0_a0a0a0(SNodeOperations.getModel(node)));
    if (module instanceof Generator) {
      module = ((Generator) module).getSourceLanguage();
    }
    return check_ogf5a0_a2a0(check_ogf5a0_a0c0a(module));
  }

  public static SNode getExportScope_4075196924244445285(SNode node) {
    // return effective ExportScope or null 
    /*
      return AttributeOperations.getAttribute(ListSequence.fromList(SNodeOperations.getAncestors(node, null, true)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.ExportScope"))) != null);
        }
      }), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.ExportScope")));
    */
    return AttributeOperations.getAttribute(SNodeOperations.getContainingRoot(node), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.ExportScope")));
  }

  public static boolean checkExportDefault_8259195909097980935(boolean isConcept, SNode node, String namespace) {
    /*
      return (isConcept ?
        true :
        namespace.equals(ExportScope_Behavior.getNamespace_2565736246230026649(node))
      );
    */
    String targetNamespace = ExportScope_Behavior.getNamespace_2565736246230026649(node);
    if (isConcept || targetNamespace == null || namespace.equals(targetNamespace)) {
      return true;
    }
    // while problem with adapters is not solved 
    if (SModelStereotype.isStubModelStereotype(SNodeOperations.getModel(node).getStereotype()) && targetNamespace.startsWith("jetbrains.mps")) {
      return namespace.startsWith("jetbrains.mps");
    }
    // stubs are module by default, all other are public now 
    return !(SModelStereotype.isStubModelStereotype(SNodeOperations.getModel(node).getStereotype()));
  }

  public static boolean checkExport_2565736246230031479(boolean isConcept, SNode node, String namespace) {
    SNode exp = ExportScope_Behavior.getExportScope_4075196924244445285(node);
    return namespace == null || (((exp == null) ?
      ExportScope_Behavior.checkExportDefault_8259195909097980935(isConcept, node, namespace) :
      ExportScope_Behavior.call_checkExport_2565736246230026584(exp, namespace, node)
    ));
  }

  private static IModule check_ogf5a0_a0a0a(SModelDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }

  private static SModelDescriptor check_ogf5a0_a0a0a0(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelDescriptor();
    }
    return null;
  }

  private static String check_ogf5a0_a2a0(ModuleDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getNamespace();
    }
    return null;
  }

  private static ModuleDescriptor check_ogf5a0_a0c0a(IModule checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModuleDescriptor();
    }
    return null;
  }
}
