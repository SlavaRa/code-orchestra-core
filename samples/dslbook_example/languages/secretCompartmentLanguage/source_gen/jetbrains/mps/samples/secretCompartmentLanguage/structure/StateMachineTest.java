package jetbrains.mps.samples.secretCompartmentLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class StateMachineTest extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.samples.secretCompartmentLanguage.structure.StateMachineTest";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String STATE_MACHINE = "stateMachine";
  public static final String TEST_METHOD = "testMethod";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public StateMachineTest(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(StateMachineTest.NAME);
  }

  public void setName(String value) {
    this.setProperty(StateMachineTest.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(StateMachineTest.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(StateMachineTest.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(StateMachineTest.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(StateMachineTest.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(StateMachineTest.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(StateMachineTest.VIRTUAL_PACKAGE, value);
  }

  public StateMachine getStateMachine() {
    return (StateMachine) this.getReferent(StateMachine.class, StateMachineTest.STATE_MACHINE);
  }

  public void setStateMachine(StateMachine node) {
    super.setReferent(StateMachineTest.STATE_MACHINE, node);
  }

  public int getTestMethodsCount() {
    return this.getChildCount(StateMachineTest.TEST_METHOD);
  }

  public Iterator<StateMachineTestMethod> testMethods() {
    return this.children(StateMachineTestMethod.class, StateMachineTest.TEST_METHOD);
  }

  public List<StateMachineTestMethod> getTestMethods() {
    return this.getChildren(StateMachineTestMethod.class, StateMachineTest.TEST_METHOD);
  }

  public void addTestMethod(StateMachineTestMethod node) {
    this.addChild(StateMachineTest.TEST_METHOD, node);
  }

  public void insertTestMethod(StateMachineTestMethod prev, StateMachineTestMethod node) {
    this.insertChild(prev, StateMachineTest.TEST_METHOD, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(StateMachineTest.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, StateMachineTest.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, StateMachineTest.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(StateMachineTest.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, StateMachineTest.SMODEL_ATTRIBUTE, node);
  }

  public static StateMachineTest newInstance(SModel sm, boolean init) {
    return (StateMachineTest) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.samples.secretCompartmentLanguage.structure.StateMachineTest", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static StateMachineTest newInstance(SModel sm) {
    return StateMachineTest.newInstance(sm, false);
  }
}
