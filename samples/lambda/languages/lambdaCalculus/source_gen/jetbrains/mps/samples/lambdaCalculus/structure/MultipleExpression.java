package jetbrains.mps.samples.lambdaCalculus.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MultipleExpression extends LambdaExpression {
  public static final String concept = "jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression";
  public static final String EXPRESSIONS = "expressions";

  public MultipleExpression(SNode node) {
    super(node);
  }

  public int getExpressionsesCount() {
    return this.getChildCount(MultipleExpression.EXPRESSIONS);
  }

  public Iterator<LambdaExpression> expressionses() {
    return this.children(LambdaExpression.class, MultipleExpression.EXPRESSIONS);
  }

  public List<LambdaExpression> getExpressionses() {
    return this.getChildren(LambdaExpression.class, MultipleExpression.EXPRESSIONS);
  }

  public void addExpressions(LambdaExpression node) {
    this.addChild(MultipleExpression.EXPRESSIONS, node);
  }

  public void insertExpressions(LambdaExpression prev, LambdaExpression node) {
    this.insertChild(prev, MultipleExpression.EXPRESSIONS, node);
  }

  public static MultipleExpression newInstance(SModel sm, boolean init) {
    return (MultipleExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MultipleExpression newInstance(SModel sm) {
    return MultipleExpression.newInstance(sm, false);
  }
}
