package jetbrains.mps.samples.lambdaCalculus.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class LambdaAbstraction extends LambdaExpression implements VariableOwner {
  public static final String concept = "jetbrains.mps.samples.lambdaCalculus.structure.LambdaAbstraction";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String BODY = "body";
  public static final String VARIABLE = "variable";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public LambdaAbstraction(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(LambdaAbstraction.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(LambdaAbstraction.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(LambdaAbstraction.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(LambdaAbstraction.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(LambdaAbstraction.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(LambdaAbstraction.VIRTUAL_PACKAGE, value);
  }

  public LambdaExpression getBody() {
    return (LambdaExpression) this.getChild(LambdaExpression.class, LambdaAbstraction.BODY);
  }

  public void setBody(LambdaExpression node) {
    super.setChild(LambdaAbstraction.BODY, node);
  }

  public int getVariablesCount() {
    return this.getChildCount(LambdaAbstraction.VARIABLE);
  }

  public Iterator<AbstractionVariable> variables() {
    return this.children(AbstractionVariable.class, LambdaAbstraction.VARIABLE);
  }

  public List<AbstractionVariable> getVariables() {
    return this.getChildren(AbstractionVariable.class, LambdaAbstraction.VARIABLE);
  }

  public void addVariable(AbstractionVariable node) {
    this.addChild(LambdaAbstraction.VARIABLE, node);
  }

  public void insertVariable(AbstractionVariable prev, AbstractionVariable node) {
    this.insertChild(prev, LambdaAbstraction.VARIABLE, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(LambdaAbstraction.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, LambdaAbstraction.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, LambdaAbstraction.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(LambdaAbstraction.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, LambdaAbstraction.SMODEL_ATTRIBUTE, node);
  }

  public static LambdaAbstraction newInstance(SModel sm, boolean init) {
    return (LambdaAbstraction) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.LambdaAbstraction", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static LambdaAbstraction newInstance(SModel sm) {
    return LambdaAbstraction.newInstance(sm, false);
  }
}
