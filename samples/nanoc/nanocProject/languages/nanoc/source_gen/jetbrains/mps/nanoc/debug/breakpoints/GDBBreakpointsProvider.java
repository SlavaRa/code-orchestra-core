package jetbrains.mps.nanoc.debug.breakpoints;

/*Generated by MPS */

import jetbrains.mps.debug.api.breakpoints.IBreakpointsProvider;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debug.api.AbstractDebugSession;
import org.jdom.Element;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.project.Project;
import jetbrains.mps.debug.api.BreakpointInfo;
import jetbrains.mps.debug.api.breakpoints.IBreakpointPropertiesUi;
import jetbrains.mps.debug.api.breakpoints.ILocationBreakpoint;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SNodePointer;
import java.util.List;
import java.util.Arrays;

public class GDBBreakpointsProvider implements IBreakpointsProvider<GDBBreakpoint, GDBBreakpoint.GDBBreakpointKind> {
  public GDBBreakpointsProvider() {
  }

  @Nullable
  public Icon getIcon(@NotNull GDBBreakpoint breakpoint, @Nullable AbstractDebugSession session) {
    return null;
  }

  @Nullable
  public Element saveToState(@NotNull GDBBreakpoint breakpoint) {
    return XmlSerializer.serialize(breakpoint.getState());
  }

  @Nullable
  public GDBBreakpoint loadFromState(Element element, GDBBreakpoint.GDBBreakpointKind kind, Project project) {
    return GDBBreakpoint.fromInfo(XmlSerializer.deserialize(element, BreakpointInfo.class), project);
  }

  @Nullable
  public IBreakpointPropertiesUi<GDBBreakpoint> createPropertiesEditor(@NotNull GDBBreakpoint.GDBBreakpointKind kind) {
    return null;
  }

  @Nullable
  public ILocationBreakpoint createFromNode(@NotNull SNode node, @NotNull GDBBreakpoint.GDBBreakpointKind kind, Project project) {
    return new GDBBreakpoint(new SNodePointer(node), project);
  }

  @Nullable
  public GDBBreakpoint createFromUi(@NotNull GDBBreakpoint.GDBBreakpointKind kind, Project project) {
    return null;
  }

  public boolean canCreateFromNode(@NotNull GDBBreakpoint.GDBBreakpointKind kind) {
    return true;
  }

  public boolean canCreateFromUi(@NotNull GDBBreakpoint.GDBBreakpointKind kind) {
    return false;
  }

  @NotNull
  public List<GDBBreakpoint.GDBBreakpointKind> getAllKinds() {
    return Arrays.asList(GDBBreakpoint.GDBBreakpointKind.values());
  }
}
