package jetbrains.mps.nanoc.debug;

/*Generated by MPS */

import jetbrains.mps.debug.api.AbstractDebugSessionCreator;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.debug.api.AbstractDebugSession;
import com.intellij.execution.ExecutionResult;
import com.intellij.execution.Executor;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.configurations.RunProfileState;
import com.intellij.openapi.project.Project;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.debug.api.IDebuggerSettings;
import jetbrains.mps.nanoc.debug.events.GDBEventsAdapter;
import com.intellij.execution.process.ProcessHandler;
import java.io.OutputStreamWriter;
import jetbrains.mps.debug.api.run.DebuggerRunProfileState;

public class CppGDBCreator extends AbstractDebugSessionCreator {
  private static Logger LOG = Logger.getLogger(CppGDBCreator.class);

  private CppDebugSession myDebugSession;

  public CppGDBCreator() {
  }

  public AbstractDebugSession getDebugSession() {
    return myDebugSession;
  }

  @Override
  public ExecutionResult startSession(Executor executor, ProgramRunner runner, RunProfileState state, Project project) throws ExecutionException {
    IDebuggerSettings settings = createLocalConnectionSettings(state);
    if (!(settings instanceof GdbDebuggerSettings)) {
      throw new ExecutionException("Unknown debugger settings: " + settings);
    }

    ExecutionResult result = super.startSession(executor, runner, state, project);

    myDebugSession = new CppDebugSession(project, ((GdbDebuggerSettings) settings).getSourceDir());
    myDebugSession.setProcessHandler(result.getProcessHandler());
    myDebugSession.getGDBEventsHandler().addEventListener(new GDBEventsAdapter() {
      public void processTerminated(ProcessHandler gdbProcess) {
        try {
          OutputStreamWriter outputStreamWriter = new OutputStreamWriter(gdbProcess.getProcessInput());
          outputStreamWriter.write("-gdb-exit\n");
          outputStreamWriter.flush();
        } catch (Throwable t) {
          LOG.error("", t);
        }
      }
    });


    return result;
  }

  protected IDebuggerSettings createLocalConnectionSettings(RunProfileState state) throws ExecutionException {
    if (state instanceof DebuggerRunProfileState) {
      IDebuggerSettings settings = ((DebuggerRunProfileState) state).getDebuggerSettings();
      if (!(settings instanceof GdbDebuggerSettings)) {
        throw new ExecutionException("Unknown Debugger Settings: " + settings);
      }
      return settings;
    } else {
      throw new ExecutionException("Unknown Run Profile State");
    }
  }
}
