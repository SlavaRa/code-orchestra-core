package jetbrains.mps.nanoc.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;

public class BehaviorAspectDescriptor implements jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor {
  private static String[] stringSwitchCases_846f5o_a0a0a = new String[]{"jetbrains.mps.nanoc.structure.CAssignmentExpression", "jetbrains.mps.nanoc.structure.CBody", "jetbrains.mps.nanoc.structure.CChar", "jetbrains.mps.nanoc.structure.CDouble", "jetbrains.mps.nanoc.structure.CExpressionStatement", "jetbrains.mps.nanoc.structure.CFloat", "jetbrains.mps.nanoc.structure.CFor", "jetbrains.mps.nanoc.structure.CInt", "jetbrains.mps.nanoc.structure.CLong", "jetbrains.mps.nanoc.structure.CParenthesis", "jetbrains.mps.nanoc.structure.CShort", "jetbrains.mps.nanoc.structure.CWhile", "jetbrains.mps.nanoc.structure.DivOp", "jetbrains.mps.nanoc.structure.EqualOp", "jetbrains.mps.nanoc.structure.File", "jetbrains.mps.nanoc.structure.GreaterEqOp", "jetbrains.mps.nanoc.structure.GreaterOp", "jetbrains.mps.nanoc.structure.IntConst", "jetbrains.mps.nanoc.structure.LessEqOp", "jetbrains.mps.nanoc.structure.LessOp", "jetbrains.mps.nanoc.structure.MinusOp", "jetbrains.mps.nanoc.structure.MultOp", "jetbrains.mps.nanoc.structure.PlusOp", "jetbrains.mps.nanoc.structure.VarDecl", "jetbrains.mps.nanoc.structure.VarDeclStatement", "jetbrains.mps.nanoc.structure.VarRef"};

  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {
      case 14:
        return new File_BehaviorDescriptor();
      case 7:
        return new CInt_BehaviorDescriptor();
      case 2:
        return new CChar_BehaviorDescriptor();
      case 5:
        return new CFloat_BehaviorDescriptor();
      case 10:
        return new CShort_BehaviorDescriptor();
      case 8:
        return new CLong_BehaviorDescriptor();
      case 3:
        return new CDouble_BehaviorDescriptor();
      case 23:
        return new VarDecl_BehaviorDescriptor();
      case 24:
        return new VarDeclStatement_BehaviorDescriptor();
      case 11:
        return new CWhile_BehaviorDescriptor();
      case 1:
        return new CBody_BehaviorDescriptor();
      case 9:
        return new CParenthesis_BehaviorDescriptor();
      case 12:
        return new DivOp_BehaviorDescriptor();
      case 22:
        return new PlusOp_BehaviorDescriptor();
      case 21:
        return new MultOp_BehaviorDescriptor();
      case 20:
        return new MinusOp_BehaviorDescriptor();
      case 17:
        return new IntConst_BehaviorDescriptor();
      case 4:
        return new CExpressionStatement_BehaviorDescriptor();
      case 0:
        return new CAssignmentExpression_BehaviorDescriptor();
      case 25:
        return new VarRef_BehaviorDescriptor();
      case 13:
        return new EqualOp_BehaviorDescriptor();
      case 19:
        return new LessOp_BehaviorDescriptor();
      case 16:
        return new GreaterOp_BehaviorDescriptor();
      case 18:
        return new LessEqOp_BehaviorDescriptor();
      case 15:
        return new GreaterEqOp_BehaviorDescriptor();
      case 6:
        return new CFor_BehaviorDescriptor();
      default:
        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
    }
  }
}
