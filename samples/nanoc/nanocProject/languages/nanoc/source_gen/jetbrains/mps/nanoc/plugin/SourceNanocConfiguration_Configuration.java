package jetbrains.mps.nanoc.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseRunConfig;
import com.intellij.util.xmlb.annotations.Tag;
import com.intellij.openapi.project.Project;
import com.intellij.execution.configurations.ConfigurationFactory;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.intellij.execution.configurations.RuntimeConfigurationError;
import jetbrains.mps.logging.Logger;
import com.intellij.execution.configurations.RunProfileState;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.Executor;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.plugins.pluginparts.runconfigs.BaseRunProfileState;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.ExecutionResult;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.impl.ConsoleViewImpl;
import jetbrains.mps.ide.common.JavaConsoleCreator;
import jetbrains.mps.workbench.MPSDataKeys;
import javax.swing.JComponent;
import java.util.List;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.openapi.util.Disposer;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.io.File;
import jetbrains.mps.nanoc.jetbrains.mps.nanoc.pluginutil.NanocConfigRunPreparationUtil;
import java.io.IOException;
import jetbrains.mps.debug.executable.SimpleConsoleProcessHandler;
import jetbrains.mps.debug.api.AbstractDebugSessionCreator;
import jetbrains.mps.nanoc.debug.CppGDBCreator;
import com.intellij.execution.configurations.RunnerSettings;
import com.intellij.execution.configurations.ConfigurationPerRunnerSettings;
import com.intellij.openapi.util.JDOMExternalizable;
import com.intellij.execution.configurations.ConfigurationInfoProvider;
import com.intellij.openapi.options.SettingsEditor;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import jetbrains.mps.baseLanguage.runConfigurations.runtime.MainNodeChooser;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import javax.swing.JLabel;
import com.intellij.execution.ui.ExecutionConsole;

public class SourceNanocConfiguration_Configuration extends BaseRunConfig {
  @Tag(value = "state")
  private SourceNanocConfiguration_Configuration.MyState myState = new SourceNanocConfiguration_Configuration.MyState();

  public SourceNanocConfiguration_Configuration(Project p, ConfigurationFactory f, String name) {
    super(p, f, name);
  }

  public RunConfiguration clone() {
    try {
      SourceNanocConfiguration_Configuration result = ((SourceNanocConfiguration_Configuration) super.clone());
      result.myState = ((SourceNanocConfiguration_Configuration.MyState) this.myState.clone());
      return result;
    } catch (CloneNotSupportedException e) {
      return null;
    }
  }

  public void checkConfiguration() throws RuntimeConfigurationException {
    final StringBuilder error_22042010 = new StringBuilder();
    try {
      SModelDescriptor descriptor = SModelRepository.getInstance().getModelDescriptor(SModelReference.fromString(SourceNanocConfiguration_Configuration.this.getStateObject().modelRef));
      if (descriptor == null) {
        error_22042010.append("no model found").append("\n");
        return;
      }
      SModel model = descriptor.getSModel();
      SNode node = model.getNodeById(SourceNanocConfiguration_Configuration.this.getStateObject().nodeId);
      if (node == null) {
        error_22042010.append("node not found").append("\n");
        return;
      }
      if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.nanoc.structure.File"))) {
        error_22042010.append("node should be jetbrains.mps.nanoc.File").append("\n");
        return;
      }
    } catch (Throwable t_22042010) {
      if (t_22042010 instanceof RuntimeConfigurationException) {
        throw (RuntimeConfigurationException) t_22042010;
      }
      if (t_22042010 instanceof RuntimeConfigurationError) {
        throw (RuntimeConfigurationError) t_22042010;
      }
      Logger.getLogger(SourceNanocConfiguration_Configuration.class).error(t_22042010);
    }
    if (error_22042010.length() != 0) {
      throw new RuntimeConfigurationException(error_22042010.toString());
    }
  }

  public RunProfileState getState(@NotNull final Executor executor, @NotNull final ExecutionEnvironment environment) throws ExecutionException {
    return new BaseRunProfileState() {
      @Nullable
      public ExecutionResult execute(Executor executor, @NotNull ProgramRunner runner) throws ExecutionException {
        final ConsoleViewImpl consoleView_22042010 = JavaConsoleCreator.createConsoleView(MPSDataKeys.PROJECT.getData(environment.getDataContext()));
        JComponent consoleComponent_22042010 = null;
        Runnable consoleDispose_22042010 = null;
        final List<AnAction> actions_22042010 = ListSequence.fromList(new ArrayList<AnAction>());
        ProcessHandler handler_22042010 = null;
        final Project project_22042010 = environment.getProject();

        // user's execute code 
        try {
          {
            // calculate parameter 

            ListSequence.fromList(actions_22042010).addSequence(ListSequence.fromList(new _FunctionTypes._return_P0_E0<List<AnAction>>() {
              public List<AnAction> invoke() {
                {
                  final List<AnAction> actionsList = ListSequence.fromListAndArray(new ArrayList<AnAction>(), consoleView_22042010.createConsoleActions());
                  return actionsList;
                }
              }
            }.invoke()));

            // create console component 
            consoleComponent_22042010 = consoleView_22042010.getComponent();
            consoleDispose_22042010 = new Runnable() {
              public void run() {
                Disposer.dispose(consoleView_22042010);
              }
            };

            final Wrappers._T<ExecutionException> ex = new Wrappers._T<ExecutionException>(null);
            // create process handler 
            handler_22042010 = (ProcessHandler) new _FunctionTypes._return_P0_E1<ProcessHandler, ExecutionException>() {
              public ProcessHandler invoke() throws ExecutionException {
                try {
                  File executableFile = NanocConfigRunPreparationUtil.prepare(SourceNanocConfiguration_Configuration.this.getStateObject().nodeId, SourceNanocConfiguration_Configuration.this.getStateObject().modelRef);
                  List<String> params = new ArrayList<String>();
                  params.add(executableFile.getAbsolutePath());
                  File workingDir = executableFile.getParentFile();
                  ProcessBuilder executableProcessBuilder = new ProcessBuilder();
                  executableProcessBuilder.directory(workingDir);
                  executableProcessBuilder.command(params);
                  Process process;
                  try {
                    process = executableProcessBuilder.start();
                  } catch (IOException e) {
                    throw new ExecutionException("", e);
                  }
                  ProcessHandler handler = new SimpleConsoleProcessHandler(consoleView_22042010, process, params.get(0));
                  return handler;
                } catch (ExecutionException e) {
                  ex.value = e;
                  return null;
                }
              }
            }.invoke();
            if (ex.value != null) {
              throw ex.value;
            }
          }
        } catch (Throwable t) {
          if (t instanceof ExecutionException) {
            throw (ExecutionException) t;
          } else {
            Logger.getLogger(SourceNanocConfiguration_Configuration.class).error(t);
            throw new ExecutionException("Execution code threw an exception: " + t.getMessage(), t);
          }
        }

        if (handler_22042010 == null) {
          throw new ExecutionException("Process handler is null");
        }
        return new SourceNanocConfiguration_Configuration.MyExecutionResult(handler_22042010, ListSequence.fromList(actions_22042010).toGenericArray(AnAction.class), new SourceNanocConfiguration_Configuration.MyExecutionConsole(consoleComponent_22042010, consoleDispose_22042010));
      }

      public AbstractDebugSessionCreator createDebugSessionCreator(Project project) {
        return new CppGDBCreator(SourceNanocConfiguration_Configuration.this.getStateObject().nodeId, SourceNanocConfiguration_Configuration.this.getStateObject().modelRef);
      }

      public RunnerSettings getRunnerSettings() {
        return null;
      }

      public ConfigurationPerRunnerSettings getConfigurationSettings() {
        return null;
      }
    };
  }

  public JDOMExternalizable createRunnerSettings(ConfigurationInfoProvider p0) {
    return null;
  }

  public SettingsEditor<? extends RunConfiguration> getConfigurationEditor() {
    return new SourceNanocConfiguration_Configuration.MySettingsEditor();
  }

  @Nullable
  public SettingsEditor<JDOMExternalizable> getRunnerSettingsEditor(ProgramRunner p0) {
    return null;
  }

  public void writeExternal(Element e) throws WriteExternalException {
    e.addContent(XmlSerializer.serialize(this.myState));
  }

  public void readExternal(Element e) throws InvalidDataException {
    XmlSerializer.deserializeInto(this.myState, ((Element) e.getChildren().get(0)));
  }

  public SourceNanocConfiguration_Configuration.MyState getStateObject() {
    return this.myState;
  }

  public boolean isDebuggable() {
    return true;
  }

  private static class MySettingsEditor extends SettingsEditor<SourceNanocConfiguration_Configuration> {
    private MainNodeChooser<SNode> myComponent = null;

    public MySettingsEditor() {
    }

    protected void resetEditorFrom(SourceNanocConfiguration_Configuration c) {
      try {
        if (c.getStateObject().modelRef != null && c.getStateObject().nodeId != null) {
          SModelDescriptor descriptor = SModelRepository.getInstance().getModelDescriptor(SModelReference.fromString(c.getStateObject().modelRef));
          if (descriptor == null) {
            return;
          }
          SModel model = descriptor.getSModel();
          SNode node = model.getNodeById(c.getStateObject().nodeId);
          if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.nanoc.structure.File"))) {
            return;
          }
          MySettingsEditor.this.myComponent.setNode(node);
        }
      } catch (Throwable t) {
        Logger.getLogger(SourceNanocConfiguration_Configuration.class).error(t);
      }
    }

    protected void applyEditorTo(final SourceNanocConfiguration_Configuration c) {
      try {
        final SNode node = MySettingsEditor.this.myComponent.getNode();
        if (node != null) {
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              c.getStateObject().nodeId = node.getId();
              c.getStateObject().modelRef = node.getModel().getSModelReference().toString();
            }
          });
        }
      } catch (Throwable t) {
        Logger.getLogger(SourceNanocConfiguration_Configuration.class).error(t);
      }
    }

    @NotNull
    protected JComponent createEditor() {
      try {
        this.myComponent = new MainNodeChooser<SNode>(SConceptOperations.findConceptDeclaration("jetbrains.mps.nanoc.structure.File"), new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
          public Boolean invoke(SNode n) {
            return true;
          }
        });
        return this.myComponent;
      } catch (Throwable t) {
        Logger.getLogger(SourceNanocConfiguration_Configuration.class).error(t);
      }
      return new JLabel("Error during configuration editor initialization.");
    }

    protected void disposeEditor() {
    }
  }

  public static class MyState implements Cloneable {
    public String nodeId;
    public String modelRef;

    public MyState() {
    }

    public Object clone() throws CloneNotSupportedException {
      SourceNanocConfiguration_Configuration.MyState object = (SourceNanocConfiguration_Configuration.MyState) super.clone();
      return object;
    }
  }

  private static class MyExecutionResult implements ExecutionResult {
    private final ProcessHandler myHandler;
    private final AnAction[] myActions;
    private final ExecutionConsole myConsole;

    public MyExecutionResult(ProcessHandler handler, AnAction[] actions, ExecutionConsole console) {
      myHandler = handler;
      myActions = actions;
      myConsole = console;
    }

    public ProcessHandler getProcessHandler() {
      return myHandler;
    }

    public AnAction[] getActions() {
      return myActions;
    }

    public ExecutionConsole getExecutionConsole() {
      return myConsole;
    }
  }

  private static class MyExecutionConsole implements ExecutionConsole {
    @Nullable
    private final Runnable myDispose;
    private final JComponent myComponent;

    public MyExecutionConsole(JComponent component, @Nullable Runnable dispose) {
      myComponent = component;
      myDispose = dispose;
    }

    public void dispose() {
      if (myDispose == null) {
        return;
      }
      myDispose.run();
    }

    public JComponent getPreferredFocusableComponent() {
      return myComponent;
    }

    public JComponent getComponent() {
      return myComponent;
    }
  }
}
