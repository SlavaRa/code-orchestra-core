package jetbrains.mps.nanoc.debug.requests;

/*Generated by MPS */

import jetbrains.mps.nanoc.debug.events.GDBEventsHandler;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.debug.api.BreakpointManagerComponent;
import jetbrains.mps.nanoc.debug.events.GDBEventsAdapter;
import jetbrains.mps.nanoc.debug.answer.ResultAnswer;
import java.util.List;
import jetbrains.mps.nanoc.debug.answer.StreamAnswer;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.nanoc.debug.ProcessUtil;
import jetbrains.mps.debug.api.breakpoints.IBreakpoint;
import jetbrains.mps.nanoc.debug.breakpoints.GDBBreakpoint;

public class GDBRequestManager {
  private final GDBEventsHandler myEventsHandler;
  private final Map<Long, GDBRequestor> myRequestors = new HashMap<Long, GDBRequestor>();
  private final BreakpointManagerComponent myBreakpointManager;

  public GDBRequestManager(GDBEventsHandler eventsHandler, BreakpointManagerComponent breakpointManager) {
    myBreakpointManager = breakpointManager;
    myEventsHandler = eventsHandler;
    myEventsHandler.addEventListener(new GDBEventsAdapter() {
      public void resultReceived(ResultAnswer result, List<StreamAnswer> receivedStreamAnswers, ProcessHandler gdbProcess) {
        requestResultReceived(result, receivedStreamAnswers);
      }
    });
  }

  private void requestResultReceived(ResultAnswer resultAnswer, List<StreamAnswer> receivedStreamAnswers) {
    Long token = resultAnswer.getDigitalToken();
    GDBRequestor gdbRequestor = myRequestors.remove(token);
    if (gdbRequestor == null) {
      return;
    }
    gdbRequestor.onRequestFulfilled(resultAnswer, receivedStreamAnswers);
  }

  public void createRequest(GDBRequestor requestor) {
    long id = requestor.getId();
    myRequestors.put(id, requestor);
    String requestString = requestor.createRequestString();
    ProcessUtil.inputWithFlush(myEventsHandler.getGDBProcessHandler(), id + requestString + "\n");
  }

  public void createBreakpointRequests() {
    for (IBreakpoint breakpoint : myBreakpointManager.getAllIBreakpoints()) {
      if (breakpoint instanceof GDBBreakpoint) {
        ((GDBBreakpoint) breakpoint).createBreakpointRequest(this);
      }
    }
  }
}
