package jetbrains.mps.nanoc.debug.requests;

/*Generated by MPS */

import java.util.concurrent.atomic.AtomicLong;
import jetbrains.mps.nanoc.debug.answer.ResultAnswer;
import java.util.List;
import jetbrains.mps.nanoc.debug.answer.StreamAnswer;
import java.security.SecureRandom;

public abstract class GDBRequestor {
  private static AtomicLong ourCounter = new AtomicLong();

  private long myId;

  public GDBRequestor() {
  }

  public long getId() {
    if (myId == 0) {
      myId = Math.abs(ourCounter.incrementAndGet());
    }
    return myId;
  }

  public abstract String createRequestString();

  public abstract void onRequestFulfilled(ResultAnswer answer, List<StreamAnswer> receivedStreamAnswers);

  /*package*/ static void resetIdCounter() {
    ourCounter.set(Math.abs(new SecureRandom().nextLong()));
  }

  static {
    GDBRequestor.resetIdCounter();
  }
}
