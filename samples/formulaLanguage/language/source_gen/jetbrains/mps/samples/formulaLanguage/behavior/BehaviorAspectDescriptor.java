package jetbrains.mps.samples.formulaLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;

public class BehaviorAspectDescriptor implements jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor {
  private static String[] stringSwitchCases_846f5o_a0a0a = new String[]{"jetbrains.mps.samples.formulaLanguage.structure.AndOperation", "jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation", "jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", "jetbrains.mps.samples.formulaLanguage.structure.Formula", "jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.IfFunction", "jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant", "jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation", "jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.MinusOperation", "jetbrains.mps.samples.formulaLanguage.structure.MultOperation", "jetbrains.mps.samples.formulaLanguage.structure.NotOperation", "jetbrains.mps.samples.formulaLanguage.structure.NullConstant", "jetbrains.mps.samples.formulaLanguage.structure.OrOperation", "jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression", "jetbrains.mps.samples.formulaLanguage.structure.PlusOperation", "jetbrains.mps.samples.formulaLanguage.structure.StringConstant"};

  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {
      case 3:
        return new Formula_BehaviorDescriptor();
      case 6:
        return new IntegerConstant_BehaviorDescriptor();
      case 2:
        return new FloatingPointConstant_BehaviorDescriptor();
      case 5:
        return new IfFunction_BehaviorDescriptor();
      case 15:
        return new PlusOperation_BehaviorDescriptor();
      case 9:
        return new MinusOperation_BehaviorDescriptor();
      case 8:
        return new LessThanOperation_BehaviorDescriptor();
      case 10:
        return new MultOperation_BehaviorDescriptor();
      case 4:
        return new GreaterThanOperation_BehaviorDescriptor();
      case 16:
        return new StringConstant_BehaviorDescriptor();
      case 0:
        return new AndOperation_BehaviorDescriptor();
      case 13:
        return new OrOperation_BehaviorDescriptor();
      case 1:
        return new EqualsOperation_BehaviorDescriptor();
      case 14:
        return new ParenthisizedExpression_BehaviorDescriptor();
      case 12:
        return new NullConstant_BehaviorDescriptor();
      case 7:
        return new IsNullOperation_BehaviorDescriptor();
      case 11:
        return new NotOperation_BehaviorDescriptor();
      default:
        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
    }
  }
}
