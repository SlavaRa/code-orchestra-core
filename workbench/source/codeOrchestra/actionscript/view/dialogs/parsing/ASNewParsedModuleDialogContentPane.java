package codeOrchestra.actionscript.view.dialogs.parsing;

/*Generated by MPS */

import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Progressive;
import com.intellij.openapi.progress.Task;
import codeOrchestra.actionScript.assets.AssetsManager;
import codeOrchestra.actionscript.parsing.QuickFixesApplier;
import codeOrchestra.actionscript.util.FileUtils;
import codeOrchestra.actionscript.view.utils.Languages;
import codeOrchestra.actionscript.view.utils.SolutionUtils;
import jetbrains.mps.ide.NewModuleCheckUtil;
import jetbrains.mps.ide.common.PathField;
import jetbrains.mps.ide.vfs.IdeaFile;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.Solution;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.uiLanguage.runtime.events.Events;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.vfs.IFile;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.Property;
import org.jetbrains.annotations.NotNull;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.awt.GridLayout;
import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class ASNewParsedModuleDialogContentPane extends JPanel {
  public ASNewParsedModuleDialogContentPane myThis;
  private JLabel myComponent0;
  private JTextField myName0;
  private JLabel myComponent1;
  private JLabel myComponent2;
  private PathField myPath0;
  private PathField mySourcePath0;
  private String myModuleName;
  private String mySourcePath;
  private String myModulePath;
  private boolean myCompileInMPS = true;
  private MPSProject myProject;
  private Solution myResult;
  private ParsedModuleCreateCallback callback;
  private ASNewParsedModuleDialog myDialog;
  public List<AutoBinding> myBindings = ListSequence.fromList(new ArrayList<AutoBinding>());
  private Events myEvents = new Events(null) {
    {
    }

    public void initialize() {
    }
  };

  public void setCallback(ParsedModuleCreateCallback callback) {
    this.callback = callback;
  }

  public ASNewParsedModuleDialogContentPane() {
    this.myThis = this;
    ASNewParsedModuleDialogContentPane component = this;
    component.setLayout(new GridLayout(6, 1));
    component.add(this.createComponent0());
    component.add(this.createComponent1());
    component.add(this.createComponent2());
    component.add(this.createComponent3());
    component.add(this.createComponent4());
    component.add(this.createComponent5());
    this.myEvents.initialize();
    myThis.setModulePath("");
    myThis.setSourcePath("");
    myThis.setModuleName("NewParsedModule");
    myThis.myName0.setName("Name");
    myThis.myPath0.setName("Path");
    myThis.mySourcePath0.setName("SourcePath");
  }

  public Events getEvents() {
    return this.myEvents;
  }

  public void addNotify() {
    super.addNotify();
    this.bind();
  }

  public void removeNotify() {
    this.unbind();
    super.removeNotify();
  }

  private void bind() {
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("moduleName");
      Object targetObject = this.myName0;
      Property targetProperty = BeanProperty.create("text");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      ListSequence.fromList(this.myBindings).addElement(binding);
    }
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("modulePath");
      Object targetObject = this.myPath0;
      Property targetProperty = BeanProperty.create("path");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      ListSequence.fromList(this.myBindings).addElement(binding);
    }
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("sourcePath");
      Object targetObject = this.mySourcePath0;
      Property targetProperty = BeanProperty.create("path");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      ListSequence.fromList(this.myBindings).addElement(binding);
    }
  }

  private void unbind() {
    for (AutoBinding binding : this.myBindings) {
      if (binding.isBound()) {
        binding.unbind();
      }
    }
  }

  private JLabel createComponent0() {
    JLabel component = new JLabel();
    this.myComponent0 = component;
    component.setText("Name:");
    return component;
  }

  private JTextField createComponent1() {
    JTextField component = new JTextField();
    this.myName0 = component;
    return component;
  }

  private JLabel createComponent2() {
    JLabel component = new JLabel();
    this.myComponent1 = component;
    component.setText("Module Path:");
    return component;
  }

  private PathField createComponent3() {
    PathField component = new PathField();
    this.myPath0 = component;
    return component;
  }

  private JLabel createComponent4() {
    JLabel component = new JLabel();
    this.myComponent2 = component;
    component.setText("Sources Path:");
    return component;
  }

  private PathField createComponent5() {
    PathField component = new PathField();
    this.mySourcePath0 = component;
    return component;
  }

  public String getModuleName() {
    return this.myModuleName;
  }

  public String getModulePath() {
    return this.myModulePath;
  }

  public String getSourcePath() {
    return this.mySourcePath;
  }

  public boolean getCompileInMPS() {
    return this.myCompileInMPS;
  }

  public MPSProject getProject() {
    return this.myProject;
  }

  public Solution getResult() {
    return this.myResult;
  }

  public ASNewParsedModuleDialog getDialog() {
    return this.myDialog;
  }

  public void setModuleName(String newValue) {
    String oldValue = this.myModuleName;
    this.myModuleName = newValue;
    this.firePropertyChange("moduleName", oldValue, newValue);
    myThis.updateSolutionPath();
  }

  public void setModulePath(String newValue) {
    String oldValue = this.myModulePath;
    this.myModulePath = newValue;
    this.firePropertyChange("modulePath", oldValue, newValue);
  }

  public void setSourcePath(String newValue) {
    String oldValue = this.mySourcePath;
    this.mySourcePath = newValue;
    this.firePropertyChange("sourcePath", oldValue, newValue);
  }

  public void setCompileInMPS(boolean newValue) {
    boolean oldValue = this.myCompileInMPS;
    this.myCompileInMPS = newValue;
    this.firePropertyChange("compileInMPS", oldValue, newValue);
  }

  public void setProject(MPSProject newValue) {
    MPSProject oldValue = this.myProject;
    this.myProject = newValue;
    this.firePropertyChange("project", oldValue, newValue);
    myThis.updateSolutionPath();
  }

  public void setResult(Solution newValue) {
    Solution oldValue = this.myResult;
    this.myResult = newValue;
    this.firePropertyChange("result", oldValue, newValue);
  }

  public void setDialog(ASNewParsedModuleDialog newValue) {
    ASNewParsedModuleDialog oldValue = this.myDialog;
    this.myDialog = newValue;
    this.firePropertyChange("dialog", oldValue, newValue);
  }

  /*package*/ void onOk() {
    if (myThis.callback == null) {
      throw new IllegalStateException("No callback object set");
    }

    if (myThis.getModulePath().length() == 0) {
      myThis.getDialog().setErrorText("Enter module directory");
      return;
    }
    if (myThis.getSourcePath().length() == 0) {
      myThis.getDialog().setErrorText("Enter sources directory");
      return;
    }
    String moduleName = myThis.getModuleName();
    if (moduleName.length() == 0) {
      myThis.getDialog().setErrorText("Enter module name");
      return;
    }
    // RE-3532
    if (!SolutionUtils.isValidModuleName(moduleName)) {
      myThis.getDialog().setErrorText("Invalid module name");
      return;
    }
    final File sourcesDir = new File(myThis.getSourcePath());
    if (!sourcesDir.exists() || !sourcesDir.isDirectory()) {
      myThis.getDialog().setErrorText("Invalid sources path");
      return;
    }

    if (MPSModuleRepository.getInstance().getModuleByUID(moduleName) != null) {
      myThis.getDialog().setErrorText("Duplicate module name");
      return;
    }

    // Check that mySourcePath and myModulePath do not interfere with each other
    String sourcePath_modified = myThis.getSourcePath().replaceAll("\\\\", "/");
    String modulePath_modified = myThis.getModulePath().replaceAll("\\\\", "/");
    if (sourcePath_modified.startsWith(modulePath_modified) || modulePath_modified.startsWith(sourcePath_modified)) {
      myThis.getDialog().setErrorText("Module Path and Sources Path should not be in the same hierarchy");
      return;
    }

    // Check if the target dir contains module files
    File moduleDir = new File(myThis.getModulePath());
    if (moduleDir.exists() && moduleDir.isDirectory()) {
      List<File> mpsFiles = FileUtils.listFileRecursively(moduleDir, new FileFilter() {
        public boolean accept(File pathname) {
          String fileName = pathname.getName().toLowerCase();
          return fileName.endsWith(".mps") || fileName.endsWith(".msd");
        }
      });
      if (mpsFiles != null && !mpsFiles.isEmpty()) {
        myThis.getDialog().setErrorText("Target directory already contains module files");
        return;
      }
    }

    final String descriptorPath = myThis.getModulePath() + File.separator + moduleName + MPSExtentions.DOT_SOLUTION;
    final File file = new File(descriptorPath);
    File dir = file.getParentFile();
    String message = NewModuleCheckUtil.checkModuleDirectory(dir, MPSExtentions.DOT_SOLUTION, "Module");
    if (message != null) {
      myThis.getDialog().setErrorText(message);
      return;
    }

    myThis.getDialog().dispose();

    // Create a solution
    final Object[] parsingResult = new Object[1];
    ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive() {
      public void run(ProgressIndicator indicator) {
        indicator.setIndeterminate(true);
        indicator.setText("Creating module");
        myThis.setResult(ASNewParsedModuleHelper.createNewSolution(FileSystem.getInstance().getFileByPath(descriptorPath), myThis.getProject(), myThis.getCompileInMPS()));

        indicator.pushState();
        indicator.setText("Parsing the source files into module " + myResult.getModuleDescriptor().getNamespace());

        try { Thread.sleep(100); } catch (InterruptedException e) { ; }

        parsingResult[0] = callback.onModuleCreated(myResult, sourcesDir, indicator);
        myThis.setResult(myResult);

      }
    }, "Parsing", false, myThis.getProject().getProject());

    // Collect parsed models references
    if (parsingResult[0] == null) {
      throw new IllegalStateException("Parsing result is null");
    }
    final Set<SModelReference> parsedModelReferences = (Set<SModelReference>) parsingResult[0];

    // Apply quick-fixes (post-parsing)
    QuickFixesApplier.apply(myProject.getProject(), parsedModelReferences, myResult);
  }

  /*package*/ void onCancel() {
    myThis.getDialog().dispose();
  }

  /*package*/ void updateSolutionPath() {
    if (myThis.getProject() == null) {
      return;
    }
    String path = FileUtil.getCanonicalPath(myThis.getProject().getProjectFile().getParentFile());
    String prefix = path + File.separator + "modules" + File.separator;
    if (myThis.getModulePath().length() == 0 || myThis.getModulePath().startsWith(prefix)) {
      myThis.setModulePath(prefix + myThis.getModuleName());
    }
  }
}