package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.generator.generationTypes.IGenerationHandler;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.ide.generator.GenerationCheckHelper;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.generator.GeneratorUIFacade;

public class GenerateModel_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(GenerateModel_Action.class);

  private IGenerationHandler generationHandler;
  private boolean rebuildAll;

  public GenerateModel_Action(IGenerationHandler generationHandler_par, boolean rebuildAll_par) {
    super("Generate Model", "", ICON);
    this.generationHandler = generationHandler_par;
    this.rebuildAll = rebuildAll_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        event.getPresentation().setText((GenerateModel_Action.this.rebuildAll ?
          "Regenerate Files" :
          GenerateModel_Action.this.generationHandler.toString()
        ));
        boolean applicable = ListSequence.fromList(GenerateModel_Action.this.getModels(_params)).isNotEmpty();
        for (SModelDescriptor model : ListSequence.fromList(GenerateModel_Action.this.getModels(_params))) {
          if (!(GenerateModel_Action.this.generationHandler.canHandle(model))) {
            applicable = false;
            break;
          }
        }
        GenerateModel_Action.this.setEnabledState(event.getPresentation(), applicable);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "GenerateModel", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("models", event.getData(MPSDataKeys.MODELS));
    MapSequence.fromMap(_params).put("model", event.getData(MPSDataKeys.CONTEXT_MODEL));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final List<SModelDescriptor> modelsToGenerate = new ArrayList<SModelDescriptor>();
      for (SModelDescriptor m : ListSequence.fromList(((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")))) {
        modelsToGenerate.add(m);
      }
      boolean checkSuccessful = GenerationCheckHelper.getInstance().checkModelsBeforeGenerationIfNeeded(((Project) MapSequence.fromMap(_params).get("project")), ((IOperationContext) MapSequence.fromMap(_params).get("context")), (List) modelsToGenerate, new Runnable() {
        public void run() {
          GeneratorUIFacade.getInstance().generateModels(((IOperationContext) MapSequence.fromMap(_params).get("context")), modelsToGenerate, GenerateModel_Action.this.generationHandler, GenerateModel_Action.this.rebuildAll, false);
        }
      });
      if (!(checkSuccessful)) {
        return;
      }
      GeneratorUIFacade.getInstance().generateModels(((IOperationContext) MapSequence.fromMap(_params).get("context")), modelsToGenerate, GenerateModel_Action.this.generationHandler, GenerateModel_Action.this.rebuildAll, false);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "GenerateModel", t);
      }
    }
  }

  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(generationHandler_State((IGenerationHandler) this.generationHandler));
    res.append("!");
    res.append(((Object) this.rebuildAll).toString());
    res.append("!");
    return res.toString();
  }

  /*package*/ List<SModelDescriptor> getModels(final Map<String, Object> _params) {
    List<SModelDescriptor> result = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    if (((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models")) != null) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(((List<SModelDescriptor>) MapSequence.fromMap(_params).get("models"))));
    }
    if (ListSequence.fromList(result).isEmpty() && ((SModelDescriptor) MapSequence.fromMap(_params).get("model")) != null) {
      ListSequence.fromList(result).addElement(((SModelDescriptor) MapSequence.fromMap(_params).get("model")));
    }
    return result;
  }

  public static String generationHandler_State(IGenerationHandler object) {
    return object.toString();
  }
}
