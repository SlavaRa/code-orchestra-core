package jetbrains.mps.workbench.make;

/*Generated by MPS */

import com.intellij.openapi.util.UserDataHolderBase;
import com.intellij.openapi.fileEditor.FileEditor;
import com.intellij.openapi.project.Project;
import com.intellij.ui.TabbedPaneWrapper;
import javax.swing.JPanel;
import org.jetbrains.annotations.Nullable;
import com.intellij.ide.structureView.StructureViewBuilder;
import com.intellij.openapi.fileEditor.FileEditorLocation;
import com.intellij.codeHighlighting.BackgroundEditorHighlighter;
import org.jetbrains.annotations.NotNull;
import java.beans.PropertyChangeListener;
import com.intellij.openapi.fileEditor.FileEditorState;
import com.intellij.openapi.fileEditor.FileEditorStateLevel;
import org.jetbrains.annotations.NonNls;
import javax.swing.JComponent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.SwingConstants;
import com.intellij.ui.PrevNextActionsDescriptor;
import com.intellij.openapi.actionSystem.IdeActions;
import com.intellij.ui.tabs.JBTabs;
import com.intellij.ui.tabs.UiDecorator;
import java.awt.Insets;
import javax.swing.border.EmptyBorder;
import java.awt.BorderLayout;
import javax.swing.border.CompoundBorder;
import javax.swing.border.LineBorder;
import java.awt.Color;
import javax.swing.JTextArea;
import java.awt.Font;
import com.intellij.openapi.editor.colors.EditorColorsManager;
import com.intellij.openapi.editor.colors.EditorFontType;
import javax.swing.JScrollPane;
import com.intellij.ui.ScrollPaneFactory;
import javax.swing.JViewport;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Rectangle;
import com.intellij.util.ui.UIUtil;
import java.awt.Graphics2D;
import com.intellij.openapi.actionSystem.DataProvider;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import com.intellij.openapi.vfs.VirtualFile;

public class GeneratedTextPreviewEditor extends UserDataHolderBase implements FileEditor {
  private TextPreviewFile file;
  private Project project;
  private TabbedPaneWrapper tabs;
  private JPanel panel;

  public GeneratedTextPreviewEditor(Project project, TextPreviewFile file) {
    this.file = file;
    this.project = project;
    init();
  }

  @Nullable
  public StructureViewBuilder getStructureViewBuilder() {
    return null;
  }

  @Nullable
  public FileEditorLocation getCurrentLocation() {
    return null;
  }

  @Nullable
  public BackgroundEditorHighlighter getBackgroundHighlighter() {
    return null;
  }

  public void removePropertyChangeListener(@NotNull PropertyChangeListener listener) {
  }

  public void addPropertyChangeListener(@NotNull PropertyChangeListener listener) {
  }

  public void deselectNotify() {
  }

  public void selectNotify() {
  }

  public boolean isValid() {
    return true;
  }

  public boolean isModified() {
    return false;
  }

  public void setState(@NotNull FileEditorState state) {
  }

  @NotNull
  public FileEditorState getState(@NotNull FileEditorStateLevel level) {
    return new FileEditorState() {
      public boolean canBeMergedWith(FileEditorState p0, FileEditorStateLevel p1) {
        return false;
      }
    };
  }

  @NonNls
  @NotNull
  public String getName() {
    return null;
  }

  @Nullable
  public JComponent getPreferredFocusedComponent() {
    return tabs.getSelectedComponent();
  }

  public void dispose() {
    panel.removeAll();
    panel = null;
  }

  @NotNull
  public JComponent getComponent() {
    return panel;
  }

  private void init() {
    this.tabs = this.createTabs();
    tabs.addChangeListener(new ChangeListener() {
      public void stateChanged(ChangeEvent event) {
      }
    });
    this.panel = new GeneratedTextPreviewEditor.Panel(tabs.getComponent());
    for (String n : file.forkNames()) {
      tabs.addTab(n, this.createTabContents(file.fork(n)));
    }
  }

  private TabbedPaneWrapper.AsJBTabs createTabs() {
    TabbedPaneWrapper.AsJBTabs asjbtabs = new TabbedPaneWrapper.AsJBTabs(project, SwingConstants.BOTTOM, new PrevNextActionsDescriptor(IdeActions.ACTION_NEXT_EDITOR_TAB, IdeActions.ACTION_PREVIOUS_EDITOR_TAB), this);
    decorate(asjbtabs.getTabs());
    return asjbtabs;
  }

  private void decorate(JBTabs jbTabs) {
    jbTabs.getPresentation().setPaintBorder(0, 0, 0, 0).setTabSidePaintBorder(1).setGhostsAlwaysVisible(true).setUiDecorator(new UiDecorator() {
      @NotNull
      public UiDecorator.UiDecoration getDecoration() {
        return new UiDecorator.UiDecoration(null, new Insets(0, 8, 0, 8));
      }
    });
    jbTabs.getComponent().setBorder(new EmptyBorder(0, 0, 1, 0));
  }

  private JComponent createTabContents(CharSequence text) {
    final JPanel panel = new JPanel(new BorderLayout());
    panel.setBorder(new CompoundBorder(new EmptyBorder(1, 1, 1, 1), new LineBorder(Color.LIGHT_GRAY, 1)));
    panel.setBackground(Color.WHITE);

    JTextArea ta = new JTextArea(text.toString());
    ta.setEditable(false);

    Font font = EditorColorsManager.getInstance().getGlobalScheme().getFont(EditorFontType.PLAIN);
    if (font != null) {
      ta.setFont(font);
    }

    final JScrollPane sp = ScrollPaneFactory.createScrollPane(ta, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    sp.setBorder(new LineBorder(Color.LIGHT_GRAY));
    sp.setBackground(Color.WHITE);
    panel.add(sp, BorderLayout.CENTER);
    sp.setRowHeader(new JViewport() {
      @Override
      public Dimension getPreferredSize() {
        return new Dimension(27, sp.getViewport().getViewRect().height);
      }

      @Override
      protected void paintComponent(Graphics graphics) {
        Rectangle cb = graphics.getClipBounds();
        graphics.setColor(Color.WHITE);
        graphics.fillRect(cb.x, cb.y, cb.width, cb.height);
        UIUtil.drawVDottedLine((Graphics2D) graphics, 22, cb.y, cb.y + cb.height, null, Color.GRAY);
      }
    });

    return panel;
  }

  private class Panel extends JPanel implements DataProvider {
    private JComponent delegate;

    private Panel(JComponent delegate) {
      super(new BorderLayout());
      this.delegate = delegate;
      add(delegate, BorderLayout.CENTER);
    }

    @Override
    public boolean requestFocusInWindow() {
      return delegate.requestFocusInWindow();
    }

    @Override
    public void requestFocus() {
      delegate.requestFocus();
    }

    @Deprecated
    @Override
    public boolean requestDefaultFocus() {
      return delegate.requestDefaultFocus();
    }

    @Nullable
    public Object getData(@NonNls String dataId) {
      if (PlatformDataKeys.FILE_EDITOR.is(dataId)) {
        return GeneratedTextPreviewEditor.this;
      }
      if (PlatformDataKeys.VIRTUAL_FILE.is(dataId)) {
        return file;
      }
      if (PlatformDataKeys.VIRTUAL_FILE_ARRAY.is(dataId)) {
        return new VirtualFile[]{file};
      }
      return null;
    }
  }

  private class EditorStateStub implements FileEditorState {
    public EditorStateStub() {
    }

    public boolean canBeMergedWith(FileEditorState state, FileEditorStateLevel level) {
      return false;
    }
  }
}
