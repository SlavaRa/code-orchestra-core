package jetbrains.mps.ide.hierarchy;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.INavigateableTool;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import java.util.ArrayList;
import jetbrains.mps.smodel.event.SModelListener;
import jetbrains.mps.smodel.LanguageHierarchyCache;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.projectPane.Icons;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.ide.findusages.UsagesViewTracker;
import jetbrains.mps.ide.findusages.INavigator;
import javax.swing.tree.TreePath;

public class HierarchyViewTool extends AbstractHierarchyView implements INavigateableTool {
  private List<SModelDescriptor> myStructureModels = new ArrayList<SModelDescriptor>();
  private SModelListener myModelListener;
  private LanguageHierarchyCache myCache;

  public HierarchyViewTool(Project project, LanguageHierarchyCache cache) {
    super(project, "Hierarchy", 8, Icons.HIERARCHY_ICON);
    myCache = cache;
  }

  public void onCreateStructureModel(SModelDescriptor md) {
    myStructureModels.add(md);
    md.addModelListener(myModelListener);
  }

  @Override
  public void initComponent() {
    super.initComponent();
    myModelListener = new HierarchyModelListener(this.myHierarchyTree);
  }

  @Override
  public void projectOpened() {
    super.projectOpened();
    for (SModelDescriptor md : GlobalScope.getInstance().getModelDescriptors()) {
      if (LanguageAspect.STRUCTURE.is(md)) {
        myStructureModels.add(md);
      }
    }
  }

  @Override
  public void projectClosed() {
    super.projectClosed();
    myStructureModels.clear();
  }

  protected AbstractHierarchyTree createHierarchyTree(boolean isParentHierarchy) {
    return new ConceptHierarchyTree(myCache, this, isParentHierarchy);
  }

  protected void doRegister() {
    UsagesViewTracker.register(this);
    for (SModelDescriptor md : myStructureModels) {
      md.addModelListener(myModelListener);
    }
  }

  protected void doUnregister() {
    UsagesViewTracker.unregister(this);
    for (SModelDescriptor md : myStructureModels) {
      md.removeModelListener(myModelListener);
    }
    myStructureModels.clear();
  }

  public int getPriority() {
    return 2;
  }

  public INavigator getCurrentNavigateableView() {
    return new INavigator() {
      public void goToNext() {
        TreePath path = myHierarchyTree.getSelectionPath();
        HierarchyTreeNode selectedNode = (HierarchyTreeNode) path.getLastPathComponent();
        HierarchyTreeNode nextNode = ((HierarchyTreeNode) selectedNode.getNextNode());
        if (nextNode != null) {
          myHierarchyTree.selectNode(nextNode);
          nextNode.doubleClick();
        }
      }

      public void goToPrevious() {
        TreePath path = myHierarchyTree.getSelectionPath();
        HierarchyTreeNode selectedNode = (HierarchyTreeNode) path.getLastPathComponent();
        HierarchyTreeNode nextNode = ((HierarchyTreeNode) selectedNode.getPreviousNode());
        if (nextNode != null) {
          myHierarchyTree.selectNode(nextNode);
          nextNode.doubleClick();
        }
      }
    };
  }
}
