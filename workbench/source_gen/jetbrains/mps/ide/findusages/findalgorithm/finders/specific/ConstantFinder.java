package jetbrains.mps.ide.findusages.findalgorithm.finders.specific;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.ide.findusages.model.holders.IHolder;
import javax.swing.Icon;
import java.util.Collection;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.annotations.NotNull;
import org.jdom.Element;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.findusages.CantLoadSomethingException;
import jetbrains.mps.ide.findusages.CantSaveSomethingException;

public class ConstantFinder implements IFinder {
  private SearchResults<SNode> myResults = new SearchResults<SNode>();

  public ConstantFinder() {
  }

  public SearchResults<SNode> find(SearchQuery query, ProgressIndicator indicator) {
    return myResults;
  }

  public String getDescription() {
    return "constant finder";
  }

  public static class ConstantHolder implements IHolder<SearchResults<SNode>> {
    private SearchResults<SNode> myData = new SearchResults<SNode>();
    private String myCaption = "<null>";
    private Icon myIcon = null;

    public ConstantHolder() {
    }

    public ConstantHolder(SearchResults<SNode> data) {
      myData = data;
    }

    public ConstantHolder(final Collection<SNode> nodes, final String categoryName) {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          for (SNode node : nodes) {
            myData.getSearchResults().add(new SearchResult<SNode>(node, categoryName));
          }
        }
      });
    }

    public SearchResults<SNode> getObject() {
      return myData;
    }

    @NotNull
    public String getCaption() {
      return myCaption;
    }

    public Icon getIcon() {
      return myIcon;
    }

    public void read(Element element, Project project) throws CantLoadSomethingException {
      throw new CantLoadSomethingException("do not call read on ConstantHolder!!!");
    }

    public void write(Element element, Project project) throws CantSaveSomethingException {
      throw new CantSaveSomethingException("do not call write on ConstantHolder!!!");
    }
  }
}
