package jetbrains.mps.ide.findusages.findalgorithm.finders.specific;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.findusages.model.holders.IHolder;
import jetbrains.mps.ide.findusages.model.holders.ModuleHolder;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModel;
import java.util.List;
import java.util.LinkedList;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.project.GlobalScopeMinusTransient;
import java.util.ArrayList;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.ModelsOnlyScope;

public class LanguageConceptsUsagesFinder implements IFinder {
  public LanguageConceptsUsagesFinder() {
  }

  public SearchResults find(SearchQuery query, ProgressIndicator indicator) {
    SearchResults<SNode> searchResults = new SearchResults<SNode>();
    IHolder holder = query.getObjectHolder();
    assert holder instanceof ModuleHolder;
    IModule module = ((ModuleHolder) holder).getObject();
    assert module instanceof Language;
    Language language = (Language) module;
    SModelDescriptor structureModel = language.getStructureModelDescriptor();
    if (structureModel == null) {
      return searchResults;
    }
    SModel sModel = structureModel.getSModel();
    if (sModel == null) {
      return searchResults;
    }
    if (sModel.rootsCount() == 0) {
      return searchResults;
    }
    List<SNode> roots = new LinkedList<SNode>();
    for (SNode root : sModel.roots()) {
      roots.add(root);
    }
    searchResults.getSearchedNodes().addAll(roots);
    SearchResults<SModel> modelResults = FindUtils.getSearchResults(indicator, new SearchQuery(sModel, GlobalScopeMinusTransient.getInstance()), new ModelUsagesFinder());
    List<SModelDescriptor> models = new ArrayList<SModelDescriptor>();
    for (SearchResult<SModel> sModelSearchResult : modelResults.getSearchResults()) {
      models.add(sModelSearchResult.getObject().getModelDescriptor());
    }
    IScope scope = new ModelsOnlyScope(models.toArray(new SModelDescriptor[models.size()]));
    SearchResults results = new SearchResults();
    for (SNode node : roots) {
      if (indicator != null && indicator.isCanceled()) {
        break;
      }
      results.addAll(FindUtils.getSearchResults(indicator, node, scope, "jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder"));
      results.removeDuplicates();
    }
    searchResults.getSearchResults().addAll(results.getSearchResults());
    return searchResults;
  }
}
