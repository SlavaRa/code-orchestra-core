package jetbrains.mps.ide.resolve;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.checking.EditorCheckerAdapter;
import java.util.Set;
import jetbrains.mps.nodeEditor.EditorMessage;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.smodel.event.SModelEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import java.util.LinkedHashSet;
import jetbrains.mps.smodel.SReference;
import java.util.ArrayList;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import java.util.Iterator;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.typesystem.checking.HighlightUtil;
import jetbrains.mps.smodel.SModelReference;
import java.util.HashSet;
import jetbrains.mps.nodeEditor.checking.BaseEditorChecker;
import jetbrains.mps.typesystem.checking.TypesEditorChecker;

public class AutoResolver extends EditorCheckerAdapter {
  public AutoResolver() {
  }

  public Set<EditorMessage> createMessages(SNode rootNode, List<SModelEvent> events, boolean wasCheckedOnce, final EditorContext editorContext) {
    Set<EditorMessage> messages = new LinkedHashSet<EditorMessage>();
    if (rootNode.getModel() == null || rootNode.getModel().getModelDescriptor() == null) {
      return messages;
    }
    if (rootNode.getModel().isTransient()) {
      return messages;
    }
    List<SReference> yetBadReferences = new ArrayList<SReference>();
    SReference.disableLogging();
    final ArrayList<ResolveResult> resolveResultArrayList = new ArrayList<ResolveResult>();
    try {
      Set<SReference> badReferences = collectBadReferences(rootNode);
      if (!(badReferences.isEmpty())) {
        TypeContextManager.getInstance().setComputeInNormalMode(true);
        yetBadReferences = Resolver.resolveReferences(badReferences, editorContext.getOperationContext(), resolveResultArrayList, false);
        TypeContextManager.getInstance().setComputeInNormalMode(false);
        for (Iterator<ResolveResult> it = resolveResultArrayList.iterator(); it.hasNext();) {
          ResolveResult resolveResult = it.next();
          if (isNewTargetFromAnotherModel(resolveResult)) {
            yetBadReferences.add(getResolvedReference(resolveResult));
            it.remove();
          }
        }
      }
    } finally {
      SReference.enableLogging();
    }
    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        if (resolveResultArrayList.isEmpty()) {
          return;
        }
        Project p = (editorContext != null && editorContext.getOperationContext() != null ?
          editorContext.getOperationContext().getProject() :
          null
        );
        if (p == null) {
          return;
        }

        ModelAccess.instance().runUndoTransparentCommand(new Runnable() {
          public void run() {
            for (ResolveResult resolveResult : resolveResultArrayList) {
              resolveResult.setTarget();
            }
          }
        }, p);
      }
    });
    for (SReference ref : yetBadReferences) {
      EditorMessage message = HighlightUtil.createHighlighterMessage(ref.getSourceNode(), "unresolved reference", this, editorContext);
      messages.add(message);
    }
    return messages;
  }

  private boolean isNewTargetFromAnotherModel(ResolveResult resolveResult) {
    SNode newTargetNode = resolveResult.getTargetNode();
    if (newTargetNode == null || newTargetNode.getModel() == null) {
      return false;
    }
    SReference reference = getResolvedReference(resolveResult);
    if (reference == null) {
      return false;
    }
    SModelReference sModelRef = reference.getTargetSModelReference();
    return sModelRef != null && !(sModelRef.getSModelFqName().equals(newTargetNode.getModel().getSModelFqName()));
  }

  private SReference getResolvedReference(ResolveResult resolveResult) {
    SNode sourceNode = resolveResult.getSourceNode();
    if (sourceNode == null) {
      return null;
    }
    String referenceRole = resolveResult.getRole();
    return (referenceRole == null ?
      null :
      sourceNode.getReference(referenceRole)
    );
  }

  private Set<SReference> collectBadReferences(SNode cellNode) {
    Set<SReference> result = new HashSet<SReference>();
    for (SNode node : cellNode.getDescendantsIterable(null, true)) {
      for (SReference ref : node.getReferencesIterable()) {
        if (ref.getTargetNodeSilently() == null) {
          result.add(ref);
        }
      }
    }
    return result;
  }

  public boolean isLaterThan(BaseEditorChecker editorChecker) {
    return editorChecker instanceof TypesEditorChecker;
  }
}
