package jetbrains.mps.ide.newLibDialog;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import jetbrains.mps.ide.common.PathField;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.Library;
import java.util.List;
import org.jdesktop.beansbinding.AutoBinding;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.uiLanguage.runtime.events.Events;
import java.awt.GridLayout;
import org.jdesktop.beansbinding.Property;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Bindings;
import jetbrains.mps.ide.newSolutionDialog.NewModuleUtil;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.progress.Progressive;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import java.io.File;

public class NewLibDialogContentPane extends JPanel {
  public NewLibDialogContentPane myThis;
  private JLabel myComponent_b0;
  private JTextField myName_c0;
  private JLabel myComponent_d0;
  private PathField myPath_e0;
  private String myLibraryName;
  private String myLibraryPath;
  private MPSProject myProject;
  private Library myResult;
  private NewLibDialog myDialog;
  public List<AutoBinding> myBindings = ListSequence.fromList(new ArrayList<AutoBinding>());
  private Events myEvents = new Events(null) {
    {
    }

    public void initialize() {
    }
  };

  public NewLibDialogContentPane() {
    this.myThis = this;
    NewLibDialogContentPane component = this;
    component.setLayout(new GridLayout(4, 1));
    component.add(this.createComponent_b0());
    component.add(this.createComponent_c0());
    component.add(this.createComponent_d0());
    component.add(this.createComponent_e0());
    this.myEvents.initialize();
    myThis.setLibraryPath("");
    myThis.setLibraryName("NewLibrary");
    myThis.myName_c0.setName("Name");
    myThis.myPath_e0.setName("Path");
  }

  public Events getEvents() {
    return this.myEvents;
  }

  public void addNotify() {
    super.addNotify();
    this.bind();
  }

  public void removeNotify() {
    this.unbind();
    super.removeNotify();
  }

  private void bind() {
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("libraryName");
      Object targetObject = this.myName_c0;
      Property targetProperty = BeanProperty.create("text");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      ListSequence.fromList(this.myBindings).addElement(binding);
    }
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("libraryPath");
      Object targetObject = this.myPath_e0;
      Property targetProperty = BeanProperty.create("path");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      ListSequence.fromList(this.myBindings).addElement(binding);
    }
  }

  private void unbind() {
    for (AutoBinding binding : this.myBindings) {
      if (binding.isBound()) {
        binding.unbind();
      }
    }
  }

  private JLabel createComponent_b0() {
    JLabel component = new JLabel();
    this.myComponent_b0 = component;
    component.setText("Name:");
    return component;
  }

  private JTextField createComponent_c0() {
    JTextField component = new JTextField();
    this.myName_c0 = component;
    return component;
  }

  private JLabel createComponent_d0() {
    JLabel component = new JLabel();
    this.myComponent_d0 = component;
    component.setText("Library Path:");
    return component;
  }

  private PathField createComponent_e0() {
    PathField component = new PathField();
    this.myPath_e0 = component;
    return component;
  }

  public String getLibraryName() {
    return this.myLibraryName;
  }

  public String getLibraryPath() {
    return this.myLibraryPath;
  }

  public MPSProject getProject() {
    return this.myProject;
  }

  public Library getResult() {
    return this.myResult;
  }

  public NewLibDialog getDialog() {
    return this.myDialog;
  }

  public void setLibraryName(String newValue) {
    String oldValue = this.myLibraryName;
    this.myLibraryName = newValue;
    this.firePropertyChange("libraryName", oldValue, newValue);
    myThis.updateLibraryPath();
  }

  public void setLibraryPath(String newValue) {
    String oldValue = this.myLibraryPath;
    this.myLibraryPath = newValue;
    this.firePropertyChange("libraryPath", oldValue, newValue);
  }

  public void setProject(MPSProject newValue) {
    MPSProject oldValue = this.myProject;
    this.myProject = newValue;
    this.firePropertyChange("project", oldValue, newValue);
    myThis.updateLibraryPath();
  }

  public void setResult(Library newValue) {
    Library oldValue = this.myResult;
    this.myResult = newValue;
    this.firePropertyChange("result", oldValue, newValue);
  }

  public void setDialog(NewLibDialog newValue) {
    NewLibDialog oldValue = this.myDialog;
    this.myDialog = newValue;
    this.firePropertyChange("dialog", oldValue, newValue);
  }

  /*package*/ void onOk() {
    String message = NewModuleUtil.check(MPSExtentions.DOT_LIBRARY, myThis.getLibraryName(), myThis.getLibraryPath());
    if (message != null) {
      myThis.getDialog().setErrorText(message);
      return;
    }

    myThis.getDialog().dispose();
    ModelAccess.instance().runWriteActionWithProgressSynchronously(new Progressive() {
      public void run(ProgressIndicator indicator) {
        indicator.setIndeterminate(true);
        myThis.setResult(NewModuleUtil.createModule(MPSExtentions.DOT_LIBRARY, myThis.getLibraryName(), myThis.getLibraryPath(), myThis.getProject(), new _FunctionTypes._return_P3_E0<Library, String, IFile, MPSProject>() {
          public Library invoke(String s, IFile f, MPSProject p) {
            return Library.createLibrary(s, f, p);
          }
        }, new _FunctionTypes._void_P1_E0<ModuleDescriptor>() {
          public void invoke(ModuleDescriptor d) {
          }
        }));
        myThis.getResult();
      }
    }, "Creating", false, myThis.getProject().getProject());
  }

  /*package*/ void onCancel() {
    myThis.getDialog().dispose();
  }

  /*package*/ void updateLibraryPath() {
    if (myThis.getProject() == null) {
      return;
    }
    String path = myThis.getProject().getProjectFile().getParentFile().getAbsolutePath();
    String prefix = path + File.separator + "libraries" + File.separator;
    if (myThis.getLibraryPath().length() == 0 || myThis.getLibraryPath().startsWith(prefix)) {
      myThis.setLibraryPath(prefix + myThis.getLibraryName());
    }
  }
}
