package jetbrains.mps.ide.script.plugin.migrationtool;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.ide.findusages.view.UsagesView;
import javax.swing.JPanel;
import javax.swing.JButton;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.findusages.model.IResultProvider;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.ide.findusages.view.treeholder.treeview.ViewOptions;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Set;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import java.awt.Rectangle;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import com.intellij.openapi.command.UndoConfirmationPolicy;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.findusages.model.SearchResults;
import javax.swing.JLabel;
import java.awt.event.ActionListener;
import javax.swing.JComponent;

public abstract class MigrationScriptsView {
  private MigrationScriptFinder myFinder;
  private SearchQuery myQuery;
  private MigrationScriptsTool myTool;
  private UsagesView myUsagesView;
  private JPanel myMainPanel;
  private JPanel myControlsPanel;
  private JPanel myStatusPanel;
  private JButton myApplyButton;
  private final Project myProject;

  public MigrationScriptsView(MigrationScriptFinder finder, IResultProvider provider, SearchQuery query, MigrationScriptsTool tool, Project project) {
    myProject = project;
    if (!(ThreadUtils.isEventDispatchThread())) {
      throw new IllegalStateException("Can't use this outside of EDT");
    }
    myFinder = finder;
    myQuery = query;
    finder.setMigrationScriptsView(this);
    myTool = tool;
    ViewOptions viewOptions = new ViewOptions();
    viewOptions.myCategories[0] = true;
    viewOptions.myShowSearchedNodes = false;
    viewOptions.myGroupSearchedNodes = false;
    viewOptions.mySearchedNodesButtonsVisible = false;
    myUsagesView = new UsagesView(project, viewOptions) {
      public void close() {
        MigrationScriptsView.this.close();
      }
    };
    myUsagesView.setRunOptions(provider, query, new UsagesView.ButtonConfiguration(true, true, true), finder.getLastSearchResults());
    myMainPanel = new JPanel(new BorderLayout());
    myMainPanel.add(myUsagesView.getComponent(), BorderLayout.CENTER);
    myControlsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    myApplyButton = new JButton(new AbstractAction("Apply Migrations") {
      public void actionPerformed(ActionEvent e) {
        applyMigrations();
      }
    });
    myControlsPanel.add(myApplyButton);
    myStatusPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));
    myControlsPanel.add(myStatusPanel);
    myMainPanel.add(myControlsPanel, BorderLayout.SOUTH);
  }

  public abstract void close();

  private void applyMigrations() {
    if (!(ThreadUtils.isEventDispatchThread())) {
      throw new IllegalStateException("Can't use this outside of EDT");
    }
    final List<SearchResult<SNode>> aliveIncludedResults = new ArrayList<SearchResult<SNode>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        List<SNodePointer> includedNodes = myUsagesView.getIncludedResultNodes();
        Set<SNode> aliveIncludedNodes = new HashSet<SNode>();
        for (SNodePointer includedNode : includedNodes) {
          if (includedNode.getNode() != null) {
            aliveIncludedNodes.add(includedNode.getNode());
          }
        }
        List<SearchResult<SNode>> aliveResults = myFinder.getLastSearchResults().getAliveResults();
        for (SearchResult<SNode> aliveResult : aliveResults) {
          if (aliveIncludedNodes.contains(aliveResult.getObject())) {
            aliveIncludedResults.add(aliveResult);
          }
        }
      }
    });
    if (aliveIncludedResults.size() == 0) {
      JOptionPane.showMessageDialog(myTool.getComponent(), "No job");
      return;
    }
    final JProgressBar progress = new JProgressBar(0, aliveIncludedResults.size());
    progress.setString("applying migrations...");
    progress.setStringPainted(true);
    progress.setBorderPainted(false);
    updateControls(false, progress);
    // FIXME deadlock 
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            int progressCount = 0;
            for (SearchResult<SNode> aliveIncludedResult : aliveIncludedResults) {
              progress.setValue((progressCount++));
              progress.paintImmediately(new Rectangle(progress.getSize()));
              SNode node = aliveIncludedResult.getObject();
              // still alive? 
              if (node != null && node.isRegistered()) {
                // still applicable? 
                AbstractMigrationRefactoring migrationRefactoring = myFinder.getRefactoring(aliveIncludedResult);
                if (MigrationScriptUtil.isApplicableRefactoring(node, migrationRefactoring)) {
                  MigrationScriptUtil.performRefactoring(node, migrationRefactoring);
                }
              }
            }
            progress.setValue(aliveIncludedResults.size());
            progress.paintImmediately(new Rectangle(progress.getSize()));

            //  ---- 
            checkMigrationResults();
          }
        }, "migration refactoring", null, UndoConfirmationPolicy.REQUEST_CONFIRMATION, myProject);
      }
    });
  }

  private void checkMigrationResults() {
    final MigrationScriptFinder newFinder = new MigrationScriptFinder(myFinder.getScripts(), myFinder.getOperationContext());
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        ProgressManager.getInstance().run(new Task.Modal(myTool.getProject(), "Searching", true) {
          public void run(@NotNull final ProgressIndicator indicator) {
            indicator.setIndeterminate(true);
            IResultProvider provider = FindUtils.makeProvider(newFinder);
            SearchResults results = FindUtils.getSearchResults(indicator, myQuery, provider);
            int newCount = results.getSearchResults().size();
            if (newCount > 0) {
              updateControls(false, new JLabel("done, but there " + ((newCount == 1 ?
                "is 1" :
                "are " + newCount
              )) + " applicable node" + ((newCount > 1 ?
                "s" :
                ""
              )) + " left"), createShowInNewTabButton(newFinder, provider, myQuery));
            } else {
              updateControls(false, new JLabel("done"));
            }
          }
        });
      }
    });
  }

  private JButton createShowInNewTabButton(final MigrationScriptFinder finder, final IResultProvider provider, final SearchQuery query) {
    JButton button = new JButton("Show in New Tab");
    button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        SwingUtilities.invokeLater(new Runnable() {
          public void run() {
            updateControls(false, new JLabel("done"));
            myTool.addTab(finder, provider, query);
          }
        });
      }
    });
    return button;
  }

  private void updateControls(boolean applyButtonEnabled, JComponent... statusComponents) {
    myApplyButton.setEnabled(applyButtonEnabled);
    if (statusComponents != null) {
      myStatusPanel.removeAll();
      for (JComponent statusComponent : statusComponents) {
        myStatusPanel.add(statusComponent);
      }
    }
    myStatusPanel.revalidate();
    myStatusPanel.repaint();
  }

  public UsagesView getUsagesView() {
    return myUsagesView;
  }

  public JComponent getComponent() {
    return myMainPanel;
  }

  public void searchResultsChanged() {
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        updateControls(true, new JLabel(""));
      }
    });
  }
}
