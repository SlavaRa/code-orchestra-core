package jetbrains.mps.ide.script.plugin.migrationtool;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.view.TabbedUsagesTool;
import java.util.List;
import jetbrains.mps.smodel.SNodePointer;
import java.util.ArrayList;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import jetbrains.mps.ide.findusages.view.UsagesView;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.ThreadUtils;
import javax.swing.SwingUtilities;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.ide.findusages.model.IResultProvider;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.ide.findusages.model.SearchResults;
import javax.swing.JOptionPane;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.ui.content.Content;
import jetbrains.mps.ide.findusages.view.icons.IconManager;

public class MigrationScriptsTool extends TabbedUsagesTool {
  private List<SNodePointer> myScripts;
  private List<MigrationScriptsView> myViews = new ArrayList<MigrationScriptsView>();

  public MigrationScriptsTool(Project project) {
    super(project, "Migration", -1, null, ToolWindowAnchor.BOTTOM, true);
  }

  protected UsagesView getUsagesView(int index) {
    return myViews.get(index).getUsagesView();
  }

  protected void onRemove(int index) {
    myViews.remove(index);
  }

  protected boolean forceCloseOnReload() {
    return true;
  }

  public void startMigration(List<SNode> scriptNodes, final IScope scope, final IOperationContext context) {
    if (!(ThreadUtils.isEventDispatchThread())) {
      throw new IllegalStateException("Can't use this outside of EDT");
    }
    myScripts = new ArrayList<SNodePointer>();
    for (SNode scriptNode : scriptNodes) {
      myScripts.add(new SNodePointer(scriptNode));
    }
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        ProgressManager.getInstance().run(new Task.Modal(getProject(), "Searching", true) {
          public void run(@NotNull final ProgressIndicator indicator) {
            indicator.setIndeterminate(true);
            final MigrationScriptFinder finder = new MigrationScriptFinder(myScripts, context);
            final IResultProvider provider = FindUtils.makeProvider(finder);
            final SearchQuery query = new SearchQuery(scope);
            final SearchResults results = FindUtils.getSearchResults(indicator, query, provider);
            SwingUtilities.invokeLater(new Runnable() {
              public void run() {
                if (results.getSearchResults().isEmpty()) {
                  JOptionPane.showMessageDialog(getContentManager().getComponent(), "No applicable nodes found", "Migration Scripts", JOptionPane.INFORMATION_MESSAGE);
                } else {
                  int count = myViews.size();
                  for (int i = 0; i < count; i++) {
                    closeTab(0);
                  }
                  addTab(finder, provider, query);
                  openTool(true);
                }
              }
            });
          }
        });
      }
    });
  }

  /*package*/ void addTab(final MigrationScriptFinder finder, final IResultProvider provider, final SearchQuery query) {
    if (!(ThreadUtils.isEventDispatchThread())) {
      throw new IllegalStateException("Can't use this outside of EDT");
    }
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        MigrationScriptsView view = new MigrationScriptsView(finder, provider, query, MigrationScriptsTool.this, getProject()) {
          public void close() {
            int index = myViews.indexOf(this);
            closeTab(index);
          }
        };
        myViews.add(view);
        String tabName = "";
        if (myViews.size() > 1) {
          tabName = "" + (myViews.size() - 1);
        }
        Content content = addContent(view.getComponent(), tabName, IconManager.getIconForIHolder(query.getObjectHolder()), false);
        getContentManager().setSelectedContent(content);
      }
    });
  }

  public int getPriority() {
    return -1;
  }

  public Project getProject() {
    return super.getProject();
  }
}
