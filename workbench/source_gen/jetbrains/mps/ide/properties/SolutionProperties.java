package jetbrains.mps.ide.properties;

/*Generated by MPS */

import codeOrchestra.actionscript.run.compiler.properties.CompilerSettings;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;

public class SolutionProperties extends ModuleProperties {
  public static final String OUTPUT_PATH = "outputPath";
  public static final String DONT_LOAD_CLASSPATH = "dontLoadClasses";

  private boolean myExternallyVisible;
  private boolean myDontLoadClasses;
  private String myOutputPath;
  private String myGitTimeUpdate;
  private String myGitRepositoryUrl;

  private CompilerSettings compilerSettings;

  public SolutionProperties() {
  }

  public CompilerSettings getCompilerSettings() {
    if (compilerSettings == null) {
      return new CompilerSettings();
    }
    return compilerSettings;
  }

  public void setCompilerSettings(CompilerSettings compilerSettings) {
    this.compilerSettings = compilerSettings;
  }

  public boolean isExternallyVisible() {
    return myExternallyVisible;
  }

  public void setExternallyVisible(boolean externallyVisible) {
    myExternallyVisible = externallyVisible;
  }

  public boolean isDontLoadClasses() {
    return myDontLoadClasses;
  }

  public void setDontLoadClasses(boolean dontLoadClasses) {
    myDontLoadClasses = dontLoadClasses;
  }

  public String getOutputPath() {
    return myOutputPath;
  }

  public void setOutputPath(String outputPath) {
    myOutputPath = outputPath;
  }
  public String getGitRepositoryUrl() {
    return myGitRepositoryUrl;
  }

  @Override
  public void loadFrom(ModuleDescriptor descriptor) {
    assert descriptor instanceof SolutionDescriptor;
    super.loadFrom(descriptor);
    SolutionDescriptor d = (SolutionDescriptor) descriptor;
    myDontLoadClasses = d.isDontLoadClasses();
    myOutputPath = d.getOutputPath();
    compilerSettings = d.getCompilerSettings(); // compiler settings
    myGitRepositoryUrl = d.getGitHubUrl();
    myGitTimeUpdate = d.getGitTimeUpdate();
  }

  @Override
  public void saveTo(ModuleDescriptor descriptor) {
    assert descriptor instanceof SolutionDescriptor;
    super.saveTo(descriptor);
    SolutionDescriptor d = (SolutionDescriptor) descriptor;
    d.setDontLoadClasses(myDontLoadClasses);
    d.setOutputPath(myOutputPath);
    d.setCompilerSettings(compilerSettings); // compiler settings
  }
}
