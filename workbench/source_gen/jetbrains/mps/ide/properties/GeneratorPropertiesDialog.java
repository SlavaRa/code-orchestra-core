package jetbrains.mps.ide.properties;

/*Generated by MPS */

import jetbrains.mps.project.structure.modules.mappingpriorities.RuleType;
import jetbrains.mps.util.annotation.CodeOrchestraPatch;
import jetbrains.mps.workbench.dialogs.project.BasePropertiesDialog;
import jetbrains.mps.smodel.Generator;
import com.intellij.openapi.project.Project;
import jetbrains.mps.project.ModuleContext;
import javax.swing.JPanel;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.project.structure.modules.mappingpriorities.MappingPriorityRule;
import jetbrains.mps.project.structure.modules.GeneratorDescriptor;
import jetbrains.mps.smodel.ModelAccess;

public class GeneratorPropertiesDialog extends BasePropertiesDialog {
  public Generator myGenerator;
  public GeneratorProperties myProperties;

  /*package*/ GeneratorPropertiesDialog(Project project, final Generator generator) {
    super("Generator Properties", new ModuleContext(generator, project));
    myGenerator = generator;
    collectGeneratorProperties();
  }

  public GeneratorProperties getProperties() {
    return myProperties;
  }

  public JPanel createCheckboxPanel() {
    List<StandardComponents.CheckboxDescriptor> list = new ArrayList<StandardComponents.CheckboxDescriptor>();
    list.add(new StandardComponents.CheckboxDescriptor(myProperties, GeneratorProperties.GENERATE_TEMPLATES, "Generate Templates"));
    return StandardComponents.createCheckboxPanel(this, list);
  }

  @CodeOrchestraPatch
  protected String getErrorString() {
    for (MappingPriorityRule rule : myProperties.getPriorityRules()) {
      // CO-4941
      if (rule.getType() == RuleType.ABSOLUTE_FIRST) {
        continue;
      }
      if (rule.getLeft().isIncomplete() || rule.getRight().isIncomplete()) {
        return "One or more priority rules are incomplete";
      }
    }
    GeneratorDescriptor tmpDescr = new GeneratorDescriptor();
    myProperties.saveTo(tmpDescr);
    return null;
  }

  private void collectGeneratorProperties() {
    myProperties = new GeneratorProperties();
    myProperties.loadFrom(myGenerator.getModuleDescriptor());
  }

  protected boolean doSaveChanges() {
    String errorString = getErrorString();
    if (errorString != null) {
      setErrorText(errorString);
      return false;
    }
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        myProperties.saveTo(myGenerator.getModuleDescriptor());
        myGenerator.setModuleDescriptor(myGenerator.getModuleDescriptor(), true);
        myGenerator.save();
      }
    }, getOperationContext().getProject());
    return true;
  }
}
