package jetbrains.mps.ide.dataFlow.presentation;

/*Generated by MPS */

import java.util.Set;
import java.util.HashSet;
import java.awt.event.MouseEvent;
import java.awt.Component;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;

public abstract class AbstractBlock<T extends IInstruction<T>> implements IBlock<T> {
  protected int myX;
  protected int myY;
  protected int myWidth;
  protected int myHeight;
  protected T mySource;
  private int myPaddingX = 0;
  private int myPaddingY = 0;
  private int myCharHeight = 0;
  private int myStringWidth = 0;
  private Set<IBlockListener<T>> myBlockListeners = new HashSet<IBlockListener<T>>();

  public AbstractBlock(int x, int y, int width, int height, T source) {
    this.myX = x;
    this.myY = y;
    this.myWidth = width;
    this.myHeight = height;
    this.mySource = source;
  }

  public T getSourceObject() {
    return this.mySource;
  }

  public int getX() {
    return this.myX;
  }

  public int getY() {
    return this.myY;
  }

  public int getWidth() {
    return this.myWidth;
  }

  public int getHeight() {
    return this.myHeight;
  }

  public void addBlockListener(IBlockListener<T> listener) {
    this.myBlockListeners.add(listener);
  }

  public void removeBlockListener(IBlockListener<T> listener) {
    this.myBlockListeners.remove(listener);
  }

  public boolean processMousePressed(MouseEvent mEvent) {
    int x = mEvent.getX();
    int y = mEvent.getY();
    if (x >= this.myX && x <= this.myX + this.myWidth && y > this.myY && y <= this.myY + this.myHeight) {
      for (IBlockListener<T> listener : this.myBlockListeners) {
        listener.mousePressed(mEvent, AbstractBlock.this.getSourceObject());
      }
      return true;
    } else {
      return false;
    }
  }

  public void relayout(Component c) {
    String caption = this.mySource.toString();
    Font font = c.getFont();
    FontMetrics metrics = c.getFontMetrics(font);
    this.myStringWidth = metrics.stringWidth(caption);
    this.myCharHeight = metrics.getHeight();
    this.myWidth = this.myStringWidth + 2 * AbstractBlock.this.getPaddingX(metrics);
    this.myHeight = this.myCharHeight + 2 * AbstractBlock.this.getPaddingY(metrics);
  }

  private int getPaddingX(FontMetrics metrics) {
    return metrics.getHeight() / 2;
  }

  private int getPaddingY(FontMetrics metrics) {
    return metrics.getHeight() / 3;
  }

  public void setWidth(int width) {
    this.myWidth = width;
    this.myPaddingX = (this.myWidth - this.myStringWidth) / 2;
  }

  public void setHeight(int height) {
    this.myHeight = height;
    this.myPaddingY = (this.myHeight - this.myCharHeight) / 2;
  }

  public void setX(int x) {
    this.myX = x;
  }

  public void setY(int y) {
    this.myY = y;
  }

  protected void paintCaption(Graphics g) {
    String caption = this.mySource.toString();
    g.drawString(caption, this.myX + this.myPaddingX, this.myY + this.myPaddingY + this.myCharHeight);
  }

  protected abstract void paintBlock(Graphics g);

  public void paint(Graphics g) {
    AbstractBlock.this.paintBlock(g);
    AbstractBlock.this.paintCaption(g);
  }
}
