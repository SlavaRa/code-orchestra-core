package jetbrains.mps.ide.dataFlow.presentation;

/*Generated by MPS */

import javax.swing.JDialog;
import javax.swing.JScrollPane;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.smodel.IOperationContext;
import java.awt.Frame;
import java.awt.BorderLayout;
import com.intellij.ui.ScrollPaneFactory;
import java.awt.event.MouseEvent;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.editors.MPSEditorOpener;
import java.awt.Color;
import javax.swing.JComponent;
import javax.swing.Scrollable;
import java.awt.event.MouseAdapter;
import java.awt.Graphics;
import java.awt.Dimension;
import java.awt.Rectangle;

public class ShowCFGDialog extends JDialog {
  private JScrollPane myScrollPane;
  private ShowCFGDialog.MyComponent myComponent;
  private ControlFlowGraph<InstructionWrapper> myControlFlowGraph;

  public ShowCFGDialog(Program p, final IOperationContext operationContext, Frame frame) {
    super(frame);
    this.setLayout(new BorderLayout());
    this.getContentPane().setBackground(this.getBackground());
    this.myComponent = new ShowCFGDialog.MyComponent();
    this.myScrollPane = ScrollPaneFactory.createScrollPane(myComponent);
    this.myScrollPane.setBackground(this.getBackground());
    this.add(this.myScrollPane, BorderLayout.CENTER);
    this.myComponent.setFont(this.myComponent.getFont().deriveFont(10.0f));
    this.myControlFlowGraph = new ControlFlowGraph<InstructionWrapper>(new ProgramWrapper(p), new GraphCreator(), this.myComponent);
    this.myControlFlowGraph.addBlockListener(new IBlockListener<InstructionWrapper>() {
      public void mousePressed(MouseEvent event, IInstruction<InstructionWrapper> instruction) {
        InstructionWrapper instructionWrapper = (InstructionWrapper) instruction;
        Instruction cfgInstruction = instructionWrapper.getInstruction();
        Object source = cfgInstruction.getSource();
        if (source instanceof SNode) {
          SNode node = (SNode) source;
          operationContext.getComponent(MPSEditorOpener.class).editNode(node, operationContext);
        }
      }
    });
    this.pack();
    this.setModal(true);
    this.setVisible(true);
  }

  public Color getBackground() {
    return Color.LIGHT_GRAY;
  }

  private class MyComponent extends JComponent implements Scrollable {
    public MyComponent() {
      this.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent e) {
          ShowCFGDialog.this.myControlFlowGraph.processMousePressed(e);
        }
      });
    }

    public Color getBackground() {
      return ShowCFGDialog.this.getBackground();
    }

    public void paint(Graphics g) {
      g.setColor(this.getBackground());
      g.fillRect(0, 0, this.getWidth(), this.getHeight());
      ShowCFGDialog.this.myControlFlowGraph.paint(g);
    }

    public Dimension getPreferredScrollableViewportSize() {
      return this.getPreferredSize();
    }

    public Dimension getPreferredSize() {
      return new Dimension(ShowCFGDialog.this.myControlFlowGraph.getWidth(), ShowCFGDialog.this.myControlFlowGraph.getHeight());
    }

    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
      return 20;
    }

    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
      return visibleRect.height;
    }

    public boolean getScrollableTracksViewportWidth() {
      return false;
    }

    public boolean getScrollableTracksViewportHeight() {
      return false;
    }
  }
}
