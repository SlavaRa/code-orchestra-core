package jetbrains.mps.ide.dataFlow.presentation;

/*Generated by MPS */

import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import jetbrains.mps.lang.dataFlow.framework.instructions.IfJumpInstruction;
import jetbrains.mps.lang.dataFlow.framework.instructions.JumpInstruction;
import jetbrains.mps.lang.dataFlow.framework.instructions.WriteInstruction;
import jetbrains.mps.lang.dataFlow.framework.instructions.ReadInstruction;
import jetbrains.mps.lang.dataFlow.framework.instructions.RetInstruction;

public class GraphCreator implements IGraphCreator<InstructionWrapper> {
  private Map<IInstruction<InstructionWrapper>, IBlock<InstructionWrapper>> myMap = new HashMap<IInstruction<InstructionWrapper>, IBlock<InstructionWrapper>>();

  public GraphCreator() {
  }

  private IBlock<InstructionWrapper> doCreateBlock(InstructionWrapper wrapper, int x, int y, int width, int height) {
    Instruction instruction = wrapper.getInstruction();
    if (instruction instanceof IfJumpInstruction) {
      return new AltBlock<InstructionWrapper>(x, y, width, height, wrapper);
    }
    if (instruction instanceof JumpInstruction) {
      return new JumpBlock<InstructionWrapper>(x, y, width, height, wrapper);
    }
    if (instruction instanceof WriteInstruction) {
      return new WriteBlock<InstructionWrapper>(x, y, width, height, wrapper);
    }
    if (instruction instanceof ReadInstruction) {
      return new ReadBlock<InstructionWrapper>(x, y, width, height, wrapper);
    }
    if (instruction instanceof RetInstruction) {
      return new ReturnBlock<InstructionWrapper>(x, y, width, height, wrapper);
    }
    return new SimpleBlock<InstructionWrapper>(x, y, width, height, wrapper);
  }

  public IBlock<InstructionWrapper> createBlock(InstructionWrapper instruction, int x, int y, int width, int height) {
    IBlock<InstructionWrapper> result = this.doCreateBlock(instruction, x, y, width, height);
    this.myMap.put(instruction, result);
    return result;
  }

  public IBlock<InstructionWrapper> findBlockWith(IInstruction<InstructionWrapper> instruction) {
    return this.myMap.get(instruction);
  }
}
