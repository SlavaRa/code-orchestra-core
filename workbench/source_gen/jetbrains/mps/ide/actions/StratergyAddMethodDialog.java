package jetbrains.mps.ide.actions;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import jetbrains.mps.nodeEditor.EditorContext;
import java.awt.Frame;
import java.awt.HeadlessException;
import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.intellij.openapi.actionSystem.AnAction;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModelStereotype;
import java.util.HashMap;
import javax.swing.JComponent;
import com.intellij.openapi.actionSystem.ToggleAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;

public class StratergyAddMethodDialog extends BaseAddMethodDialog {
  private StratergyAddMethodDialog.ContainerStrategy myContainerStrategy;
  private StratergyAddMethodDialog.AdditionStrategy myAdditionStrategy;
  private StratergyAddMethodDialog.CollectMethodsStrategy myCollectStrategy;
  private StratergyAddMethodDialog.SortByNameAction mySortByNameAction;
  private Project myProject;

  public StratergyAddMethodDialog(EditorContext context, Frame mainFrame, StratergyAddMethodDialog.ContainerStrategy containerStrategy, StratergyAddMethodDialog.CollectMethodsStrategy collectStrategy, StratergyAddMethodDialog.AdditionStrategy additionStrategy) throws HeadlessException {
    super(context, mainFrame, additionStrategy.getTitle());
    myContainerStrategy = containerStrategy;
    myCollectStrategy = collectStrategy;
    myAdditionStrategy = additionStrategy;
    myProject = context.getOperationContext().getProject();
    mySortByNameAction = new StratergyAddMethodDialog.SortByNameAction(myProject);
  }

  private void setVariableNames(SNode node, Map<String, Integer> usedNames) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
      SNode variable = SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration");
      SNode nodeType = SLinkOperations.getTarget(variable, "type", true);
      if (nodeType != null) {
        String name = ListSequence.fromList(((List<String>) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(nodeType, "jetbrains.mps.baseLanguage.structure.Type"), "virtual_getVariableSuffixes_1213877337304", new Class[]{SNode.class}))).first();
        if (MapSequence.fromMap(usedNames).containsKey(name)) {
          int i = MapSequence.fromMap(usedNames).get(name);
          i = i + 1;
          MapSequence.fromMap(usedNames).put(name, i);
          name = name + i;
        } else {
          MapSequence.fromMap(usedNames).put(name, 0);
        }
        String prefix = ((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(variable, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "virtual_getPrefix_3012473318495495520", new Class[]{SNode.class, Project.class}, myProject));
        String suffix = ((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(variable, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "virtual_getSuffix_3012473318495499856", new Class[]{SNode.class, Project.class}, myProject));
        String mainName = (StringUtils.isEmpty(prefix) ?
          name :
          NameUtil.capitalize(name)
        );
        SPropertyOperations.set(variable, "name", prefix + mainName + suffix);
      }
    }
    for (SNode child : SNodeOperations.getChildren(node)) {
      setVariableNames(child, usedNames);
    }
  }

  public List<SNode> collectImplementableMethods() {
    return myCollectStrategy.collectImplementableMethods(myContainerStrategy.getMainContainer());
  }

  protected List<AnAction> getToolbarActions() {
    List<AnAction> result = new ArrayList<AnAction>();
    result.addAll(super.getToolbarActions());
    result.add(mySortByNameAction);
    return result;
  }

  protected int compareMethods(SNode m1, SNode m2) {
    if (!(mySortByNameAction.isSelected())) {
      int i1 = myContainerStrategy.getContainer(m1).getIndexOfChild(m1);
      int i2 = myContainerStrategy.getContainer(m2).getIndexOfChild(m2);
      return i1 - i2;
    } else {
      String n1 = "" + SPropertyOperations.getString(m1, "name");
      String n2 = "" + SPropertyOperations.getString(m2, "name");
      return n1.compareTo(n2);
    }
  }

  public List<SNode> doAddMethods(List<BaseAddMethodDialog.MethodTreeNode> methodNodes) {
    List<SNode> result = new ArrayList<SNode>();
    List<SNode> methods = new ArrayList<SNode>();
    for (BaseAddMethodDialog.MethodTreeNode methodNode : methodNodes) {
      SNode method = methodNode.getMethod();
      methods.add(method);
    }
    List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> addedMethods = myContainerStrategy.doAddMethods(methods);
    for (StratergyAddMethodDialog.ContainerStrategy.MethodAddition added : addedMethods) {
      SNode addedMethod = added.getResult();
      SNode sourceMethod = added.getSource();
      if (SModelStereotype.isStubModelStereotype(SNodeOperations.getModel(sourceMethod).getStereotype())) {
        setVariableNames(addedMethod, MapSequence.fromMap(new HashMap<String, Integer>()));
      }
      result.add(addedMethod);
      myAdditionStrategy.updateMethod(sourceMethod, addedMethod);
    }
    return result;
  }

  public SNode getContainer(SNode bm) {
    return myContainerStrategy.getContainer(bm);
  }

  protected int compareContainers(SNode c1, SNode c2) {
    return myContainerStrategy.compareContainers(c1, c2);
  }

  protected JComponent createAdditionalOptionsComponent() {
    return myAdditionStrategy.createAdditionalOptionsComponent();
  }

  public static interface ContainerStrategy {
    public SNode getMainContainer();
    public SNode getContainer(SNode methodDecl);
    public List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> doAddMethods(List<SNode> nodes);
    public int compareContainers(SNode c1, SNode c2);
    public static class MethodAddition {
      private SNode mySource;
      private SNode myResult;

      public MethodAddition(SNode source, SNode result) {
        mySource = source;
        myResult = result;
      }

      public SNode getSource() {
        return mySource;
      }

      public SNode getResult() {
        return myResult;
      }
    }

  }

  public static interface AdditionStrategy {
    public String getTitle();
    public JComponent createAdditionalOptionsComponent();
    public void updateMethod(SNode sourceMethod, SNode method);
  }

  public static interface CollectMethodsStrategy {
    public List<SNode> collectImplementableMethods(SNode container);
  }

  private class SortByNameAction extends ToggleAction {
    private Project myProject;

    private SortByNameAction(Project p) {
      super("Sort Alphabetically");
      getTemplatePresentation().setIcon(IconContainer.ICON_a0a1a0d);
      myProject = p;
    }

    public boolean isSelected(AnActionEvent e) {
      return isSelected();
    }

    public void setSelected(AnActionEvent e, boolean state) {
      setSelected(state);
      StratergyAddMethodDialog.this.refreshTree();
    }

    public boolean isSelected() {
      return myProject.getComponent(ProjectPluginManager.class).getPrefsComponent(PersistentOptions_PreferencesComponent.class).getStateObject().sortAlphabetically;
    }

    public void setSelected(boolean state) {
      myProject.getComponent(ProjectPluginManager.class).getPrefsComponent(PersistentOptions_PreferencesComponent.class).getStateObject().sortAlphabetically = state;
    }
  }
}
