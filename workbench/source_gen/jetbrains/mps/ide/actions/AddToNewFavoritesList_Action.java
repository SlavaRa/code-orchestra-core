package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.ide.projectPane.favorites.FavoritesUtil;
import com.intellij.openapi.project.Project;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.projectPane.favorites.MPSFavoritesManager;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.ui.InputValidator;
import jetbrains.mps.ide.projectPane.favorites.FavoritesProjectPane;
import java.util.List;
import javax.swing.tree.TreeNode;

public class AddToNewFavoritesList_Action extends GeneratedAction {
  private static final Icon ICON = new ImageIcon(AddToNewFavoritesList_Action.class.getResource("addFavoritesList.png"));
  protected static Log log = LogFactory.getLog(AddToNewFavoritesList_Action.class);

  public AddToNewFavoritesList_Action() {
    super("Add to New Favorites List", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      if (FavoritesUtil.isActiveFavorites(((Project) MapSequence.fromMap(_params).get("project")))) {
        event.getPresentation().setText("Send to New Favorites List");
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "AddToNewFavoritesList", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("treeNodes", event.getData(MPSDataKeys.LOGICAL_VIEW_NODES));
    if (MapSequence.fromMap(_params).get("treeNodes") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      MPSFavoritesManager favoritesManager = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSFavoritesManager.class);
      final String name = Messages.showInputDialog(((Project) MapSequence.fromMap(_params).get("project")), "Input new favorites list name", "Add New Favorites List", Messages.getInformationIcon(), "Unnamed", new InputValidator() {
        public boolean checkInput(String p0) {
          return true;
        }

        public boolean canClose(String p0) {
          return true;
        }
      });
      favoritesManager.addNewFavoritesList(name);
      FavoritesProjectPane pane = FavoritesUtil.getCurrentPane(((Project) MapSequence.fromMap(_params).get("project")));
      List<Object> toMove = FavoritesUtil.getObjects(((List<TreeNode>) MapSequence.fromMap(_params).get("treeNodes")));
      if (pane != null) {
        favoritesManager.removeRoots(pane.getSubId(), toMove);
      }
      favoritesManager.addRoots(name, toMove);
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "AddToNewFavoritesList", t);
      }
    }
  }
}
