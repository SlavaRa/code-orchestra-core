package jetbrains.mps.ide.actions;

/*Generated by MPS */

import javax.swing.JCheckBox;
import com.intellij.openapi.project.Project;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public abstract class BaseMethodUpdateStrategy implements StratergyAddMethodDialog.AdditionStrategy {
  private JCheckBox myAddReturnKeyword;
  private JCheckBox myRemoveAttributes;
  private PersistentOptions_PreferencesComponent myPrefsComponent;

  public BaseMethodUpdateStrategy(Project p) {
    myPrefsComponent = p.getComponent(ProjectPluginManager.class).getPrefsComponent(PersistentOptions_PreferencesComponent.class);
    myAddReturnKeyword = new JCheckBox("Add \"return\" keyword");
    myAddReturnKeyword.setSelected(myPrefsComponent.getStateObject().addReturnsOnImplement);

    myRemoveAttributes = new JCheckBox("Remove Attributes");
    myRemoveAttributes.setSelected(myPrefsComponent.getStateObject().removeAttributes);
  }

  private void removeAttributes(SNode node) {
    if (SNodeOperations.isAttribute(node)) {
      SNodeOperations.deleteNode(node);
    } else {
      for (SNode child : SNodeOperations.getChildren(node)) {
        removeAttributes(child);
      }
    }
  }

  public JCheckBox getReturnCheckBox() {
    return myAddReturnKeyword;
  }

  public JCheckBox getRemoveAttributes() {
    return myRemoveAttributes;
  }

  public void updateMethod(SNode sourceMethod, SNode method) {
    myPrefsComponent.getStateObject().addReturnsOnImplement = myAddReturnKeyword.isSelected();
    myPrefsComponent.getStateObject().removeAttributes = myRemoveAttributes.isSelected();
    if (myRemoveAttributes.isSelected()) {
      for (SNode child : SNodeOperations.getChildren(method)) {
        removeAttributes(child);
      }
    }
  }

  public SNode getReturnStatement(SNode returnExpr) {
    if ((returnExpr == null)) {
      return null;
    }

    if (myAddReturnKeyword.isSelected()) {
      return new BaseMethodUpdateStrategy.QuotationClass_f5ta53_a0a0c0e().createNode(returnExpr);
    } else {
      return new BaseMethodUpdateStrategy.QuotationClass_f5ta53_a0a0a2a4().createNode(returnExpr);
    }
  }

  public static class QuotationClass_f5ta53_a0a0c0e {
    public QuotationClass_f5ta53_a0a0c0e() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("expression", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_f5ta53_a0a0a2a4 {
    public QuotationClass_f5ta53_a0a0a2a4() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("expression", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }
}
