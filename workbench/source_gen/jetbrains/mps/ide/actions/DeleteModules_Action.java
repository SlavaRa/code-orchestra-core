package jetbrains.mps.ide.actions;

/*Generated by MPS */

import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;

import jetbrains.mps.reloading.ClassLoaderManager;
import jetbrains.mps.util.annotation.CodeOrchestraPatch;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.List;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.DevKit;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.workbench.dialogs.DeleteDialog;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.workbench.actions.module.DeleteModuleHelper;

public class DeleteModules_Action extends GeneratedAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(DeleteModules_Action.class);

  public DeleteModules_Action() {
    super("Delete Module...", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  @CodeOrchestraPatch
  protected boolean isEnabledInASView() {
    return false; // CO-5051
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (((Integer) MapSequence.fromMap(_params).get("selSize")) == 0) {
      return false;
    }
    if (((Integer) MapSequence.fromMap(_params).get("selSize")) != ((List<IModule>) MapSequence.fromMap(_params).get("modules")).size()) {
      return false;
    }
    for (IModule module : ListSequence.fromList(((List<IModule>) MapSequence.fromMap(_params).get("modules")))) {
      if (!(module instanceof Solution || module instanceof Language || module instanceof DevKit)) {
        return false;
      }
    }
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "DeleteModules", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("modules", event.getData(MPSDataKeys.MODULES));
    if (MapSequence.fromMap(_params).get("modules") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("selSize", event.getData(MPSDataKeys.LOGICAL_VIEW_SELECTION_SIZE));
    if (MapSequence.fromMap(_params).get("selSize") == null) {
      return false;
    }
    return true;
  }

  @CodeOrchestraPatch
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      String message = "Are you sure you want to delete selected modules? This operation is not undoable.";
      final DeleteDialog dialog = new DeleteDialog(((Project) MapSequence.fromMap(_params).get("project")), "Delete Modules", message);
      dialog.setOptions(false, false, true, false);
      dialog.show();
      if (!(dialog.isOK())) {
        return;
      }
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          for (IModule module : ListSequence.fromList(((List<IModule>) MapSequence.fromMap(_params).get("modules")))) {
            DeleteModuleHelper.deleteModule(((Project) MapSequence.fromMap(_params).get("project")), module, dialog.isSafe(), dialog.isDeleteFiles());
          }
          ClassLoaderManager.getInstance().reloadAll(new EmptyProgressIndicator());
        }
      });
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "DeleteModules", t);
      }
    }
  }
}
