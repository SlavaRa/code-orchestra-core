package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.projectPane.favorites.FavoritesUtil;
import org.jetbrains.annotations.Nullable;

public class FavoritesPopupWrapper_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(FavoritesPopupWrapper_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.FavoritesPopupWrapper_ActionGroup";

  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());

  public FavoritesPopupWrapper_ActionGroup() {
    super("FavoritesPopupWrapper", ID);
    this.setIsInternal(false);
    this.setPopup(true);
    try {
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }

  public void doUpdate(AnActionEvent event) {
    try {
      Project project = event.getData(MPSDataKeys.PROJECT);
      String text = ((FavoritesUtil.isActiveFavorites(project) ?
        "Send" :
        "Add"
      )) + " to Favorites";
      event.getPresentation().setText(text);
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }

  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }

  public boolean isStrict() {
    return false;
  }
}
