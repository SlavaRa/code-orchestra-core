package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class AddConceptMethodStrategy implements StratergyAddMethodDialog.ContainerStrategy {
  private SNode myBehavior;
  private SNode myContextMethod;

  public AddConceptMethodStrategy(final SNode node) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        myBehavior = SNodeOperations.getAncestor(node, "jetbrains.mps.lang.behavior.structure.ConceptBehavior", true, false);
        myContextMethod = SNodeOperations.getAncestor(node, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", true, false);
      }
    });
  }

  public List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> doAddMethods(List<SNode> baseMethods) {
    boolean insertion = (myContextMethod != null) && SNodeOperations.getParent(myContextMethod) == myBehavior;
    List<StratergyAddMethodDialog.ContainerStrategy.MethodAddition> methods = new ArrayList<StratergyAddMethodDialog.ContainerStrategy.MethodAddition>();
    for (SNode m : baseMethods) {
      SNode methodNode = SNodeOperations.cast(m, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration");
      SNode method = ((SNode) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(methodNode, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "call_getMethodToImplement_69709522611978987", new Class[]{SNode.class, SNode.class}, myBehavior));
      methods.add(new StratergyAddMethodDialog.ContainerStrategy.MethodAddition(methodNode, method));
      SPropertyOperations.set(method, "isAbstract", "" + false);
      SLinkOperations.setTarget(method, "body", SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(myBehavior), "jetbrains.mps.baseLanguage.structure.StatementList", null), true);
      SLinkOperations.setTarget(method, "overriddenMethod", methodNode, false);
      SPropertyOperations.set(method, "isVirtual", "" + false);

      if (insertion) {
        ListSequence.fromList(SLinkOperations.getTargets(myBehavior, "method", true)).insertElement(ListSequence.fromList(SLinkOperations.getTargets(myBehavior, "method", true)).indexOf(myContextMethod) + 1, method);
      } else {
        ListSequence.fromList(SLinkOperations.getTargets(myBehavior, "method", true)).addElement(method);
      }
    }
    return methods;
  }

  private Integer getSuperBehavioursCount(SNode node) {
    SNode conceptBehavior = SNodeOperations.as(node, "jetbrains.mps.lang.behavior.structure.ConceptBehavior");
    if ((conceptBehavior == null)) {
      return 0;
    }
    SNode concept = ((SNode) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(conceptBehavior, "jetbrains.mps.lang.structure.structure.IConceptAspect"), "virtual_getBaseConcept_2621449412040133768", new Class[]{SNode.class}));
    if ((concept == null)) {
      return 0;
    }
    return ListSequence.fromList(SConceptOperations.getAllSuperConcepts(concept, false)).count();
  }

  public int compareContainers(SNode c1, SNode c2) {
    return getSuperBehavioursCount(c2).compareTo(getSuperBehavioursCount(c1));
  }

  public SNode getMainContainer() {
    return myBehavior;
  }

  public SNode getContainer(SNode methodDecl) {
    return SNodeOperations.getAncestor(methodDecl, "jetbrains.mps.lang.behavior.structure.ConceptBehavior", true, false);
  }
}
