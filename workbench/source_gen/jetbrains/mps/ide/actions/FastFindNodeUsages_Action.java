package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedAction;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.ide.findusages.model.IResultProvider;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;
import jetbrains.mps.smodel.IOperationContext;

public class FastFindNodeUsages_Action extends GeneratedAction {
  private static final Icon ICON = new ImageIcon(FastFindNodeUsages_Action.class.getResource("find.png"));
  protected static Log log = LogFactory.getLog(FastFindNodeUsages_Action.class);

  public FastFindNodeUsages_Action() {
    super("Find Usages (Without Options Dialog)", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  protected boolean isEnabledInASView() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return FastFindNodeUsages_Action.this.getTool(_params) != null;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "FastFindNodeUsages", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSDataKeys.NODE);
      if (node != null) {
      }
      MapSequence.fromMap(_params).put("node", node);
    }
    if (MapSequence.fromMap(_params).get("node") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("cell", event.getData(MPSDataKeys.EDITOR_CELL));
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      SNode operationNode = (((EditorCell) MapSequence.fromMap(_params).get("cell")) != null ?
        ((EditorCell) MapSequence.fromMap(_params).get("cell")).getSNodeWRTReference() :
        ((SNode) MapSequence.fromMap(_params).get("node"))
      );
      IResultProvider provider = (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get("node")), "jetbrains.mps.lang.structure.structure.ConceptDeclaration") ?
        FindUtils.makeProvider(FindUtils.getFinderByClassName("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder"), FindUtils.getFinderByClassName("jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder")) :
        FindUtils.makeProvider(FindUtils.getFinderByClassName("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder"))
      );
      SearchQuery query = new SearchQuery(operationNode, GlobalScope.getInstance());
      FastFindNodeUsages_Action.this.getTool(_params).findUsages(provider, query, true, false, false, "No usages for that node");
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "FastFindNodeUsages", t);
      }
    }
  }

  private UsagesViewTool getTool(final Map<String, Object> _params) {
    return ((IOperationContext) MapSequence.fromMap(_params).get("context")).getComponent(UsagesViewTool.class);
  }
}
