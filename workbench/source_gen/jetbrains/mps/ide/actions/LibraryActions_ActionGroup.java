package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.actions.GeneratedActionGroup;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.workbench.action.LabelledAnchor;
import com.intellij.openapi.actionSystem.ex.ActionManagerEx;
import com.intellij.openapi.extensions.PluginId;

public class LibraryActions_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = Logger.getLogger(LibraryActions_ActionGroup.class);
  public static final String ID = "jetbrains.mps.ide.actions.LibraryActions_ActionGroup";
  public static final String LABEL_ID_check = ID + "check";
  public static final String LABEL_ID_contents = ID + "contents";
  public static final String LABEL_ID_favorites = ID + "favorites";
  public static final String LABEL_ID_vcs = ID + "vcs";

  public LibraryActions_ActionGroup() {
    super("LibraryActions", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
      {
        LabelledAnchor action = new LabelledAnchor(LibraryActions_ActionGroup.LABEL_ID_check);
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
        LibraryActions_ActionGroup.this.addAction(action);
      }
      LibraryActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.OptimizeModuleImports_Action");
      LibraryActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.ShowModuleDependencies_Action");
      LibraryActions_ActionGroup.this.addSeparator();
      LibraryActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.AddModuleToProject_Action");
      LibraryActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.RemoveModuleFromProject_Action");
      LibraryActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.DeleteModules_Action");
      LibraryActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.CopyModuleName_Action");
      LibraryActions_ActionGroup.this.addSeparator();
      {
        LabelledAnchor action = new LabelledAnchor(LibraryActions_ActionGroup.LABEL_ID_contents);
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
        LibraryActions_ActionGroup.this.addAction(action);
      }
      LibraryActions_ActionGroup.this.addSeparator();
      LibraryActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.SetModuleFolder_Action");
      LibraryActions_ActionGroup.this.addSeparator();
      {
        LabelledAnchor action = new LabelledAnchor(LibraryActions_ActionGroup.LABEL_ID_favorites);
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
        LibraryActions_ActionGroup.this.addAction(action);
      }
      LibraryActions_ActionGroup.this.addSeparator();
      {
        LabelledAnchor action = new LabelledAnchor(LibraryActions_ActionGroup.LABEL_ID_vcs);
        ActionManagerEx manager = ActionManagerEx.getInstanceEx();
        manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
        LibraryActions_ActionGroup.this.addAction(action);
      }
      LibraryActions_ActionGroup.this.addSeparator();
      LibraryActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.ModuleProperties_Action");
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }
}
