package jetbrains.mps.ide.actions;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.BoxLayout;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ImplementMethodStrategy extends BaseMethodUpdateStrategy {
  public ImplementMethodStrategy(Project project) {
    super(project);
  }

  public String getTitle() {
    return "Implement Method";
  }

  public JComponent createAdditionalOptionsComponent() {
    JPanel optPanel = new JPanel();
    optPanel.setLayout(new BoxLayout(optPanel, BoxLayout.Y_AXIS));
    optPanel.add(getReturnCheckBox());
    optPanel.add(getRemoveAttributes());
    getReturnCheckBox();
    return optPanel;
  }

  public void updateMethod(SNode sourceMethod, SNode method) {
    super.updateMethod(sourceMethod, method);
    SNode defaultReturnExpr = ((SNode) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(SLinkOperations.getTarget(method, "returnType", true), "jetbrains.mps.baseLanguage.structure.Type"), "virtual_createDefaultTypeExpression_3359611512358152580", new Class[]{SNode.class}));
    if ((defaultReturnExpr != null)) {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(getReturnStatement(defaultReturnExpr));
    }
  }
}
