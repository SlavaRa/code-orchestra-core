import org.jetbrains.jps.Module
import static org.jetbrains.jps.idea.IdeaProjectLoader.*

includeTargets << new File("scripts/utils.gant")

target('default': "Developers update") {
  layoutFull(home, deploy)
}

def layoutFull(String home, String targetDirectory) {
  project.stage("layout to $targetDirectory")

  ant.patternset(id: "resources.included") {
    include(name: "**/*.properties")
    include(name: "fileTemplates/**/*")
    include(name: "inspectionDescriptions/**/*")
    include(name: "intentionDescriptions/**/*")
    include(name: "tips/**/*")
  }

  ant.patternset(id: "resources.excluded") {
    exclude(name: "**/*.properties")
    exclude(name: "fileTemplates/**/*")
    exclude(name: "fileTemplates")
    exclude(name: "inspectionDescriptions/**/*")
    exclude(name: "inspectionDescriptions")
    exclude(name: "intentionDescriptions/**/*")
    exclude(name: "intentionDescriptions")
    exclude(name: "tips/**/*")
    exclude(name: "tips")
  }

  ant.patternset(id: "sources") {
    include(name: "**/*.java")
  }

  layout(targetDirectory) {
    zip("platform.zip") {
      dir("lib") {
        jar("util.jar") {
          module("util")
        }
        jar("platform-api.jar") {
          platformApiModules().each { module it}
        }
        jar("annotations.jar") {
          module("annotations")
        }
        jar("extensions.jar") {
          module("extensions")
        }
        jar("platform.jar") {
          platformImplementationModules().each { module it}
        }
        jar("bootstrap.jar") {
          module("bootstrap")
        }
        jar("resources.jar") {
          module("resources"){
            exclude(name: "**/IdeaPlugin.xml")
            exclude(name: "componentSets/*")
          }
          module("community-resources"){
            exclude(name: "idea/**/*")
            exclude(name: "**/*.png")
          }
          module("platform-resources") {
            exclude(name: "META-INF/LangExtensions.xml")
            exclude(name: "META-INF/PlatformLangPlugin.xml")
            exclude(name: "META-INF/PlatformLangXmlPlugin.xml")
            exclude(name: "META-INF/XmlPlugin.xml")
            exclude(name: "META-INF/XmlActions.xml")
          }
        }
        jar("resources_en.jar") {
          module("resources-en")
          module("platform-resources-en")
        }
        jar("forms_rt.jar") {
          module("forms_rt")
          module("forms-compiler")
        }
        jar("icons.jar") {
          module("icons")
        }
        jar("boot.jar") {
          module("boot")
        }

        fileset(dir: "$home/lib") {
          include(name: "*.jar")

          //these libs from repository are not required
          exclude(name: "dtdparser113.jar")
          exclude(name: "foundrylogic-vpp-2.2.1.jar")
          exclude(name: "groovy-all-1.7.3.jar")
          exclude(name: "jaxen-1.1.1.jar")
          exclude(name: "automaton.jar")
          exclude(name: "jaxen-1.1.3.jar")
          exclude(name: "junit-4.8.jar")
          exclude(name: "junit.jar")
          exclude(name: "winp-1.14.jar")

          //this is replaced by MPS asm.jar, which contains more packages
          exclude(name: "asm.jar")
          exclude(name: "asm-commons.jar")

          /**
           * the following libs are required for build (see required_for_dist.txt),
           * but MPS works normally without them
           */
          exclude(name: "jcip-annotations.jar")
          exclude(name: "jsr173_1.0_api.jar")
          exclude(name: "org.eclipse.jdt.core_3.5.2.v_981_R35x.jar")
          exclude(name: "resolver.jar")
          exclude(name: "serviceMessages.jar")
          exclude(name: "velocity.jar")
          exclude(name: "xbean.jar")
          exclude(name: "xerces.jar")

          //platform exclude
          exclude(name: "eawtstub.jar")
        }
        fileset(dir: "$home/lib/src") {
          include(name: "trove4j_changes.txt")
          include(name: "trove4j_src.jar")
        }
        dir("ant") {
          fileset(dir: "$home/lib/ant") {
            exclude(name: "**/src/**")
          }
        }
      }

      dir("plugins") {
        layoutPlugin("git4idea") {
          fileset(dir: "$home/plugins/git4idea/lib", excludes: "**/trilead-ssh2-src.zip")
        }

        layoutPlugin("svn4idea") {
          fileset(dir: "$home/plugins/svn4idea/lib", excludes: "**/svnkitsrc.zip")
        }

        dir("cvsIntegration") {
          dir("lib") {
            jar("cvs_util.jar") {noResources("cvs-core")}
            jar("cvsIntegration.jar") {noResources("cvs-plugin")}
            jar("javacvs-src.jar") {noResources("javacvs-src")}
            jar("smartcvs-src.jar") {noResources("smartcvs-src")}

            resources(["cvs-core", "cvs-plugin", "javacvs-src", "smartcvs-src"])

            fileset(dir: "${home}/plugins/cvs/lib")
          }
        }
      }
    }

    zip("platform.src.zip") {
      project.modules.values().each {Module m ->
        if (m["used"] != null && hasSourceRoots(m)) {
          dir(m.name) {
            m.sourceRoots.each {
              fileset(dir: it)
            }
          }
        }
      }
    }
  }

  printUnusedModules()
}

//------------platform

private List platformImplementationModules() {
  return [
          "platform-impl",
          "platform-main",
          "lvcs-impl",
          "vcs-impl",
          "lang-impl",
          "testRunner",
          "smRunner",
          "xdebugger-impl",
          "testFramework",
          "tests_bootstrap",
          "xml",
          "images",
          "execution-openapi",
          "execution-impl"
  ]
}

private List<String> platformApiModules() {
  return [
          "platform-api",
          "lvcs-api",
          "vcs-api",
          "lang-api",
          "usageView",
          "xdebugger-api",
          "xml-openapi"
  ]
}

//------------custom layouters

def layoutPlugin(String moduleName, Closure custom) {
  layoutPlugin(moduleName, moduleName, custom)
}

def layoutPlugin(String pluginName, String moduleName, Closure custom) {
  layoutPlugin(pluginName, moduleName, pluginName, custom)
}

def layoutPlugin(String pluginName, String moduleName, String jarName, Closure custom) {
  dir(pluginName) {
    dir("lib") {
      jar("${jarName}.jar") {
        noResources(moduleName)
      }

      resources(moduleName)
      custom()
    }
  }
}

private def resources(List<String> modules) {
  jar("resources_en.jar") {
    modules.each {
      module(it) {
        patternset(refid: "resources.included")
      }
    }
  }
}

private def resources(String moduleName) {
  jar("resources_en.jar") {
    module(moduleName) {
      patternset(refid: "resources.included")
    }
  }
}

private def noResources(String moduleName) {
  module(moduleName) {
    patternset(refid: "resources.excluded")
  }
}

//------------modules

def module(String name) {
  ant.module(name: name)
  markUsed(name)
}

def module(String name, Closure init) {
  ant.module(name: name, init)
  markUsed(name)
}

//------------unused modules detection

private def markUsed(String name) {
  def module = project.modules[name]
  // Can be null in "Developers update" since we are not actually loading modules.xml
  if (module != null) {
    module["used"] = true
  }
}

def printUnusedModules() {
  project.modules.values().each {Module m ->
    if (m["used"] == null && hasSourceRoots(m)) {
      project.warning("Module ${m.getName()} is not used in project layout")
    }
  }
}

boolean hasSourceRoots(Module module) {
  !module.sourceRoots.isEmpty()
}
