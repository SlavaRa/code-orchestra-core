/* The following code was generated by JFlex 1.4.3 on 02.10.12 17:55 */

/*
 *
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package org.apache.flex.compiler.internal.parsing.as;

/*
 * This file is generated from RawASTokenizer.lex.
 * DO NOT MAKE EDITS DIRECTLY TO THIS FILE. 
 * THEY WILL BE LOST WHEN THE FILE IS GENERATED AGAIN.
 */

import antlr.Token;
import antlr.CommonToken;
import org.apache.flex.compiler.constants.IASLanguageConstants;
import org.apache.flex.compiler.constants.IASKeywordConstants;

@SuppressWarnings("all")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 02.10.12 17:55 from the specification file
 * <tt>C:/CodeOrchestra/falcon_compiler/compiler/src/org/apache/flex/compiler/internal/parsing/as/RawASTokenizer.lex</tt>
 */
public final class RawASTokenizer extends BaseRawASTokenizer implements ASTokenTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int E4XSTRINGLITERAL = 34;
  public static final int CHARLITERAL_IGNORE = 26;
  public static final int E4XTEXTVALUE = 38;
  public static final int DIRECTIVE = 16;
  public static final int MARKUP = 32;
  public static final int E4XCHARLITERAL = 36;
  public static final int STRINGLITERAL = 10;
  public static final int ESCAPE_SEQUENCE = 12;
  public static final int ENTITY_RETURN = 20;
  public static final int TYPED_COLLECTION = 6;
  public static final int CDATA = 28;
  public static final int COMMENT = 2;
  public static final int STRINGLITERAL_IGNORE = 24;
  public static final int MARKUP_IGNORE = 22;
  public static final int STATE = 18;
  public static final int E4XCOMMENT = 30;
  public static final int TYPED_COLLECTION_LITERAL = 8;
  public static final int YYINITIAL = 0;
  public static final int ASDOC_COMMENT = 4;
  public static final int E4X = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\17\1\22\1\21\1\51\1\0\1\21\1\50\16\17\4\0\1\21"+
    "\1\74\1\63\1\24\1\14\1\72\1\23\1\64\1\103\1\104\1\54"+
    "\1\4\1\102\1\5\1\6\1\53\1\10\11\1\1\20\1\25\1\71"+
    "\1\70\1\73\1\100\1\101\1\32\1\7\1\27\1\26\1\2\1\7"+
    "\1\34\1\14\1\30\2\14\1\33\1\31\1\112\1\107\1\111\2\14"+
    "\1\36\1\35\3\14\1\11\1\110\1\14\1\55\1\16\1\56\1\75"+
    "\1\15\1\0\1\37\1\65\2\7\1\3\1\66\1\44\1\61\3\14"+
    "\1\46\1\40\1\60\1\42\1\41\1\47\1\57\1\43\1\45\1\13"+
    "\1\67\1\62\1\12\2\14\1\105\1\76\1\106\1\77\41\17\1\21"+
    "\1\0\4\14\4\0\1\14\2\0\1\17\7\0\1\14\4\0\1\14"+
    "\5\0\27\14\1\0\37\14\1\0\u013f\14\31\0\162\14\4\0\14\14"+
    "\16\0\5\14\11\0\1\14\21\0\130\17\5\0\23\17\12\0\1\14"+
    "\13\0\1\14\1\0\3\14\1\0\1\14\1\0\24\14\1\0\54\14"+
    "\1\0\46\14\1\0\5\14\4\0\202\14\1\0\4\17\3\0\105\14"+
    "\1\0\46\14\2\0\2\14\6\0\20\14\41\0\46\14\2\0\1\14"+
    "\7\0\47\14\11\0\21\17\1\0\27\17\1\0\3\17\1\0\1\17"+
    "\1\0\2\17\1\0\1\17\13\0\33\14\5\0\3\14\15\0\4\17"+
    "\14\0\6\17\13\0\32\14\5\0\13\14\16\17\7\0\12\17\4\0"+
    "\2\14\1\17\143\14\1\0\1\14\10\17\1\0\6\17\2\14\2\17"+
    "\1\0\4\17\2\14\12\17\3\14\2\0\1\14\17\0\1\17\1\14"+
    "\1\17\36\14\33\17\2\0\3\14\60\0\46\14\13\17\1\14\u014f\0"+
    "\3\17\66\14\2\0\1\17\1\14\20\17\2\0\1\14\4\17\3\0"+
    "\12\14\2\17\2\0\12\17\21\0\3\17\1\0\10\14\2\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\1\14\3\0\4\14\2\0\1\17"+
    "\1\14\7\17\2\0\2\17\2\0\3\17\11\0\1\17\4\0\2\14"+
    "\1\0\3\14\2\17\2\0\12\17\4\14\15\0\3\17\1\0\6\14"+
    "\4\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14\1\0\2\14"+
    "\1\0\2\14\2\0\1\17\1\0\5\17\4\0\2\17\2\0\3\17"+
    "\13\0\4\14\1\0\1\14\7\0\14\17\3\14\14\0\3\17\1\0"+
    "\11\14\1\0\3\14\1\0\26\14\1\0\7\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\17\1\14\10\17\1\0\3\17\1\0\3\17\2\0"+
    "\1\14\17\0\2\14\2\17\2\0\12\17\1\0\1\14\17\0\3\17"+
    "\1\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\17\1\14\6\17\3\0\2\17\2\0\3\17"+
    "\10\0\2\17\4\0\2\14\1\0\3\14\4\0\12\17\1\0\1\14"+
    "\20\0\1\17\1\14\1\0\6\14\3\0\3\14\1\0\4\14\3\0"+
    "\2\14\1\0\1\14\1\0\2\14\3\0\2\14\3\0\3\14\3\0"+
    "\10\14\1\0\3\14\4\0\5\17\3\0\3\17\1\0\4\17\11\0"+
    "\1\17\17\0\11\17\11\0\1\14\7\0\3\17\1\0\10\14\1\0"+
    "\3\14\1\0\27\14\1\0\12\14\1\0\5\14\4\0\7\17\1\0"+
    "\3\17\1\0\4\17\7\0\2\17\11\0\2\14\4\0\12\17\22\0"+
    "\2\17\1\0\10\14\1\0\3\14\1\0\27\14\1\0\12\14\1\0"+
    "\5\14\2\0\1\17\1\14\7\17\1\0\3\17\1\0\4\17\7\0"+
    "\2\17\7\0\1\14\1\0\2\14\4\0\12\17\22\0\2\17\1\0"+
    "\10\14\1\0\3\14\1\0\27\14\1\0\20\14\4\0\6\17\2\0"+
    "\3\17\1\0\4\17\11\0\1\17\10\0\2\14\4\0\12\17\22\0"+
    "\2\17\1\0\22\14\3\0\30\14\1\0\11\14\1\0\1\14\2\0"+
    "\7\14\3\0\1\17\4\0\6\17\1\0\1\17\1\0\10\17\22\0"+
    "\2\17\15\0\60\14\1\17\2\14\7\17\4\0\10\14\10\17\1\0"+
    "\12\17\47\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14\2\0"+
    "\1\14\6\0\4\14\1\0\7\14\1\0\3\14\1\0\1\14\1\0"+
    "\1\14\2\0\2\14\1\0\4\14\1\17\2\14\6\17\1\0\2\17"+
    "\1\14\2\0\5\14\1\0\1\14\1\0\6\17\2\0\12\17\2\0"+
    "\2\14\42\0\1\14\27\0\2\17\6\0\12\17\13\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\2\17\10\14\1\0\42\14\6\0\24\17"+
    "\1\0\2\17\4\14\4\0\10\17\1\0\44\17\11\0\1\17\71\0"+
    "\42\14\1\0\5\14\1\0\2\14\1\0\7\17\3\0\4\17\6\0"+
    "\12\17\6\0\6\14\4\17\106\0\46\14\12\0\51\14\7\0\132\14"+
    "\5\0\104\14\5\0\122\14\6\0\7\14\1\0\77\14\1\0\1\14"+
    "\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\47\14"+
    "\1\0\1\14\1\0\4\14\2\0\37\14\1\0\1\14\1\0\4\14"+
    "\2\0\7\14\1\0\1\14\1\0\4\14\2\0\7\14\1\0\7\14"+
    "\1\0\27\14\1\0\37\14\1\0\1\14\1\0\4\14\2\0\7\14"+
    "\1\0\47\14\1\0\23\14\16\0\11\17\56\0\125\14\14\0\u026c\14"+
    "\2\0\10\14\11\0\1\21\32\14\5\0\113\14\3\0\3\14\17\0"+
    "\15\14\1\0\4\14\3\17\13\0\22\14\3\17\13\0\22\14\2\17"+
    "\14\0\15\14\1\0\3\14\1\0\2\17\14\0\64\14\40\17\3\0"+
    "\1\14\3\0\2\14\1\17\2\0\12\17\41\0\3\17\1\21\1\0"+
    "\12\17\6\0\130\14\10\0\51\14\1\17\126\0\35\14\3\0\14\17"+
    "\4\0\14\17\12\0\12\17\36\14\2\0\5\14\u038b\0\154\14\224\0"+
    "\234\14\4\0\132\14\6\0\26\14\2\0\6\14\2\0\46\14\2\0"+
    "\6\14\2\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\37\14\2\0\65\14\1\0\7\14\1\0\1\14\3\0\3\14\1\0"+
    "\7\14\3\0\4\14\2\0\6\14\4\0\15\14\5\0\3\14\1\0"+
    "\7\14\3\0\13\21\1\0\4\17\30\0\1\52\1\52\5\17\1\21"+
    "\17\0\2\14\23\0\1\14\12\0\1\21\4\17\6\0\6\17\1\0"+
    "\1\14\15\0\1\14\40\0\22\14\36\0\15\17\4\0\1\17\3\0"+
    "\6\17\27\0\1\14\4\0\1\14\2\0\12\14\1\0\1\14\3\0"+
    "\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0\4\14\1\0"+
    "\3\14\1\0\7\14\3\0\3\14\5\0\5\14\26\0\44\14\u0e7c\0"+
    "\1\21\4\0\3\14\31\0\11\14\6\17\1\0\5\14\2\0\5\14"+
    "\4\0\126\14\2\0\2\17\2\0\3\14\1\0\137\14\5\0\50\14"+
    "\4\0\136\14\21\0\30\14\70\0\20\14\u0200\0\u19b6\14\112\0\u51a6\14"+
    "\132\0\u048d\14\u0773\0\u2ba4\14\u215c\0\u012e\14\2\0\73\14\225\0\7\14"+
    "\14\0\5\14\5\0\1\14\1\17\12\14\1\0\15\14\1\0\5\14"+
    "\1\0\1\14\1\0\2\14\1\0\2\14\1\0\154\14\41\0\u016b\14"+
    "\22\0\100\14\2\0\66\14\50\0\15\14\3\0\20\17\20\0\4\17"+
    "\17\0\2\14\30\0\3\14\31\0\1\14\6\0\5\14\1\0\207\14"+
    "\2\0\1\17\4\0\1\14\13\0\12\17\7\0\32\14\4\0\1\14"+
    "\1\0\32\14\12\0\132\14\3\0\6\14\2\0\6\14\2\0\6\14"+
    "\2\0\3\14\3\0\2\14\3\0\2\14\22\0\3\17\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\0\3\3\2\1\1\4\3\0"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\6\1\5"+
    "\1\13\1\3\1\14\1\15\1\7\1\16\1\17\1\20"+
    "\1\21\2\7\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\4\1\1\43\1\44\1\45\1\43"+
    "\1\46\1\47\1\1\1\50\1\51\1\52\1\53\3\54"+
    "\1\55\1\56\2\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\67\1\71\1\72\2\1"+
    "\1\73\1\2\1\73\1\3\1\74\1\75\1\76\1\77"+
    "\1\3\1\100\1\101\1\3\4\1\1\102\1\103\1\102"+
    "\1\4\1\73\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\3\1\1\113\1\114\2\115\1\116\1\115\1\117"+
    "\1\120\1\121\1\0\1\6\1\0\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\2\0\1\130\1\131\1\132\1\7"+
    "\2\0\1\133\1\134\1\0\1\135\1\136\2\7\1\137"+
    "\1\0\1\140\1\141\1\142\1\143\1\144\1\145\1\146"+
    "\1\147\1\150\1\151\2\0\1\152\2\0\1\153\1\0"+
    "\1\154\3\0\1\155\1\156\1\157\1\0\1\160\1\161"+
    "\5\0\1\102\1\162\6\0\1\6\1\0\1\163\1\164"+
    "\1\0\1\165\1\7\1\166\2\133\1\134\1\167\1\0"+
    "\1\7\1\170\1\171\1\172\1\173\1\174\1\175\1\176"+
    "\1\0\1\177\1\0\1\157\1\0\1\200\7\0\1\201"+
    "\1\202\1\102\11\0\1\7\1\203\1\0\1\7\1\204"+
    "\3\0\1\205\5\0\1\102\1\206\3\0\1\207\1\0"+
    "\1\210\1\7\10\0\1\4\1\211\1\0\1\212\17\0"+
    "\1\213\4\0\1\214\12\0\1\215";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0465"+
    "\0\u04b0\0\u04fb\0\u0546\0\u02a3\0\u0591\0\u05dc\0\u0627\0\u0672"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u02a3\0\u087f"+
    "\0\u08ca\0\u0915\0\u02a3\0\u02a3\0\u0960\0\u09ab\0\u02a3\0\u02a3"+
    "\0\u09f6\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u02a3"+
    "\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u0c03"+
    "\0\u0c4e\0\u0c99\0\u0ce4\0\u02a3\0\u0d2f\0\u0d7a\0\u0dc5\0\u02a3"+
    "\0\u02a3\0\u02a3\0\u02a3\0\u0e10\0\u02a3\0\u02a3\0\u02a3\0\u0e5b"+
    "\0\u0ea6\0\u02a3\0\u02a3\0\u0ef1\0\u02a3\0\u02a3\0\u02a3\0\u02a3"+
    "\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u0f3c\0\u0f87\0\u02a3"+
    "\0\u0fd2\0\u101d\0\u1068\0\u02a3\0\u10b3\0\u10fe\0\u1149\0\u02a3"+
    "\0\u02a3\0\u02a3\0\u02a3\0\u1194\0\u02a3\0\u02a3\0\u11df\0\u122a"+
    "\0\u1275\0\u12c0\0\u130b\0\u1356\0\u02a3\0\u13a1\0\u13ec\0\u1437"+
    "\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u02a3\0\u1482"+
    "\0\u14cd\0\u1518\0\u02a3\0\u02a3\0\u02a3\0\u1482\0\u1563\0\u1518"+
    "\0\u02a3\0\u02a3\0\u02a3\0\u15ae\0\u15f9\0\u0753\0\u02a3\0\u02a3"+
    "\0\u02a3\0\u02a3\0\u1644\0\u02a3\0\u168f\0\u16da\0\u02a3\0\u1725"+
    "\0\u02a3\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7\0\u17bb"+
    "\0\u02a3\0\u1932\0\u197d\0\u19c8\0\u1a13\0\u02a3\0\u1a5e\0\u02a3"+
    "\0\u02a3\0\u02a3\0\u1aa9\0\u1af4\0\u02a3\0\u02a3\0\u1b3f\0\u0c03"+
    "\0\u0c4e\0\u02a3\0\u0c99\0\u0ce4\0\u02a3\0\u0dc5\0\u02a3\0\u1b8a"+
    "\0\u1bd5\0\u1c20\0\u02a3\0\u1c6b\0\u1cb6\0\u1d01\0\u02a3\0\u02a3"+
    "\0\u1068\0\u10fe\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d\0\u02a3\0\u1e78"+
    "\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u203a\0\u02a3"+
    "\0\u168f\0\u2085\0\u02a3\0\u20d0\0\u211b\0\u2166\0\u02a3\0\u21b1"+
    "\0\u21fc\0\u2247\0\u2292\0\u05dc\0\u02a3\0\u02a3\0\u02a3\0\u22dd"+
    "\0\u02a3\0\u02a3\0\u2328\0\u02a3\0\u0e5b\0\u2373\0\u23be\0\u02a3"+
    "\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u02a3"+
    "\0\u02a3\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u2742\0\u278d\0\u27d8"+
    "\0\u2823\0\u286e\0\u28b9\0\u2904\0\u02a3\0\u21fc\0\u294f\0\u02a3"+
    "\0\u299a\0\u29e5\0\u2a30\0\u02a3\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c"+
    "\0\u2ba7\0\u2bf2\0\u02a3\0\u2c3d\0\u2c88\0\u2cd3\0\u02a3\0\u2d1e"+
    "\0\u05dc\0\u2d69\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b"+
    "\0\u2f76\0\u2fc1\0\u300c\0\u02a3\0\u3057\0\u05dc\0\u30a2\0\u30ed"+
    "\0\u3138\0\u3183\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345"+
    "\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc\0\u02a3\0\u3507\0\u3552"+
    "\0\u359d\0\u35e8\0\u02a3\0\u3633\0\u367e\0\u36c9\0\u3714\0\u375f"+
    "\0\u37aa\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u02a3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\24\1\25\2\26\1\27\1\30\1\31\1\26\1\32"+
    "\5\26\1\33\1\24\1\34\2\35\1\36\1\24\1\37"+
    "\17\26\1\40\2\26\3\35\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\2\26\1\47\1\50\3\26\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\4\26\54\70\1\71"+
    "\36\70\54\72\1\73\36\72\2\74\2\75\2\74\1\76"+
    "\1\75\1\74\5\75\1\77\2\74\2\35\3\74\22\75"+
    "\3\35\1\74\1\100\2\74\4\75\2\74\3\75\3\74"+
    "\1\101\13\74\4\75\16\102\1\103\31\102\3\104\10\102"+
    "\1\105\1\106\26\102\12\107\1\110\1\111\2\107\1\112"+
    "\26\107\1\113\2\107\1\114\2\115\4\107\1\116\1\117"+
    "\2\107\1\120\1\121\1\122\1\123\1\124\23\107\21\125"+
    "\2\126\25\125\3\126\1\127\14\125\1\130\1\131\21\125"+
    "\100\132\1\133\12\132\1\134\3\135\3\134\7\135\1\136"+
    "\1\135\2\134\1\135\3\134\22\135\7\134\4\135\2\134"+
    "\3\135\17\134\4\135\113\0\63\137\1\140\1\141\4\137"+
    "\1\142\1\137\1\143\17\137\63\144\1\145\5\144\1\146"+
    "\21\144\64\147\1\145\4\147\1\146\21\147\56\150\1\151"+
    "\34\150\5\152\1\153\105\152\2\134\2\154\2\134\1\155"+
    "\1\154\1\134\1\154\1\156\3\154\2\134\1\157\2\126"+
    "\3\134\22\154\3\126\1\160\3\134\4\154\1\161\1\162"+
    "\3\154\1\163\1\164\1\134\1\165\11\134\1\166\1\167"+
    "\4\154\16\102\1\170\2\102\2\171\1\172\24\102\3\171"+
    "\10\102\1\173\5\102\1\174\37\102\1\170\2\102\2\171"+
    "\1\172\24\102\3\171\11\102\1\173\4\102\1\174\21\102"+
    "\16\175\1\176\2\175\2\177\1\200\24\175\3\177\16\175"+
    "\1\201\13\175\1\202\1\203\4\175\1\0\1\25\2\204"+
    "\2\0\1\205\1\0\1\25\103\0\3\26\3\0\7\26"+
    "\1\206\1\26\2\0\1\26\3\0\22\26\7\0\4\26"+
    "\2\0\3\26\17\0\4\26\4\0\1\207\63\0\1\210"+
    "\27\0\1\211\62\0\1\212\23\0\1\205\4\0\1\213"+
    "\1\0\1\205\60\0\1\214\22\0\1\25\2\204\2\0"+
    "\1\205\1\0\1\25\2\215\113\0\1\216\117\0\1\217"+
    "\113\0\2\35\25\0\3\35\63\0\1\220\44\0\1\221"+
    "\23\0\3\26\3\0\7\26\1\206\1\26\2\0\1\26"+
    "\3\0\22\26\7\0\2\26\1\222\1\26\2\0\3\26"+
    "\17\0\4\26\16\223\1\224\31\223\2\0\1\223\1\225"+
    "\1\226\1\227\12\223\1\230\22\223\70\0\1\231\23\0"+
    "\2\26\1\232\3\0\7\26\1\206\1\26\2\0\1\26"+
    "\3\0\22\26\7\0\4\26\2\0\3\26\17\0\4\26"+
    "\1\0\2\26\1\233\3\0\7\26\1\206\1\26\2\0"+
    "\1\26\3\0\22\26\7\0\4\26\2\0\3\26\17\0"+
    "\4\26\70\0\1\234\43\0\2\235\25\0\3\235\15\0"+
    "\1\236\1\237\1\0\1\240\107\0\1\241\112\0\1\242"+
    "\2\0\1\243\107\0\1\244\112\0\1\245\112\0\1\246"+
    "\5\0\1\247\14\0\54\250\1\251\111\250\1\252\1\251"+
    "\36\250\54\253\1\254\111\253\1\255\1\254\36\253\1\0"+
    "\3\75\3\0\7\75\1\256\1\75\2\0\1\75\3\0"+
    "\22\75\7\0\4\75\2\0\3\75\17\0\4\75\71\0"+
    "\1\257\34\0\1\260\147\0\3\104\41\0\3\261\3\0"+
    "\2\261\15\0\2\261\2\0\1\261\4\0\1\261\25\0"+
    "\2\261\25\0\3\262\3\0\2\262\15\0\2\262\2\0"+
    "\1\262\4\0\1\262\25\0\2\262\75\0\1\115\62\0"+
    "\2\126\25\0\3\126\133\0\1\263\21\0\2\264\3\0"+
    "\1\264\1\0\5\264\2\0\1\264\5\0\22\264\3\0"+
    "\1\265\3\0\4\264\2\0\3\264\4\0\1\266\3\0"+
    "\1\267\6\0\4\264\100\132\1\0\12\132\73\102\1\270"+
    "\4\102\1\271\12\102\1\0\3\135\3\0\7\135\1\272"+
    "\1\135\2\0\1\135\3\0\22\135\7\0\4\135\2\0"+
    "\3\135\17\0\4\135\13\0\1\273\77\0\63\137\2\0"+
    "\4\137\1\0\1\137\1\0\17\137\63\144\1\0\5\144"+
    "\1\0\21\144\64\147\1\0\4\147\1\0\21\147\56\150"+
    "\1\0\34\150\56\102\1\274\14\102\1\0\17\102\5\152"+
    "\1\0\105\152\5\102\1\275\65\102\1\0\17\102\1\0"+
    "\3\154\1\0\1\154\1\0\7\154\1\0\2\154\1\0"+
    "\1\154\3\0\22\154\7\0\4\154\2\0\3\154\17\0"+
    "\4\154\1\0\3\154\1\0\1\154\1\0\7\154\1\0"+
    "\2\154\1\0\1\154\3\0\12\154\1\276\7\154\7\0"+
    "\4\154\2\0\3\154\17\0\4\154\1\0\3\157\1\0"+
    "\1\157\1\0\7\157\1\0\2\157\1\0\1\157\3\0"+
    "\22\157\7\0\4\157\2\0\3\157\17\0\4\157\73\0"+
    "\1\277\31\0\1\300\1\301\120\0\2\171\25\0\3\171"+
    "\64\0\1\302\12\0\1\303\4\0\1\304\1\0\1\304"+
    "\1\305\64\0\2\177\25\0\3\177\41\0\1\306\2\0"+
    "\2\307\2\0\1\306\103\0\1\205\2\204\4\0\1\205"+
    "\110\0\1\310\105\0\3\311\3\0\2\311\15\0\2\311"+
    "\2\0\1\311\4\0\1\311\25\0\2\311\25\0\3\312"+
    "\3\0\2\312\15\0\2\312\2\0\1\312\4\0\1\312"+
    "\25\0\2\312\114\0\1\313\23\0\3\26\3\0\7\26"+
    "\1\206\1\26\2\0\1\26\3\0\22\26\7\0\1\314"+
    "\3\26\2\0\3\26\17\0\4\26\16\223\1\224\31\223"+
    "\2\0\1\223\1\315\1\223\1\227\150\223\50\225\1\316"+
    "\1\317\41\225\54\320\1\321\36\320\16\227\1\322\31\227"+
    "\2\0\4\227\1\223\34\227\1\0\3\26\3\0\7\26"+
    "\1\206\1\26\2\0\1\26\3\0\17\26\1\323\2\26"+
    "\7\0\4\26\2\0\3\26\17\0\4\26\1\0\3\26"+
    "\3\0\7\26\1\206\1\26\2\0\1\26\3\0\22\26"+
    "\7\0\3\26\1\324\2\0\3\26\17\0\4\26\70\0"+
    "\1\325\43\0\2\235\25\0\3\235\20\0\1\240\107\0"+
    "\1\326\112\0\1\327\2\0\1\330\107\0\1\331\112\0"+
    "\1\332\23\0\3\333\3\0\2\333\15\0\2\333\2\0"+
    "\1\333\4\0\1\333\25\0\2\333\25\0\3\334\3\0"+
    "\2\334\15\0\2\334\2\0\1\334\4\0\1\334\25\0"+
    "\2\334\25\0\3\335\3\0\2\335\15\0\2\335\2\0"+
    "\1\335\4\0\1\335\25\0\2\335\25\0\3\264\1\0"+
    "\1\264\1\0\7\264\1\0\2\264\1\0\1\264\3\0"+
    "\22\264\7\0\4\264\2\0\3\264\17\0\4\264\2\0"+
    "\2\336\3\0\1\336\1\0\5\336\2\0\1\336\2\337"+
    "\3\0\22\336\3\337\4\0\4\336\2\0\3\336\3\0"+
    "\1\340\13\0\4\336\2\0\1\341\2\0\1\342\20\0"+
    "\1\343\3\0\1\344\22\0\1\345\34\0\1\346\1\0"+
    "\3\347\3\0\2\347\15\0\2\347\2\0\1\347\4\0"+
    "\1\347\25\0\2\347\24\0\56\102\1\274\14\102\1\350"+
    "\24\102\1\275\65\102\1\351\17\102\1\0\3\154\1\0"+
    "\1\154\1\0\7\154\1\0\2\154\1\0\1\154\3\0"+
    "\20\154\1\352\1\154\7\0\4\154\2\0\3\154\17\0"+
    "\4\154\1\0\3\353\3\0\2\353\15\0\2\353\2\0"+
    "\1\353\4\0\1\353\25\0\2\353\25\0\3\354\3\0"+
    "\2\354\15\0\2\354\2\0\1\354\4\0\1\354\25\0"+
    "\2\354\36\0\1\355\3\0\1\356\134\0\1\357\1\360"+
    "\116\0\1\361\60\0\1\362\100\0\1\306\6\0\1\306"+
    "\103\0\3\363\3\0\2\363\15\0\2\363\2\0\1\363"+
    "\4\0\1\363\25\0\2\363\25\0\3\26\3\0\7\26"+
    "\1\206\1\26\2\0\1\26\3\0\14\26\1\364\5\26"+
    "\7\0\4\26\2\0\3\26\17\0\4\26\1\0\3\315"+
    "\3\0\7\315\1\0\1\315\2\0\1\315\3\0\22\315"+
    "\7\0\4\315\2\0\3\315\17\0\4\315\51\0\1\317"+
    "\41\0\54\320\1\0\36\320\53\0\1\365\1\366\36\0"+
    "\113\227\1\0\3\26\3\0\4\26\1\367\2\26\1\206"+
    "\1\26\2\0\1\26\3\0\22\26\7\0\4\26\2\0"+
    "\3\26\17\0\4\26\70\0\1\370\23\0\3\371\3\0"+
    "\2\371\15\0\2\371\2\0\1\371\4\0\1\371\25\0"+
    "\2\371\25\0\3\336\1\0\1\336\1\0\7\336\1\0"+
    "\2\336\1\0\1\336\3\0\22\336\7\0\4\336\2\0"+
    "\3\336\17\0\4\336\21\0\2\337\25\0\3\337\20\0"+
    "\1\340\52\0\1\372\56\0\1\373\5\0\1\374\214\0"+
    "\1\375\40\0\1\376\104\0\1\377\172\0\1\u0100\4\0"+
    "\3\u0101\3\0\2\u0101\15\0\2\u0101\2\0\1\u0101\4\0"+
    "\1\u0101\25\0\2\u0101\25\0\3\154\1\0\1\154\1\0"+
    "\7\154\1\0\2\154\1\0\1\154\3\0\22\154\7\0"+
    "\1\154\1\u0102\2\154\2\0\3\154\17\0\4\154\1\0"+
    "\3\u0103\3\0\2\u0103\15\0\2\u0103\2\0\1\u0103\4\0"+
    "\1\u0103\25\0\2\u0103\25\0\3\300\3\0\2\300\15\0"+
    "\2\300\2\0\1\300\4\0\1\300\25\0\2\300\25\0"+
    "\3\u0104\3\0\2\u0104\15\0\2\u0104\2\0\1\u0104\4\0"+
    "\1\u0104\25\0\2\u0104\52\0\1\u0105\125\0\1\361\113\0"+
    "\1\u0106\75\0\1\u0107\127\0\1\304\51\0\3\u0108\3\0"+
    "\2\u0108\15\0\2\u0108\2\0\1\u0108\4\0\1\u0108\25\0"+
    "\2\u0108\25\0\3\26\3\0\7\26\1\206\1\26\2\0"+
    "\1\26\3\0\22\26\7\0\3\26\1\u0109\2\0\3\26"+
    "\17\0\4\26\1\0\3\26\3\0\7\26\1\206\1\26"+
    "\2\0\1\26\3\0\22\26\7\0\1\u010a\3\26\2\0"+
    "\3\26\17\0\4\26\1\0\3\u010b\3\0\2\u010b\15\0"+
    "\2\u010b\2\0\1\u010b\4\0\1\u010b\25\0\2\u010b\26\0"+
    "\1\u010c\145\0\1\u010d\104\0\1\u010e\120\0\1\u010f\103\0"+
    "\1\u0110\121\0\1\u0111\56\0\3\u0112\3\0\2\u0112\15\0"+
    "\2\u0112\2\0\1\u0112\4\0\1\u0112\25\0\2\u0112\25\0"+
    "\3\154\1\0\1\154\1\0\7\154\1\0\2\154\1\0"+
    "\1\154\3\0\15\154\1\u0113\4\154\7\0\4\154\2\0"+
    "\3\154\17\0\4\154\1\0\3\u0104\3\0\2\u0104\14\0"+
    "\1\u0114\2\u0104\2\0\1\u0104\4\0\1\u0104\25\0\2\u0104"+
    "\26\0\1\u0115\153\0\1\361\50\0\3\26\3\0\2\26"+
    "\15\0\2\26\2\0\1\26\4\0\1\26\25\0\2\26"+
    "\25\0\3\26\3\0\7\26\1\206\1\26\2\0\1\26"+
    "\3\0\22\26\7\0\1\26\1\u0116\2\26\2\0\3\26"+
    "\17\0\4\26\1\0\3\75\3\0\2\75\15\0\2\75"+
    "\2\0\1\75\4\0\1\75\25\0\2\75\55\0\1\u0117"+
    "\111\0\1\u0118\117\0\1\u0119\110\0\1\u011a\111\0\1\u011b"+
    "\112\0\1\u011c\61\0\3\135\3\0\2\135\15\0\2\135"+
    "\2\0\1\135\4\0\1\135\25\0\2\135\25\0\3\154"+
    "\1\0\1\154\1\0\7\154\1\0\1\154\1\157\1\0"+
    "\1\154\3\0\22\154\7\0\4\154\2\0\3\154\17\0"+
    "\4\154\27\0\1\u011d\65\0\1\u011e\145\0\1\u011f\165\0"+
    "\1\u0120\32\0\1\u0121\117\0\1\u0122\112\0\1\u0123\105\0"+
    "\1\u0124\174\0\1\u0125\110\0\1\u0126\113\0\1\u0127\37\0"+
    "\1\u0125\106\0\1\u0128\110\0\1\u0129\113\0\1\u012a\116\0"+
    "\1\u0126\57\0\1\u0126\165\0\1\u012b\144\0\1\u012c\35\0"+
    "\1\u012d\172\0\1\u0126\33\0\1\u012e\74\0\1\u012f\123\0"+
    "\1\u0130\114\0\1\u0131\116\0\1\u0132\106\0\1\u0133\117\0"+
    "\1\u0134\113\0\1\u0135\101\0\1\u0136\65\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14625];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\1\1\10\6\1\3\0\1\11\12\1\1\11"+
    "\3\1\2\11\2\1\2\11\7\1\10\11\4\1\1\11"+
    "\3\1\4\11\1\1\3\11\2\1\2\11\1\1\11\11"+
    "\2\1\1\11\3\1\1\11\3\1\4\11\1\1\2\11"+
    "\6\1\1\11\3\1\7\11\3\1\3\11\3\1\3\11"+
    "\1\0\1\1\1\0\4\11\1\1\1\11\2\0\1\11"+
    "\1\1\1\11\1\1\2\0\2\1\1\0\1\1\1\11"+
    "\3\1\1\0\1\11\1\1\3\11\2\1\2\11\1\1"+
    "\2\0\1\11\2\0\1\11\1\0\1\11\3\0\1\11"+
    "\2\1\1\0\2\11\5\0\1\1\1\11\6\0\1\1"+
    "\1\0\1\11\1\1\1\0\1\11\3\1\1\11\2\1"+
    "\1\0\2\1\3\11\1\1\2\11\1\0\1\11\1\0"+
    "\1\1\1\0\1\11\7\0\2\11\1\1\11\0\1\1"+
    "\1\11\1\0\1\1\1\11\3\0\1\11\5\0\1\1"+
    "\1\11\3\0\1\11\1\0\2\1\10\0\1\1\1\11"+
    "\1\0\1\1\17\0\1\11\4\0\1\11\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /* user code: */

/*
 * The order of rules does not matter since JFlex is a longest-match system,
 * so groupings can be changed accordingly when dealing with
 * situations where we have smaller rules.
 */

/**
 * tells us the type of string we are dealing with for when we end them
 */
private enum StringKind
{
	CHAR, STRING
}

private StringKind stringKind;

/**
 * in E4X, <code>&lt;</code> is allowed in char and string literals. 
 */
private boolean allowLT;

public RawASTokenizer()
{
	allowLT = true;
}

protected final int getOffset()
{
	return yychar;
}

/**
 * Gets the current line number of the tokenizer.
 * Line numbers start at 0, not 1.
 */
protected final int getLine()
{
	return yyline;
}

/**
 * Gets the current column number of the tokenizer.
 * Column numbers start at 0, not 1.
 */
protected final int getColumn()
{
	return yycolumn;
}

protected void setAllowLTInE4XStringLiterals(boolean allow)
{
	allowLT = allow;
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RawASTokenizer(java.io.Reader in) {
   	allowLT = true;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public RawASTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1818) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, if there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    
    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }
    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  protected final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  protected final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  protected final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  protected final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  protected final int yylength() {
    return zzMarkedPos-zzStartRead;
  }
  
  //////////////////////Start Falcon additions///////////////////////////////
  
  /**
   * returns the start of the current read
   * @return a non-negative int
   */
  protected final int readStart() {
    return zzStartRead;
  }

  /**
   * returns the end of the current read
   * @return a non-negative int
   */ 
  protected final int readEnd() {
 	return zzEndRead;
  }
  
  /**
   * returns the marked position in the current read
   * @return a non-negative int
   */ 
  protected final int markedPosition() {
 	return zzMarkedPos;
  }

  /**
   * returns the current position into the buffer
   * @return a non-negative int
   */
  protected final int currentPos() {
 	return zzCurrentPos;
  }
  
  /**
   * returns the current active buffer.  this will change and is not constant
   * @return the current buffer
   */
  protected final char[] buffer() {
 	return zzBuffer;
  }
  
  /**
   * Retry the parse.  Call this immediately after nextToken() to discard the first
   * character in the token and start parsing again just after that.
   */
  private final void retry() {
    zzMarkedPos = zzStartRead + 1;
  }

//////////////////////End Falcon additions///////////////////////////////

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ASToken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { addBadCharacterProblem(yytext());
          }
        case 142: break;
        case 35: 
          { yypushback(1);
	typedDepth = 0;
	yybegin(YYINITIAL);
          }
        case 143: break;
        case 97: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_LEFT_SHIFT, "<<");
          }
        case 144: break;
        case 136: 
          { return buildToken(TOKEN_KEYWORD_THROW, IASKeywordConstants.THROW);
          }
        case 145: break;
        case 107: 
          { yybegin(YYINITIAL);
    continueAggregate();
    return buildAggregateToken(TOKEN_ASDOC_COMMENT);
          }
        case 146: break;
        case 12: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_AND, "&");
          }
        case 147: break;
        case 17: 
          { return buildToken(TOKEN_SQUARE_CLOSE, "]");
          }
        case 148: break;
        case 134: 
          { continueAggregate(escapedUnicodeToHtmlEntity(yytext()).toCharArray());
          }
        case 149: break;
        case 100: 
          { return buildToken(TOKEN_OPERATOR_GREATER_THAN_EQUALS, ">=");
          }
        case 150: break;
        case 9: 
          { return buildToken(TOKEN_OPERATOR_MINUS, "-");
          }
        case 151: break;
        case 113: 
          { continueAggregate();
	yybegin(E4X);
	return buildAggregateToken(TOKEN_E4X_PROCESSING_INSTRUCTION);
          }
        case 152: break;
        case 63: 
          { docTypeLevel--;
	if (docTypeLevel == 0)
		yybegin(E4X);
          }
        case 153: break;
        case 128: 
          { e4xTagDepth--;
	return buildToken(TOKEN_E4X_XMLLIST_CLOSE);
          }
        case 154: break;
        case 125: 
          { return buildToken(TOKEN_OPERATOR_STRICT_NOT_EQUAL, "!==");
          }
        case 155: break;
        case 66: 
          { return buildToken(TOKEN_E4X_NAME);
          }
        case 156: break;
        case 83: 
          { return buildToken(TOKEN_OPERATOR_PLUS_ASSIGNMENT, "+=");
          }
        case 157: break;
        case 50: 
          { continueAggregate('"');
	yybegin(STRINGLITERAL);
          }
        case 158: break;
        case 102: 
          { return buildToken(TOKEN_OPERATOR_NOT_EQUAL, "!=");
          }
        case 159: break;
        case 59: 
          { e4xBraceBalance = 0;
	e4xTagDepth = 0;
	yypushback(1);
	yybegin(YYINITIAL);
          }
        case 160: break;
        case 137: 
          { return buildE4XTextToken(TOKEN_E4X_HEX_ENTITY);
          }
        case 161: break;
        case 30: 
          { return buildToken(TOKEN_COMMA, ",");
          }
        case 162: break;
        case 90: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_AND_ASSIGNMENT, "&=");
          }
        case 163: break;
        case 88: 
          { return buildToken(TOKEN_OPERATOR_NS_QUALIFIER, "::");
          }
        case 164: break;
        case 92: 
          { if (collectComments)
        startAggregate();
    yybegin(COMMENT);
          }
        case 165: break;
        case 91: 
          { if (collectComments)
		return buildToken(HIDDEN_TOKEN_SINGLE_LINE_COMMENT);
          }
        case 166: break;
        case 27: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_NOT, "~");
          }
        case 167: break;
        case 42: 
          { continueAggregate();
	if (stringKind == StringKind.STRING)
	{
		yybegin(YYINITIAL);
		return buildAggregateToken(TOKEN_LITERAL_STRING);
	}
          }
        case 168: break;
        case 64: 
          { yybegin(MARKUP_IGNORE);
          }
        case 169: break;
        case 16: 
          { return buildToken(TOKEN_SQUARE_OPEN, "[");
          }
        case 170: break;
        case 77: 
          { if (!hasAggregateContents())
		startAggregate();
	else
		continueAggregate();
          }
        case 171: break;
        case 80: 
          { e4xBraceBalance++;
	e4xReturnState = yystate();
	yybegin(YYINITIAL); 
	ASToken tok = buildToken(TOKEN_E4X_BINDING_OPEN); 
	if (hasAggregateContents())
	{ 
		bufferToken = tok; 
		return buildAggregateToken(TOKEN_E4X_STRING); 
	}
	else
	{ 
		aggregateContents = null;
		return tok; 
	}
          }
        case 172: break;
        case 78: 
          { final ASToken tok = buildToken(TOKEN_E4X_WHITESPACE); 
	if (hasAggregateContents())
	{ 
	    bufferToken = tok; 
	    
	    // Put the text token before the whitespace in the buffer.
	    // Adjust the text token's end offset.
		final ASToken textToken = buildAggregateToken(TOKEN_E4X_TEXT); 
		textToken.setEnd(textToken.getEnd() - yytext().length());
		return textToken;
	}
	else
	{ 
		aggregateContents = null; 
		return tok; 
	}
          }
        case 173: break;
        case 112: 
          { startAggregate();
	yybegin(DIRECTIVE);
          }
        case 174: break;
        case 46: 
          { continueAggregate('\t');
	yybegin(STRINGLITERAL);
          }
        case 175: break;
        case 75: 
          { yybegin(MARKUP); 
	continueAggregate(); 
	return buildAggregateToken(TOKEN_E4X_STRING);
          }
        case 176: break;
        case 26: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_OR, "|");
          }
        case 177: break;
        case 117: 
          { return buildToken(TOKEN_OPERATOR_LOGICAL_AND_ASSIGNMENT, "&&=");
          }
        case 178: break;
        case 70: 
          { return buildToken(TOKEN_E4X_EQUALS);
          }
        case 179: break;
        case 71: 
          { yypushback(1); yybegin(E4X);
          }
        case 180: break;
        case 139: 
          { yybegin(MARKUP_IGNORE);
	docTypeLevel = 1;
          }
        case 181: break;
        case 69: 
          { startAggregate();
	yybegin(E4XCHARLITERAL);
          }
        case 182: break;
        case 29: 
          { return buildToken(TOKEN_OPERATOR_ATSIGN, "@");
          }
        case 183: break;
        case 129: 
          { continueAggregate();
	yybegin(E4X);
	return buildAggregateToken(TOKEN_E4X_CDATA);
          }
        case 184: break;
        case 133: 
          { startAggregate();
	yybegin(E4XCOMMENT);
          }
        case 185: break;
        case 74: 
          { e4xBraceBalance--;
	yybegin(MARKUP);
	return buildToken(TOKEN_E4X_BINDING_CLOSE, "}");
          }
        case 186: break;
        case 54: 
          { continueAggregate((char)0xb);
	yybegin(STRINGLITERAL);
          }
        case 187: break;
        case 34: 
          { if (e4xTagDepth == 0)
	{
		return buildToken(TOKEN_BLOCK_CLOSE, "}"); 
	}
	else
	{ 
		e4xBraceBalance--;
		if (e4xBraceBalance == 0) 
			yybegin(e4xReturnState); 
		e4xReturnState = E4X; 
	}
	return buildToken(TOKEN_E4X_BINDING_CLOSE, "}");
          }
        case 188: break;
        case 10: 
          { return buildToken(TOKEN_OPERATOR_MEMBER_ACCESS, ".");
          }
        case 189: break;
        case 28: 
          { return buildToken(TOKEN_OPERATOR_TERNARY, "?");
          }
        case 190: break;
        case 101: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_RIGHT_SHIFT,">>");
          }
        case 191: break;
        case 44: 
          { continueAggregate(yycharat(0));
	yybegin(STRINGLITERAL);
          }
        case 192: break;
        case 87: 
          { typedDepth++;
	yybegin(TYPED_COLLECTION);
	return buildToken(TOKEN_TYPED_COLLECTION_OPEN, ".<");
          }
        case 193: break;
        case 114: 
          { yybegin(E4X);
	e4xTagDepth--;
	return buildToken(TOKEN_E4X_EMPTY_TAG_END);
          }
        case 194: break;
        case 94: 
          { return buildToken(getLastTokenType() == TOKEN_COLON ?
	                  HIDDEN_TOKEN_STAR_ASSIGNMENT :
	                  TOKEN_OPERATOR_MULTIPLICATION_ASSIGNMENT);
          }
        case 195: break;
        case 33: 
          { if (e4xTagDepth == 0)
	{
		return buildToken(TOKEN_BLOCK_OPEN, "{");
	}
	else
	{ 
		e4xBraceBalance++; 
		return buildToken(TOKEN_E4X_BINDING_OPEN, "{"); 
	}
          }
        case 196: break;
        case 81: 
          { e4xBraceBalance--; 
	yybegin(e4xReturnState); 
	return buildToken(TOKEN_E4X_BINDING_CLOSE);
          }
        case 197: break;
        case 61: 
          { yybegin(CHARLITERAL_IGNORE);
          }
        case 198: break;
        case 120: 
          { return buildToken(TOKEN_KEYWORD_NEW, IASKeywordConstants.NEW);
          }
        case 199: break;
        case 76: 
          { if (allowLT)
	{
		continueAggregate(); 
	}
	else
	{
	 	addBadCharacterProblem(yytext()); //char not allowed
		yybegin(MARKUP); 
		yypushback(1); 
		return buildAggregateToken(TOKEN_E4X_STRING); 
	}
          }
        case 200: break;
        case 79: 
          { yypushback(1);
	yybegin(E4X);
	if (hasAggregateContents())
	return buildAggregateToken(TOKEN_E4X_TEXT);
          }
        case 201: break;
        case 21: 
          { // If we have tag depth, we can't be in a databinding expression
	if (e4xTagDepth != 0 && e4xBraceBalance == 0)
	{ 
		yypushback(1);
		yybegin(E4X);
	}
	else
	{
		if(ASToken.canPreceedE4X(getLastTokenType()))
		{
			yypushback(1);
			yybegin(E4X);
			break;
		}
		else if(getLastTokenType() == TOKEN_KEYWORD_NEW)
		{
			typedDepth++;
			yybegin(TYPED_COLLECTION_LITERAL);
			return buildToken(TOKEN_TYPED_LITERAL_OPEN);
		}
		return buildToken(TOKEN_OPERATOR_LESS_THAN, "<");
	}
          }
        case 202: break;
        case 53: 
          { continueAggregate('\f');
	yybegin(STRINGLITERAL);
          }
        case 203: break;
        case 1: 
          { continueAggregate();
          }
        case 204: break;
        case 37: 
          { return buildToken(TOKEN_OPERATOR_MEMBER_ACCESS);
          }
        case 205: break;
        case 52: 
          { continueAggregate('\b');
	yybegin(STRINGLITERAL);
          }
        case 206: break;
        case 19: 
          { startAggregate();
	stringKind = StringKind.CHAR;
	yybegin(STRINGLITERAL);
          }
        case 207: break;
        case 126: 
          { return buildToken(TOKEN_OPERATOR_LOGICAL_OR_ASSIGNMENT, "||=");
          }
        case 208: break;
        case 89: 
          { return buildToken(TOKEN_OPERATOR_LOGICAL_AND, "&&");
          }
        case 209: break;
        case 108: 
          { typedDepth++;
	return buildToken(TOKEN_TYPED_COLLECTION_OPEN);
          }
        case 210: break;
        case 8: 
          { return buildToken(TOKEN_OPERATOR_PLUS, "+");
          }
        case 211: break;
        case 65: 
          { yybegin(MARKUP_IGNORE);
	yypushback(1);
          }
        case 212: break;
        case 98: 
          { // Only allow a literal if we are not inside databindings or E4X already
	if (e4xTagDepth == 0 && e4xBraceBalance == 0 && ASToken.canPreceedE4X(getLastTokenType()))
	{
		yybegin(E4XTEXTVALUE); //jump to text value because this is the equivalent of MARKUP(">") which jumps to text values
		e4xTagDepth++;
		return buildToken(TOKEN_LITERAL_XMLLIST);
	}
		
	return buildToken(TOKEN_OPERATOR_LESS_THAN,"<");
          }
        case 213: break;
        case 119: 
          { startAggregate();
    yybegin(ASDOC_COMMENT);
          }
        case 214: break;
        case 115: 
          { return buildToken(TOKEN_ELLIPSIS, "...");
          }
        case 215: break;
        case 55: 
          { yypushback(1);
	yybegin(e4xTagDepth > 0 ? E4XTEXTVALUE : YYINITIAL);
          }
        case 216: break;
        case 131: 
          { return buildToken(TOKEN_ASDOC_COMMENT);
          }
        case 217: break;
        case 85: 
          { return buildToken(TOKEN_OPERATOR_MINUS_ASSIGNMENT, "-=");
          }
        case 218: break;
        case 96: 
          { return buildToken(TOKEN_OPERATOR_LESS_THAN_EQUALS, "<=");
          }
        case 219: break;
        case 13: 
          { return buildToken(TOKEN_SEMICOLON, ";");
          }
        case 220: break;
        case 18: 
          { startAggregate();
	stringKind = StringKind.STRING;
	yybegin(STRINGLITERAL);
          }
        case 221: break;
        case 68: 
          { startAggregate();
	yybegin(E4XSTRINGLITERAL);
          }
        case 222: break;
        case 127: 
          { aggregateEscapedUnicodeChar("\\" + yytext());
	yybegin(STRINGLITERAL);
          }
        case 223: break;
        case 31: 
          { return buildToken(TOKEN_PAREN_OPEN, "(");
          }
        case 224: break;
        case 103: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_XOR_ASSIGNMENT, "^=");
          }
        case 225: break;
        case 24: 
          { return buildToken(TOKEN_OPERATOR_LOGICAL_NOT, "!");
          }
        case 226: break;
        case 141: 
          { return buildE4XTextToken(TOKEN_E4X_DECIMAL_ENTITY);
          }
        case 227: break;
        case 132: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_UNSIGNED_RIGHT_SHIFT_ASSIGNMENT, ">>>=");
          }
        case 228: break;
        case 109: 
          { e4xTagDepth--;
	return buildToken(TOKEN_E4X_EMPTY_TAG_END);
          }
        case 229: break;
        case 99: 
          { return buildToken(TOKEN_OPERATOR_MODULO_ASSIGNMENT, "%=");
          }
        case 230: break;
        case 22: 
          { return buildToken(TOKEN_OPERATOR_MODULO, "%");
          }
        case 231: break;
        case 86: 
          { return buildToken(TOKEN_OPERATOR_DESCENDANT_ACCESS, "..");
          }
        case 232: break;
        case 118: 
          { if (ASToken.canPreceedRegex(getLastTokenType())) 
	{
		return buildToken(TOKEN_LITERAL_REGEXP, yytext());
	}
	else if (yylength() > 1 && yycharat(1) == '=')
	{
        final ASToken token = buildToken(TOKEN_OPERATOR_DIVISION_ASSIGNMENT, "/=");
        zzMarkedPos = zzStartRead + 2; // back track then skip over '/='
        return token;
	}
    else
    {
        final ASToken token = buildToken(TOKEN_OPERATOR_DIVISION, "/");
        zzMarkedPos = zzStartRead + 1; // back track then skip over '/'
        return token;
    }
          }
        case 233: break;
        case 95: 
          { return buildToken(TOKEN_OPERATOR_EQUAL, "==");
          }
        case 234: break;
        case 48: 
          { continueAggregate('\r');
	yybegin(STRINGLITERAL);
          }
        case 235: break;
        case 123: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_RIGHT_SHIFT_ASSIGNMENT, ">>=");
          }
        case 236: break;
        case 23: 
          { // If we have tag depth, we can't be in a databinding expression
	if (e4xTagDepth != 0 && e4xBraceBalance == 0)
	{
		yypushback(1);
		yybegin(MARKUP);
	}
	else
	{
		if (typedDepth > 0)
		{
			typedDepth--;
			return buildToken(TOKEN_TYPED_COLLECTION_CLOSE,">");
		}
		return buildToken(TOKEN_OPERATOR_GREATER_THAN,">");
	}
          }
        case 237: break;
        case 60: 
          { yybegin(STRINGLITERAL_IGNORE);
          }
        case 238: break;
        case 49: 
          { continueAggregate('\n');
	yybegin(STRINGLITERAL);
          }
        case 239: break;
        case 121: 
          { return buildToken(TOKEN_OPERATOR_STRICT_EQUAL, "===");
          }
        case 240: break;
        case 84: 
          { return buildToken(TOKEN_OPERATOR_DECREMENT, "--");
          }
        case 241: break;
        case 58: 
          { yybegin(MARKUP);
	e4xTagDepth++;
	return buildToken(HIDDEN_TOKEN_E4X);
          }
        case 242: break;
        case 39: 
          { typedDepth--; 
	int tType = TOKEN_TYPED_COLLECTION_CLOSE;
	if (typedDepth == 0)
	{
		// If we entered the literal state, last token out should be a literal close.
		if (yystate() == TYPED_COLLECTION_LITERAL)
			tType = TOKEN_TYPED_LITERAL_CLOSE;
		yybegin(YYINITIAL);
	} 
	return buildToken(tType);
          }
        case 243: break;
        case 73: 
          { e4xBraceBalance++;
	e4xReturnState = MARKUP;
	yybegin(YYINITIAL);
	return buildToken(TOKEN_E4X_BINDING_OPEN);
          }
        case 244: break;
        case 43: 
          { continueAggregate(); 
	if (stringKind == StringKind.CHAR)
	{
		yybegin(YYINITIAL);
		return buildAggregateToken(TOKEN_LITERAL_STRING);
	}
          }
        case 245: break;
        case 105: 
          { return buildToken(TOKEN_OPERATOR_LOGICAL_OR, "||");
          }
        case 246: break;
        case 82: 
          { return buildToken(TOKEN_OPERATOR_INCREMENT, "++");
          }
        case 247: break;
        case 110: 
          { e4xTagDepth++;
	isInCloseTag = false;
	yybegin(MARKUP);
	return buildToken(TOKEN_E4X_OPEN_TAG_START);
          }
        case 248: break;
        case 56: 
          { return buildToken(TOKEN_E4X_WHITESPACE);
          }
        case 249: break;
        case 25: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_XOR, "^");
          }
        case 250: break;
        case 111: 
          { isInCloseTag = true;
	yybegin(MARKUP);
	return buildToken(TOKEN_E4X_CLOSE_TAG_START);
          }
        case 251: break;
        case 51: 
          { continueAggregate('\'');
	yybegin(STRINGLITERAL);
          }
        case 252: break;
        case 57: 
          { yybegin(MARKUP);
	return buildToken(TOKEN_E4X_EQUALS);
          }
        case 253: break;
        case 38: 
          { if (typedDepth > 0)
	{
		return buildToken(TOKEN_OPERATOR_STAR,"*");
	}
	else
	{
		yypushback(1);
		typedDepth = 0;
		yybegin(YYINITIAL);
	}
          }
        case 254: break;
        case 14: 
          { return buildToken(TOKEN_OPERATOR_DIVISION, "/");
          }
        case 255: break;
        case 116: 
          { return buildToken(TOKEN_LITERAL_HEX_NUMBER);
          }
        case 256: break;
        case 45: 
          { continueAggregate('\\');
	yybegin(STRINGLITERAL);
          }
        case 257: break;
        case 130: 
          { continueAggregate();
	yybegin(E4X);
	return buildAggregateToken(TOKEN_E4X_COMMENT);
          }
        case 258: break;
        case 104: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_OR_ASSIGNMENT, "|=");
          }
        case 259: break;
        case 47: 
          { continueAggregate(new char[0]);
	yybegin(STRINGLITERAL);
          }
        case 260: break;
        case 140: 
          { startAggregate();
	yybegin(CDATA);
          }
        case 261: break;
        case 62: 
          { docTypeLevel++;
          }
        case 262: break;
        case 138: 
          { return buildToken(TOKEN_KEYWORD_RETURN, IASKeywordConstants.RETURN);
          }
        case 263: break;
        case 72: 
          { if (isInCloseTag)
	{
		isInCloseTag = false;
		e4xTagDepth--;
		yybegin(E4X);
	}
	else
	{
		yybegin(E4XTEXTVALUE);
	}
	return buildToken(TOKEN_E4X_TAG_END);
          }
        case 264: break;
        case 6: 
          { return buildToken(TOKEN_LITERAL_NUMBER);
          }
        case 265: break;
        case 7: 
          { return buildToken(TOKEN_IDENTIFIER, yytext());
          }
        case 266: break;
        case 40: 
          { yybegin(ESCAPE_SEQUENCE);
          }
        case 267: break;
        case 41: 
          { continueAggregate(); 
    reportInvalidLineTerminatorInStringLiteral(); 
	yybegin(YYINITIAL);
	return buildAggregateToken(TOKEN_LITERAL_STRING);
          }
        case 268: break;
        case 67: 
          { yybegin(STATE);
	return buildToken(TOKEN_E4X_NAME_DOT);
          }
        case 269: break;
        case 4: 
          { return buildToken(TOKEN_E4X_XMLNS);
          }
        case 270: break;
        case 124: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_UNSIGNED_RIGHT_SHIFT, ">>>");
          }
        case 271: break;
        case 32: 
          { return buildToken(TOKEN_PAREN_CLOSE, ")");
          }
        case 272: break;
        case 106: 
          { yybegin(YYINITIAL);
    if (collectComments)
    {
        continueAggregate();
        return buildAggregateToken(HIDDEN_TOKEN_MULTI_LINE_COMMENT);
    }
          }
        case 273: break;
        case 93: 
          { return buildToken(TOKEN_OPERATOR_DIVISION_ASSIGNMENT, "/=");
          }
        case 274: break;
        case 36: 
          { return buildToken(TOKEN_IDENTIFIER);
          }
        case 275: break;
        case 2: 
          { yybegin(MARKUP);
	return buildToken(TOKEN_E4X_DOTTED_NAME_PART);
          }
        case 276: break;
        case 11: 
          { return buildToken(TOKEN_COLON, ":");
          }
        case 277: break;
        case 135: 
          { return buildE4XTextToken(TOKEN_E4X_ENTITY);
          }
        case 278: break;
        case 122: 
          { return buildToken(TOKEN_OPERATOR_BITWISE_LEFT_SHIFT_ASSIGNMENT, "<<=");
          }
        case 279: break;
        case 20: 
          { return buildToken(TOKEN_OPERATOR_ASSIGNMENT, "=");
          }
        case 280: break;
        case 15: 
          { return buildToken(TOKEN_OPERATOR_STAR, "*");
          }
        case 281: break;
        case 3: 
          { 
          }
        case 282: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case DIRECTIVE: {
              continueAggregate();
	yybegin(E4X);
	return buildAggregateToken(TOKEN_E4X_PROCESSING_INSTRUCTION);
            }
            case 311: break;
            case STRINGLITERAL: {
              yybegin(YYINITIAL);
    continueAggregate();
    reportUnclosedStringLiteral();
    return buildAggregateToken(TOKEN_LITERAL_STRING);
            }
            case 312: break;
            case ESCAPE_SEQUENCE: {
              yybegin(YYINITIAL);
    continueAggregate();
    reportUnclosedStringLiteral();
    return buildAggregateToken(TOKEN_LITERAL_STRING);
            }
            case 313: break;
            case CDATA: {
              continueAggregate();
	yybegin(E4X);
	return buildAggregateToken(TOKEN_E4X_CDATA);
            }
            case 314: break;
            case COMMENT: {
              yybegin(YYINITIAL);
    if (collectComments)
    {
        continueAggregate();
        return buildAggregateToken(HIDDEN_TOKEN_MULTI_LINE_COMMENT);
    }
            }
            case 315: break;
            case E4XCOMMENT: {
              continueAggregate();
	yybegin(E4X);
	return buildAggregateToken(TOKEN_E4X_COMMENT);
            }
            case 316: break;
            case ASDOC_COMMENT: {
              yybegin(YYINITIAL);
    reportUnclosedASDoc();
    continueAggregate();
    return buildAggregateToken(TOKEN_ASDOC_COMMENT);
            }
            case 317: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
